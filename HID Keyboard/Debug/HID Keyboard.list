
HID Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b98  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de0  08006de0  00008190  2**0
                  CONTENTS
  4 .ARM          00000000  08006de0  08006de0  00008190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006de0  08006de0  00008190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08006de8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000190  08006f78  00008190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  08006f78  0000897c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d653  00000000  00000000  000081c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b41  00000000  00000000  00015813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00018358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000906  00000000  00000000  00018fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ab1  00000000  00000000  000198a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9d2  00000000  00000000  0001d357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4c0a  00000000  00000000  0002cd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f84  00000000  00000000  000e1978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e48fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d58 	.word	0x08006d58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08006d58 	.word	0x08006d58

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f917 	bl	800044e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f806 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f850 	bl	80002c8 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000228:	f006 f920 	bl	800646c <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x14>

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	@ 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2238      	movs	r2, #56	@ 0x38
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f006 fd5e 	bl	8006d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000256:	f001 ff63 	bl	8002120 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000262:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2340      	movs	r3, #64	@ 0x40
 8000266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000270:	2301      	movs	r3, #1
 8000272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000274:	230c      	movs	r3, #12
 8000276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000278:	2302      	movs	r3, #2
 800027a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800027c:	2304      	movs	r3, #4
 800027e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fffd 	bl	8002288 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000294:	f000 f83c 	bl	8000310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2303      	movs	r3, #3
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2103      	movs	r1, #3
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fafb 	bl	80028ac <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002bc:	f000 f828 	bl	8000310 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	@ 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ce:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_GPIO_Init+0x44>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d2:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <MX_GPIO_Init+0x44>)
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002da:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <MX_GPIO_Init+0x44>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002de:	f003 0320 	and.w	r3, r3, #32
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b09      	ldr	r3, [pc, #36]	@ (800030c <MX_GPIO_Init+0x44>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	4a08      	ldr	r2, [pc, #32]	@ (800030c <MX_GPIO_Init+0x44>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f2:	4b06      	ldr	r3, [pc, #24]	@ (800030c <MX_GPIO_Init+0x44>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000314:	b672      	cpsid	i
}
 8000316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <Error_Handler+0x8>

0800031c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <HAL_MspInit+0x44>)
 8000324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000326:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <HAL_MspInit+0x44>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6613      	str	r3, [r2, #96]	@ 0x60
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <HAL_MspInit+0x44>)
 8000330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033a:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <HAL_MspInit+0x44>)
 800033c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800033e:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <HAL_MspInit+0x44>)
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000344:	6593      	str	r3, [r2, #88]	@ 0x58
 8000346:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <HAL_MspInit+0x44>)
 8000348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800034a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000352:	f001 ff89 	bl	8002268 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000

08000364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <NMI_Handler+0x4>

0800036c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <MemManage_Handler+0x4>

0800037c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <BusFault_Handler+0x4>

08000384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <UsageFault_Handler+0x4>

0800038c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ba:	f000 f89b 	bl	80004f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c8:	4802      	ldr	r0, [pc, #8]	@ (80003d4 <USB_LP_IRQHandler+0x10>)
 80003ca:	f000 fab0 	bl	800092e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000684 	.word	0x20000684

080003d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <SystemInit+0x20>)
 80003de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003e2:	4a05      	ldr	r2, [pc, #20]	@ (80003f8 <SystemInit+0x20>)
 80003e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000ed00 	.word	0xe000ed00

080003fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000400:	f7ff ffea 	bl	80003d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	@ (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	@ (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	@ (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800042a:	f006 fc71 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800042e:	f7ff fef3 	bl	8000218 <main>

08000432 <LoopForever>:

LoopForever:
    b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000440:	08006de8 	.word	0x08006de8
  ldr r2, =_sbss
 8000444:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000448:	2000097c 	.word	0x2000097c

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>

0800044e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000454:	2300      	movs	r3, #0
 8000456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000458:	2003      	movs	r0, #3
 800045a:	f000 f939 	bl	80006d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800045e:	200f      	movs	r0, #15
 8000460:	f000 f80e 	bl	8000480 <HAL_InitTick>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800046a:	2301      	movs	r3, #1
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	e001      	b.n	8000474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000470:	f7ff ff54 	bl	800031c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000474:	79fb      	ldrb	r3, [r7, #7]

}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800048c:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <HAL_InitTick+0x68>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d022      	beq.n	80004da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000494:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <HAL_InitTick+0x6c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <HAL_InitTick+0x68>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80004a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f944 	bl	8000736 <HAL_SYSTICK_Config>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d10f      	bne.n	80004d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d809      	bhi.n	80004ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ba:	2200      	movs	r2, #0
 80004bc:	6879      	ldr	r1, [r7, #4]
 80004be:	f04f 30ff 	mov.w	r0, #4294967295
 80004c2:	f000 f910 	bl	80006e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <HAL_InitTick+0x70>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6013      	str	r3, [r2, #0]
 80004cc:	e007      	b.n	80004de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	e004      	b.n	80004de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004d4:	2301      	movs	r3, #1
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	e001      	b.n	80004de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004da:	2301      	movs	r3, #1
 80004dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000008 	.word	0x20000008
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000004 	.word	0x20000004

080004f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <HAL_IncTick+0x1c>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_IncTick+0x20>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4413      	add	r3, r2
 8000502:	4a03      	ldr	r2, [pc, #12]	@ (8000510 <HAL_IncTick+0x1c>)
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	200001ac 	.word	0x200001ac
 8000514:	20000008 	.word	0x20000008

08000518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return uwTick;
 800051c:	4b03      	ldr	r3, [pc, #12]	@ (800052c <HAL_GetTick+0x14>)
 800051e:	681b      	ldr	r3, [r3, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	200001ac 	.word	0x200001ac

08000530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f003 0307 	and.w	r3, r3, #7
 800053e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <__NVIC_SetPriorityGrouping+0x44>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800054c:	4013      	ands	r3, r2
 800054e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800055c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000562:	4a04      	ldr	r2, [pc, #16]	@ (8000574 <__NVIC_SetPriorityGrouping+0x44>)
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	60d3      	str	r3, [r2, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <__NVIC_GetPriorityGrouping+0x18>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	0a1b      	lsrs	r3, r3, #8
 8000582:	f003 0307 	and.w	r3, r3, #7
}
 8000586:	4618      	mov	r0, r3
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	@ (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db0a      	blt.n	80005fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	490c      	ldr	r1, [pc, #48]	@ (800061c <__NVIC_SetPriority+0x4c>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f8:	e00a      	b.n	8000610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4908      	ldr	r1, [pc, #32]	@ (8000620 <__NVIC_SetPriority+0x50>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	3b04      	subs	r3, #4
 8000608:	0112      	lsls	r2, r2, #4
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	440b      	add	r3, r1
 800060e:	761a      	strb	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000624:	b480      	push	{r7}
 8000626:	b089      	sub	sp, #36	@ 0x24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	f1c3 0307 	rsb	r3, r3, #7
 800063e:	2b04      	cmp	r3, #4
 8000640:	bf28      	it	cs
 8000642:	2304      	movcs	r3, #4
 8000644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3304      	adds	r3, #4
 800064a:	2b06      	cmp	r3, #6
 800064c:	d902      	bls.n	8000654 <NVIC_EncodePriority+0x30>
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3b03      	subs	r3, #3
 8000652:	e000      	b.n	8000656 <NVIC_EncodePriority+0x32>
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	f04f 32ff 	mov.w	r2, #4294967295
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43da      	mvns	r2, r3
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	401a      	ands	r2, r3
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066c:	f04f 31ff 	mov.w	r1, #4294967295
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43d9      	mvns	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	4313      	orrs	r3, r2
         );
}
 800067e:	4618      	mov	r0, r3
 8000680:	3724      	adds	r7, #36	@ 0x24
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800069c:	d301      	bcc.n	80006a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2301      	movs	r3, #1
 80006a0:	e00f      	b.n	80006c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <SysTick_Config+0x40>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006aa:	210f      	movs	r1, #15
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f7ff ff8e 	bl	80005d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <SysTick_Config+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <SysTick_Config+0x40>)
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff29 	bl	8000530 <__NVIC_SetPriorityGrouping>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006f4:	f7ff ff40 	bl	8000578 <__NVIC_GetPriorityGrouping>
 80006f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	68b9      	ldr	r1, [r7, #8]
 80006fe:	6978      	ldr	r0, [r7, #20]
 8000700:	f7ff ff90 	bl	8000624 <NVIC_EncodePriority>
 8000704:	4602      	mov	r2, r0
 8000706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff5f 	bl	80005d0 <__NVIC_SetPriority>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff33 	bl	8000594 <__NVIC_EnableIRQ>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ffa4 	bl	800068c <SysTick_Config>
 8000744:	4603      	mov	r3, r0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d101      	bne.n	8000760 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e0c0      	b.n	80008e2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d106      	bne.n	800077a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f005 ffdb 	bl	8006730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2203      	movs	r2, #3
 800077e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fc7b 	bl	8003082 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e03e      	b.n	8000810 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000792:	7bfa      	ldrb	r2, [r7, #15]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3311      	adds	r3, #17
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3310      	adds	r3, #16
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	440b      	add	r3, r1
 80007c8:	3313      	adds	r3, #19
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	440b      	add	r3, r1
 80007dc:	3320      	adds	r3, #32
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	440b      	add	r3, r1
 80007f0:	3324      	adds	r3, #36	@ 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	3301      	adds	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	7bfa      	ldrb	r2, [r7, #15]
 8000816:	429a      	cmp	r2, r3
 8000818:	d3bb      	bcc.n	8000792 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e044      	b.n	80008aa <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	440b      	add	r3, r1
 800082e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	440b      	add	r3, r1
 8000844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800084c:	7bfa      	ldrb	r2, [r7, #15]
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	440b      	add	r3, r1
 800085a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000862:	7bfa      	ldrb	r2, [r7, #15]
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000878:	7bfa      	ldrb	r2, [r7, #15]
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	440b      	add	r3, r1
 8000886:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	3301      	adds	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3b5      	bcc.n	8000820 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3304      	adds	r3, #4
 80008bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008c0:	f002 fbfa 	bl	80030b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7a9b      	ldrb	r3, [r3, #10]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d102      	bne.n	80008e0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 fbf6 	bl	80020cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d101      	bne.n	8000900 <HAL_PCD_Start+0x16>
 80008fc:	2302      	movs	r3, #2
 80008fe:	e012      	b.n	8000926 <HAL_PCD_Start+0x3c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2201      	movs	r2, #1
 8000904:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fba1 	bl	8003054 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f004 f97e 	bl	8004c18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b084      	sub	sp, #16
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f004 f983 	bl	8004c46 <USB_ReadInterrupts>
 8000940:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 faee 	bl	8000f2e <PCD_EP_ISR_Handler>

    return;
 8000952:	e110      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800095a:	2b00      	cmp	r3, #0
 800095c:	d013      	beq.n	8000986 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000970:	b292      	uxth	r2, r2
 8000972:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f005 ff6b 	bl	8006852 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800097c:	2100      	movs	r1, #0
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f8fc 	bl	8000b7c <HAL_PCD_SetAddress>

    return;
 8000984:	e0f7      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00c      	beq.n	80009aa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000998:	b29a      	uxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80009a2:	b292      	uxth	r2, r2
 80009a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80009a8:	e0e5      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00c      	beq.n	80009ce <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80009bc:	b29a      	uxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80009c6:	b292      	uxth	r2, r2
 80009c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80009cc:	e0d3      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d034      	beq.n	8000a42 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0204 	bic.w	r2, r2, #4
 80009ea:	b292      	uxth	r2, r2
 80009ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0208 	bic.w	r2, r2, #8
 8000a02:	b292      	uxth	r2, r2
 8000a04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d107      	bne.n	8000a22 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f006 f8ef 	bl	8006c00 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f005 ff4e 	bl	80068c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000a40:	e099      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d027      	beq.n	8000a9c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000a76:	b292      	uxth	r2, r2
 8000a78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0204 	orr.w	r2, r2, #4
 8000a8e:	b292      	uxth	r2, r2
 8000a90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f005 fefb 	bl	8006890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000a9a:	e06c      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d040      	beq.n	8000b28 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ab8:	b292      	uxth	r2, r2
 8000aba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d12b      	bne.n	8000b20 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0204 	orr.w	r2, r2, #4
 8000ada:	b292      	uxth	r2, r2
 8000adc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0208 	orr.w	r2, r2, #8
 8000af2:	b292      	uxth	r2, r2
 8000af4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000b16:	2101      	movs	r1, #1
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f006 f871 	bl	8006c00 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000b1e:	e02a      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 feb5 	bl	8006890 <HAL_PCD_SuspendCallback>
    return;
 8000b26:	e026      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00f      	beq.n	8000b52 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b44:	b292      	uxth	r2, r2
 8000b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f005 fe73 	bl	8006836 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b50:	e011      	b.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00c      	beq.n	8000b76 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b6e:	b292      	uxth	r2, r2
 8000b70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000b74:	bf00      	nop
  }
}
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d101      	bne.n	8000b96 <HAL_PCD_SetAddress+0x1a>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e012      	b.n	8000bbc <HAL_PCD_SetAddress+0x40>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	78fa      	ldrb	r2, [r7, #3]
 8000ba2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	78fa      	ldrb	r2, [r7, #3]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 f81f 	bl	8004bf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	4608      	mov	r0, r1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	70fb      	strb	r3, [r7, #3]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	803b      	strh	r3, [r7, #0]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da0e      	bge.n	8000c08 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	f003 0207 	and.w	r2, r3, #7
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	3310      	adds	r3, #16
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	705a      	strb	r2, [r3, #1]
 8000c06:	e00e      	b.n	8000c26 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	f003 0207 	and.w	r2, r3, #7
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2200      	movs	r2, #0
 8000c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8000c32:	883b      	ldrh	r3, [r7, #0]
 8000c34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	78ba      	ldrb	r2, [r7, #2]
 8000c40:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c42:	78bb      	ldrb	r3, [r7, #2]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d102      	bne.n	8000c4e <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d101      	bne.n	8000c5c <HAL_PCD_EP_Open+0x98>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e00e      	b.n	8000c7a <HAL_PCD_EP_Open+0xb6>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	68f9      	ldr	r1, [r7, #12]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fa42 	bl	80030f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000c78:	7afb      	ldrb	r3, [r7, #11]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da0e      	bge.n	8000cb4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	f003 0207 	and.w	r2, r3, #7
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	705a      	strb	r2, [r3, #1]
 8000cb2:	e00e      	b.n	8000cd2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	f003 0207 	and.w	r2, r3, #7
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d101      	bne.n	8000cec <HAL_PCD_EP_Close+0x6a>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e00e      	b.n	8000d0a <HAL_PCD_EP_Close+0x88>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fee2 	bl	8003ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	f003 0207 	and.w	r2, r3, #7
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d52:	7afb      	ldrb	r3, [r7, #11]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6979      	ldr	r1, [r7, #20]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 f89a 	bl	8003e9e <USB_EPStartXfer>

  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	460b      	mov	r3, r1
 8000d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d84:	7afb      	ldrb	r3, [r7, #11]
 8000d86:	f003 0207 	and.w	r2, r3, #7
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	3310      	adds	r3, #16
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6979      	ldr	r1, [r7, #20]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 f863 	bl	8003e9e <USB_EPStartXfer>

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	7912      	ldrb	r2, [r2, #4]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d901      	bls.n	8000e00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e03e      	b.n	8000e7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da0e      	bge.n	8000e26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	f003 0207 	and.w	r2, r3, #7
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	3310      	adds	r3, #16
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2201      	movs	r2, #1
 8000e22:	705a      	strb	r2, [r3, #1]
 8000e24:	e00c      	b.n	8000e40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_PCD_EP_SetStall+0x7e>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e00e      	b.n	8000e7e <HAL_PCD_EP_SetStall+0x9c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68f9      	ldr	r1, [r7, #12]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fdc4 	bl	80049fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	7912      	ldrb	r2, [r2, #4]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e040      	b.n	8000f26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da0e      	bge.n	8000eca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	f003 0207 	and.w	r2, r3, #7
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	3310      	adds	r3, #16
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	705a      	strb	r2, [r3, #1]
 8000ec8:	e00e      	b.n	8000ee8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	f003 0207 	and.w	r2, r3, #7
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_PCD_EP_ClrStall+0x82>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e00e      	b.n	8000f26 <HAL_PCD_EP_ClrStall+0xa0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68f9      	ldr	r1, [r7, #12]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fdc1 	bl	8004a9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b092      	sub	sp, #72	@ 0x48
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f36:	e333      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f40:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8000f4e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 8108 	bne.w	8001168 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d14c      	bne.n	8000ffc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8000f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f72:	813b      	strh	r3, [r7, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	893b      	ldrh	r3, [r7, #8]
 8000f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3310      	adds	r3, #16
 8000f8a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	441a      	add	r2, r3
 8000fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fc0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f005 fc1c 	bl	8006802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7b1b      	ldrb	r3, [r3, #12]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 82e5 	beq.w	80015a0 <PCD_EP_ISR_Handler+0x672>
 8000fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 82e0 	bne.w	80015a0 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7b1b      	ldrb	r3, [r3, #12]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	731a      	strb	r2, [r3, #12]
 8000ffa:	e2d1      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800100c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800100e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001012:	2b00      	cmp	r3, #0
 8001014:	d032      	beq.n	800107c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800101e:	b29b      	uxth	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	4413      	add	r3, r2
 8001030:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800103a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800103c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800104a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800104c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800104e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001050:	b29b      	uxth	r3, r3
 8001052:	f003 fe4a 	bl	8004cea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001062:	4013      	ands	r3, r2
 8001064:	817b      	strh	r3, [r7, #10]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	897a      	ldrh	r2, [r7, #10]
 800106c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001070:	b292      	uxth	r2, r2
 8001072:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f005 fb97 	bl	80067a8 <HAL_PCD_SetupStageCallback>
 800107a:	e291      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800107c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001080:	2b00      	cmp	r3, #0
 8001082:	f280 828d 	bge.w	80015a0 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29a      	uxth	r2, r3
 800108e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001092:	4013      	ands	r3, r2
 8001094:	81fb      	strh	r3, [r7, #14]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	89fa      	ldrh	r2, [r7, #14]
 800109c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010a0:	b292      	uxth	r2, r2
 80010a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d019      	beq.n	8001108 <PCD_EP_ISR_Handler+0x1da>
 80010d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d015      	beq.n	8001108 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e2:	6959      	ldr	r1, [r3, #20]
 80010e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80010e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f003 fdfc 	bl	8004cea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80010f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	441a      	add	r2, r3
 80010fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001100:	2100      	movs	r1, #0
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f005 fb62 	bl	80067cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001110:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8242 	bne.w	80015a0 <PCD_EP_ISR_Handler+0x672>
 800111c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800111e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001126:	f000 823b 	beq.w	80015a0 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800113a:	81bb      	strh	r3, [r7, #12]
 800113c:	89bb      	ldrh	r3, [r7, #12]
 800113e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001142:	81bb      	strh	r3, [r7, #12]
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800114a:	81bb      	strh	r3, [r7, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	89bb      	ldrh	r3, [r7, #12]
 8001152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800115a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800115e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001162:	b29b      	uxth	r3, r3
 8001164:	8013      	strh	r3, [r2, #0]
 8001166:	e21b      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800117a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800117e:	2b00      	cmp	r3, #0
 8001180:	f280 80f1 	bge.w	8001366 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800119a:	4013      	ands	r3, r2
 800119c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011b2:	b292      	uxth	r2, r2
 80011b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80011b6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80011cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d123      	bne.n	800121c <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80011dc:	b29b      	uxth	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80011fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 808b 	beq.w	800131c <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800120c:	6959      	ldr	r1, [r3, #20]
 800120e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001210:	88da      	ldrh	r2, [r3, #6]
 8001212:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001216:	f003 fd68 	bl	8004cea <USB_ReadPMA>
 800121a:	e07f      	b.n	800131c <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800121c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800121e:	78db      	ldrb	r3, [r3, #3]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d109      	bne.n	8001238 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001224:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001226:	461a      	mov	r2, r3
 8001228:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f9c6 	bl	80015bc <HAL_PCD_EP_DB_Receive>
 8001230:	4603      	mov	r3, r0
 8001232:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001236:	e071      	b.n	800131c <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800124e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001252:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	441a      	add	r2, r3
 8001262:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800126c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001270:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001274:	b29b      	uxth	r3, r3
 8001276:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d022      	beq.n	80012d8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80012ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d02c      	beq.n	800131c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012c8:	6959      	ldr	r1, [r3, #20]
 80012ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012cc:	891a      	ldrh	r2, [r3, #8]
 80012ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80012d2:	f003 fd0a 	bl	8004cea <USB_ReadPMA>
 80012d6:	e021      	b.n	800131c <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001300:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800130e:	6959      	ldr	r1, [r3, #20]
 8001310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001312:	895a      	ldrh	r2, [r3, #10]
 8001314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001318:	f003 fce7 	bl	8004cea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800131c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800131e:	69da      	ldr	r2, [r3, #28]
 8001320:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001324:	441a      	add	r2, r3
 8001326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001328:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800132a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001332:	441a      	add	r2, r3
 8001334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001336:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <PCD_EP_ISR_Handler+0x41e>
 8001340:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d206      	bcs.n	800135a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800134c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f005 fa3a 	bl	80067cc <HAL_PCD_DataOutStageCallback>
 8001358:	e005      	b.n	8001366 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fd9c 	bl	8003e9e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001366:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8117 	beq.w	80015a0 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001372:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	3310      	adds	r3, #16
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800139c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	441a      	add	r2, r3
 80013b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80013b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80013be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013c0:	78db      	ldrb	r3, [r3, #3]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	f040 80a1 	bne.w	800150a <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80013c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80013ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013d0:	7b1b      	ldrb	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8092 	beq.w	80014fc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80013d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d046      	beq.n	8001470 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d126      	bne.n	8001438 <PCD_EP_ISR_Handler+0x50a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	00da      	lsls	r2, r3, #3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	4413      	add	r3, r2
 800140c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800141c:	b29a      	uxth	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	801a      	strh	r2, [r3, #0]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800142c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001430:	b29a      	uxth	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	801a      	strh	r2, [r3, #0]
 8001436:	e061      	b.n	80014fc <PCD_EP_ISR_Handler+0x5ce>
 8001438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d15d      	bne.n	80014fc <PCD_EP_ISR_Handler+0x5ce>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	00da      	lsls	r2, r3, #3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	e045      	b.n	80014fc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d126      	bne.n	80014cc <PCD_EP_ISR_Handler+0x59e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800148c:	b29b      	uxth	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	4413      	add	r3, r2
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
 8001496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	00da      	lsls	r2, r3, #3
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	4413      	add	r3, r2
 80014a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	e017      	b.n	80014fc <PCD_EP_ISR_Handler+0x5ce>
 80014cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d113      	bne.n	80014fc <PCD_EP_ISR_Handler+0x5ce>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e2:	4413      	add	r3, r2
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	00da      	lsls	r2, r3, #3
 80014ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ee:	4413      	add	r3, r2
 80014f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f005 f97d 	bl	8006802 <HAL_PCD_DataInStageCallback>
 8001508:	e04a      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800150a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800150c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d13f      	bne.n	8001594 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	4413      	add	r3, r2
 800152e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001538:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800153a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001540:	429a      	cmp	r2, r3
 8001542:	d906      	bls.n	8001552 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8001544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800154a:	1ad2      	subs	r2, r2, r3
 800154c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	e002      	b.n	8001558 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f005 f94b 	bl	8006802 <HAL_PCD_DataInStageCallback>
 800156c:	e018      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800156e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001574:	441a      	add	r2, r3
 8001576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001578:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800157a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001580:	441a      	add	r2, r3
 8001582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001584:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fc86 	bl	8003e9e <USB_EPStartXfer>
 8001592:	e005      	b.n	80015a0 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001594:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001596:	461a      	mov	r2, r3
 8001598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f917 	bl	80017ce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f6ff acc3 	blt.w	8000f38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3748      	adds	r7, #72	@ 0x48
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	4613      	mov	r3, r2
 80015c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d07c      	beq.n	80016ce <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015dc:	b29b      	uxth	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	8b7b      	ldrh	r3, [r7, #26]
 8001600:	429a      	cmp	r2, r3
 8001602:	d306      	bcc.n	8001612 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	8b7b      	ldrh	r3, [r7, #26]
 800160a:	1ad2      	subs	r2, r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e002      	b.n	8001618 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d123      	bne.n	8001668 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800163a:	833b      	strh	r3, [r7, #24]
 800163c:	8b3b      	ldrh	r3, [r7, #24]
 800163e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001642:	833b      	strh	r3, [r7, #24]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	441a      	add	r2, r3
 8001652:	8b3b      	ldrh	r3, [r7, #24]
 8001654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800165c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001664:	b29b      	uxth	r3, r3
 8001666:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01f      	beq.n	80016b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800168c:	82fb      	strh	r3, [r7, #22]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	441a      	add	r2, r3
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80016b2:	8b7b      	ldrh	r3, [r7, #26]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8085 	beq.w	80017c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	6959      	ldr	r1, [r3, #20]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	891a      	ldrh	r2, [r3, #8]
 80016c6:	8b7b      	ldrh	r3, [r7, #26]
 80016c8:	f003 fb0f 	bl	8004cea <USB_ReadPMA>
 80016cc:	e07a      	b.n	80017c4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	8b7b      	ldrh	r3, [r7, #26]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d306      	bcc.n	800170c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	8b7b      	ldrh	r3, [r7, #26]
 8001704:	1ad2      	subs	r2, r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	619a      	str	r2, [r3, #24]
 800170a:	e002      	b.n	8001712 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d123      	bne.n	8001762 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001734:	83fb      	strh	r3, [r7, #30]
 8001736:	8bfb      	ldrh	r3, [r7, #30]
 8001738:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800173c:	83fb      	strh	r3, [r7, #30]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	441a      	add	r2, r3
 800174c:	8bfb      	ldrh	r3, [r7, #30]
 800174e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800175a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800175e:	b29b      	uxth	r3, r3
 8001760:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11f      	bne.n	80017ac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001786:	83bb      	strh	r3, [r7, #28]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	441a      	add	r2, r3
 8001796:	8bbb      	ldrh	r3, [r7, #28]
 8001798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800179c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017ac:	8b7b      	ldrh	r3, [r7, #26]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	6959      	ldr	r1, [r3, #20]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	895a      	ldrh	r2, [r3, #10]
 80017be:	8b7b      	ldrh	r3, [r7, #26]
 80017c0:	f003 fa93 	bl	8004cea <USB_ReadPMA>
    }
  }

  return count;
 80017c4:	8b7b      	ldrh	r3, [r7, #26]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b0a6      	sub	sp, #152	@ 0x98
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	4613      	mov	r3, r2
 80017da:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 81f7 	beq.w	8001bd6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	4413      	add	r3, r2
 8001802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800180c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	699a      	ldr	r2, [r3, #24]
 8001814:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001818:	429a      	cmp	r2, r3
 800181a:	d907      	bls.n	800182c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	619a      	str	r2, [r3, #24]
 800182a:	e002      	b.n	8001832 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80e1 	bne.w	80019fe <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d126      	bne.n	8001892 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001858:	4413      	add	r3, r2
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	00da      	lsls	r2, r3, #3
 8001862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001864:	4413      	add	r3, r2
 8001866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001876:	b29a      	uxth	r2, r3
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	801a      	strh	r2, [r3, #0]
 800187c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	b29b      	uxth	r3, r3
 8001882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800188a:	b29a      	uxth	r2, r3
 800188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	e01a      	b.n	80018c8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d116      	bne.n	80018c8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ae:	4413      	add	r3, r2
 80018b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	00da      	lsls	r2, r3, #3
 80018b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ba:	4413      	add	r3, r2
 80018bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80018c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d126      	bne.n	8001924 <HAL_PCD_EP_DB_Transmit+0x156>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	623b      	str	r3, [r7, #32]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	4413      	add	r3, r2
 80018ec:	623b      	str	r3, [r7, #32]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	00da      	lsls	r2, r3, #3
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	4413      	add	r3, r2
 80018f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001908:	b29a      	uxth	r2, r3
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	801a      	strh	r2, [r3, #0]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800191c:	b29a      	uxth	r2, r3
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	801a      	strh	r2, [r3, #0]
 8001922:	e017      	b.n	8001954 <HAL_PCD_EP_DB_Transmit+0x186>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d113      	bne.n	8001954 <HAL_PCD_EP_DB_Transmit+0x186>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193a:	4413      	add	r3, r2
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001946:	4413      	add	r3, r2
 8001948:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	2200      	movs	r2, #0
 8001952:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	78db      	ldrb	r3, [r3, #3]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001976:	837b      	strh	r3, [r7, #26]
 8001978:	8b7b      	ldrh	r3, [r7, #26]
 800197a:	f083 0320 	eor.w	r3, r3, #32
 800197e:	837b      	strh	r3, [r7, #26]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	441a      	add	r2, r3
 800198e:	8b7b      	ldrh	r3, [r7, #26]
 8001990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800199c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f004 ff29 	bl	8006802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01f      	beq.n	80019fa <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80019d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019d4:	833b      	strh	r3, [r7, #24]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	441a      	add	r2, r3
 80019e4:	8b3b      	ldrh	r3, [r7, #24]
 80019e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80019ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80019ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e31f      	b.n	800203e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d021      	beq.n	8001a4c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	441a      	add	r2, r3
 8001a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	f040 82ca 	bne.w	8001fec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001a60:	441a      	add	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001a6e:	441a      	add	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d309      	bcc.n	8001a94 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a8c:	1ad2      	subs	r2, r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	621a      	str	r2, [r3, #32]
 8001a92:	e015      	b.n	8001ac0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8001a9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001aaa:	e009      	b.n	8001ac0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d15f      	bne.n	8001b88 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001adc:	4413      	add	r3, r2
 8001ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	00da      	lsls	r2, r3, #3
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae8:	4413      	add	r3, r2
 8001aea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10a      	bne.n	8001b1c <HAL_PCD_EP_DB_Transmit+0x34e>
 8001b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	e051      	b.n	8001bc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8001b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b20:	d816      	bhi.n	8001b50 <HAL_PCD_EP_DB_Transmit+0x382>
 8001b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b34:	3301      	adds	r3, #1
 8001b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e037      	b.n	8001bc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8001b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <HAL_PCD_EP_DB_Transmit+0x398>
 8001b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b62:	3b01      	subs	r3, #1
 8001b64:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	e01b      	b.n	8001bc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d117      	bne.n	8001bc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba4:	4413      	add	r3, r2
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	00da      	lsls	r2, r3, #3
 8001bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bbe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6959      	ldr	r1, [r3, #20]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	891a      	ldrh	r2, [r3, #8]
 8001bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f003 f849 	bl	8004c66 <USB_WritePMA>
 8001bd4:	e20a      	b.n	8001fec <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d307      	bcc.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001c12:	1ad2      	subs	r2, r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	e002      	b.n	8001c20 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 80f6 	bne.w	8001e16 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d126      	bne.n	8001c80 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c46:	4413      	add	r3, r2
 8001c48:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	00da      	lsls	r2, r3, #3
 8001c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c52:	4413      	add	r3, r2
 8001c54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001c58:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	e01a      	b.n	8001cb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d116      	bne.n	8001cb6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c9c:	4413      	add	r3, r2
 8001c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	00da      	lsls	r2, r3, #3
 8001ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ca8:	4413      	add	r3, r2
 8001caa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001cae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d12f      	bne.n	8001d26 <HAL_PCD_EP_DB_Transmit+0x558>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cde:	4413      	add	r3, r2
 8001ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	00da      	lsls	r2, r3, #3
 8001cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e01c      	b.n	8001d60 <HAL_PCD_EP_DB_Transmit+0x592>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d118      	bne.n	8001d60 <HAL_PCD_EP_DB_Transmit+0x592>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d3e:	4413      	add	r3, r2
 8001d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	00da      	lsls	r2, r3, #3
 8001d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d4e:	4413      	add	r3, r2
 8001d50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d127      	bne.n	8001db8 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d82:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8001d86:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001d8a:	f083 0320 	eor.w	r3, r3, #32
 8001d8e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	441a      	add	r2, r3
 8001da0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f004 fd1f 	bl	8006802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d121      	bne.n	8001e12 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	441a      	add	r2, r3
 8001dfa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e113      	b.n	800203e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d121      	bne.n	8001e64 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	441a      	add	r2, r3
 8001e4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	f040 80be 	bne.w	8001fec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001e78:	441a      	add	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001e86:	441a      	add	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d309      	bcc.n	8001eac <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6a1a      	ldr	r2, [r3, #32]
 8001ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	621a      	str	r2, [r3, #32]
 8001eaa:	e015      	b.n	8001ed8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8001eb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001ec2:	e009      	b.n	8001ed8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d15f      	bne.n	8001fa6 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001efa:	4413      	add	r3, r2
 8001efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	00da      	lsls	r2, r3, #3
 8001f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f06:	4413      	add	r3, r2
 8001f08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x76c>
 8001f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e04e      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8001f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f3e:	d816      	bhi.n	8001f6e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8001f40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_PCD_EP_DB_Transmit+0x788>
 8001f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f52:	3301      	adds	r3, #1
 8001f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	029b      	lsls	r3, r3, #10
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f6a:	801a      	strh	r2, [r3, #0]
 8001f6c:	e034      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8001f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f80:	3b01      	subs	r3, #1
 8001f82:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	029b      	lsls	r3, r3, #10
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fa2:	801a      	strh	r2, [r3, #0]
 8001fa4:	e018      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d114      	bne.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fbc:	4413      	add	r3, r2
 8001fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00da      	lsls	r2, r3, #3
 8001fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fc8:	4413      	add	r3, r2
 8001fca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	6959      	ldr	r1, [r3, #20]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	895a      	ldrh	r2, [r3, #10]
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f002 fe3d 	bl	8004c66 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002006:	82fb      	strh	r3, [r7, #22]
 8002008:	8afb      	ldrh	r3, [r7, #22]
 800200a:	f083 0310 	eor.w	r3, r3, #16
 800200e:	82fb      	strh	r3, [r7, #22]
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	f083 0320 	eor.w	r3, r3, #32
 8002016:	82fb      	strh	r3, [r7, #22]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	441a      	add	r2, r3
 8002026:	8afb      	ldrh	r3, [r7, #22]
 8002028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800202c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002038:	b29b      	uxth	r3, r3
 800203a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3798      	adds	r7, #152	@ 0x98
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002046:	b480      	push	{r7}
 8002048:	b087      	sub	sp, #28
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	817b      	strh	r3, [r7, #10]
 8002054:	4613      	mov	r3, r2
 8002056:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002058:	897b      	ldrh	r3, [r7, #10]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	f003 0207 	and.w	r2, r3, #7
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	3310      	adds	r3, #16
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e009      	b.n	8002090 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800207c:	897a      	ldrh	r2, [r7, #10]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002090:	893b      	ldrh	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	80da      	strh	r2, [r3, #6]
 80020a4:	e00b      	b.n	80020be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2201      	movs	r2, #1
 80020aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002104:	b29b      	uxth	r3, r3
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d141      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800212e:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213a:	d131      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800213c:	4b47      	ldr	r3, [pc, #284]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002142:	4a46      	ldr	r2, [pc, #280]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800214c:	4b43      	ldr	r3, [pc, #268]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002154:	4a41      	ldr	r2, [pc, #260]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800215c:	4b40      	ldr	r3, [pc, #256]	@ (8002260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2232      	movs	r2, #50	@ 0x32
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	4a3f      	ldr	r2, [pc, #252]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	3301      	adds	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002172:	e002      	b.n	800217a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3b01      	subs	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217a:	4b38      	ldr	r3, [pc, #224]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002186:	d102      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f2      	bne.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800218e:	4b33      	ldr	r3, [pc, #204]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219a:	d158      	bne.n	800224e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e057      	b.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a0:	4b2e      	ldr	r3, [pc, #184]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021a6:	4a2d      	ldr	r2, [pc, #180]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021b0:	e04d      	b.n	800224e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b8:	d141      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c6:	d131      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c8:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ce:	4a23      	ldr	r2, [pc, #140]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e0:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2232      	movs	r2, #50	@ 0x32
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fe:	e002      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002212:	d102      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f2      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002226:	d112      	bne.n	800224e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e011      	b.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800223c:	e007      	b.n	800224e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40007000 	.word	0x40007000
 8002260:	20000000 	.word	0x20000000
 8002264:	431bde83 	.word	0x431bde83

08002268 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002276:	6093      	str	r3, [r2, #8]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e2fe      	b.n	8002898 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d075      	beq.n	8002392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a6:	4b97      	ldr	r3, [pc, #604]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b0:	4b94      	ldr	r3, [pc, #592]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3e>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_OscConfig+0x44>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05b      	beq.n	8002390 <HAL_RCC_OscConfig+0x108>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d157      	bne.n	8002390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e2d9      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x74>
 80022ee:	4b85      	ldr	r3, [pc, #532]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a84      	ldr	r2, [pc, #528]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b7f      	ldr	r3, [pc, #508]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7e      	ldr	r2, [pc, #504]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b7c      	ldr	r3, [pc, #496]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7b      	ldr	r2, [pc, #492]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 8002320:	4b78      	ldr	r3, [pc, #480]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a77      	ldr	r2, [pc, #476]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b75      	ldr	r3, [pc, #468]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a74      	ldr	r2, [pc, #464]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe f8ea 	bl	8000518 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe f8e6 	bl	8000518 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e29e      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xc0>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe f8d6 	bl	8000518 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe f8d2 	bl	8000518 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e28a      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	4b60      	ldr	r3, [pc, #384]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0xe8>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d075      	beq.n	800248a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a8:	4b56      	ldr	r3, [pc, #344]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d102      	bne.n	80023be <HAL_RCC_OscConfig+0x136>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_OscConfig+0x13c>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11f      	bne.n	8002404 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_OscConfig+0x154>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e25d      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b49      	ldr	r3, [pc, #292]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	4946      	ldr	r1, [pc, #280]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023f0:	4b45      	ldr	r3, [pc, #276]	@ (8002508 <HAL_RCC_OscConfig+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f843 	bl	8000480 <HAL_InitTick>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d043      	beq.n	8002488 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e249      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3c      	ldr	r2, [pc, #240]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe f87e 	bl	8000518 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe f87a 	bl	8000518 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e232      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002432:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	492d      	ldr	r1, [pc, #180]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 8002452:	e01a      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002454:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2a      	ldr	r2, [pc, #168]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800245a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe f85a 	bl	8000518 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe f856 	bl	8000518 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e20e      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247a:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1e0>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d041      	beq.n	800251a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a4:	4a17      	ldr	r2, [pc, #92]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7fe f833 	bl	8000518 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b6:	f7fe f82f 	bl	8000518 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1e7      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ef      	beq.n	80024b6 <HAL_RCC_OscConfig+0x22e>
 80024d6:	e020      	b.n	800251a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <HAL_RCC_OscConfig+0x27c>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe f816 	bl	8000518 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ee:	e00d      	b.n	800250c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe f812 	bl	8000518 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d906      	bls.n	800250c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1ca      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250c:	4b8c      	ldr	r3, [pc, #560]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ea      	bne.n	80024f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80a6 	beq.w	8002674 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800252c:	4b84      	ldr	r3, [pc, #528]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x2b4>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x2b6>
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	4a7e      	ldr	r2, [pc, #504]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	@ 0x58
 800254e:	4b7c      	ldr	r3, [pc, #496]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255e:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_RCC_OscConfig+0x4bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCC_OscConfig+0x4bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a75      	ldr	r2, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x4bc>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fd ffcf 	bl	8000518 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fd ffcb 	bl	8000518 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e183      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x4bc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_RCC_OscConfig+0x32e>
 80025a4:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b4:	e024      	b.n	8002600 <HAL_RCC_OscConfig+0x378>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d110      	bne.n	80025e0 <HAL_RCC_OscConfig+0x358>
 80025be:	4b60      	ldr	r3, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025de:	e00f      	b.n	8002600 <HAL_RCC_OscConfig+0x378>
 80025e0:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	4a56      	ldr	r2, [pc, #344]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f0:	4b53      	ldr	r3, [pc, #332]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	4a52      	ldr	r2, [pc, #328]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d016      	beq.n	8002636 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fd ff86 	bl	8000518 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fd ff82 	bl	8000518 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e138      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002626:	4b46      	ldr	r3, [pc, #280]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ed      	beq.n	8002610 <HAL_RCC_OscConfig+0x388>
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7fd ff6f 	bl	8000518 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fd ff6b 	bl	8000518 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e121      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002654:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ed      	bne.n	800263e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	4a34      	ldr	r2, [pc, #208]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002672:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d03c      	beq.n	80026fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002688:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800268e:	4a2c      	ldr	r2, [pc, #176]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fd ff3e 	bl	8000518 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a0:	f7fd ff3a 	bl	8000518 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0f2      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026b2:	4b23      	ldr	r3, [pc, #140]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ef      	beq.n	80026a0 <HAL_RCC_OscConfig+0x418>
 80026c0:	e01b      	b.n	80026fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fd ff21 	bl	8000518 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026da:	f7fd ff1d 	bl	8000518 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0d5      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ec:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 80026ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ef      	bne.n	80026da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80c9 	beq.w	8002896 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b0c      	cmp	r3, #12
 800270e:	f000 8083 	beq.w	8002818 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d15e      	bne.n	80027d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <HAL_RCC_OscConfig+0x4b8>)
 8002720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fd fef7 	bl	8000518 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	e00c      	b.n	8002748 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7fd fef3 	bl	8000518 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d905      	bls.n	8002748 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ab      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ec      	bne.n	800272e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b52      	ldr	r3, [pc, #328]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4b52      	ldr	r3, [pc, #328]	@ (80028a4 <HAL_RCC_OscConfig+0x61c>)
 800275a:	4013      	ands	r3, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6a11      	ldr	r1, [r2, #32]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002764:	3a01      	subs	r2, #1
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800276e:	0212      	lsls	r2, r2, #8
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0552      	lsls	r2, r2, #21
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002782:	0852      	lsrs	r2, r2, #1
 8002784:	3a01      	subs	r2, #1
 8002786:	0652      	lsls	r2, r2, #25
 8002788:	4311      	orrs	r1, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800278e:	06d2      	lsls	r2, r2, #27
 8002790:	430a      	orrs	r2, r1
 8002792:	4943      	ldr	r1, [pc, #268]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 8002794:	4313      	orrs	r3, r2
 8002796:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a40      	ldr	r2, [pc, #256]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a4:	4b3e      	ldr	r3, [pc, #248]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a3d      	ldr	r2, [pc, #244]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 80027aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fd feb2 	bl	8000518 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fd feae 	bl	8000518 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e066      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x530>
 80027d6:	e05e      	b.n	8002896 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d8:	4b31      	ldr	r3, [pc, #196]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a30      	ldr	r2, [pc, #192]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 80027de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fd fe98 	bl	8000518 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fd fe94 	bl	8000518 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04c      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fe:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800280a:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4924      	ldr	r1, [pc, #144]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 8002810:	4b25      	ldr	r3, [pc, #148]	@ (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002812:	4013      	ands	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
 8002816:	e03e      	b.n	8002896 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e039      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002824:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <HAL_RCC_OscConfig+0x618>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d12c      	bne.n	8002892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	3b01      	subs	r3, #1
 8002844:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d123      	bne.n	8002892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d11b      	bne.n	8002892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d113      	bne.n	8002892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d109      	bne.n	8002892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	019f800c 	.word	0x019f800c
 80028a8:	feeefffc 	.word	0xfeeefffc

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e11e      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b91      	ldr	r3, [pc, #580]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b8e      	ldr	r3, [pc, #568]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 020f 	bic.w	r2, r3, #15
 80028da:	498c      	ldr	r1, [pc, #560]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b8a      	ldr	r3, [pc, #552]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e106      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d073      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d129      	bne.n	800295c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b81      	ldr	r3, [pc, #516]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0f4      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002918:	f000 f966 	bl	8002be8 <RCC_GetSysClockFreqFromPLLSource>
 800291c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4a7c      	ldr	r2, [pc, #496]	@ (8002b14 <HAL_RCC_ClockConfig+0x268>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d93f      	bls.n	80029a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002926:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	d033      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002942:	2b00      	cmp	r3, #0
 8002944:	d12f      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002946:	4b72      	ldr	r3, [pc, #456]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800294e:	4a70      	ldr	r2, [pc, #448]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002954:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e024      	b.n	80029a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d107      	bne.n	8002974 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002964:	4b6a      	ldr	r3, [pc, #424]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0c6      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	4b66      	ldr	r3, [pc, #408]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0be      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002984:	f000 f8ce 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002988:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4a61      	ldr	r2, [pc, #388]	@ (8002b14 <HAL_RCC_ClockConfig+0x268>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d909      	bls.n	80029a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002992:	4b5f      	ldr	r3, [pc, #380]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800299a:	4a5d      	ldr	r2, [pc, #372]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 800299c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4957      	ldr	r1, [pc, #348]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b8:	f7fd fdae 	bl	8000518 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fd fdaa 	bl	8000518 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e095      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d023      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a00:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a42      	ldr	r2, [pc, #264]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a18:	4b3d      	ldr	r3, [pc, #244]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a20:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4936      	ldr	r1, [pc, #216]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b80      	cmp	r3, #128	@ 0x80
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a42:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002a48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d21d      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 020f 	bic.w	r2, r3, #15
 8002a64:	4929      	ldr	r1, [pc, #164]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a6c:	f7fd fd54 	bl	8000518 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fd fd50 	bl	8000518 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e03b      	b.n	8002b02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1ed      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4917      	ldr	r1, [pc, #92]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	490f      	ldr	r1, [pc, #60]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ad6:	f000 f825 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	490c      	ldr	r1, [pc, #48]	@ (8002b18 <HAL_RCC_ClockConfig+0x26c>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_RCC_ClockConfig+0x270>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_RCC_ClockConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fcc0 	bl	8000480 <HAL_InitTick>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40021000 	.word	0x40021000
 8002b14:	04c4b400 	.word	0x04c4b400
 8002b18:	08006dd0 	.word	0x08006dd0
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d102      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e047      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b3c:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b48:	4b26      	ldr	r3, [pc, #152]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e03e      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b4e:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d136      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b78:	4a1a      	ldr	r2, [pc, #104]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b82:	68d2      	ldr	r2, [r2, #12]
 8002b84:	0a12      	lsrs	r2, r2, #8
 8002b86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
      break;
 8002b90:	e00c      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4a10      	ldr	r2, [pc, #64]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	0a12      	lsrs	r2, r2, #8
 8002ba0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
      break;
 8002baa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0e5b      	lsrs	r3, r3, #25
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e001      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bcc:	693b      	ldr	r3, [r7, #16]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3301      	adds	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d10c      	bne.n	8002c26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c0c:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c16:	68d2      	ldr	r2, [r2, #12]
 8002c18:	0a12      	lsrs	r2, r2, #8
 8002c1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
    break;
 8002c24:	e00c      	b.n	8002c40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c26:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	0a12      	lsrs	r2, r2, #8
 8002c34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    break;
 8002c3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c40:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0e5b      	lsrs	r3, r3, #25
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	007a1200 	.word	0x007a1200
 8002c70:	00f42400 	.word	0x00f42400

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c80:	2300      	movs	r3, #0
 8002c82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8098 	beq.w	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b40      	ldr	r3, [pc, #256]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a39      	ldr	r2, [pc, #228]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cca:	f7fd fc25 	bl	8000518 <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd0:	e009      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd2:	f7fd fc21 	bl	8000518 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d902      	bls.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce6:	4b30      	ldr	r3, [pc, #192]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ef      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cf2:	7cfb      	ldrb	r3, [r7, #19]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d159      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01e      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d019      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d14:	4b23      	ldr	r3, [pc, #140]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d20:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d30:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	4a1b      	ldr	r2, [pc, #108]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d40:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fd fbe1 	bl	8000518 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d58:	e00b      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd fbdd 	bl	8000518 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d902      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d72:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ec      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	4903      	ldr	r1, [pc, #12]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d9c:	e008      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	74bb      	strb	r3, [r7, #18]
 8002da2:	e005      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db0:	7c7b      	ldrb	r3, [r7, #17]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4ba6      	ldr	r3, [pc, #664]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	4aa5      	ldr	r2, [pc, #660]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dce:	4ba0      	ldr	r3, [pc, #640]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f023 0203 	bic.w	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	499c      	ldr	r1, [pc, #624]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df0:	4b97      	ldr	r3, [pc, #604]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 020c 	bic.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4994      	ldr	r1, [pc, #592]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e12:	4b8f      	ldr	r3, [pc, #572]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	498b      	ldr	r1, [pc, #556]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e34:	4b86      	ldr	r3, [pc, #536]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	4983      	ldr	r1, [pc, #524]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e56:	4b7e      	ldr	r3, [pc, #504]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	497a      	ldr	r1, [pc, #488]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e78:	4b75      	ldr	r3, [pc, #468]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	4972      	ldr	r1, [pc, #456]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4969      	ldr	r1, [pc, #420]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4961      	ldr	r1, [pc, #388]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ede:	4b5c      	ldr	r3, [pc, #368]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	4958      	ldr	r1, [pc, #352]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f00:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	4950      	ldr	r1, [pc, #320]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d015      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f38:	4b45      	ldr	r3, [pc, #276]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	4942      	ldr	r1, [pc, #264]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f56:	d105      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f58:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f62:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f70:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4934      	ldr	r1, [pc, #208]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f90:	4b2f      	ldr	r3, [pc, #188]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a2e      	ldr	r2, [pc, #184]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa8:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb6:	4926      	ldr	r1, [pc, #152]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc8:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	4918      	ldr	r1, [pc, #96]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800300a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003018:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	490a      	ldr	r1, [pc, #40]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003036:	d105      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003042:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003044:	7cbb      	ldrb	r3, [r7, #18]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003064:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003068:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800308a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800308e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b29b      	uxth	r3, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b0a7      	sub	sp, #156	@ 0x9c
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	78db      	ldrb	r3, [r3, #3]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d81f      	bhi.n	8003166 <USB_ActivateEndpoint+0x72>
 8003126:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <USB_ActivateEndpoint+0x38>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003159 	.word	0x08003159
 8003134:	0800316f 	.word	0x0800316f
 8003138:	0800314b 	.word	0x0800314b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800313c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003144:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003148:	e012      	b.n	8003170 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800314a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800314e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003152:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003156:	e00b      	b.n	8003170 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003158:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800315c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003160:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003164:	e004      	b.n	8003170 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800316c:	e000      	b.n	8003170 <USB_ActivateEndpoint+0x7c>
      break;
 800316e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	441a      	add	r2, r3
 800317a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800317e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318e:	b29b      	uxth	r3, r3
 8003190:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b21b      	sxth	r3, r3
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031aa:	b21a      	sxth	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	441a      	add	r2, r3
 80031c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d8:	b29b      	uxth	r3, r3
 80031da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	7b1b      	ldrb	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 8180 	bne.w	80034e6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8084 	beq.w	80032f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	00da      	lsls	r2, r3, #3
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	88db      	ldrh	r3, [r3, #6]
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	b29b      	uxth	r3, r3
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	827b      	strh	r3, [r7, #18]
 8003232:	8a7b      	ldrh	r3, [r7, #18]
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01b      	beq.n	8003274 <USB_ActivateEndpoint+0x180>
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	823b      	strh	r3, [r7, #16]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	8a3b      	ldrh	r3, [r7, #16]
 8003260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800326c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003270:	b29b      	uxth	r3, r3
 8003272:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	78db      	ldrb	r3, [r3, #3]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d020      	beq.n	80032be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003292:	81bb      	strh	r3, [r7, #12]
 8003294:	89bb      	ldrh	r3, [r7, #12]
 8003296:	f083 0320 	eor.w	r3, r3, #32
 800329a:	81bb      	strh	r3, [r7, #12]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	441a      	add	r2, r3
 80032a6:	89bb      	ldrh	r3, [r7, #12]
 80032a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	8013      	strh	r3, [r2, #0]
 80032bc:	e3f9      	b.n	8003ab2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d4:	81fb      	strh	r3, [r7, #14]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8013      	strh	r3, [r2, #0]
 80032f6:	e3dc      	b.n	8003ab2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	4413      	add	r3, r2
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	00da      	lsls	r2, r3, #3
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	4413      	add	r3, r2
 8003316:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	88db      	ldrh	r3, [r3, #6]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333c:	4413      	add	r3, r2
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	00da      	lsls	r2, r3, #3
 8003346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003348:	4413      	add	r3, r2
 800334a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335a:	b29a      	uxth	r2, r3
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <USB_ActivateEndpoint+0x28a>
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003376:	b29a      	uxth	r2, r3
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	e041      	b.n	8003402 <USB_ActivateEndpoint+0x30e>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b3e      	cmp	r3, #62	@ 0x3e
 8003384:	d81c      	bhi.n	80033c0 <USB_ActivateEndpoint+0x2cc>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <USB_ActivateEndpoint+0x2b2>
 800339c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033a0:	3301      	adds	r3, #1
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	e020      	b.n	8003402 <USB_ActivateEndpoint+0x30e>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <USB_ActivateEndpoint+0x2ec>
 80033d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033da:	3b01      	subs	r3, #1
 80033dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	029b      	lsls	r3, r3, #10
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003410:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01b      	beq.n	8003452 <USB_ActivateEndpoint+0x35e>
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800342c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003430:	843b      	strh	r3, [r7, #32]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	8c3b      	ldrh	r3, [r7, #32]
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800344a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d124      	bne.n	80034a4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800346c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003470:	83bb      	strh	r3, [r7, #28]
 8003472:	8bbb      	ldrh	r3, [r7, #28]
 8003474:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003478:	83bb      	strh	r3, [r7, #28]
 800347a:	8bbb      	ldrh	r3, [r7, #28]
 800347c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003480:	83bb      	strh	r3, [r7, #28]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8bbb      	ldrh	r3, [r7, #28]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
 80034a2:	e306      	b.n	8003ab2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	83fb      	strh	r3, [r7, #30]
 80034bc:	8bfb      	ldrh	r3, [r7, #30]
 80034be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034c2:	83fb      	strh	r3, [r7, #30]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e2e5      	b.n	8003ab2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d11e      	bne.n	800352c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003504:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800351e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800353e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003542:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800355c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003578:	4413      	add	r3, r2
 800357a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00da      	lsls	r2, r3, #3
 8003582:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003584:	4413      	add	r3, r2
 8003586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800358a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	891b      	ldrh	r3, [r3, #8]
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	b29b      	uxth	r3, r3
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	677b      	str	r3, [r7, #116]	@ 0x74
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ac:	4413      	add	r3, r2
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	00da      	lsls	r2, r3, #3
 80035b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b8:	4413      	add	r3, r2
 80035ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035be:	673b      	str	r3, [r7, #112]	@ 0x70
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	895b      	ldrh	r3, [r3, #10]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 81af 	bne.w	8003938 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80035ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80035ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01d      	beq.n	8003632 <USB_ActivateEndpoint+0x53e>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800361e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800362a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8003642:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01d      	beq.n	800368a <USB_ActivateEndpoint+0x596>
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003664:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	441a      	add	r2, r3
 8003672:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800367a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800367e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003686:	b29b      	uxth	r3, r3
 8003688:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d16b      	bne.n	800376a <USB_ActivateEndpoint+0x676>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a2:	4413      	add	r3, r2
 80036a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ae:	4413      	add	r3, r2
 80036b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <USB_ActivateEndpoint+0x5f0>
 80036ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e05d      	b.n	80037a0 <USB_ActivateEndpoint+0x6ac>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ea:	d81c      	bhi.n	8003726 <USB_ActivateEndpoint+0x632>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <USB_ActivateEndpoint+0x618>
 8003702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003706:	3301      	adds	r3, #1
 8003708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800370c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29a      	uxth	r2, r3
 8003712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003716:	b29b      	uxth	r3, r3
 8003718:	029b      	lsls	r3, r3, #10
 800371a:	b29b      	uxth	r3, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	b29a      	uxth	r2, r3
 8003720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	e03c      	b.n	80037a0 <USB_ActivateEndpoint+0x6ac>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <USB_ActivateEndpoint+0x652>
 800373c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003740:	3b01      	subs	r3, #1
 8003742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29a      	uxth	r2, r3
 800374c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003750:	b29b      	uxth	r3, r3
 8003752:	029b      	lsls	r3, r3, #10
 8003754:	b29b      	uxth	r3, r3
 8003756:	4313      	orrs	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003762:	b29a      	uxth	r2, r3
 8003764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e01a      	b.n	80037a0 <USB_ActivateEndpoint+0x6ac>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	785b      	ldrb	r3, [r3, #1]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d116      	bne.n	80037a0 <USB_ActivateEndpoint+0x6ac>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	657b      	str	r3, [r7, #84]	@ 0x54
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800377c:	b29b      	uxth	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003782:	4413      	add	r3, r2
 8003784:	657b      	str	r3, [r7, #84]	@ 0x54
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	00da      	lsls	r2, r3, #3
 800378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378e:	4413      	add	r3, r2
 8003790:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003794:	653b      	str	r3, [r7, #80]	@ 0x50
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	b29a      	uxth	r2, r3
 800379c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d16b      	bne.n	8003884 <USB_ActivateEndpoint+0x790>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037bc:	4413      	add	r3, r2
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00da      	lsls	r2, r3, #3
 80037c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c8:	4413      	add	r3, r2
 80037ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	b29a      	uxth	r2, r3
 80037dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <USB_ActivateEndpoint+0x70a>
 80037e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	e05b      	b.n	80038b6 <USB_ActivateEndpoint+0x7c2>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b3e      	cmp	r3, #62	@ 0x3e
 8003804:	d81c      	bhi.n	8003840 <USB_ActivateEndpoint+0x74c>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <USB_ActivateEndpoint+0x732>
 800381c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29a      	uxth	r2, r3
 800382c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003830:	b29b      	uxth	r3, r3
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	b29b      	uxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b29a      	uxth	r2, r3
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e03a      	b.n	80038b6 <USB_ActivateEndpoint+0x7c2>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <USB_ActivateEndpoint+0x76c>
 8003856:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800385a:	3b01      	subs	r3, #1
 800385c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29a      	uxth	r2, r3
 8003866:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800386a:	b29b      	uxth	r3, r3
 800386c:	029b      	lsls	r3, r3, #10
 800386e:	b29b      	uxth	r3, r3
 8003870:	4313      	orrs	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387c:	b29a      	uxth	r2, r3
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e018      	b.n	80038b6 <USB_ActivateEndpoint+0x7c2>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d114      	bne.n	80038b6 <USB_ActivateEndpoint+0x7c2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003898:	4413      	add	r3, r2
 800389a:	647b      	str	r3, [r7, #68]	@ 0x44
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	00da      	lsls	r2, r3, #3
 80038a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80038ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80038d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80038d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	441a      	add	r2, r3
 80038e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003914:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800392a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]
 8003936:	e0bc      	b.n	8003ab2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003948:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800394c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01d      	beq.n	8003990 <USB_ActivateEndpoint+0x89c>
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800397c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003984:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800398c:	b29b      	uxth	r3, r3
 800398e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80039a0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01d      	beq.n	80039e8 <USB_ActivateEndpoint+0x8f4>
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80039d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	78db      	ldrb	r3, [r3, #3]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d024      	beq.n	8003a3a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a06:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003a0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003a0e:	f083 0320 	eor.w	r3, r3, #32
 8003a12:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	8013      	strh	r3, [r2, #0]
 8003a38:	e01d      	b.n	8003a76 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a50:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003ab2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	379c      	adds	r7, #156	@ 0x9c
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b08d      	sub	sp, #52	@ 0x34
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	7b1b      	ldrb	r3, [r3, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 808e 	bne.w	8003bf4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d044      	beq.n	8003b6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	81bb      	strh	r3, [r7, #12]
 8003aee:	89bb      	ldrh	r3, [r7, #12]
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <USB_DeactivateEndpoint+0x6c>
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0e:	817b      	strh	r3, [r7, #10]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b46:	813b      	strh	r3, [r7, #8]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	893b      	ldrh	r3, [r7, #8]
 8003b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8013      	strh	r3, [r2, #0]
 8003b68:	e192      	b.n	8003e90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	827b      	strh	r3, [r7, #18]
 8003b78:	8a7b      	ldrh	r3, [r7, #18]
 8003b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01b      	beq.n	8003bba <USB_DeactivateEndpoint+0xf6>
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b98:	823b      	strh	r3, [r7, #16]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	8a3b      	ldrh	r3, [r7, #16]
 8003ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd0:	81fb      	strh	r3, [r7, #14]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	89fb      	ldrh	r3, [r7, #14]
 8003bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	8013      	strh	r3, [r2, #0]
 8003bf2:	e14d      	b.n	8003e90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 80a5 	bne.w	8003d48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	843b      	strh	r3, [r7, #32]
 8003c0c:	8c3b      	ldrh	r3, [r7, #32]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01b      	beq.n	8003c4e <USB_DeactivateEndpoint+0x18a>
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2c:	83fb      	strh	r3, [r7, #30]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	83bb      	strh	r3, [r7, #28]
 8003c5c:	8bbb      	ldrh	r3, [r7, #28]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01b      	beq.n	8003c9e <USB_DeactivateEndpoint+0x1da>
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7c:	837b      	strh	r3, [r7, #26]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	441a      	add	r2, r3
 8003c88:	8b7b      	ldrh	r3, [r7, #26]
 8003c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb4:	833b      	strh	r3, [r7, #24]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	441a      	add	r2, r3
 8003cc0:	8b3b      	ldrh	r3, [r7, #24]
 8003cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cec:	82fb      	strh	r3, [r7, #22]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	8afb      	ldrh	r3, [r7, #22]
 8003cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d24:	82bb      	strh	r3, [r7, #20]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	441a      	add	r2, r3
 8003d30:	8abb      	ldrh	r3, [r7, #20]
 8003d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]
 8003d46:	e0a3      	b.n	8003e90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003d56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01b      	beq.n	8003d98 <USB_DeactivateEndpoint+0x2d4>
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003da6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <USB_DeactivateEndpoint+0x324>
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	441a      	add	r2, r3
 8003e42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3734      	adds	r7, #52	@ 0x34
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b0ac      	sub	sp, #176	@ 0xb0
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f040 84ca 	bne.w	8004846 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d904      	bls.n	8003ec8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ec6:	e003      	b.n	8003ed0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	7b1b      	ldrb	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d122      	bne.n	8003f1e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6959      	ldr	r1, [r3, #20]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	88da      	ldrh	r2, [r3, #6]
 8003ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 febd 	bl	8004c66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	00da      	lsls	r2, r3, #3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	f000 bc6f 	b.w	80047fc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	78db      	ldrb	r3, [r3, #3]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	f040 831e 	bne.w	8004564 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f240 82cf 	bls.w	80044d4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f66:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 814f 	beq.w	8004236 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d16b      	bne.n	800407c <USB_EPStartXfer+0x1de>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	4413      	add	r3, r2
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	00da      	lsls	r2, r3, #3
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <USB_EPStartXfer+0x158>
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	e05b      	b.n	80040ae <USB_EPStartXfer+0x210>
 8003ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffa:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ffc:	d81c      	bhi.n	8004038 <USB_EPStartXfer+0x19a>
 8003ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <USB_EPStartXfer+0x180>
 8004014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004018:	3301      	adds	r3, #1
 800401a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29a      	uxth	r2, r3
 8004024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004028:	b29b      	uxth	r3, r3
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	b29b      	uxth	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b29a      	uxth	r2, r3
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e03a      	b.n	80040ae <USB_EPStartXfer+0x210>
 8004038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <USB_EPStartXfer+0x1ba>
 800404e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004052:	3b01      	subs	r3, #1
 8004054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004062:	b29b      	uxth	r3, r3
 8004064:	029b      	lsls	r3, r3, #10
 8004066:	b29b      	uxth	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004074:	b29a      	uxth	r2, r3
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	801a      	strh	r2, [r3, #0]
 800407a:	e018      	b.n	80040ae <USB_EPStartXfer+0x210>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d114      	bne.n	80040ae <USB_EPStartXfer+0x210>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	4413      	add	r3, r2
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	00da      	lsls	r2, r3, #3
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	4413      	add	r3, r2
 800409e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	895b      	ldrh	r3, [r3, #10]
 80040b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6959      	ldr	r1, [r3, #20]
 80040ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fdce 	bl	8004c66 <USB_WritePMA>
            ep->xfer_buff += len;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040d2:	441a      	add	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d907      	bls.n	80040f4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ec:	1ad2      	subs	r2, r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	621a      	str	r2, [r3, #32]
 80040f2:	e006      	b.n	8004102 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d16b      	bne.n	80041e2 <USB_EPStartXfer+0x344>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	4413      	add	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	00da      	lsls	r2, r3, #3
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004138:	b29a      	uxth	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <USB_EPStartXfer+0x2be>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004154:	b29a      	uxth	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e05d      	b.n	8004218 <USB_EPStartXfer+0x37a>
 800415c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004160:	2b3e      	cmp	r3, #62	@ 0x3e
 8004162:	d81c      	bhi.n	800419e <USB_EPStartXfer+0x300>
 8004164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800416e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <USB_EPStartXfer+0x2e6>
 800417a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800417e:	3301      	adds	r3, #1
 8004180:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29a      	uxth	r2, r3
 800418a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800418e:	b29b      	uxth	r3, r3
 8004190:	029b      	lsls	r3, r3, #10
 8004192:	b29b      	uxth	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b29a      	uxth	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	801a      	strh	r2, [r3, #0]
 800419c:	e03c      	b.n	8004218 <USB_EPStartXfer+0x37a>
 800419e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <USB_EPStartXfer+0x320>
 80041b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041b8:	3b01      	subs	r3, #1
 80041ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041da:	b29a      	uxth	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	e01a      	b.n	8004218 <USB_EPStartXfer+0x37a>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d116      	bne.n	8004218 <USB_EPStartXfer+0x37a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	4413      	add	r3, r2
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00da      	lsls	r2, r3, #3
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	4413      	add	r3, r2
 8004208:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004212:	b29a      	uxth	r2, r3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	891b      	ldrh	r3, [r3, #8]
 800421c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6959      	ldr	r1, [r3, #20]
 8004224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004228:	b29b      	uxth	r3, r3
 800422a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fd19 	bl	8004c66 <USB_WritePMA>
 8004234:	e2e2      	b.n	80047fc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d16b      	bne.n	8004316 <USB_EPStartXfer+0x478>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800424e:	4413      	add	r3, r2
 8004250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	00da      	lsls	r2, r3, #3
 8004258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425a:	4413      	add	r3, r2
 800425c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004260:	647b      	str	r3, [r7, #68]	@ 0x44
 8004262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426c:	b29a      	uxth	r2, r3
 800426e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <USB_EPStartXfer+0x3f2>
 800427a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004288:	b29a      	uxth	r2, r3
 800428a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e05d      	b.n	800434c <USB_EPStartXfer+0x4ae>
 8004290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004294:	2b3e      	cmp	r3, #62	@ 0x3e
 8004296:	d81c      	bhi.n	80042d2 <USB_EPStartXfer+0x434>
 8004298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <USB_EPStartXfer+0x41a>
 80042ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042b2:	3301      	adds	r3, #1
 80042b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	e03c      	b.n	800434c <USB_EPStartXfer+0x4ae>
 80042d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <USB_EPStartXfer+0x454>
 80042e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ec:	3b01      	subs	r3, #1
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	029b      	lsls	r3, r3, #10
 8004300:	b29b      	uxth	r3, r3
 8004302:	4313      	orrs	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430e:	b29a      	uxth	r2, r3
 8004310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	e01a      	b.n	800434c <USB_EPStartXfer+0x4ae>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d116      	bne.n	800434c <USB_EPStartXfer+0x4ae>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	653b      	str	r3, [r7, #80]	@ 0x50
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432e:	4413      	add	r3, r2
 8004330:	653b      	str	r3, [r7, #80]	@ 0x50
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	00da      	lsls	r2, r3, #3
 8004338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433a:	4413      	add	r3, r2
 800433c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004346:	b29a      	uxth	r2, r3
 8004348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	891b      	ldrh	r3, [r3, #8]
 8004350:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6959      	ldr	r1, [r3, #20]
 8004358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800435c:	b29b      	uxth	r3, r3
 800435e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fc7f 	bl	8004c66 <USB_WritePMA>
            ep->xfer_buff += len;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004370:	441a      	add	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d907      	bls.n	8004392 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	621a      	str	r2, [r3, #32]
 8004390:	e006      	b.n	80043a0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d16b      	bne.n	8004484 <USB_EPStartXfer+0x5e6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	4413      	add	r3, r2
 80043be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	00da      	lsls	r2, r3, #3
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <USB_EPStartXfer+0x560>
 80043e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	e05b      	b.n	80044b6 <USB_EPStartXfer+0x618>
 80043fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004402:	2b3e      	cmp	r3, #62	@ 0x3e
 8004404:	d81c      	bhi.n	8004440 <USB_EPStartXfer+0x5a2>
 8004406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <USB_EPStartXfer+0x588>
 800441c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004420:	3301      	adds	r3, #1
 8004422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29a      	uxth	r2, r3
 800442c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004430:	b29b      	uxth	r3, r3
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	b29b      	uxth	r3, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	b29a      	uxth	r2, r3
 800443a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e03a      	b.n	80044b6 <USB_EPStartXfer+0x618>
 8004440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800444a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <USB_EPStartXfer+0x5c2>
 8004456:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800445a:	3b01      	subs	r3, #1
 800445c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800446a:	b29b      	uxth	r3, r3
 800446c:	029b      	lsls	r3, r3, #10
 800446e:	b29b      	uxth	r3, r3
 8004470:	4313      	orrs	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447c:	b29a      	uxth	r2, r3
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e018      	b.n	80044b6 <USB_EPStartXfer+0x618>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d114      	bne.n	80044b6 <USB_EPStartXfer+0x618>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004498:	4413      	add	r3, r2
 800449a:	643b      	str	r3, [r7, #64]	@ 0x40
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	00da      	lsls	r2, r3, #3
 80044a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a4:	4413      	add	r3, r2
 80044a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	895b      	ldrh	r3, [r3, #10]
 80044ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6959      	ldr	r1, [r3, #20]
 80044c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fbca 	bl	8004c66 <USB_WritePMA>
 80044d2:	e193      	b.n	80047fc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80044ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004528:	4413      	add	r3, r2
 800452a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	00da      	lsls	r2, r3, #3
 8004532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004534:	4413      	add	r3, r2
 8004536:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800453a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800453c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004540:	b29a      	uxth	r2, r3
 8004542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004544:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	891b      	ldrh	r3, [r3, #8]
 800454a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6959      	ldr	r1, [r3, #20]
 8004552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004556:	b29b      	uxth	r3, r3
 8004558:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fb82 	bl	8004c66 <USB_WritePMA>
 8004562:	e14b      	b.n	80047fc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800456c:	1ad2      	subs	r2, r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 809a 	beq.w	80046be <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	673b      	str	r3, [r7, #112]	@ 0x70
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d16b      	bne.n	800466e <USB_EPStartXfer+0x7d0>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045a6:	4413      	add	r3, r2
 80045a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	00da      	lsls	r2, r3, #3
 80045b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b2:	4413      	add	r3, r2
 80045b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <USB_EPStartXfer+0x74a>
 80045d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	e05b      	b.n	80046a0 <USB_EPStartXfer+0x802>
 80045e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80045ee:	d81c      	bhi.n	800462a <USB_EPStartXfer+0x78c>
 80045f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <USB_EPStartXfer+0x772>
 8004606:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800460a:	3301      	adds	r3, #1
 800460c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29a      	uxth	r2, r3
 8004616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800461a:	b29b      	uxth	r3, r3
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	b29b      	uxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	e03a      	b.n	80046a0 <USB_EPStartXfer+0x802>
 800462a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <USB_EPStartXfer+0x7ac>
 8004640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004644:	3b01      	subs	r3, #1
 8004646:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800464a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29a      	uxth	r2, r3
 8004650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29b      	uxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004666:	b29a      	uxth	r2, r3
 8004668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e018      	b.n	80046a0 <USB_EPStartXfer+0x802>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d114      	bne.n	80046a0 <USB_EPStartXfer+0x802>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004682:	4413      	add	r3, r2
 8004684:	673b      	str	r3, [r7, #112]	@ 0x70
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	00da      	lsls	r2, r3, #3
 800468c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800468e:	4413      	add	r3, r2
 8004690:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004694:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800469a:	b29a      	uxth	r2, r3
 800469c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6959      	ldr	r1, [r3, #20]
 80046ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fad5 	bl	8004c66 <USB_WritePMA>
 80046bc:	e09e      	b.n	80047fc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d16b      	bne.n	800479e <USB_EPStartXfer+0x900>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046d6:	4413      	add	r3, r2
 80046d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	00da      	lsls	r2, r3, #3
 80046e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046e2:	4413      	add	r3, r2
 80046e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <USB_EPStartXfer+0x87a>
 8004702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004710:	b29a      	uxth	r2, r3
 8004712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	e063      	b.n	80047e0 <USB_EPStartXfer+0x942>
 8004718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800471c:	2b3e      	cmp	r3, #62	@ 0x3e
 800471e:	d81c      	bhi.n	800475a <USB_EPStartXfer+0x8bc>
 8004720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800472a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <USB_EPStartXfer+0x8a2>
 8004736:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800473a:	3301      	adds	r3, #1
 800473c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29a      	uxth	r2, r3
 8004746:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29b      	uxth	r3, r3
 8004750:	4313      	orrs	r3, r2
 8004752:	b29a      	uxth	r2, r3
 8004754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	e042      	b.n	80047e0 <USB_EPStartXfer+0x942>
 800475a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <USB_EPStartXfer+0x8dc>
 8004770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004774:	3b01      	subs	r3, #1
 8004776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800477a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004784:	b29b      	uxth	r3, r3
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	b29b      	uxth	r3, r3
 800478a:	4313      	orrs	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004796:	b29a      	uxth	r2, r3
 8004798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	e020      	b.n	80047e0 <USB_EPStartXfer+0x942>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d11c      	bne.n	80047e0 <USB_EPStartXfer+0x942>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ba:	4413      	add	r3, r2
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	00da      	lsls	r2, r3, #3
 80047c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ca:	4413      	add	r3, r2
 80047cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	891b      	ldrh	r3, [r3, #8]
 80047e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6959      	ldr	r1, [r3, #20]
 80047ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa35 	bl	8004c66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004812:	817b      	strh	r3, [r7, #10]
 8004814:	897b      	ldrh	r3, [r7, #10]
 8004816:	f083 0310 	eor.w	r3, r3, #16
 800481a:	817b      	strh	r3, [r7, #10]
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	f083 0320 	eor.w	r3, r3, #32
 8004822:	817b      	strh	r3, [r7, #10]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]
 8004844:	e0d5      	b.n	80049f2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	7b1b      	ldrb	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d156      	bne.n	80048fc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d122      	bne.n	800489c <USB_EPStartXfer+0x9fe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	78db      	ldrb	r3, [r3, #3]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11e      	bne.n	800489c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004874:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]
 800489a:	e01d      	b.n	80048d8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80048ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d907      	bls.n	80048f4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	1ad2      	subs	r2, r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	619a      	str	r2, [r3, #24]
 80048f2:	e054      	b.n	800499e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	619a      	str	r2, [r3, #24]
 80048fa:	e050      	b.n	800499e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	78db      	ldrb	r3, [r3, #3]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d142      	bne.n	800498a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d048      	beq.n	800499e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800491c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <USB_EPStartXfer+0xa96>
 8004928:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004934:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800493c:	2b00      	cmp	r3, #0
 800493e:	d12e      	bne.n	800499e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004940:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d128      	bne.n	800499e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800497c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004980:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004984:	b29b      	uxth	r3, r3
 8004986:	8013      	strh	r3, [r2, #0]
 8004988:	e009      	b.n	800499e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	78db      	ldrb	r3, [r3, #3]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d103      	bne.n	800499a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]
 8004998:	e001      	b.n	800499e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e02a      	b.n	80049f4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80049b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80049c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	37b0      	adds	r7, #176	@ 0xb0
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d020      	beq.n	8004a50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a24:	81bb      	strh	r3, [r7, #12]
 8004a26:	89bb      	ldrh	r3, [r7, #12]
 8004a28:	f083 0310 	eor.w	r3, r3, #16
 8004a2c:	81bb      	strh	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	89bb      	ldrh	r3, [r7, #12]
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]
 8004a4e:	e01f      	b.n	8004a90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a66:	81fb      	strh	r3, [r7, #14]
 8004a68:	89fb      	ldrh	r3, [r7, #14]
 8004a6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a6e:	81fb      	strh	r3, [r7, #14]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	89fb      	ldrh	r3, [r7, #14]
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d04c      	beq.n	8004b4a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	823b      	strh	r3, [r7, #16]
 8004abe:	8a3b      	ldrh	r3, [r7, #16]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01b      	beq.n	8004b00 <USB_EPClearStall+0x62>
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ade:	81fb      	strh	r3, [r7, #14]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d06c      	beq.n	8004be2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b1e:	81bb      	strh	r3, [r7, #12]
 8004b20:	89bb      	ldrh	r3, [r7, #12]
 8004b22:	f083 0320 	eor.w	r3, r3, #32
 8004b26:	81bb      	strh	r3, [r7, #12]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	89bb      	ldrh	r3, [r7, #12]
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]
 8004b48:	e04b      	b.n	8004be2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	82fb      	strh	r3, [r7, #22]
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <USB_EPClearStall+0xfc>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b78:	82bb      	strh	r3, [r7, #20]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8abb      	ldrh	r3, [r7, #20]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb0:	827b      	strh	r3, [r7, #18]
 8004bb2:	8a7b      	ldrh	r3, [r7, #18]
 8004bb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bb8:	827b      	strh	r3, [r7, #18]
 8004bba:	8a7b      	ldrh	r3, [r7, #18]
 8004bbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bc0:	827b      	strh	r3, [r7, #18]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	8a7b      	ldrh	r3, [r7, #18]
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2280      	movs	r2, #128	@ 0x80
 8004c06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c58:	68fb      	ldr	r3, [r7, #12]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b08b      	sub	sp, #44	@ 0x2c
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	4611      	mov	r1, r2
 8004c72:	461a      	mov	r2, r3
 8004c74:	460b      	mov	r3, r1
 8004c76:	80fb      	strh	r3, [r7, #6]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c7c:	88bb      	ldrh	r3, [r7, #4]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c96:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c9c:	e01b      	b.n	8004cd6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	b21a      	sxth	r2, r3
 8004cae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b21b      	sxth	r3, r3
 8004cb6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	8a7a      	ldrh	r2, [r7, #18]
 8004cbc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e0      	bne.n	8004c9e <USB_WritePMA+0x38>
  }
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	372c      	adds	r7, #44	@ 0x2c
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b08b      	sub	sp, #44	@ 0x2c
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	80fb      	strh	r3, [r7, #6]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d00:	88bb      	ldrh	r3, [r7, #4]
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d1a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d20:	e018      	b.n	8004d54 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	3b01      	subs	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e3      	bne.n	8004d22 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004d5a:	88bb      	ldrh	r3, [r7, #4]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	701a      	strb	r2, [r3, #0]
  }
}
 8004d76:	bf00      	nop
 8004d78:	372c      	adds	r7, #44	@ 0x2c
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004d8e:	2018      	movs	r0, #24
 8004d90:	f001 ff6c 	bl	8006c6c <USBD_static_malloc>
 8004d94:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8004da4:	2302      	movs	r3, #2
 8004da6:	e038      	b.n	8004e1a <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7c1b      	ldrb	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f8a3 217a 	strh.w	r2, [r3, #378]	@ 0x17a
 8004dc6:	e006      	b.n	8004dd6 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2205      	movs	r2, #5
 8004dcc:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f8a3 217a 	strh.w	r2, [r3, #378]	@ 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	2203      	movs	r2, #3
 8004dda:	2181      	movs	r1, #129	@ 0x81
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fdfe 	bl	80069de <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004de8:	2302      	movs	r3, #2
 8004dea:	2203      	movs	r2, #3
 8004dec:	2101      	movs	r1, #1
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f001 fdf5 	bl	80069de <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	2302      	movs	r3, #2
 8004e10:	2101      	movs	r1, #1
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 fed2 	bl	8006bbc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004e2e:	2181      	movs	r1, #129	@ 0x81
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 fdfa 	bl	8006a2a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004e42:	2101      	movs	r1, #1
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fdf0 	bl	8006a2a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8a3 217a 	strh.w	r2, [r3, #378]	@ 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 ff07 	bl	8006c88 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e9c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e0ed      	b.n	8005094 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d052      	beq.n	8004f6a <USBD_CUSTOM_HID_Setup+0xde>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f040 80dd 	bne.w	8005084 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	3b02      	subs	r3, #2
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d842      	bhi.n	8004f5a <USBD_CUSTOM_HID_Setup+0xce>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <USBD_CUSTOM_HID_Setup+0x50>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f35 	.word	0x08004f35
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f5b 	.word	0x08004f5b
 8004ee8:	08004f5b 	.word	0x08004f5b
 8004eec:	08004f5b 	.word	0x08004f5b
 8004ef0:	08004f5b 	.word	0x08004f5b
 8004ef4:	08004f5b 	.word	0x08004f5b
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f23 	.word	0x08004f23
 8004f00:	08004f05 	.word	0x08004f05
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	885b      	ldrh	r3, [r3, #2]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	605a      	str	r2, [r3, #4]
          break;
 8004f10:	e02a      	b.n	8004f68 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2201      	movs	r2, #1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 fa25 	bl	800636a <USBD_CtlSendData>
          break;
 8004f20:	e022      	b.n	8004f68 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	885b      	ldrh	r3, [r3, #2]
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	609a      	str	r2, [r3, #8]
          break;
 8004f32:	e019      	b.n	8004f68 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3308      	adds	r3, #8
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 fa14 	bl	800636a <USBD_CtlSendData>
          break;
 8004f42:	e011      	b.n	8004f68 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2201      	movs	r2, #1
 8004f48:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004f4a:	6939      	ldr	r1, [r7, #16]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	88db      	ldrh	r3, [r3, #6]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fa35 	bl	80063c2 <USBD_CtlPrepareRx>
          break;
 8004f58:	e006      	b.n	8004f68 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 f993 	bl	8006288 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f62:	2303      	movs	r3, #3
 8004f64:	75fb      	strb	r3, [r7, #23]
          break;
 8004f66:	bf00      	nop
      }
      break;
 8004f68:	e093      	b.n	8005092 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b0b      	cmp	r3, #11
 8004f70:	d87f      	bhi.n	8005072 <USBD_CUSTOM_HID_Setup+0x1e6>
 8004f72:	a201      	add	r2, pc, #4	@ (adr r2, 8004f78 <USBD_CUSTOM_HID_Setup+0xec>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08005081 	.word	0x08005081
 8004f80:	08005073 	.word	0x08005073
 8004f84:	08005073 	.word	0x08005073
 8004f88:	08005073 	.word	0x08005073
 8004f8c:	08005073 	.word	0x08005073
 8004f90:	08004fd3 	.word	0x08004fd3
 8004f94:	08005073 	.word	0x08005073
 8004f98:	08005073 	.word	0x08005073
 8004f9c:	08005073 	.word	0x08005073
 8004fa0:	08005021 	.word	0x08005021
 8004fa4:	0800504b 	.word	0x0800504b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d107      	bne.n	8004fc4 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fb4:	f107 030e 	add.w	r3, r7, #14
 8004fb8:	2202      	movs	r2, #2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 f9d4 	bl	800636a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc2:	e05e      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 f95e 	bl	8006288 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd0:	e057      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	885b      	ldrh	r3, [r3, #2]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b22      	cmp	r3, #34	@ 0x22
 8004fdc:	d10b      	bne.n	8004ff6 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	88db      	ldrh	r3, [r3, #6]
 8004fe2:	2b49      	cmp	r3, #73	@ 0x49
 8004fe4:	bf28      	it	cs
 8004fe6:	2349      	movcs	r3, #73	@ 0x49
 8004fe8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	e00d      	b.n	8005012 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	885b      	ldrh	r3, [r3, #2]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b21      	cmp	r3, #33	@ 0x21
 8005000:	d107      	bne.n	8005012 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005002:	4b26      	ldr	r3, [pc, #152]	@ (800509c <USBD_CUSTOM_HID_Setup+0x210>)
 8005004:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	88db      	ldrh	r3, [r3, #6]
 800500a:	2b09      	cmp	r3, #9
 800500c:	bf28      	it	cs
 800500e:	2309      	movcs	r3, #9
 8005010:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005012:	8bfb      	ldrh	r3, [r7, #30]
 8005014:	461a      	mov	r2, r3
 8005016:	69b9      	ldr	r1, [r7, #24]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 f9a6 	bl	800636a <USBD_CtlSendData>
          break;
 800501e:	e030      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b03      	cmp	r3, #3
 800502a:	d107      	bne.n	800503c <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	330c      	adds	r3, #12
 8005030:	2201      	movs	r2, #1
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 f998 	bl	800636a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800503a:	e022      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 f922 	bl	8006288 <USBD_CtlError>
            ret = USBD_FAIL;
 8005044:	2303      	movs	r3, #3
 8005046:	75fb      	strb	r3, [r7, #23]
          break;
 8005048:	e01b      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d106      	bne.n	8005064 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	885b      	ldrh	r3, [r3, #2]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005062:	e00e      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 f90e 	bl	8006288 <USBD_CtlError>
            ret = USBD_FAIL;
 800506c:	2303      	movs	r3, #3
 800506e:	75fb      	strb	r3, [r7, #23]
          break;
 8005070:	e007      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 f907 	bl	8006288 <USBD_CtlError>
          ret = USBD_FAIL;
 800507a:	2303      	movs	r3, #3
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e000      	b.n	8005082 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8005080:	bf00      	nop
      }
      break;
 8005082:	e006      	b.n	8005092 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 f8fe 	bl	8006288 <USBD_CtlError>
      ret = USBD_FAIL;
 800508c:	2303      	movs	r3, #3
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	bf00      	nop
  }
  return (uint8_t)ret;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200000c8 	.word	0x200000c8

080050a0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2229      	movs	r2, #41	@ 0x29
 80050ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80050ae:	4b03      	ldr	r3, [pc, #12]	@ (80050bc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000044 	.word	0x20000044

080050c0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2229      	movs	r2, #41	@ 0x29
 80050cc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80050ce:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000070 	.word	0x20000070

080050e0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2229      	movs	r2, #41	@ 0x29
 80050ec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80050ee:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2000009c 	.word	0x2000009c

08005100 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005112:	2200      	movs	r2, #0
 8005114:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800513a:	2303      	movs	r3, #3
 800513c:	e00e      	b.n	800515c <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005144:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	7810      	ldrb	r0, [r2, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	7852      	ldrb	r2, [r2, #1]
 8005156:	4611      	mov	r1, r2
 8005158:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005176:	2303      	movs	r3, #3
 8005178:	e00a      	b.n	8005190 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005180:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	2302      	movs	r3, #2
 8005186:	2101      	movs	r1, #1
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fd17 	bl	8006bbc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80051a6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e011      	b.n	80051d6 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10c      	bne.n	80051d4 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	7810      	ldrb	r0, [r2, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	7852      	ldrb	r2, [r2, #1]
 80051ca:	4611      	mov	r1, r2
 80051cc:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	220a      	movs	r2, #10
 80051ec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80051ee:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	200000d4 	.word	0x200000d4

08005200 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005210:	2303      	movs	r3, #3
 8005212:	e004      	b.n	800521e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800523e:	2303      	movs	r3, #3
 8005240:	e01f      	b.n	8005282 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	79fa      	ldrb	r2, [r7, #7]
 8005274:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f001 fb40 	bl	80068fc <USBD_LL_Init>
 800527c:	4603      	mov	r3, r0
 800527e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800529e:	2303      	movs	r3, #3
 80052a0:	e016      	b.n	80052d0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	f107 020e 	add.w	r2, r7, #14
 80052c2:	4610      	mov	r0, r2
 80052c4:	4798      	blx	r3
 80052c6:	4602      	mov	r2, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 fb61 	bl	80069a8 <USBD_LL_Start>
 80052e6:	4603      	mov	r3, r0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005312:	2303      	movs	r3, #3
 8005314:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	4611      	mov	r1, r2
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4798      	blx	r3
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	4611      	mov	r1, r2
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4798      	blx	r3
  }

  return USBD_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 ff47 	bl	8006214 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d01a      	beq.n	80053e0 <USBD_LL_SetupStage+0x72>
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d822      	bhi.n	80053f4 <USBD_LL_SetupStage+0x86>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <USBD_LL_SetupStage+0x4a>
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d00a      	beq.n	80053cc <USBD_LL_SetupStage+0x5e>
 80053b6:	e01d      	b.n	80053f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9ef 	bl	80057a4 <USBD_StdDevReq>
 80053c6:	4603      	mov	r3, r0
 80053c8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ca:	e020      	b.n	800540e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fa53 	bl	8005880 <USBD_StdItfReq>
 80053da:	4603      	mov	r3, r0
 80053dc:	73fb      	strb	r3, [r7, #15]
      break;
 80053de:	e016      	b.n	800540e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa92 	bl	8005912 <USBD_StdEPReq>
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]
      break;
 80053f2:	e00c      	b.n	800540e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80053fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fb30 	bl	8006a68 <USBD_LL_StallEP>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	bf00      	nop
  }

  return ret;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	460b      	mov	r3, r1
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005426:	7afb      	ldrb	r3, [r7, #11]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d138      	bne.n	800549e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005432:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800543a:	2b03      	cmp	r3, #3
 800543c:	d14a      	bne.n	80054d4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	429a      	cmp	r2, r3
 8005448:	d913      	bls.n	8005472 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	1ad2      	subs	r2, r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4293      	cmp	r3, r2
 8005462:	bf28      	it	cs
 8005464:	4613      	movcs	r3, r2
 8005466:	461a      	mov	r2, r3
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 ffc6 	bl	80063fc <USBD_CtlContinueRx>
 8005470:	e030      	b.n	80054d4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b03      	cmp	r3, #3
 800547c:	d10b      	bne.n	8005496 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 ffc1 	bl	800641e <USBD_CtlSendStatus>
 800549c:	e01a      	b.n	80054d4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d114      	bne.n	80054d4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00e      	beq.n	80054d4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	7afa      	ldrb	r2, [r7, #11]
 80054c0:	4611      	mov	r1, r2
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	4798      	blx	r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	e000      	b.n	80054d6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	460b      	mov	r3, r1
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80054ec:	7afb      	ldrb	r3, [r7, #11]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d16b      	bne.n	80055ca <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3314      	adds	r3, #20
 80054f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d156      	bne.n	80055b0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	429a      	cmp	r2, r3
 800550c:	d914      	bls.n	8005538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	461a      	mov	r2, r3
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 ff3b 	bl	80063a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800552a:	2300      	movs	r3, #0
 800552c:	2200      	movs	r2, #0
 800552e:	2100      	movs	r1, #0
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f001 fb43 	bl	8006bbc <USBD_LL_PrepareReceive>
 8005536:	e03b      	b.n	80055b0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d11c      	bne.n	800557e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800554c:	429a      	cmp	r2, r3
 800554e:	d316      	bcc.n	800557e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800555a:	429a      	cmp	r2, r3
 800555c:	d20f      	bcs.n	800557e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800555e:	2200      	movs	r2, #0
 8005560:	2100      	movs	r1, #0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 ff1c 	bl	80063a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005570:	2300      	movs	r3, #0
 8005572:	2200      	movs	r2, #0
 8005574:	2100      	movs	r1, #0
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f001 fb20 	bl	8006bbc <USBD_LL_PrepareReceive>
 800557c:	e018      	b.n	80055b0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d10b      	bne.n	80055a2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055a2:	2180      	movs	r1, #128	@ 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f001 fa5f 	bl	8006a68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 ff4a 	bl	8006444 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d122      	bne.n	8005600 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fe98 	bl	80052f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80055c8:	e01a      	b.n	8005600 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d114      	bne.n	8005600 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00e      	beq.n	8005600 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	7afa      	ldrb	r2, [r7, #11]
 80055ec:	4611      	mov	r1, r2
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	4798      	blx	r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	e000      	b.n	8005602 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800563a:	2303      	movs	r3, #3
 800563c:	e02f      	b.n	800569e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00f      	beq.n	8005668 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d009      	beq.n	8005668 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6852      	ldr	r2, [r2, #4]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	4611      	mov	r1, r2
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	2200      	movs	r2, #0
 800566c:	2100      	movs	r1, #0
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 f9b5 	bl	80069de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2240      	movs	r2, #64	@ 0x40
 8005680:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005684:	2340      	movs	r3, #64	@ 0x40
 8005686:	2200      	movs	r2, #0
 8005688:	2180      	movs	r1, #128	@ 0x80
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 f9a7 	bl	80069de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2240      	movs	r2, #64	@ 0x40
 800569a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b04      	cmp	r3, #4
 8005704:	d106      	bne.n	8005714 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800570c:	b2da      	uxtb	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005734:	2303      	movs	r3, #3
 8005736:	e012      	b.n	800575e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b03      	cmp	r3, #3
 8005742:	d10b      	bne.n	800575c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005766:	b480      	push	{r7}
 8005768:	b087      	sub	sp, #28
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005784:	8a3b      	ldrh	r3, [r7, #16]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	b21a      	sxth	r2, r3
 800578a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800578e:	4313      	orrs	r3, r2
 8005790:	b21b      	sxth	r3, r3
 8005792:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005794:	89fb      	ldrh	r3, [r7, #14]
}
 8005796:	4618      	mov	r0, r3
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057ba:	2b40      	cmp	r3, #64	@ 0x40
 80057bc:	d005      	beq.n	80057ca <USBD_StdDevReq+0x26>
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	d853      	bhi.n	800586a <USBD_StdDevReq+0xc6>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <USBD_StdDevReq+0x3a>
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d14f      	bne.n	800586a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
      break;
 80057dc:	e04a      	b.n	8005874 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d83b      	bhi.n	800585e <USBD_StdDevReq+0xba>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <USBD_StdDevReq+0x48>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005855 	.word	0x08005855
 80057f4:	0800585f 	.word	0x0800585f
 80057f8:	0800584b 	.word	0x0800584b
 80057fc:	0800585f 	.word	0x0800585f
 8005800:	0800581f 	.word	0x0800581f
 8005804:	08005815 	.word	0x08005815
 8005808:	0800585f 	.word	0x0800585f
 800580c:	08005837 	.word	0x08005837
 8005810:	08005829 	.word	0x08005829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f9de 	bl	8005bd8 <USBD_GetDescriptor>
          break;
 800581c:	e024      	b.n	8005868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb6d 	bl	8005f00 <USBD_SetAddress>
          break;
 8005826:	e01f      	b.n	8005868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fbac 	bl	8005f88 <USBD_SetConfig>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
          break;
 8005834:	e018      	b.n	8005868 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fc4b 	bl	80060d4 <USBD_GetConfig>
          break;
 800583e:	e013      	b.n	8005868 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fc7c 	bl	8006140 <USBD_GetStatus>
          break;
 8005848:	e00e      	b.n	8005868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fcab 	bl	80061a8 <USBD_SetFeature>
          break;
 8005852:	e009      	b.n	8005868 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fcba 	bl	80061d0 <USBD_ClrFeature>
          break;
 800585c:	e004      	b.n	8005868 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fd11 	bl	8006288 <USBD_CtlError>
          break;
 8005866:	bf00      	nop
      }
      break;
 8005868:	e004      	b.n	8005874 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fd0b 	bl	8006288 <USBD_CtlError>
      break;
 8005872:	bf00      	nop
  }

  return ret;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop

08005880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	d005      	beq.n	80058a6 <USBD_StdItfReq+0x26>
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d82f      	bhi.n	80058fe <USBD_StdItfReq+0x7e>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <USBD_StdItfReq+0x26>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d12b      	bne.n	80058fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d81d      	bhi.n	80058f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	889b      	ldrh	r3, [r3, #4]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d813      	bhi.n	80058e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	88db      	ldrh	r3, [r3, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d110      	bne.n	80058fa <USBD_StdItfReq+0x7a>
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fd9d 	bl	800641e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058e4:	e009      	b.n	80058fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fccd 	bl	8006288 <USBD_CtlError>
          break;
 80058ee:	e004      	b.n	80058fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fcc8 	bl	8006288 <USBD_CtlError>
          break;
 80058f8:	e000      	b.n	80058fc <USBD_StdItfReq+0x7c>
          break;
 80058fa:	bf00      	nop
      }
      break;
 80058fc:	e004      	b.n	8005908 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fcc1 	bl	8006288 <USBD_CtlError>
      break;
 8005906:	bf00      	nop
  }

  return ret;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	889b      	ldrh	r3, [r3, #4]
 8005924:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800592e:	2b40      	cmp	r3, #64	@ 0x40
 8005930:	d007      	beq.n	8005942 <USBD_StdEPReq+0x30>
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	f200 8145 	bhi.w	8005bc2 <USBD_StdEPReq+0x2b0>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <USBD_StdEPReq+0x44>
 800593c:	2b20      	cmp	r3, #32
 800593e:	f040 8140 	bne.w	8005bc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	e13a      	b.n	8005bcc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d007      	beq.n	800596e <USBD_StdEPReq+0x5c>
 800595e:	2b03      	cmp	r3, #3
 8005960:	f300 8129 	bgt.w	8005bb6 <USBD_StdEPReq+0x2a4>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d07f      	beq.n	8005a68 <USBD_StdEPReq+0x156>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d03c      	beq.n	80059e6 <USBD_StdEPReq+0xd4>
 800596c:	e123      	b.n	8005bb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d002      	beq.n	8005980 <USBD_StdEPReq+0x6e>
 800597a:	2b03      	cmp	r3, #3
 800597c:	d016      	beq.n	80059ac <USBD_StdEPReq+0x9a>
 800597e:	e02c      	b.n	80059da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <USBD_StdEPReq+0x90>
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b80      	cmp	r3, #128	@ 0x80
 800598a:	d00a      	beq.n	80059a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f869 	bl	8006a68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005996:	2180      	movs	r1, #128	@ 0x80
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f865 	bl	8006a68 <USBD_LL_StallEP>
 800599e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059a0:	e020      	b.n	80059e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fc6f 	bl	8006288 <USBD_CtlError>
              break;
 80059aa:	e01b      	b.n	80059e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	885b      	ldrh	r3, [r3, #2]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10e      	bne.n	80059d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <USBD_StdEPReq+0xc0>
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	2b80      	cmp	r3, #128	@ 0x80
 80059be:	d008      	beq.n	80059d2 <USBD_StdEPReq+0xc0>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	88db      	ldrh	r3, [r3, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f84b 	bl	8006a68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fd23 	bl	800641e <USBD_CtlSendStatus>

              break;
 80059d8:	e004      	b.n	80059e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fc53 	bl	8006288 <USBD_CtlError>
              break;
 80059e2:	bf00      	nop
          }
          break;
 80059e4:	e0ec      	b.n	8005bc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d002      	beq.n	80059f8 <USBD_StdEPReq+0xe6>
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d016      	beq.n	8005a24 <USBD_StdEPReq+0x112>
 80059f6:	e030      	b.n	8005a5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00d      	beq.n	8005a1a <USBD_StdEPReq+0x108>
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b80      	cmp	r3, #128	@ 0x80
 8005a02:	d00a      	beq.n	8005a1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f82d 	bl	8006a68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a0e:	2180      	movs	r1, #128	@ 0x80
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 f829 	bl	8006a68 <USBD_LL_StallEP>
 8005a16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a18:	e025      	b.n	8005a66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fc33 	bl	8006288 <USBD_CtlError>
              break;
 8005a22:	e020      	b.n	8005a66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11b      	bne.n	8005a64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 f833 	bl	8006aa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fcec 	bl	800641e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005a58:	e004      	b.n	8005a64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fc13 	bl	8006288 <USBD_CtlError>
              break;
 8005a62:	e000      	b.n	8005a66 <USBD_StdEPReq+0x154>
              break;
 8005a64:	bf00      	nop
          }
          break;
 8005a66:	e0ab      	b.n	8005bc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d002      	beq.n	8005a7a <USBD_StdEPReq+0x168>
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d032      	beq.n	8005ade <USBD_StdEPReq+0x1cc>
 8005a78:	e097      	b.n	8005baa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a7a:	7bbb      	ldrb	r3, [r7, #14]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <USBD_StdEPReq+0x17e>
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	2b80      	cmp	r3, #128	@ 0x80
 8005a84:	d004      	beq.n	8005a90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fbfd 	bl	8006288 <USBD_CtlError>
                break;
 8005a8e:	e091      	b.n	8005bb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da0b      	bge.n	8005ab0 <USBD_StdEPReq+0x19e>
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	3304      	adds	r3, #4
 8005aae:	e00b      	b.n	8005ac8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fc47 	bl	800636a <USBD_CtlSendData>
              break;
 8005adc:	e06a      	b.n	8005bb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da11      	bge.n	8005b0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3324      	adds	r3, #36	@ 0x24
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d117      	bne.n	8005b30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fbc0 	bl	8006288 <USBD_CtlError>
                  break;
 8005b08:	e054      	b.n	8005bb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	f003 020f 	and.w	r2, r3, #15
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fbad 	bl	8006288 <USBD_CtlError>
                  break;
 8005b2e:	e041      	b.n	8005bb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da0b      	bge.n	8005b50 <USBD_StdEPReq+0x23e>
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3310      	adds	r3, #16
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	e00b      	b.n	8005b68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <USBD_StdEPReq+0x264>
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	2b80      	cmp	r3, #128	@ 0x80
 8005b74:	d103      	bne.n	8005b7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e00e      	b.n	8005b9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 ffae 	bl	8006ae4 <USBD_LL_IsStallEP>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e002      	b.n	8005b9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fbe1 	bl	800636a <USBD_CtlSendData>
              break;
 8005ba8:	e004      	b.n	8005bb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fb6b 	bl	8006288 <USBD_CtlError>
              break;
 8005bb2:	bf00      	nop
          }
          break;
 8005bb4:	e004      	b.n	8005bc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fb65 	bl	8006288 <USBD_CtlError>
          break;
 8005bbe:	bf00      	nop
      }
      break;
 8005bc0:	e004      	b.n	8005bcc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb5f 	bl	8006288 <USBD_CtlError>
      break;
 8005bca:	bf00      	nop
  }

  return ret;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	885b      	ldrh	r3, [r3, #2]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	2b0e      	cmp	r3, #14
 8005bfa:	f200 8152 	bhi.w	8005ea2 <USBD_GetDescriptor+0x2ca>
 8005bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <USBD_GetDescriptor+0x2c>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c75 	.word	0x08005c75
 8005c08:	08005c8d 	.word	0x08005c8d
 8005c0c:	08005ccd 	.word	0x08005ccd
 8005c10:	08005ea3 	.word	0x08005ea3
 8005c14:	08005ea3 	.word	0x08005ea3
 8005c18:	08005e43 	.word	0x08005e43
 8005c1c:	08005e6f 	.word	0x08005e6f
 8005c20:	08005ea3 	.word	0x08005ea3
 8005c24:	08005ea3 	.word	0x08005ea3
 8005c28:	08005ea3 	.word	0x08005ea3
 8005c2c:	08005ea3 	.word	0x08005ea3
 8005c30:	08005ea3 	.word	0x08005ea3
 8005c34:	08005ea3 	.word	0x08005ea3
 8005c38:	08005ea3 	.word	0x08005ea3
 8005c3c:	08005c41 	.word	0x08005c41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	7c12      	ldrb	r2, [r2, #16]
 8005c58:	f107 0108 	add.w	r1, r7, #8
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
 8005c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c62:	e126      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb0e 	bl	8006288 <USBD_CtlError>
        err++;
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	72fb      	strb	r3, [r7, #11]
      break;
 8005c72:	e11e      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	7c12      	ldrb	r2, [r2, #16]
 8005c80:	f107 0108 	add.w	r1, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
      break;
 8005c8a:	e112      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7c1b      	ldrb	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10d      	bne.n	8005cb0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	f107 0208 	add.w	r2, r7, #8
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cae:	e100      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	f107 0208 	add.w	r2, r7, #8
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	701a      	strb	r2, [r3, #0]
      break;
 8005cca:	e0f2      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	885b      	ldrh	r3, [r3, #2]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	f200 80ac 	bhi.w	8005e30 <USBD_GetDescriptor+0x258>
 8005cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce0 <USBD_GetDescriptor+0x108>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d61 	.word	0x08005d61
 8005cec:	08005d95 	.word	0x08005d95
 8005cf0:	08005dc9 	.word	0x08005dc9
 8005cf4:	08005dfd 	.word	0x08005dfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	7c12      	ldrb	r2, [r2, #16]
 8005d10:	f107 0108 	add.w	r1, r7, #8
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d1a:	e091      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fab2 	bl	8006288 <USBD_CtlError>
            err++;
 8005d24:	7afb      	ldrb	r3, [r7, #11]
 8005d26:	3301      	adds	r3, #1
 8005d28:	72fb      	strb	r3, [r7, #11]
          break;
 8005d2a:	e089      	b.n	8005e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	7c12      	ldrb	r2, [r2, #16]
 8005d44:	f107 0108 	add.w	r1, r7, #8
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
 8005d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d4e:	e077      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa98 	bl	8006288 <USBD_CtlError>
            err++;
 8005d58:	7afb      	ldrb	r3, [r7, #11]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d5e:	e06f      	b.n	8005e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	7c12      	ldrb	r2, [r2, #16]
 8005d78:	f107 0108 	add.w	r1, r7, #8
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3
 8005d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d82:	e05d      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa7e 	bl	8006288 <USBD_CtlError>
            err++;
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	72fb      	strb	r3, [r7, #11]
          break;
 8005d92:	e055      	b.n	8005e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	7c12      	ldrb	r2, [r2, #16]
 8005dac:	f107 0108 	add.w	r1, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db6:	e043      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa64 	bl	8006288 <USBD_CtlError>
            err++;
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc6:	e03b      	b.n	8005e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	7c12      	ldrb	r2, [r2, #16]
 8005de0:	f107 0108 	add.w	r1, r7, #8
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dea:	e029      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa4a 	bl	8006288 <USBD_CtlError>
            err++;
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	3301      	adds	r3, #1
 8005df8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dfa:	e021      	b.n	8005e40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	7c12      	ldrb	r2, [r2, #16]
 8005e14:	f107 0108 	add.w	r1, r7, #8
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1e:	e00f      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa30 	bl	8006288 <USBD_CtlError>
            err++;
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2e:	e007      	b.n	8005e40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa28 	bl	8006288 <USBD_CtlError>
          err++;
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005e3e:	bf00      	nop
      }
      break;
 8005e40:	e037      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7c1b      	ldrb	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e52:	f107 0208 	add.w	r2, r7, #8
 8005e56:	4610      	mov	r0, r2
 8005e58:	4798      	blx	r3
 8005e5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e5c:	e029      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa11 	bl	8006288 <USBD_CtlError>
        err++;
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e6c:	e021      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7c1b      	ldrb	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	f107 0208 	add.w	r2, r7, #8
 8005e82:	4610      	mov	r0, r2
 8005e84:	4798      	blx	r3
 8005e86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e90:	e00f      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9f7 	bl	8006288 <USBD_CtlError>
        err++;
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8005ea0:	e007      	b.n	8005eb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f9ef 	bl	8006288 <USBD_CtlError>
      err++;
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	3301      	adds	r3, #1
 8005eae:	72fb      	strb	r3, [r7, #11]
      break;
 8005eb0:	bf00      	nop
  }

  if (err != 0U)
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11e      	bne.n	8005ef6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	88db      	ldrh	r3, [r3, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d016      	beq.n	8005eee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005ec0:	893b      	ldrh	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00e      	beq.n	8005ee4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	88da      	ldrh	r2, [r3, #6]
 8005eca:	893b      	ldrh	r3, [r7, #8]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	bf28      	it	cs
 8005ed0:	4613      	movcs	r3, r2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ed6:	893b      	ldrh	r3, [r7, #8]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fa44 	bl	800636a <USBD_CtlSendData>
 8005ee2:	e009      	b.n	8005ef8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9ce 	bl	8006288 <USBD_CtlError>
 8005eec:	e004      	b.n	8005ef8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa95 	bl	800641e <USBD_CtlSendStatus>
 8005ef4:	e000      	b.n	8005ef8 <USBD_GetDescriptor+0x320>
    return;
 8005ef6:	bf00      	nop
  }
}
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop

08005f00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	889b      	ldrh	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d131      	bne.n	8005f76 <USBD_SetAddress+0x76>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	88db      	ldrh	r3, [r3, #6]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d12d      	bne.n	8005f76 <USBD_SetAddress+0x76>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	885b      	ldrh	r3, [r3, #2]
 8005f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f20:	d829      	bhi.n	8005f76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d104      	bne.n	8005f44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9a3 	bl	8006288 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	e01d      	b.n	8005f80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fdf3 	bl	8006b3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa61 	bl	800641e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6a:	e009      	b.n	8005f80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f74:	e004      	b.n	8005f80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f985 	bl	8006288 <USBD_CtlError>
  }
}
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	885b      	ldrh	r3, [r3, #2]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80060d0 <USBD_SetConfig+0x148>)
 8005f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80060d0 <USBD_SetConfig+0x148>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d905      	bls.n	8005fb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f96c 	bl	8006288 <USBD_CtlError>
    return USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e088      	b.n	80060c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d002      	beq.n	8005fc6 <USBD_SetConfig+0x3e>
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d025      	beq.n	8006010 <USBD_SetConfig+0x88>
 8005fc4:	e071      	b.n	80060aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fc6:	4b42      	ldr	r3, [pc, #264]	@ (80060d0 <USBD_SetConfig+0x148>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01c      	beq.n	8006008 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005fce:	4b40      	ldr	r3, [pc, #256]	@ (80060d0 <USBD_SetConfig+0x148>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80060d0 <USBD_SetConfig+0x148>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff f991 	bl	8005306 <USBD_SetClassConfig>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f949 	bl	8006288 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ff6:	e065      	b.n	80060c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fa10 	bl	800641e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2203      	movs	r2, #3
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006006:	e05d      	b.n	80060c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fa08 	bl	800641e <USBD_CtlSendStatus>
      break;
 800600e:	e059      	b.n	80060c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006010:	4b2f      	ldr	r3, [pc, #188]	@ (80060d0 <USBD_SetConfig+0x148>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d112      	bne.n	800603e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006020:	4b2b      	ldr	r3, [pc, #172]	@ (80060d0 <USBD_SetConfig+0x148>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800602a:	4b29      	ldr	r3, [pc, #164]	@ (80060d0 <USBD_SetConfig+0x148>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff f984 	bl	800533e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9f1 	bl	800641e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800603c:	e042      	b.n	80060c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800603e:	4b24      	ldr	r3, [pc, #144]	@ (80060d0 <USBD_SetConfig+0x148>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	429a      	cmp	r2, r3
 800604a:	d02a      	beq.n	80060a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff f972 	bl	800533e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800605a:	4b1d      	ldr	r3, [pc, #116]	@ (80060d0 <USBD_SetConfig+0x148>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006064:	4b1a      	ldr	r3, [pc, #104]	@ (80060d0 <USBD_SetConfig+0x148>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff f94b 	bl	8005306 <USBD_SetClassConfig>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f903 	bl	8006288 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff f957 	bl	800533e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006098:	e014      	b.n	80060c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9bf 	bl	800641e <USBD_CtlSendStatus>
      break;
 80060a0:	e010      	b.n	80060c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9bb 	bl	800641e <USBD_CtlSendStatus>
      break;
 80060a8:	e00c      	b.n	80060c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8eb 	bl	8006288 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060b2:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <USBD_SetConfig+0x148>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff f940 	bl	800533e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060be:	2303      	movs	r3, #3
 80060c0:	73fb      	strb	r3, [r7, #15]
      break;
 80060c2:	bf00      	nop
  }

  return ret;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200001b0 	.word	0x200001b0

080060d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d004      	beq.n	80060f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8cd 	bl	8006288 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060ee:	e023      	b.n	8006138 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	dc02      	bgt.n	8006102 <USBD_GetConfig+0x2e>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	dc03      	bgt.n	8006108 <USBD_GetConfig+0x34>
 8006100:	e015      	b.n	800612e <USBD_GetConfig+0x5a>
 8006102:	2b03      	cmp	r3, #3
 8006104:	d00b      	beq.n	800611e <USBD_GetConfig+0x4a>
 8006106:	e012      	b.n	800612e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3308      	adds	r3, #8
 8006112:	2201      	movs	r2, #1
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f927 	bl	800636a <USBD_CtlSendData>
        break;
 800611c:	e00c      	b.n	8006138 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	2201      	movs	r2, #1
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f91f 	bl	800636a <USBD_CtlSendData>
        break;
 800612c:	e004      	b.n	8006138 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8a9 	bl	8006288 <USBD_CtlError>
        break;
 8006136:	bf00      	nop
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006150:	b2db      	uxtb	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	2b02      	cmp	r3, #2
 8006156:	d81e      	bhi.n	8006196 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	88db      	ldrh	r3, [r3, #6]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d004      	beq.n	800616a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f890 	bl	8006288 <USBD_CtlError>
        break;
 8006168:	e01a      	b.n	80061a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f043 0202 	orr.w	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	330c      	adds	r3, #12
 800618a:	2202      	movs	r2, #2
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f8eb 	bl	800636a <USBD_CtlSendData>
      break;
 8006194:	e004      	b.n	80061a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f875 	bl	8006288 <USBD_CtlError>
      break;
 800619e:	bf00      	nop
  }
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d106      	bne.n	80061c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f92b 	bl	800641e <USBD_CtlSendStatus>
  }
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d80b      	bhi.n	8006200 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	885b      	ldrh	r3, [r3, #2]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10c      	bne.n	800620a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f910 	bl	800641e <USBD_CtlSendStatus>
      }
      break;
 80061fe:	e004      	b.n	800620a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f840 	bl	8006288 <USBD_CtlError>
      break;
 8006208:	e000      	b.n	800620c <USBD_ClrFeature+0x3c>
      break;
 800620a:	bf00      	nop
  }
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3301      	adds	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff fa91 	bl	8005766 <SWAPBYTE>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff fa84 	bl	8005766 <SWAPBYTE>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fa77 	bl	8005766 <SWAPBYTE>
 8006278:	4603      	mov	r3, r0
 800627a:	461a      	mov	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	80da      	strh	r2, [r3, #6]
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006292:	2180      	movs	r1, #128	@ 0x80
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fbe7 	bl	8006a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800629a:	2100      	movs	r1, #0
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fbe3 	bl	8006a68 <USBD_LL_StallEP>
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d036      	beq.n	800632e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062c4:	6938      	ldr	r0, [r7, #16]
 80062c6:	f000 f836 	bl	8006336 <USBD_GetLen>
 80062ca:	4603      	mov	r3, r0
 80062cc:	3301      	adds	r3, #1
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	3301      	adds	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4413      	add	r3, r2
 80062f0:	2203      	movs	r2, #3
 80062f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	3301      	adds	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80062fa:	e013      	b.n	8006324 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	3301      	adds	r3, #1
 800630c:	613b      	str	r3, [r7, #16]
    idx++;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	3301      	adds	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4413      	add	r3, r2
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
    idx++;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	3301      	adds	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e7      	bne.n	80062fc <USBD_GetString+0x52>
 800632c:	e000      	b.n	8006330 <USBD_GetString+0x86>
    return;
 800632e:	bf00      	nop
  }
}
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006346:	e005      	b.n	8006354 <USBD_GetLen+0x1e>
  {
    len++;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	3301      	adds	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	3301      	adds	r3, #1
 8006352:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f5      	bne.n	8006348 <USBD_GetLen+0x12>
  }

  return len;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2202      	movs	r2, #2
 800637a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	2100      	movs	r1, #0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fbf2 	bl	8006b7a <USBD_LL_Transmit>

  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	2100      	movs	r1, #0
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fbe1 	bl	8006b7a <USBD_LL_Transmit>

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2203      	movs	r2, #3
 80063d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	2100      	movs	r1, #0
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fbe5 	bl	8006bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	2100      	movs	r1, #0
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fbd4 	bl	8006bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2204      	movs	r2, #4
 800642a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800642e:	2300      	movs	r3, #0
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fba0 	bl	8006b7a <USBD_LL_Transmit>

  return USBD_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2205      	movs	r2, #5
 8006450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006454:	2300      	movs	r3, #0
 8006456:	2200      	movs	r2, #0
 8006458:	2100      	movs	r1, #0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fbae 	bl	8006bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CUSTOM_HID_Desc, DEVICE_FS) != USBD_OK) {
 8006470:	2200      	movs	r2, #0
 8006472:	4912      	ldr	r1, [pc, #72]	@ (80064bc <MX_USB_Device_Init+0x50>)
 8006474:	4812      	ldr	r0, [pc, #72]	@ (80064c0 <MX_USB_Device_Init+0x54>)
 8006476:	f7fe fed8 	bl	800522a <USBD_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8006480:	f7f9 ff46 	bl	8000310 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK) {
 8006484:	490f      	ldr	r1, [pc, #60]	@ (80064c4 <MX_USB_Device_Init+0x58>)
 8006486:	480e      	ldr	r0, [pc, #56]	@ (80064c0 <MX_USB_Device_Init+0x54>)
 8006488:	f7fe feff 	bl	800528a <USBD_RegisterClass>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8006492:	f7f9 ff3d 	bl	8000310 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK) {
 8006496:	490c      	ldr	r1, [pc, #48]	@ (80064c8 <MX_USB_Device_Init+0x5c>)
 8006498:	4809      	ldr	r0, [pc, #36]	@ (80064c0 <MX_USB_Device_Init+0x54>)
 800649a:	f7fe feb1 	bl	8005200 <USBD_CUSTOM_HID_RegisterInterface>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80064a4:	f7f9 ff34 	bl	8000310 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80064a8:	4805      	ldr	r0, [pc, #20]	@ (80064c0 <MX_USB_Device_Init+0x54>)
 80064aa:	f7fe ff15 	bl	80052d8 <USBD_Start>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80064b4:	f7f9 ff2c 	bl	8000310 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	2000013c 	.word	0x2000013c
 80064c0:	200001b4 	.word	0x200001b4
 80064c4:	2000000c 	.word	0x2000000c
 80064c8:	2000012c 	.word	0x2000012c

080064cc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80064d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80064e0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	460a      	mov	r2, r1
 80064f6:	71fb      	strb	r3, [r7, #7]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80064fc:	4803      	ldr	r0, [pc, #12]	@ (800650c <CUSTOM_HID_OutEvent_FS+0x20>)
 80064fe:	f7fe fe31 	bl	8005164 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8006502:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200001b4 	.word	0x200001b4

08006510 <USBD_CUSTOM_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CUSTOM_HID_DeviceDesc);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2212      	movs	r2, #18
 8006520:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceDesc;
 8006522:	4b03      	ldr	r3, [pc, #12]	@ (8006530 <USBD_CUSTOM_HID_DeviceDescriptor+0x20>)
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	2000015c 	.word	0x2000015c

08006534 <USBD_CUSTOM_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	6039      	str	r1, [r7, #0]
 800653e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2204      	movs	r2, #4
 8006544:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006546:	4b03      	ldr	r3, [pc, #12]	@ (8006554 <USBD_CUSTOM_HID_LangIDStrDescriptor+0x20>)
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000170 	.word	0x20000170

08006558 <USBD_CUSTOM_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <USBD_CUSTOM_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4907      	ldr	r1, [pc, #28]	@ (800658c <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
 800656e:	4808      	ldr	r0, [pc, #32]	@ (8006590 <USBD_CUSTOM_HID_ProductStrDescriptor+0x38>)
 8006570:	f7ff fe9b 	bl	80062aa <USBD_GetString>
 8006574:	e004      	b.n	8006580 <USBD_CUSTOM_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	4904      	ldr	r1, [pc, #16]	@ (800658c <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
 800657a:	4805      	ldr	r0, [pc, #20]	@ (8006590 <USBD_CUSTOM_HID_ProductStrDescriptor+0x38>)
 800657c:	f7ff fe95 	bl	80062aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006580:	4b02      	ldr	r3, [pc, #8]	@ (800658c <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000484 	.word	0x20000484
 8006590:	08006d70 	.word	0x08006d70

08006594 <USBD_CUSTOM_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	6039      	str	r1, [r7, #0]
 800659e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	4904      	ldr	r1, [pc, #16]	@ (80065b4 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x20>)
 80065a4:	4804      	ldr	r0, [pc, #16]	@ (80065b8 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x24>)
 80065a6:	f7ff fe80 	bl	80062aa <USBD_GetString>
  return USBD_StrDesc;
 80065aa:	4b02      	ldr	r3, [pc, #8]	@ (80065b4 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x20>)
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000484 	.word	0x20000484
 80065b8:	08006d90 	.word	0x08006d90

080065bc <USBD_CUSTOM_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	6039      	str	r1, [r7, #0]
 80065c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	221a      	movs	r2, #26
 80065cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065ce:	f000 f843 	bl	8006658 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CUSTOM_HID_SerialStrDescriptor */

  /* USER CODE END USBD_CUSTOM_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80065d2:	4b02      	ldr	r3, [pc, #8]	@ (80065dc <USBD_CUSTOM_HID_SerialStrDescriptor+0x20>)
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000174 	.word	0x20000174

080065e0 <USBD_CUSTOM_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	6039      	str	r1, [r7, #0]
 80065ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <USBD_CUSTOM_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	4907      	ldr	r1, [pc, #28]	@ (8006614 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
 80065f6:	4808      	ldr	r0, [pc, #32]	@ (8006618 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x38>)
 80065f8:	f7ff fe57 	bl	80062aa <USBD_GetString>
 80065fc:	e004      	b.n	8006608 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4904      	ldr	r1, [pc, #16]	@ (8006614 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
 8006602:	4805      	ldr	r0, [pc, #20]	@ (8006618 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x38>)
 8006604:	f7ff fe51 	bl	80062aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006608:	4b02      	ldr	r3, [pc, #8]	@ (8006614 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000484 	.word	0x20000484
 8006618:	08006da4 	.word	0x08006da4

0800661c <USBD_CUSTOM_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	6039      	str	r1, [r7, #0]
 8006626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d105      	bne.n	800663a <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4907      	ldr	r1, [pc, #28]	@ (8006650 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
 8006632:	4808      	ldr	r0, [pc, #32]	@ (8006654 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x38>)
 8006634:	f7ff fe39 	bl	80062aa <USBD_GetString>
 8006638:	e004      	b.n	8006644 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	4904      	ldr	r1, [pc, #16]	@ (8006650 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
 800663e:	4805      	ldr	r0, [pc, #20]	@ (8006654 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x38>)
 8006640:	f7ff fe33 	bl	80062aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006644:	4b02      	ldr	r3, [pc, #8]	@ (8006650 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000484 	.word	0x20000484
 8006654:	08006db8 	.word	0x08006db8

08006658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800665e:	4b0f      	ldr	r3, [pc, #60]	@ (800669c <Get_SerialNum+0x44>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006664:	4b0e      	ldr	r3, [pc, #56]	@ (80066a0 <Get_SerialNum+0x48>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800666a:	4b0e      	ldr	r3, [pc, #56]	@ (80066a4 <Get_SerialNum+0x4c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800667e:	2208      	movs	r2, #8
 8006680:	4909      	ldr	r1, [pc, #36]	@ (80066a8 <Get_SerialNum+0x50>)
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f814 	bl	80066b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006688:	2204      	movs	r2, #4
 800668a:	4908      	ldr	r1, [pc, #32]	@ (80066ac <Get_SerialNum+0x54>)
 800668c:	68b8      	ldr	r0, [r7, #8]
 800668e:	f000 f80f 	bl	80066b0 <IntToUnicode>
  }
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	1fff7590 	.word	0x1fff7590
 80066a0:	1fff7594 	.word	0x1fff7594
 80066a4:	1fff7598 	.word	0x1fff7598
 80066a8:	20000176 	.word	0x20000176
 80066ac:	20000186 	.word	0x20000186

080066b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]
 80066c6:	e027      	b.n	8006718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	0f1b      	lsrs	r3, r3, #28
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d80b      	bhi.n	80066e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0f1b      	lsrs	r3, r3, #28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4619      	mov	r1, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	440b      	add	r3, r1
 80066e0:	3230      	adds	r2, #48	@ 0x30
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	e00a      	b.n	80066fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	0f1b      	lsrs	r3, r3, #28
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4619      	mov	r1, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	440b      	add	r3, r1
 80066f8:	3237      	adds	r2, #55	@ 0x37
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	3301      	adds	r3, #1
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	3301      	adds	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
 8006718:	7dfa      	ldrb	r2, [r7, #23]
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d3d3      	bcc.n	80066c8 <IntToUnicode+0x18>
  }
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b094      	sub	sp, #80	@ 0x50
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	2244      	movs	r2, #68	@ 0x44
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fadd 	bl	8006d00 <memset>
  if(pcdHandle->Instance==USB)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a15      	ldr	r2, [pc, #84]	@ (80067a0 <HAL_PCD_MspInit+0x70>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d123      	bne.n	8006798 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006754:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8006756:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800675a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	4618      	mov	r0, r3
 8006762:	f7fc fa87 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800676c:	f7f9 fdd0 	bl	8000310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006770:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <HAL_PCD_MspInit+0x74>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006774:	4a0b      	ldr	r2, [pc, #44]	@ (80067a4 <HAL_PCD_MspInit+0x74>)
 8006776:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800677a:	6593      	str	r3, [r2, #88]	@ 0x58
 800677c:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <HAL_PCD_MspInit+0x74>)
 800677e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8006788:	2200      	movs	r2, #0
 800678a:	2100      	movs	r1, #0
 800678c:	2014      	movs	r0, #20
 800678e:	f7f9 ffaa 	bl	80006e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8006792:	2014      	movs	r0, #20
 8006794:	f7f9 ffc1 	bl	800071a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006798:	bf00      	nop
 800679a:	3750      	adds	r7, #80	@ 0x50
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40005c00 	.word	0x40005c00
 80067a4:	40021000 	.word	0x40021000

080067a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f7fe fdd5 	bl	800536e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f7fe fe0f 	bl	8005418 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	440b      	add	r3, r1
 8006822:	3324      	adds	r3, #36	@ 0x24
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	4619      	mov	r1, r3
 800682a:	f7fe fe58 	bl	80054de <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe ff6c 	bl	8005722 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	795b      	ldrb	r3, [r3, #5]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d001      	beq.n	800686a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006866:	f7f9 fd53 	bl	8000310 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006870:	7bfa      	ldrb	r2, [r7, #15]
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe ff16 	bl	80056a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe fec2 	bl	800560a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe ff11 	bl	80056c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7a5b      	ldrb	r3, [r3, #9]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068ac:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <HAL_PCD_SuspendCallback+0x30>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	4a03      	ldr	r2, [pc, #12]	@ (80068c0 <HAL_PCD_SuspendCallback+0x30>)
 80068b2:	f043 0306 	orr.w	r3, r3, #6
 80068b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	e000ed00 	.word	0xe000ed00

080068c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	7a5b      	ldrb	r3, [r3, #9]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068d4:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <HAL_PCD_ResumeCallback+0x34>)
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	4a07      	ldr	r2, [pc, #28]	@ (80068f8 <HAL_PCD_ResumeCallback+0x34>)
 80068da:	f023 0306 	bic.w	r3, r3, #6
 80068de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80068e0:	f000 f9dc 	bl	8006c9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe ff01 	bl	80056f2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed00 	.word	0xe000ed00

080068fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8006904:	4a26      	ldr	r2, [pc, #152]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a24      	ldr	r2, [pc, #144]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006910:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8006914:	4b22      	ldr	r3, [pc, #136]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006916:	4a23      	ldr	r2, [pc, #140]	@ (80069a4 <USBD_LL_Init+0xa8>)
 8006918:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800691a:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <USBD_LL_Init+0xa4>)
 800691c:	2208      	movs	r2, #8
 800691e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006920:	4b1f      	ldr	r3, [pc, #124]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006922:	2202      	movs	r2, #2
 8006924:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006926:	4b1e      	ldr	r3, [pc, #120]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006928:	2202      	movs	r2, #2
 800692a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800692c:	4b1c      	ldr	r3, [pc, #112]	@ (80069a0 <USBD_LL_Init+0xa4>)
 800692e:	2200      	movs	r2, #0
 8006930:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006932:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006934:	2200      	movs	r2, #0
 8006936:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006938:	4b19      	ldr	r3, [pc, #100]	@ (80069a0 <USBD_LL_Init+0xa4>)
 800693a:	2200      	movs	r2, #0
 800693c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800693e:	4b18      	ldr	r3, [pc, #96]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006940:	2200      	movs	r2, #0
 8006942:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006944:	4816      	ldr	r0, [pc, #88]	@ (80069a0 <USBD_LL_Init+0xa4>)
 8006946:	f7f9 ff02 	bl	800074e <HAL_PCD_Init>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8006950:	f7f9 fcde 	bl	8000310 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800695a:	2318      	movs	r3, #24
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	f7fb fb71 	bl	8002046 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800696a:	2358      	movs	r3, #88	@ 0x58
 800696c:	2200      	movs	r2, #0
 800696e:	2180      	movs	r1, #128	@ 0x80
 8006970:	f7fb fb69 	bl	8002046 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800697a:	2398      	movs	r3, #152	@ 0x98
 800697c:	2200      	movs	r2, #0
 800697e:	2181      	movs	r1, #129	@ 0x81
 8006980:	f7fb fb61 	bl	8002046 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800698a:	23d8      	movs	r3, #216	@ 0xd8
 800698c:	2200      	movs	r2, #0
 800698e:	2101      	movs	r1, #1
 8006990:	f7fb fb59 	bl	8002046 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000684 	.word	0x20000684
 80069a4:	40005c00 	.word	0x40005c00

080069a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7f9 ff93 	bl	80008ea <HAL_PCD_Start>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 f96c 	bl	8006ca8 <USBD_Get_USB_Status>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	4608      	mov	r0, r1
 80069e8:	4611      	mov	r1, r2
 80069ea:	461a      	mov	r2, r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	70fb      	strb	r3, [r7, #3]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70bb      	strb	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8006a06:	78bb      	ldrb	r3, [r7, #2]
 8006a08:	883a      	ldrh	r2, [r7, #0]
 8006a0a:	78f9      	ldrb	r1, [r7, #3]
 8006a0c:	f7fa f8da 	bl	8000bc4 <HAL_PCD_EP_Open>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f946 	bl	8006ca8 <USBD_Get_USB_Status>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fa f91a 	bl	8000c82 <HAL_PCD_EP_Close>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f927 	bl	8006ca8 <USBD_Get_USB_Status>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fa f9ab 	bl	8000de2 <HAL_PCD_EP_SetStall>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f908 	bl	8006ca8 <USBD_Get_USB_Status>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fa f9de 	bl	8000e86 <HAL_PCD_EP_ClrStall>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f8e9 	bl	8006ca8 <USBD_Get_USB_Status>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006af6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da0b      	bge.n	8006b18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	440b      	add	r3, r1
 8006b12:	3312      	adds	r3, #18
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	e00b      	b.n	8006b30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	440b      	add	r3, r1
 8006b2a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8006b2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fa f80e 	bl	8000b7c <HAL_PCD_SetAddress>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f89e 	bl	8006ca8 <USBD_Get_USB_Status>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	460b      	mov	r3, r1
 8006b88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8006b98:	7af9      	ldrb	r1, [r7, #11]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	f7fa f8e9 	bl	8000d74 <HAL_PCD_EP_Transmit>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f87d 	bl	8006ca8 <USBD_Get_USB_Status>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8006bda:	7af9      	ldrb	r1, [r7, #11]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	f7fa f897 	bl	8000d12 <HAL_PCD_EP_Receive>
 8006be4:	4603      	mov	r3, r0
 8006be6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 f85c 	bl	8006ca8 <USBD_Get_USB_Status>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_PCDEx_LPM_Callback+0x18>
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d013      	beq.n	8006c3e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8006c16:	e023      	b.n	8006c60 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	7a5b      	ldrb	r3, [r3, #9]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006c20:	f000 f83c 	bl	8006c9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c24:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <HAL_PCDEx_LPM_Callback+0x68>)
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	4a0f      	ldr	r2, [pc, #60]	@ (8006c68 <HAL_PCDEx_LPM_Callback+0x68>)
 8006c2a:	f023 0306 	bic.w	r3, r3, #6
 8006c2e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fd5b 	bl	80056f2 <USBD_LL_Resume>
    break;
 8006c3c:	e010      	b.n	8006c60 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fd3e 	bl	80056c6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	7a5b      	ldrb	r3, [r3, #9]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c52:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <HAL_PCDEx_LPM_Callback+0x68>)
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	4a04      	ldr	r2, [pc, #16]	@ (8006c68 <HAL_PCDEx_LPM_Callback+0x68>)
 8006c58:	f043 0306 	orr.w	r3, r3, #6
 8006c5c:	6113      	str	r3, [r2, #16]
    break;
 8006c5e:	bf00      	nop
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006c74:	4b03      	ldr	r3, [pc, #12]	@ (8006c84 <USBD_static_malloc+0x18>)
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000960 	.word	0x20000960

08006c88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]

}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006ca0:	f7f9 fac6 	bl	8000230 <SystemClock_Config>
}
 8006ca4:	bf00      	nop
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d817      	bhi.n	8006cec <USBD_Get_USB_Status+0x44>
 8006cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <USBD_Get_USB_Status+0x1c>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006cdb 	.word	0x08006cdb
 8006ccc:	08006ce1 	.word	0x08006ce1
 8006cd0:	08006ce7 	.word	0x08006ce7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd8:	e00b      	b.n	8006cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8006cde:	e008      	b.n	8006cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce4:	e005      	b.n	8006cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8006cea:	e002      	b.n	8006cf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf0:	bf00      	nop
  }
  return usb_status;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <memset>:
 8006d00:	4402      	add	r2, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4d0d      	ldr	r5, [pc, #52]	@ (8006d48 <__libc_init_array+0x38>)
 8006d14:	4c0d      	ldr	r4, [pc, #52]	@ (8006d4c <__libc_init_array+0x3c>)
 8006d16:	1b64      	subs	r4, r4, r5
 8006d18:	10a4      	asrs	r4, r4, #2
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	4d0b      	ldr	r5, [pc, #44]	@ (8006d50 <__libc_init_array+0x40>)
 8006d22:	4c0c      	ldr	r4, [pc, #48]	@ (8006d54 <__libc_init_array+0x44>)
 8006d24:	f000 f818 	bl	8006d58 <_init>
 8006d28:	1b64      	subs	r4, r4, r5
 8006d2a:	10a4      	asrs	r4, r4, #2
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d38:	4798      	blx	r3
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d42:	4798      	blx	r3
 8006d44:	3601      	adds	r6, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	08006de0 	.word	0x08006de0
 8006d4c:	08006de0 	.word	0x08006de0
 8006d50:	08006de0 	.word	0x08006de0
 8006d54:	08006de4 	.word	0x08006de4

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	bf00      	nop
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
