
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002704  08002704  00003704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002778  08002778  00004974  2**0
                  CONTENTS
  4 .ARM          00000000  08002778  08002778  00004974  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002778  08002778  00004974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002778  08002778  00003778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800277c  0800277c  0000377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000974  20000000  08002780  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010cc  20000974  080030f4  00004974  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a40  080030f4  00004a40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004974  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071b9  00000000  00000000  0000499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4d  00000000  00000000  0000bb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0000d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000612  00000000  00000000  0000ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a80  00000000  00000000  0000e3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5d7  00000000  00000000  00025e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820f3  00000000  00000000  00032429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b451c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f4c  00000000  00000000  000b4560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b64ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000974 	.word	0x20000974
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ec 	.word	0x080026ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000978 	.word	0x20000978
 8000148:	080026ec 	.word	0x080026ec

0800014c <OLED_WriteCommand>:
uint8_t dataBuf1[8][129]={0};
uint8_t dataBuf2[8][129]={0};
uint8_t CommandBuffer[2]={0x00};

void OLED_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	CommandBuffer[1]=cmd;
 8000156:	4a08      	ldr	r2, [pc, #32]	@ (8000178 <OLED_WriteCommand+0x2c>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, CommandBuffer, 2, HAL_MAX_DELAY);
 800015c:	f04f 33ff 	mov.w	r3, #4294967295
 8000160:	9300      	str	r3, [sp, #0]
 8000162:	2302      	movs	r3, #2
 8000164:	4a04      	ldr	r2, [pc, #16]	@ (8000178 <OLED_WriteCommand+0x2c>)
 8000166:	2178      	movs	r1, #120	@ 0x78
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <OLED_WriteCommand+0x30>)
 800016a:	f001 fb21 	bl	80017b0 <HAL_I2C_Master_Transmit>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	200019a0 	.word	0x200019a0
 800017c:	200019a4 	.word	0x200019a4

08000180 <OLED_SetCursor>:
	sendBuffer[1]=dat;
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
}

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4618      	mov	r0, r3
 800019a:	f7ff ffd7 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	f043 0310 	orr.w	r3, r3, #16
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	4618      	mov	r0, r3
 80001ac:	f7ff ffce 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	4618      	mov	r0, r3
 80001ba:	f7ff ffc7 	bl	800014c <OLED_WriteCommand>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
	...

080001c8 <OLED_init>:

void OLED_init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80001ce:	2064      	movs	r0, #100	@ 0x64
 80001d0:	f000 fd94 	bl	8000cfc <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 80001d4:	20ae      	movs	r0, #174	@ 0xae
 80001d6:	f7ff ffb9 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80001da:	20d5      	movs	r0, #213	@ 0xd5
 80001dc:	f7ff ffb6 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 80001e0:	2080      	movs	r0, #128	@ 0x80
 80001e2:	f7ff ffb3 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 80001e6:	20a8      	movs	r0, #168	@ 0xa8
 80001e8:	f7ff ffb0 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 80001ec:	203f      	movs	r0, #63	@ 0x3f
 80001ee:	f7ff ffad 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 80001f2:	20d3      	movs	r0, #211	@ 0xd3
 80001f4:	f7ff ffaa 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 80001f8:	2000      	movs	r0, #0
 80001fa:	f7ff ffa7 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 80001fe:	2040      	movs	r0, #64	@ 0x40
 8000200:	f7ff ffa4 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000204:	20a1      	movs	r0, #161	@ 0xa1
 8000206:	f7ff ffa1 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800020a:	20c8      	movs	r0, #200	@ 0xc8
 800020c:	f7ff ff9e 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000210:	20da      	movs	r0, #218	@ 0xda
 8000212:	f7ff ff9b 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000216:	2012      	movs	r0, #18
 8000218:	f7ff ff98 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 800021c:	2081      	movs	r0, #129	@ 0x81
 800021e:	f7ff ff95 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8000222:	20cf      	movs	r0, #207	@ 0xcf
 8000224:	f7ff ff92 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8000228:	20d9      	movs	r0, #217	@ 0xd9
 800022a:	f7ff ff8f 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800022e:	20f1      	movs	r0, #241	@ 0xf1
 8000230:	f7ff ff8c 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000234:	20db      	movs	r0, #219	@ 0xdb
 8000236:	f7ff ff89 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800023a:	2030      	movs	r0, #48	@ 0x30
 800023c:	f7ff ff86 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000240:	20a4      	movs	r0, #164	@ 0xa4
 8000242:	f7ff ff83 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8000246:	20a6      	movs	r0, #166	@ 0xa6
 8000248:	f7ff ff80 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800024c:	208d      	movs	r0, #141	@ 0x8d
 800024e:	f7ff ff7d 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000252:	2014      	movs	r0, #20
 8000254:	f7ff ff7a 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000258:	20af      	movs	r0, #175	@ 0xaf
 800025a:	f7ff ff77 	bl	800014c <OLED_WriteCommand>
	OLED_chear();
 800025e:	f000 f823 	bl	80002a8 <OLED_chear>
	for (uint8_t i = 0; i < 8; ++i)
 8000262:	2300      	movs	r3, #0
 8000264:	71fb      	strb	r3, [r7, #7]
 8000266:	e012      	b.n	800028e <OLED_init+0xc6>
	{
		dataBuf1[i][0]=0x40;
 8000268:	79fa      	ldrb	r2, [r7, #7]
 800026a:	490d      	ldr	r1, [pc, #52]	@ (80002a0 <OLED_init+0xd8>)
 800026c:	4613      	mov	r3, r2
 800026e:	01db      	lsls	r3, r3, #7
 8000270:	4413      	add	r3, r2
 8000272:	440b      	add	r3, r1
 8000274:	2240      	movs	r2, #64	@ 0x40
 8000276:	701a      	strb	r2, [r3, #0]
		dataBuf2[i][0]=0x40;
 8000278:	79fa      	ldrb	r2, [r7, #7]
 800027a:	490a      	ldr	r1, [pc, #40]	@ (80002a4 <OLED_init+0xdc>)
 800027c:	4613      	mov	r3, r2
 800027e:	01db      	lsls	r3, r3, #7
 8000280:	4413      	add	r3, r2
 8000282:	440b      	add	r3, r1
 8000284:	2240      	movs	r2, #64	@ 0x40
 8000286:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; ++i)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	3301      	adds	r3, #1
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d9e9      	bls.n	8000268 <OLED_init+0xa0>
	}
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20001190 	.word	0x20001190
 80002a4:	20001598 	.word	0x20001598

080002a8 <OLED_chear>:

void OLED_chear(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e013      	b.n	80002dc <OLED_chear+0x34>
	{
//		OLED_SetCursor(i, 0);
		for (int j = 0; j < 128; ++j)
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	e00a      	b.n	80002d0 <OLED_chear+0x28>
		{
//			OLED_WriteData(0x00);
			DisplayBuf1[i][j] = 0x00;
 80002ba:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <OLED_chear+0x48>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	01db      	lsls	r3, r3, #7
 80002c0:	441a      	add	r2, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	4413      	add	r3, r2
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; ++j)
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80002d4:	ddf1      	ble.n	80002ba <OLED_chear+0x12>
	for (int i = 0; i < 8; ++i)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	dde8      	ble.n	80002b4 <OLED_chear+0xc>
		}
	}
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000990 	.word	0x20000990

080002f4 <OLED_updata>:

void OLED_updata()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 8; ++i)
 80002fa:	2300      	movs	r3, #0
 80002fc:	71fb      	strb	r3, [r7, #7]
 80002fe:	e020      	b.n	8000342 <OLED_updata+0x4e>
	{
		memcpy( (&dataBuf1[i][0])+1, DisplayBuf1[i], 128);
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	4613      	mov	r3, r2
 8000304:	01db      	lsls	r3, r3, #7
 8000306:	4413      	add	r3, r2
 8000308:	4a2f      	ldr	r2, [pc, #188]	@ (80003c8 <OLED_updata+0xd4>)
 800030a:	4413      	add	r3, r2
 800030c:	1c58      	adds	r0, r3, #1
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	01db      	lsls	r3, r3, #7
 8000312:	4a2e      	ldr	r2, [pc, #184]	@ (80003cc <OLED_updata+0xd8>)
 8000314:	4413      	add	r3, r2
 8000316:	2280      	movs	r2, #128	@ 0x80
 8000318:	4619      	mov	r1, r3
 800031a:	f002 f9d9 	bl	80026d0 <memcpy>
		memcpy( (&dataBuf2[i][0])+1, DisplayBuf2[i], 128);
 800031e:	79fa      	ldrb	r2, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	01db      	lsls	r3, r3, #7
 8000324:	4413      	add	r3, r2
 8000326:	4a2a      	ldr	r2, [pc, #168]	@ (80003d0 <OLED_updata+0xdc>)
 8000328:	4413      	add	r3, r2
 800032a:	1c58      	adds	r0, r3, #1
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	01db      	lsls	r3, r3, #7
 8000330:	4a28      	ldr	r2, [pc, #160]	@ (80003d4 <OLED_updata+0xe0>)
 8000332:	4413      	add	r3, r2
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	4619      	mov	r1, r3
 8000338:	f002 f9ca 	bl	80026d0 <memcpy>
	for (uint8_t i = 0; i < 8; ++i)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	3301      	adds	r3, #1
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d9db      	bls.n	8000300 <OLED_updata+0xc>
	}
	for (uint8_t i = 0; i < 8; ++i)
 8000348:	2300      	movs	r3, #0
 800034a:	71bb      	strb	r3, [r7, #6]
 800034c:	e034      	b.n	80003b8 <OLED_updata+0xc4>
	{
		if(memcmp(&dataBuf1[i][0],&dataBuf2[i][0],129) != 0)
 800034e:	79ba      	ldrb	r2, [r7, #6]
 8000350:	4613      	mov	r3, r2
 8000352:	01db      	lsls	r3, r3, #7
 8000354:	4413      	add	r3, r2
 8000356:	4a1c      	ldr	r2, [pc, #112]	@ (80003c8 <OLED_updata+0xd4>)
 8000358:	1898      	adds	r0, r3, r2
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	4613      	mov	r3, r2
 800035e:	01db      	lsls	r3, r3, #7
 8000360:	4413      	add	r3, r2
 8000362:	4a1b      	ldr	r2, [pc, #108]	@ (80003d0 <OLED_updata+0xdc>)
 8000364:	4413      	add	r3, r2
 8000366:	2281      	movs	r2, #129	@ 0x81
 8000368:	4619      	mov	r1, r3
 800036a:	f002 f975 	bl	8002658 <memcmp>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d01e      	beq.n	80003b2 <OLED_updata+0xbe>
		{
			OLED_SetCursor(i, 0);
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff01 	bl	8000180 <OLED_SetCursor>
			HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, &dataBuf1[i][0], 129, HAL_MAX_DELAY);
 800037e:	79ba      	ldrb	r2, [r7, #6]
 8000380:	4613      	mov	r3, r2
 8000382:	01db      	lsls	r3, r3, #7
 8000384:	4413      	add	r3, r2
 8000386:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <OLED_updata+0xd4>)
 8000388:	441a      	add	r2, r3
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2381      	movs	r3, #129	@ 0x81
 8000392:	2178      	movs	r1, #120	@ 0x78
 8000394:	4810      	ldr	r0, [pc, #64]	@ (80003d8 <OLED_updata+0xe4>)
 8000396:	f001 fa0b 	bl	80017b0 <HAL_I2C_Master_Transmit>
			memcpy(DisplayBuf2[i], DisplayBuf1[i], 128);
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <OLED_updata+0xe0>)
 80003a0:	1898      	adds	r0, r3, r2
 80003a2:	79bb      	ldrb	r3, [r7, #6]
 80003a4:	01db      	lsls	r3, r3, #7
 80003a6:	4a09      	ldr	r2, [pc, #36]	@ (80003cc <OLED_updata+0xd8>)
 80003a8:	4413      	add	r3, r2
 80003aa:	2280      	movs	r2, #128	@ 0x80
 80003ac:	4619      	mov	r1, r3
 80003ae:	f002 f98f 	bl	80026d0 <memcpy>
	for (uint8_t i = 0; i < 8; ++i)
 80003b2:	79bb      	ldrb	r3, [r7, #6]
 80003b4:	3301      	adds	r3, #1
 80003b6:	71bb      	strb	r3, [r7, #6]
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	2b07      	cmp	r3, #7
 80003bc:	d9c7      	bls.n	800034e <OLED_updata+0x5a>
		}
	}
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20001190 	.word	0x20001190
 80003cc:	20000990 	.word	0x20000990
 80003d0:	20001598 	.word	0x20001598
 80003d4:	20000d90 	.word	0x20000d90
 80003d8:	200019a4 	.word	0x200019a4

080003dc <OLED_reverse>:

void OLED_reverse(uint8_t X, uint8_t Y, uint8_t Width, uint8_t Height)
{
 80003dc:	b490      	push	{r4, r7}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4604      	mov	r4, r0
 80003e4:	4608      	mov	r0, r1
 80003e6:	4611      	mov	r1, r2
 80003e8:	461a      	mov	r2, r3
 80003ea:	4623      	mov	r3, r4
 80003ec:	71fb      	strb	r3, [r7, #7]
 80003ee:	4603      	mov	r3, r0
 80003f0:	71bb      	strb	r3, [r7, #6]
 80003f2:	460b      	mov	r3, r1
 80003f4:	717b      	strb	r3, [r7, #5]
 80003f6:	4613      	mov	r3, r2
 80003f8:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;

	if (X > 127) {return;}
 80003fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db4d      	blt.n	800049e <OLED_reverse+0xc2>
	if (Y > 63) {return;}
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	2b3f      	cmp	r3, #63	@ 0x3f
 8000406:	d84c      	bhi.n	80004a2 <OLED_reverse+0xc6>
	if (X + Width > 128) {Width = 128 - X;}
 8000408:	79fa      	ldrb	r2, [r7, #7]
 800040a:	797b      	ldrb	r3, [r7, #5]
 800040c:	4413      	add	r3, r2
 800040e:	2b80      	cmp	r3, #128	@ 0x80
 8000410:	dd06      	ble.n	8000420 <OLED_reverse+0x44>
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000418:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800041c:	3380      	adds	r3, #128	@ 0x80
 800041e:	717b      	strb	r3, [r7, #5]
	if (Y + Height > 64) {Height = 64 - Y;}
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	793b      	ldrb	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	2b40      	cmp	r3, #64	@ 0x40
 8000428:	dd03      	ble.n	8000432 <OLED_reverse+0x56>
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000430:	713b      	strb	r3, [r7, #4]

	for (j = Y; j < Y + Height; j ++)		//遍历指定页
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	73bb      	strb	r3, [r7, #14]
 8000436:	e02b      	b.n	8000490 <OLED_reverse+0xb4>
	{
		for (i = X; i < X + Width; i ++)	//遍历指定列
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	e01f      	b.n	800047e <OLED_reverse+0xa2>
		{
			DisplayBuf1[j / 8][i] ^= 0x01 << (j % 8);	//将显存数组指定数据取反
 800043e:	7bbb      	ldrb	r3, [r7, #14]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2d8      	uxtb	r0, r3
 8000444:	4602      	mov	r2, r0
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	4918      	ldr	r1, [pc, #96]	@ (80004ac <OLED_reverse+0xd0>)
 800044a:	01d2      	lsls	r2, r2, #7
 800044c:	440a      	add	r2, r1
 800044e:	4413      	add	r3, r2
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	b25a      	sxtb	r2, r3
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	2101      	movs	r1, #1
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	b25b      	sxtb	r3, r3
 8000462:	4053      	eors	r3, r2
 8000464:	b259      	sxtb	r1, r3
 8000466:	4602      	mov	r2, r0
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	b2c8      	uxtb	r0, r1
 800046c:	490f      	ldr	r1, [pc, #60]	@ (80004ac <OLED_reverse+0xd0>)
 800046e:	01d2      	lsls	r2, r2, #7
 8000470:	440a      	add	r2, r1
 8000472:	4413      	add	r3, r2
 8000474:	4602      	mov	r2, r0
 8000476:	701a      	strb	r2, [r3, #0]
		for (i = X; i < X + Width; i ++)	//遍历指定列
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	3301      	adds	r3, #1
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	7bfa      	ldrb	r2, [r7, #15]
 8000480:	79f9      	ldrb	r1, [r7, #7]
 8000482:	797b      	ldrb	r3, [r7, #5]
 8000484:	440b      	add	r3, r1
 8000486:	429a      	cmp	r2, r3
 8000488:	dbd9      	blt.n	800043e <OLED_reverse+0x62>
	for (j = Y; j < Y + Height; j ++)		//遍历指定页
 800048a:	7bbb      	ldrb	r3, [r7, #14]
 800048c:	3301      	adds	r3, #1
 800048e:	73bb      	strb	r3, [r7, #14]
 8000490:	7bba      	ldrb	r2, [r7, #14]
 8000492:	79b9      	ldrb	r1, [r7, #6]
 8000494:	793b      	ldrb	r3, [r7, #4]
 8000496:	440b      	add	r3, r1
 8000498:	429a      	cmp	r2, r3
 800049a:	dbcd      	blt.n	8000438 <OLED_reverse+0x5c>
 800049c:	e002      	b.n	80004a4 <OLED_reverse+0xc8>
	if (X > 127) {return;}
 800049e:	bf00      	nop
 80004a0:	e000      	b.n	80004a4 <OLED_reverse+0xc8>
	if (Y > 63) {return;}
 80004a2:	bf00      	nop
		}
	}
}
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc90      	pop	{r4, r7}
 80004aa:	4770      	bx	lr
 80004ac:	20000990 	.word	0x20000990

080004b0 <OLED_animation_down>:

void OLED_animation_down(uint8_t Y)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t var = 0; var < 16; ++var)
 80004ba:	2300      	movs	r3, #0
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e015      	b.n	80004ec <OLED_animation_down+0x3c>
	{
		OLED_reverse(0, Y, 127, 1);
 80004c0:	79f9      	ldrb	r1, [r7, #7]
 80004c2:	2301      	movs	r3, #1
 80004c4:	227f      	movs	r2, #127	@ 0x7f
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff ff88 	bl	80003dc <OLED_reverse>
		OLED_reverse(0, Y+16, 127, 1);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	3310      	adds	r3, #16
 80004d0:	b2d9      	uxtb	r1, r3
 80004d2:	2301      	movs	r3, #1
 80004d4:	227f      	movs	r2, #127	@ 0x7f
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff ff80 	bl	80003dc <OLED_reverse>
		OLED_updata();
 80004dc:	f7ff ff0a 	bl	80002f4 <OLED_updata>
		++Y;
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	3301      	adds	r3, #1
 80004e4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t var = 0; var < 16; ++var)
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	3301      	adds	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d9e6      	bls.n	80004c0 <OLED_animation_down+0x10>
	}
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <OLED_animation_up>:

void OLED_animation_up(uint8_t Y)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	for (uint8_t var = 0; var < 16; ++var)
 8000506:	2300      	movs	r3, #0
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	e017      	b.n	800053c <OLED_animation_up+0x40>
	{
		OLED_reverse(0, Y-1, 127, 1);
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	3b01      	subs	r3, #1
 8000510:	b2d9      	uxtb	r1, r3
 8000512:	2301      	movs	r3, #1
 8000514:	227f      	movs	r2, #127	@ 0x7f
 8000516:	2000      	movs	r0, #0
 8000518:	f7ff ff60 	bl	80003dc <OLED_reverse>
		OLED_reverse(0, Y+15, 127, 1);
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	330f      	adds	r3, #15
 8000520:	b2d9      	uxtb	r1, r3
 8000522:	2301      	movs	r3, #1
 8000524:	227f      	movs	r2, #127	@ 0x7f
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ff58 	bl	80003dc <OLED_reverse>
		OLED_updata();
 800052c:	f7ff fee2 	bl	80002f4 <OLED_updata>
		--Y;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	3b01      	subs	r3, #1
 8000534:	71fb      	strb	r3, [r7, #7]
	for (uint8_t var = 0; var < 16; ++var)
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	3301      	adds	r3, #1
 800053a:	73fb      	strb	r3, [r7, #15]
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d9e4      	bls.n	800050c <OLED_animation_up+0x10>
	}
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <OLED_showChar>:

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b085      	sub	sp, #20
 8000550:	af02      	add	r7, sp, #8
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	4603      	mov	r3, r0
 8000560:	71bb      	strb	r3, [r7, #6]
 8000562:	460b      	mov	r3, r1
 8000564:	717b      	strb	r3, [r7, #5]
 8000566:	4613      	mov	r3, r2
 8000568:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 800056a:	79ba      	ldrb	r2, [r7, #6]
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4611      	mov	r1, r2
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe05 	bl	8000180 <OLED_SetCursor>
	if (fontSize == 8)
 8000576:	793b      	ldrb	r3, [r7, #4]
 8000578:	2b08      	cmp	r3, #8
 800057a:	d10c      	bne.n	8000596 <OLED_showChar+0x4a>
	{
		OLED_showImage(Page, X, 8, 2, EN8_16[ a - ' ' ]);
 800057c:	797b      	ldrb	r3, [r7, #5]
 800057e:	3b20      	subs	r3, #32
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	4a10      	ldr	r2, [pc, #64]	@ (80005c4 <OLED_showChar+0x78>)
 8000584:	4413      	add	r3, r2
 8000586:	79b9      	ldrb	r1, [r7, #6]
 8000588:	79f8      	ldrb	r0, [r7, #7]
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2302      	movs	r3, #2
 800058e:	2208      	movs	r2, #8
 8000590:	f000 f84a 	bl	8000628 <OLED_showImage>
	}
	else if (fontSize == 6)
	{
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
	}
}
 8000594:	e012      	b.n	80005bc <OLED_showChar+0x70>
	else if (fontSize == 6)
 8000596:	793b      	ldrb	r3, [r7, #4]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d10f      	bne.n	80005bc <OLED_showChar+0x70>
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
 800059c:	797b      	ldrb	r3, [r7, #5]
 800059e:	f1a3 0220 	sub.w	r2, r3, #32
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <OLED_showChar+0x7c>)
 80005ac:	4413      	add	r3, r2
 80005ae:	79b9      	ldrb	r1, [r7, #6]
 80005b0:	79f8      	ldrb	r0, [r7, #7]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2206      	movs	r2, #6
 80005b8:	f000 f836 	bl	8000628 <OLED_showImage>
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	2000013c 	.word	0x2000013c
 80005c8:	2000072c 	.word	0x2000072c

080005cc <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	603a      	str	r2, [r7, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	460b      	mov	r3, r1
 80005dc:	71bb      	strb	r3, [r7, #6]
 80005de:	4613      	mov	r3, r2
 80005e0:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e013      	b.n	8000610 <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	797a      	ldrb	r2, [r7, #5]
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4413      	add	r3, r2
 80005f8:	b2d9      	uxtb	r1, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	79f8      	ldrb	r0, [r7, #7]
 8000606:	f7ff ffa1 	bl	800054c <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1e5      	bne.n	80005e8 <OLED_showString+0x1c>
	}
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <OLED_showImage>:

void OLED_showImage(uint8_t Page, uint8_t X, uint8_t Width, uint8_t Height,uint8_t *Image)
{
 8000628:	b490      	push	{r4, r7}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4604      	mov	r4, r0
 8000630:	4608      	mov	r0, r1
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	4623      	mov	r3, r4
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	4603      	mov	r3, r0
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	460b      	mov	r3, r1
 8000640:	717b      	strb	r3, [r7, #5]
 8000642:	4613      	mov	r3, r2
 8000644:	713b      	strb	r3, [r7, #4]
	for (int j = 0; j < Height; ++j)
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e022      	b.n	8000692 <OLED_showImage+0x6a>
	{
//		OLED_SetCursor( Page+j , X);
		for (int i = 0; i < Width; ++i)
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	e018      	b.n	8000684 <OLED_showImage+0x5c>
		{
//			OLED_WriteData(Image[Width*j+i]);
			DisplayBuf1[Page+j][X+i] = Image[Width*j+i];
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	fb03 f202 	mul.w	r2, r3, r2
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	4413      	add	r3, r2
 800065e:	461a      	mov	r2, r3
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	1899      	adds	r1, r3, r2
 8000664:	79fa      	ldrb	r2, [r7, #7]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	441a      	add	r2, r3
 800066a:	79b8      	ldrb	r0, [r7, #6]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4403      	add	r3, r0
 8000670:	7808      	ldrb	r0, [r1, #0]
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <OLED_showImage+0x80>)
 8000674:	01d2      	lsls	r2, r2, #7
 8000676:	440a      	add	r2, r1
 8000678:	4413      	add	r3, r2
 800067a:	4602      	mov	r2, r0
 800067c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < Width; ++i)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	797b      	ldrb	r3, [r7, #5]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbe2      	blt.n	8000652 <OLED_showImage+0x2a>
	for (int j = 0; j < Height; ++j)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbd8      	blt.n	800064c <OLED_showImage+0x24>
		}
	}
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc90      	pop	{r4, r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000990 	.word	0x20000990

080006ac <OLED_showChinese>:

void OLED_showChinese(uint8_t Page, uint8_t X, char *Chinese)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	4603      	mov	r3, r0
 80006b4:	603a      	str	r2, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	460b      	mov	r3, r1
 80006ba:	71bb      	strb	r3, [r7, #6]
	uint8_t perchinese[3];
	uint8_t pointAllChinese = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	75fb      	strb	r3, [r7, #23]
	uint8_t stopseek[3]={0xff,0xff,0xff};
 80006c0:	4a42      	ldr	r2, [pc, #264]	@ (80007cc <OLED_showChinese+0x120>)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	4611      	mov	r1, r2
 80006ca:	8019      	strh	r1, [r3, #0]
 80006cc:	3302      	adds	r3, #2
 80006ce:	0c12      	lsrs	r2, r2, #16
 80006d0:	701a      	strb	r2, [r3, #0]
	uint8_t seek = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	75bb      	strb	r3, [r7, #22]
	uint8_t locateX = X;
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	757b      	strb	r3, [r7, #21]
	while (1)
	{
		seek = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i=0;i<3 && Chinese[i]!='\0';i++)//utf8的编码下，一个汉字占用3字节，这个循环取出字符串中的一个汉字的utf8编码
 80006de:	2300      	movs	r3, #0
 80006e0:	753b      	strb	r3, [r7, #20]
 80006e2:	e00e      	b.n	8000702 <OLED_showChinese+0x56>
		{
			perchinese[i] = Chinese[pointAllChinese];
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	441a      	add	r2, r3
 80006ea:	7d3b      	ldrb	r3, [r7, #20]
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	3318      	adds	r3, #24
 80006f0:	443b      	add	r3, r7
 80006f2:	f803 2c08 	strb.w	r2, [r3, #-8]
			pointAllChinese++;
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	3301      	adds	r3, #1
 80006fa:	75fb      	strb	r3, [r7, #23]
		for(uint8_t i=0;i<3 && Chinese[i]!='\0';i++)//utf8的编码下，一个汉字占用3字节，这个循环取出字符串中的一个汉字的utf8编码
 80006fc:	7d3b      	ldrb	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	753b      	strb	r3, [r7, #20]
 8000702:	7d3b      	ldrb	r3, [r7, #20]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d81a      	bhi.n	800073e <OLED_showChinese+0x92>
 8000708:	7d3b      	ldrb	r3, [r7, #20]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1e7      	bne.n	80006e4 <OLED_showChinese+0x38>
		}
		for (; memcmp(stopseek,cn16_16[seek].ch_utf8,3) != 0 /*字库中最后一个字是stopseek，代表没有找到，此时跳出循环*/; ++seek)
 8000714:	e013      	b.n	800073e <OLED_showChinese+0x92>
		{
			if( memcmp(perchinese, cn16_16[seek].ch_utf8 ,3) == 0 )//将取出的3字节与字库中的字对比
 8000716:	7dba      	ldrb	r2, [r7, #22]
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	00da      	lsls	r2, r3, #3
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <OLED_showChinese+0x124>)
 8000724:	18d1      	adds	r1, r2, r3
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2203      	movs	r2, #3
 800072c:	4618      	mov	r0, r3
 800072e:	f001 ff93 	bl	8002658 <memcmp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d014      	beq.n	8000762 <OLED_showChinese+0xb6>
		for (; memcmp(stopseek,cn16_16[seek].ch_utf8,3) != 0 /*字库中最后一个字是stopseek，代表没有找到，此时跳出循环*/; ++seek)
 8000738:	7dbb      	ldrb	r3, [r7, #22]
 800073a:	3301      	adds	r3, #1
 800073c:	75bb      	strb	r3, [r7, #22]
 800073e:	7dba      	ldrb	r2, [r7, #22]
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	00da      	lsls	r2, r3, #3
 8000748:	1ad2      	subs	r2, r2, r3
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <OLED_showChinese+0x124>)
 800074c:	18d1      	adds	r1, r2, r3
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2203      	movs	r2, #3
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff7f 	bl	8002658 <memcmp>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1da      	bne.n	8000716 <OLED_showChinese+0x6a>
 8000760:	e000      	b.n	8000764 <OLED_showChinese+0xb8>
			{
				break;
 8000762:	bf00      	nop
			}
		}
		OLED_showImage(Page, locateX, 16, 1, cn16_16[seek].ch_dt1);//显示汉字第一部分
 8000764:	7dba      	ldrb	r2, [r7, #22]
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	00da      	lsls	r2, r3, #3
 800076e:	1ad2      	subs	r2, r2, r3
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <OLED_showChinese+0x124>)
 8000772:	4413      	add	r3, r2
 8000774:	3303      	adds	r3, #3
 8000776:	7d79      	ldrb	r1, [r7, #21]
 8000778:	79f8      	ldrb	r0, [r7, #7]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	2210      	movs	r2, #16
 8000780:	f7ff ff52 	bl	8000628 <OLED_showImage>
		OLED_showImage(Page+1, locateX, 16, 1, cn16_16[seek].ch_dt2);//显示汉字第二部分
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	3301      	adds	r3, #1
 8000788:	b2d8      	uxtb	r0, r3
 800078a:	7dba      	ldrb	r2, [r7, #22]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	00da      	lsls	r2, r3, #3
 8000794:	1ad2      	subs	r2, r2, r3
 8000796:	f102 0310 	add.w	r3, r2, #16
 800079a:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <OLED_showChinese+0x124>)
 800079c:	4413      	add	r3, r2
 800079e:	3303      	adds	r3, #3
 80007a0:	7d79      	ldrb	r1, [r7, #21]
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	2210      	movs	r2, #16
 80007a8:	f7ff ff3e 	bl	8000628 <OLED_showImage>
		locateX += 16;
 80007ac:	7d7b      	ldrb	r3, [r7, #21]
 80007ae:	3310      	adds	r3, #16
 80007b0:	757b      	strb	r3, [r7, #21]
		if(Chinese[pointAllChinese]==0x00){break;}
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d000      	beq.n	80007c0 <OLED_showChinese+0x114>
		seek = 0;
 80007be:	e78c      	b.n	80006da <OLED_showChinese+0x2e>
		if(Chinese[pointAllChinese]==0x00){break;}
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	08002704 	.word	0x08002704
 80007d0:	20000000 	.word	0x20000000

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_DMA_Init+0x38>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a0b      	ldr	r2, [pc, #44]	@ (800080c <MX_DMA_Init+0x38>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_DMA_Init+0x38>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2010      	movs	r0, #16
 80007f8:	f000 fb7b 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007fc:	2010      	movs	r0, #16
 80007fe:	f000 fb94 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_GPIO_Init+0x58>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <MX_GPIO_Init+0x58>)
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_GPIO_Init+0x58>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_GPIO_Init+0x58>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <MX_GPIO_Init+0x58>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_GPIO_Init+0x58>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_GPIO_Init+0x58>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <MX_GPIO_Init+0x58>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <MX_GPIO_Init+0x58>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <MX_I2C1_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000878:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x58>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_I2C1_Init+0x50>)
 800088a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800088e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_I2C1_Init+0x50>)
 80008aa:	f000 fe3d 	bl	8001528 <HAL_I2C_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f925 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200019a4 	.word	0x200019a4
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00061a80 	.word	0x00061a80

080008c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a30      	ldr	r2, [pc, #192]	@ (80009a4 <HAL_I2C_MspInit+0xdc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d158      	bne.n	800099a <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b2f      	ldr	r3, [pc, #188]	@ (80009a8 <HAL_I2C_MspInit+0xe0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a2e      	ldr	r2, [pc, #184]	@ (80009a8 <HAL_I2C_MspInit+0xe0>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b2c      	ldr	r3, [pc, #176]	@ (80009a8 <HAL_I2C_MspInit+0xe0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000900:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4825      	ldr	r0, [pc, #148]	@ (80009ac <HAL_I2C_MspInit+0xe4>)
 8000916:	f000 fc83 	bl	8001220 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <HAL_I2C_MspInit+0xe8>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
 8000928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000930:	4a1f      	ldr	r2, [pc, #124]	@ (80009b0 <HAL_I2C_MspInit+0xe8>)
 8000932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000934:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <HAL_I2C_MspInit+0xe0>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <HAL_I2C_MspInit+0xe0>)
 800093c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_I2C_MspInit+0xe0>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000950:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <HAL_I2C_MspInit+0xf0>)
 8000952:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000956:	2210      	movs	r2, #16
 8000958:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000980:	f000 faee 	bl	8000f60 <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800098a:	f000 f8ba 	bl	8000b02 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000992:	635a      	str	r2, [r3, #52]	@ 0x34
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <HAL_I2C_MspInit+0xec>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	@ 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010000 	.word	0x40010000
 80009b4:	200019f8 	.word	0x200019f8
 80009b8:	4002006c 	.word	0x4002006c

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 f93a 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f858 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff ff22 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 80009cc:	f7ff ff02 	bl	80007d4 <MX_DMA_Init>
  MX_I2C1_Init();
 80009d0:	f7ff ff4c 	bl	800086c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 80009d4:	f7ff fbf8 	bl	80001c8 <OLED_init>
  OLED_showChinese(0, 0, "你好世界你好世界");
 80009d8:	4a24      	ldr	r2, [pc, #144]	@ (8000a6c <main+0xb0>)
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fe65 	bl	80006ac <OLED_showChinese>
  OLED_showString(2, 0,"abcde",8);
 80009e2:	2308      	movs	r3, #8
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <main+0xb4>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fdef 	bl	80005cc <OLED_showString>
  OLED_showChinese(4, 0, "你好世界");
 80009ee:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <main+0xb8>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	2004      	movs	r0, #4
 80009f4:	f7ff fe5a 	bl	80006ac <OLED_showChinese>
  OLED_showChinese(6, 0, "你好世界");
 80009f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <main+0xb8>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	2006      	movs	r0, #6
 80009fe:	f7ff fe55 	bl	80006ac <OLED_showChinese>
  OLED_reverse(0, 0, 127, 16);
 8000a02:	2310      	movs	r3, #16
 8000a04:	227f      	movs	r2, #127	@ 0x7f
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fce7 	bl	80003dc <OLED_reverse>
  OLED_updata();
 8000a0e:	f7ff fc71 	bl	80002f4 <OLED_updata>
  OLED_animation_down(0);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fd4c 	bl	80004b0 <OLED_animation_down>
  HAL_Delay(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1c:	f000 f96e 	bl	8000cfc <HAL_Delay>
  OLED_animation_down(16);
 8000a20:	2010      	movs	r0, #16
 8000a22:	f7ff fd45 	bl	80004b0 <OLED_animation_down>
  HAL_Delay(1000);
 8000a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a2a:	f000 f967 	bl	8000cfc <HAL_Delay>
  OLED_animation_down(32);
 8000a2e:	2020      	movs	r0, #32
 8000a30:	f7ff fd3e 	bl	80004b0 <OLED_animation_down>
  HAL_Delay(1000);
 8000a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a38:	f000 f960 	bl	8000cfc <HAL_Delay>
  OLED_animation_up(48);
 8000a3c:	2030      	movs	r0, #48	@ 0x30
 8000a3e:	f7ff fd5d 	bl	80004fc <OLED_animation_up>
  HAL_Delay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a46:	f000 f959 	bl	8000cfc <HAL_Delay>
  OLED_animation_up(32);
 8000a4a:	2020      	movs	r0, #32
 8000a4c:	f7ff fd56 	bl	80004fc <OLED_animation_up>
    HAL_Delay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a54:	f000 f952 	bl	8000cfc <HAL_Delay>
    OLED_animation_up(16);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff fd4f 	bl	80004fc <OLED_animation_up>
      HAL_Delay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a62:	f000 f94b 	bl	8000cfc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a66:	bf00      	nop
 8000a68:	e7fd      	b.n	8000a66 <main+0xaa>
 8000a6a:	bf00      	nop
 8000a6c:	08002718 	.word	0x08002718
 8000a70:	08002734 	.word	0x08002734
 8000a74:	0800273c 	.word	0x0800273c

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b090      	sub	sp, #64	@ 0x40
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	2228      	movs	r2, #40	@ 0x28
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fdf6 	bl	8002678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ab6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f9cd 	bl	8001e60 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000acc:	f000 f819 	bl	8000b02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fc3a 	bl	8002364 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000af6:	f000 f804 	bl	8000b02 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3740      	adds	r7, #64	@ 0x40
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
}
 8000b08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0a:	bf00      	nop
 8000b0c:	e7fd      	b.n	8000b0a <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_MspInit+0x60>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_MspInit+0x60>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f87e 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <DMA1_Channel6_IRQHandler+0x10>)
 8000bd2:	f000 fa1f 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200019f8 	.word	0x200019f8

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff fff8 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bf2:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c08:	4c09      	ldr	r4, [pc, #36]	@ (8000c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f001 fd37 	bl	8002688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff fecf 	bl	80009bc <main>
  bx lr
 8000c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000974 	.word	0x20000974
  ldr r2, =_sidata
 8000c28:	08002780 	.word	0x08002780
  ldr r2, =_sbss
 8000c2c:	20000974 	.word	0x20000974
  ldr r4, =_ebss
 8000c30:	20001a40 	.word	0x20001a40

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_Init+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_Init+0x28>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f947 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff ff5c 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f95f 	bl	8000f46 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f927 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000968 	.word	0x20000968
 8000cbc:	20000970 	.word	0x20000970
 8000cc0:	2000096c 	.word	0x2000096c

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a03      	ldr	r2, [pc, #12]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000970 	.word	0x20000970
 8000ce4:	20001a3c 	.word	0x20001a3c

08000ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	@ (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20001a3c 	.word	0x20001a3c

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff fff0 	bl	8000ce8 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffe0 	bl	8000ce8 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000970 	.word	0x20000970

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4906      	ldr	r1, [pc, #24]	@ (8000ddc <__NVIC_EnableIRQ+0x34>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff90 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff2d 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff42 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff35 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e043      	b.n	8000ffe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_DMA_Init+0xa8>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a22      	ldr	r2, [pc, #136]	@ (800100c <HAL_DMA_Init+0xac>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	009a      	lsls	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a1f      	ldr	r2, [pc, #124]	@ (8001010 <HAL_DMA_Init+0xb0>)
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000faa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	bffdfff8 	.word	0xbffdfff8
 800100c:	cccccccd 	.word	0xcccccccd
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	2204      	movs	r2, #4
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d04f      	beq.n	80010dc <HAL_DMA_IRQHandler+0xc8>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0204 	bic.w	r2, r2, #4
 8001062:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a66      	ldr	r2, [pc, #408]	@ (8001204 <HAL_DMA_IRQHandler+0x1f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d029      	beq.n	80010c2 <HAL_DMA_IRQHandler+0xae>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a65      	ldr	r2, [pc, #404]	@ (8001208 <HAL_DMA_IRQHandler+0x1f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d022      	beq.n	80010be <HAL_DMA_IRQHandler+0xaa>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a63      	ldr	r2, [pc, #396]	@ (800120c <HAL_DMA_IRQHandler+0x1f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01a      	beq.n	80010b8 <HAL_DMA_IRQHandler+0xa4>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a62      	ldr	r2, [pc, #392]	@ (8001210 <HAL_DMA_IRQHandler+0x1fc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d012      	beq.n	80010b2 <HAL_DMA_IRQHandler+0x9e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a60      	ldr	r2, [pc, #384]	@ (8001214 <HAL_DMA_IRQHandler+0x200>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00a      	beq.n	80010ac <HAL_DMA_IRQHandler+0x98>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a5f      	ldr	r2, [pc, #380]	@ (8001218 <HAL_DMA_IRQHandler+0x204>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d102      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x92>
 80010a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a4:	e00e      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010aa:	e00b      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80010b0:	e008      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010b6:	e005      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010bc:	e002      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010be:	2340      	movs	r3, #64	@ 0x40
 80010c0:	e000      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010c2:	2304      	movs	r3, #4
 80010c4:	4a55      	ldr	r2, [pc, #340]	@ (800121c <HAL_DMA_IRQHandler+0x208>)
 80010c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8094 	beq.w	80011fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010da:	e08e      	b.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	2202      	movs	r2, #2
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d056      	beq.n	800119a <HAL_DMA_IRQHandler+0x186>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d051      	beq.n	800119a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020a 	bic.w	r2, r2, #10
 8001112:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a38      	ldr	r2, [pc, #224]	@ (8001204 <HAL_DMA_IRQHandler+0x1f0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d029      	beq.n	800117a <HAL_DMA_IRQHandler+0x166>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a37      	ldr	r2, [pc, #220]	@ (8001208 <HAL_DMA_IRQHandler+0x1f4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d022      	beq.n	8001176 <HAL_DMA_IRQHandler+0x162>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a35      	ldr	r2, [pc, #212]	@ (800120c <HAL_DMA_IRQHandler+0x1f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01a      	beq.n	8001170 <HAL_DMA_IRQHandler+0x15c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a34      	ldr	r2, [pc, #208]	@ (8001210 <HAL_DMA_IRQHandler+0x1fc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d012      	beq.n	800116a <HAL_DMA_IRQHandler+0x156>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <HAL_DMA_IRQHandler+0x200>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00a      	beq.n	8001164 <HAL_DMA_IRQHandler+0x150>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a31      	ldr	r2, [pc, #196]	@ (8001218 <HAL_DMA_IRQHandler+0x204>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d102      	bne.n	800115e <HAL_DMA_IRQHandler+0x14a>
 8001158:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800115c:	e00e      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800115e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001162:	e00b      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001168:	e008      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800116a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800116e:	e005      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001174:	e002      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001176:	2320      	movs	r3, #32
 8001178:	e000      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800117a:	2302      	movs	r3, #2
 800117c:	4a27      	ldr	r2, [pc, #156]	@ (800121c <HAL_DMA_IRQHandler+0x208>)
 800117e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	d034      	beq.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001198:	e02f      	b.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	2208      	movs	r2, #8
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d028      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 020e 	bic.w	r2, r2, #14
 80011c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
    }
  }
  return;
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
}
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020008 	.word	0x40020008
 8001208:	4002001c 	.word	0x4002001c
 800120c:	40020030 	.word	0x40020030
 8001210:	40020044 	.word	0x40020044
 8001214:	40020058 	.word	0x40020058
 8001218:	4002006c 	.word	0x4002006c
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	@ 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	@ 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	@ 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492c      	ldr	r1, [pc, #176]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4918      	ldr	r1, [pc, #96]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e12b      	b.n	8001792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff f9ba 	bl	80008c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2224      	movs	r2, #36	@ 0x24
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800157a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800158a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800158c:	f001 f832 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8001590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a81      	ldr	r2, [pc, #516]	@ (800179c <HAL_I2C_Init+0x274>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d807      	bhi.n	80015ac <HAL_I2C_Init+0x84>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a80      	ldr	r2, [pc, #512]	@ (80017a0 <HAL_I2C_Init+0x278>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	e006      	b.n	80015ba <HAL_I2C_Init+0x92>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a7d      	ldr	r2, [pc, #500]	@ (80017a4 <HAL_I2C_Init+0x27c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0e7      	b.n	8001792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a78      	ldr	r2, [pc, #480]	@ (80017a8 <HAL_I2C_Init+0x280>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	@ (800179c <HAL_I2C_Init+0x274>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d802      	bhi.n	80015fc <HAL_I2C_Init+0xd4>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	e009      	b.n	8001610 <HAL_I2C_Init+0xe8>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a69      	ldr	r2, [pc, #420]	@ (80017ac <HAL_I2C_Init+0x284>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	3301      	adds	r3, #1
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	430b      	orrs	r3, r1
 8001616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001622:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	495c      	ldr	r1, [pc, #368]	@ (800179c <HAL_I2C_Init+0x274>)
 800162c:	428b      	cmp	r3, r1
 800162e:	d819      	bhi.n	8001664 <HAL_I2C_Init+0x13c>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e59      	subs	r1, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fbb1 f3f3 	udiv	r3, r1, r3
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001644:	400b      	ands	r3, r1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_I2C_Init+0x138>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e59      	subs	r1, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fbb1 f3f3 	udiv	r3, r1, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	e051      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 8001660:	2304      	movs	r3, #4
 8001662:	e04f      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <HAL_I2C_Init+0x168>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	e012      	b.n	80016b6 <HAL_I2C_Init+0x18e>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e58      	subs	r0, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	0099      	lsls	r1, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Init+0x196>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e022      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10e      	bne.n	80016e4 <HAL_I2C_Init+0x1bc>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e58      	subs	r0, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	440b      	add	r3, r1
 80016d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016e2:	e00f      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	0099      	lsls	r1, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	6809      	ldr	r1, [r1, #0]
 8001708:	4313      	orrs	r3, r2
 800170a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6911      	ldr	r1, [r2, #16]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68d2      	ldr	r2, [r2, #12]
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	430b      	orrs	r3, r1
 8001746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	000186a0 	.word	0x000186a0
 80017a0:	001e847f 	.word	0x001e847f
 80017a4:	003d08ff 	.word	0x003d08ff
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	10624dd3 	.word	0x10624dd3

080017b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	461a      	mov	r2, r3
 80017bc:	460b      	mov	r3, r1
 80017be:	817b      	strh	r3, [r7, #10]
 80017c0:	4613      	mov	r3, r2
 80017c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fa90 	bl	8000ce8 <HAL_GetTick>
 80017c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	f040 80e0 	bne.w	8001998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2319      	movs	r3, #25
 80017de:	2201      	movs	r2, #1
 80017e0:	4970      	ldr	r1, [pc, #448]	@ (80019a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f964 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017ee:	2302      	movs	r3, #2
 80017f0:	e0d3      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x50>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0cc      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d007      	beq.n	8001826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2221      	movs	r2, #33	@ 0x21
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2210      	movs	r2, #16
 8001842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	893a      	ldrh	r2, [r7, #8]
 8001856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a50      	ldr	r2, [pc, #320]	@ (80019a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f89c 	bl	80019ac <I2C_MasterRequestWrite>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e08d      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001894:	e066      	b.n	8001964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	6a39      	ldr	r1, [r7, #32]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fa22 	bl	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d107      	bne.n	80018be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06b      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d11b      	bne.n	8001938 <HAL_I2C_Master_Transmit+0x188>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d017      	beq.n	8001938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fa19 	bl	8001d74 <I2C_WaitOnBTFFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00d      	beq.n	8001964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800195e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01a      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	d194      	bne.n	8001896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800197a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	00100002 	.word	0x00100002
 80019a8:	ffff0000 	.word	0xffff0000

080019ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	460b      	mov	r3, r1
 80019ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d006      	beq.n	80019d6 <I2C_MasterRequestWrite+0x2a>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d003      	beq.n	80019d6 <I2C_MasterRequestWrite+0x2a>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019d4:	d108      	bne.n	80019e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e00b      	b.n	8001a00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d107      	bne.n	8001a00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f84f 	bl	8001ab0 <I2C_WaitOnFlagUntilTimeout>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00d      	beq.n	8001a34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a26:	d103      	bne.n	8001a30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e035      	b.n	8001aa0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a3c:	d108      	bne.n	8001a50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	e01b      	b.n	8001a88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a50:	897b      	ldrh	r3, [r7, #10]
 8001a52:	11db      	asrs	r3, r3, #7
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 0306 	and.w	r3, r3, #6
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f063 030f 	orn	r3, r3, #15
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	490e      	ldr	r1, [pc, #56]	@ (8001aa8 <I2C_MasterRequestWrite+0xfc>)
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f898 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e010      	b.n	8001aa0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a7e:	897b      	ldrh	r3, [r7, #10]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4907      	ldr	r1, [pc, #28]	@ (8001aac <I2C_MasterRequestWrite+0x100>)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f888 	bl	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	00010008 	.word	0x00010008
 8001aac:	00010002 	.word	0x00010002

08001ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	4613      	mov	r3, r2
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac0:	e048      	b.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d044      	beq.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7ff f90d 	bl	8000ce8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d139      	bne.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10d      	bne.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4013      	ands	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	e00c      	b.n	8001b20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4013      	ands	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d116      	bne.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e023      	b.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10d      	bne.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	e00c      	b.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	43da      	mvns	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d093      	beq.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb2:	e071      	b.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc2:	d123      	bne.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f043 0204 	orr.w	r2, r3, #4
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e067      	b.n	8001cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d041      	beq.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7ff f868 	bl	8000ce8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d136      	bne.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10c      	bne.n	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	e00b      	b.n	8001c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	43da      	mvns	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e021      	b.n	8001cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10c      	bne.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4013      	ands	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e00b      	b.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f af6d 	bne.w	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf0:	e034      	b.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f886 	bl	8001e04 <I2C_IsAcknowledgeFailed>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e034      	b.n	8001d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d028      	beq.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7fe ffed 	bl	8000ce8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11d      	bne.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	2b80      	cmp	r3, #128	@ 0x80
 8001d2c:	d016      	beq.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d1c3      	bne.n	8001cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d80:	e034      	b.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f83e 	bl	8001e04 <I2C_IsAcknowledgeFailed>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e034      	b.n	8001dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d028      	beq.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7fe ffa5 	bl	8000ce8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11d      	bne.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d016      	beq.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e007      	b.n	8001dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d1c3      	bne.n	8001d82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1a:	d11b      	bne.n	8001e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e272      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b92      	ldr	r3, [pc, #584]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d112      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5e>
 8001e98:	4b8c      	ldr	r3, [pc, #560]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea6:	4b89      	ldr	r3, [pc, #548]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x12c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d168      	bne.n	8001f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e24c      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x76>
 8001ec8:	4b80      	ldr	r3, [pc, #512]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e02e      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x98>
 8001ede:	4b7b      	ldr	r3, [pc, #492]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b78      	ldr	r3, [pc, #480]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a77      	ldr	r2, [pc, #476]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0xbc>
 8001f02:	4b72      	ldr	r3, [pc, #456]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a71      	ldr	r2, [pc, #452]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a6a      	ldr	r2, [pc, #424]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b68      	ldr	r3, [pc, #416]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a67      	ldr	r2, [pc, #412]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fed4 	bl	8000ce8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe fed0 	bl	8000ce8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e200      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b5d      	ldr	r3, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe4>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fec0 	bl	8000ce8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe febc 	bl	8000ce8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1ec      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x10c>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fa6:	4b49      	ldr	r3, [pc, #292]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x18c>
 8001fb2:	4b46      	ldr	r3, [pc, #280]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x176>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c0      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4939      	ldr	r1, [pc, #228]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fe75 	bl	8000ce8 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7fe fe71 	bl	8000ce8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a1      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4927      	ldr	r1, [pc, #156]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <HAL_RCC_OscConfig+0x270>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fe54 	bl	8000ce8 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe fe50 	bl	8000ce8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e180      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d03a      	beq.n	80020e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d019      	beq.n	80020aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_RCC_OscConfig+0x274>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe fe34 	bl	8000ce8 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7fe fe30 	bl	8000ce8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e160      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f000 faba 	bl	800261c <RCC_Delay>
 80020a8:	e01c      	b.n	80020e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7fe fe1a 	bl	8000ce8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b6:	e00f      	b.n	80020d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7fe fe16 	bl	8000ce8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d908      	bls.n	80020d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e146      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	42420000 	.word	0x42420000
 80020d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b92      	ldr	r3, [pc, #584]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e9      	bne.n	80020b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a6 	beq.w	800223e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b88      	ldr	r3, [pc, #544]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a87      	ldr	r2, [pc, #540]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b85      	ldr	r3, [pc, #532]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b82      	ldr	r3, [pc, #520]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b7f      	ldr	r3, [pc, #508]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7e      	ldr	r2, [pc, #504]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe fdd7 	bl	8000ce8 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7fe fdd3 	bl	8000ce8 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	@ 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e103      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b75      	ldr	r3, [pc, #468]	@ (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x312>
 8002164:	4b6f      	ldr	r3, [pc, #444]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a6e      	ldr	r2, [pc, #440]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e02d      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x334>
 800217a:	4b6a      	ldr	r3, [pc, #424]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a69      	ldr	r2, [pc, #420]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a66      	ldr	r2, [pc, #408]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x356>
 800219c:	4b61      	ldr	r3, [pc, #388]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a60      	ldr	r2, [pc, #384]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 80021b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b58      	ldr	r3, [pc, #352]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a57      	ldr	r2, [pc, #348]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fd87 	bl	8000ce8 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fd83 	bl	8000ce8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0b1      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x37e>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7fe fd71 	bl	8000ce8 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fd6d 	bl	8000ce8 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e09b      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b3c      	ldr	r3, [pc, #240]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a3b      	ldr	r2, [pc, #236]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	4b36      	ldr	r3, [pc, #216]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d061      	beq.n	8002318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d146      	bne.n	80022ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b33      	ldr	r3, [pc, #204]	@ (800232c <HAL_RCC_OscConfig+0x4cc>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fd41 	bl	8000ce8 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fd3d 	bl	8000ce8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e06d      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002290:	d108      	bne.n	80022a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4921      	ldr	r1, [pc, #132]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a19      	ldr	r1, [r3, #32]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	430b      	orrs	r3, r1
 80022b6:	491b      	ldr	r1, [pc, #108]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_RCC_OscConfig+0x4cc>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fd11 	bl	8000ce8 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fd0d 	bl	8000ce8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03d      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x46a>
 80022e8:	e035      	b.n	8002356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_RCC_OscConfig+0x4cc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fcfa 	bl	8000ce8 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fcf6 	bl	8000ce8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e026      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x498>
 8002316:	e01e      	b.n	8002356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e019      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
 800232c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_RCC_OscConfig+0x500>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d0      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b67      	ldr	r3, [pc, #412]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4965      	ldr	r1, [pc, #404]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b63      	ldr	r3, [pc, #396]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b8      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a58      	ldr	r2, [pc, #352]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d8:	4b53      	ldr	r3, [pc, #332]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a52      	ldr	r2, [pc, #328]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b50      	ldr	r3, [pc, #320]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	494d      	ldr	r1, [pc, #308]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d040      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b47      	ldr	r3, [pc, #284]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07f      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e073      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4936      	ldr	r1, [pc, #216]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe fc48 	bl	8000ce8 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fc44 	bl	8000ce8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e053      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d210      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4922      	ldr	r1, [pc, #136]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e032      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4916      	ldr	r1, [pc, #88]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024de:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	490e      	ldr	r1, [pc, #56]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f2:	f000 f821 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	490a      	ldr	r1, [pc, #40]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	5ccb      	ldrb	r3, [r1, r3]
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <HAL_RCC_ClockConfig+0x1cc>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1d0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fba6 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	0800274c 	.word	0x0800274c
 8002530:	20000968 	.word	0x20000968
 8002534:	2000096c 	.word	0x2000096c

08002538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002552:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x30>
 8002562:	2b08      	cmp	r3, #8
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x36>
 8002566:	e027      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800256a:	613b      	str	r3, [r7, #16]
      break;
 800256c:	e027      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0c5b      	lsrs	r3, r3, #17
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	fb03 f202 	mul.w	r2, r3, r2
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e004      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0c      	ldr	r2, [pc, #48]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	613b      	str	r3, [r7, #16]
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	693b      	ldr	r3, [r7, #16]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	08002764 	.word	0x08002764
 80025d8:	08002774 	.word	0x08002774
 80025dc:	003d0900 	.word	0x003d0900

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000968 	.word	0x20000968

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff2 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	0800275c 	.word	0x0800275c

0800261c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <RCC_Delay+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <RCC_Delay+0x38>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002638:	bf00      	nop
  }
  while (Delay --);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	60fa      	str	r2, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <RCC_Delay+0x1c>
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000968 	.word	0x20000968
 8002654:	10624dd3 	.word	0x10624dd3

08002658 <memcmp>:
 8002658:	b510      	push	{r4, lr}
 800265a:	3901      	subs	r1, #1
 800265c:	4402      	add	r2, r0
 800265e:	4290      	cmp	r0, r2
 8002660:	d101      	bne.n	8002666 <memcmp+0xe>
 8002662:	2000      	movs	r0, #0
 8002664:	e005      	b.n	8002672 <memcmp+0x1a>
 8002666:	7803      	ldrb	r3, [r0, #0]
 8002668:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800266c:	42a3      	cmp	r3, r4
 800266e:	d001      	beq.n	8002674 <memcmp+0x1c>
 8002670:	1b18      	subs	r0, r3, r4
 8002672:	bd10      	pop	{r4, pc}
 8002674:	3001      	adds	r0, #1
 8002676:	e7f2      	b.n	800265e <memcmp+0x6>

08002678 <memset>:
 8002678:	4603      	mov	r3, r0
 800267a:	4402      	add	r2, r0
 800267c:	4293      	cmp	r3, r2
 800267e:	d100      	bne.n	8002682 <memset+0xa>
 8002680:	4770      	bx	lr
 8002682:	f803 1b01 	strb.w	r1, [r3], #1
 8002686:	e7f9      	b.n	800267c <memset+0x4>

08002688 <__libc_init_array>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	2600      	movs	r6, #0
 800268c:	4d0c      	ldr	r5, [pc, #48]	@ (80026c0 <__libc_init_array+0x38>)
 800268e:	4c0d      	ldr	r4, [pc, #52]	@ (80026c4 <__libc_init_array+0x3c>)
 8002690:	1b64      	subs	r4, r4, r5
 8002692:	10a4      	asrs	r4, r4, #2
 8002694:	42a6      	cmp	r6, r4
 8002696:	d109      	bne.n	80026ac <__libc_init_array+0x24>
 8002698:	f000 f828 	bl	80026ec <_init>
 800269c:	2600      	movs	r6, #0
 800269e:	4d0a      	ldr	r5, [pc, #40]	@ (80026c8 <__libc_init_array+0x40>)
 80026a0:	4c0a      	ldr	r4, [pc, #40]	@ (80026cc <__libc_init_array+0x44>)
 80026a2:	1b64      	subs	r4, r4, r5
 80026a4:	10a4      	asrs	r4, r4, #2
 80026a6:	42a6      	cmp	r6, r4
 80026a8:	d105      	bne.n	80026b6 <__libc_init_array+0x2e>
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b0:	4798      	blx	r3
 80026b2:	3601      	adds	r6, #1
 80026b4:	e7ee      	b.n	8002694 <__libc_init_array+0xc>
 80026b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ba:	4798      	blx	r3
 80026bc:	3601      	adds	r6, #1
 80026be:	e7f2      	b.n	80026a6 <__libc_init_array+0x1e>
 80026c0:	08002778 	.word	0x08002778
 80026c4:	08002778 	.word	0x08002778
 80026c8:	08002778 	.word	0x08002778
 80026cc:	0800277c 	.word	0x0800277c

080026d0 <memcpy>:
 80026d0:	440a      	add	r2, r1
 80026d2:	4291      	cmp	r1, r2
 80026d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80026d8:	d100      	bne.n	80026dc <memcpy+0xc>
 80026da:	4770      	bx	lr
 80026dc:	b510      	push	{r4, lr}
 80026de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026e2:	4291      	cmp	r1, r2
 80026e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026e8:	d1f9      	bne.n	80026de <memcpy+0xe>
 80026ea:	bd10      	pop	{r4, pc}

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
