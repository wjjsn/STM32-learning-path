
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002478  08002478  00003478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c8  080024c8  00004148  2**0
                  CONTENTS
  4 .ARM          00000000  080024c8  080024c8  00004148  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c8  080024c8  00004148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c8  080024c8  000034c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000148  20000000  080024d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000148  08002618  00004148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08002618  00004600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000715c  00000000  00000000  00004171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a54  00000000  00000000  0000b2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0000cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000610  00000000  00000000  0000d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017930  00000000  00000000  0000db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3e0  00000000  00000000  00025480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820e3  00000000  00000000  00031860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f44  00000000  00000000  000b3988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b58cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000148 	.word	0x20000148
 8000128:	00000000 	.word	0x00000000
 800012c:	08002460 	.word	0x08002460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000014c 	.word	0x2000014c
 8000148:	08002460 	.word	0x08002460

0800014c <OLED_WriteCommand>:
uint8_t DisplayBuf[8][128] = {0};
uint8_t SendplayBuf[8][1+128+4] = {0};
const uint8_t dataHead = 0x40;

void OLED_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 800015e:	f107 020c 	add.w	r2, r7, #12
 8000162:	f04f 33ff 	mov.w	r3, #4294967295
 8000166:	9300      	str	r3, [sp, #0]
 8000168:	2302      	movs	r3, #2
 800016a:	2178      	movs	r1, #120	@ 0x78
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <OLED_WriteCommand+0x30>)
 800016e:	f001 f9d9 	bl	8001524 <HAL_I2C_Master_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000564 	.word	0x20000564

08000180 <OLED_SetCursor>:
	sendBuffer[1]=dat;
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
}

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4618      	mov	r0, r3
 800019a:	f7ff ffd7 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	f043 0310 	orr.w	r3, r3, #16
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	4618      	mov	r0, r3
 80001ac:	f7ff ffce 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	4618      	mov	r0, r3
 80001ba:	f7ff ffc7 	bl	800014c <OLED_WriteCommand>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}

080001c6 <OLED_init>:

void OLED_init(void)
{
 80001c6:	b580      	push	{r7, lr}
 80001c8:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80001ca:	2064      	movs	r0, #100	@ 0x64
 80001cc:	f000 fc50 	bl	8000a70 <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 80001d0:	20ae      	movs	r0, #174	@ 0xae
 80001d2:	f7ff ffbb 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80001d6:	20d5      	movs	r0, #213	@ 0xd5
 80001d8:	f7ff ffb8 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 80001dc:	2080      	movs	r0, #128	@ 0x80
 80001de:	f7ff ffb5 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 80001e2:	20a8      	movs	r0, #168	@ 0xa8
 80001e4:	f7ff ffb2 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 80001e8:	203f      	movs	r0, #63	@ 0x3f
 80001ea:	f7ff ffaf 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 80001ee:	20d3      	movs	r0, #211	@ 0xd3
 80001f0:	f7ff ffac 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 80001f4:	2000      	movs	r0, #0
 80001f6:	f7ff ffa9 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 80001fa:	2040      	movs	r0, #64	@ 0x40
 80001fc:	f7ff ffa6 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000200:	20a1      	movs	r0, #161	@ 0xa1
 8000202:	f7ff ffa3 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 8000206:	20c8      	movs	r0, #200	@ 0xc8
 8000208:	f7ff ffa0 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 800020c:	20da      	movs	r0, #218	@ 0xda
 800020e:	f7ff ff9d 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000212:	2012      	movs	r0, #18
 8000214:	f7ff ff9a 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 8000218:	2081      	movs	r0, #129	@ 0x81
 800021a:	f7ff ff97 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 800021e:	20cf      	movs	r0, #207	@ 0xcf
 8000220:	f7ff ff94 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8000224:	20d9      	movs	r0, #217	@ 0xd9
 8000226:	f7ff ff91 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800022a:	20f1      	movs	r0, #241	@ 0xf1
 800022c:	f7ff ff8e 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000230:	20db      	movs	r0, #219	@ 0xdb
 8000232:	f7ff ff8b 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8000236:	2030      	movs	r0, #48	@ 0x30
 8000238:	f7ff ff88 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 800023c:	20a4      	movs	r0, #164	@ 0xa4
 800023e:	f7ff ff85 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8000242:	20a6      	movs	r0, #166	@ 0xa6
 8000244:	f7ff ff82 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000248:	208d      	movs	r0, #141	@ 0x8d
 800024a:	f7ff ff7f 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 800024e:	2014      	movs	r0, #20
 8000250:	f7ff ff7c 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000254:	20af      	movs	r0, #175	@ 0xaf
 8000256:	f7ff ff79 	bl	800014c <OLED_WriteCommand>
	OLED_chear();
 800025a:	f000 f803 	bl	8000264 <OLED_chear>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <OLED_chear>:

void OLED_chear(void)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	e013      	b.n	8000298 <OLED_chear+0x34>
	{
//		OLED_SetCursor(i, 0);
		for (int j = 0; j < 128; ++j)
 8000270:	2300      	movs	r3, #0
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	e00a      	b.n	800028c <OLED_chear+0x28>
		{
//			OLED_WriteData(0x00);
			DisplayBuf[i][j] = 0x00;
 8000276:	4a0d      	ldr	r2, [pc, #52]	@ (80002ac <OLED_chear+0x48>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	01db      	lsls	r3, r3, #7
 800027c:	441a      	add	r2, r3
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	4413      	add	r3, r2
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; ++j)
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000290:	ddf1      	ble.n	8000276 <OLED_chear+0x12>
	for (int i = 0; i < 8; ++i)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b07      	cmp	r3, #7
 800029c:	dde8      	ble.n	8000270 <OLED_chear+0xc>
		}
	}
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000164 	.word	0x20000164

080002b0 <OLED_updata>:

void OLED_updata()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b0a4      	sub	sp, #144	@ 0x90
 80002b4:	af02      	add	r7, sp, #8
	for (int i = 0; i < 8; ++i)
 80002b6:	2300      	movs	r3, #0
 80002b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80002bc:	e027      	b.n	800030e <OLED_updata+0x5e>
	{
		uint8_t dataBuf[129]={0x40,0};
 80002be:	2340      	movs	r3, #64	@ 0x40
 80002c0:	603b      	str	r3, [r7, #0]
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	227d      	movs	r2, #125	@ 0x7d
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 f88f 	bl	80023ec <memset>
		OLED_SetCursor(i, 0);
 80002ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff52 	bl	8000180 <OLED_SetCursor>
		memcpy(dataBuf+1, DisplayBuf[i], 128);
 80002dc:	463b      	mov	r3, r7
 80002de:	3301      	adds	r3, #1
 80002e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80002e4:	01d2      	lsls	r2, r2, #7
 80002e6:	490e      	ldr	r1, [pc, #56]	@ (8000320 <OLED_updata+0x70>)
 80002e8:	4411      	add	r1, r2
 80002ea:	2280      	movs	r2, #128	@ 0x80
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 f8a9 	bl	8002444 <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, dataBuf, 129, HAL_MAX_DELAY);
 80002f2:	463a      	mov	r2, r7
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2381      	movs	r3, #129	@ 0x81
 80002fc:	2178      	movs	r1, #120	@ 0x78
 80002fe:	4809      	ldr	r0, [pc, #36]	@ (8000324 <OLED_updata+0x74>)
 8000300:	f001 f910 	bl	8001524 <HAL_I2C_Master_Transmit>
	for (int i = 0; i < 8; ++i)
 8000304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000308:	3301      	adds	r3, #1
 800030a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800030e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000312:	2b07      	cmp	r3, #7
 8000314:	ddd3      	ble.n	80002be <OLED_updata+0xe>
	}
}
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	3788      	adds	r7, #136	@ 0x88
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000164 	.word	0x20000164
 8000324:	20000564 	.word	0x20000564

08000328 <OLED_reverse>:

void OLED_reverse(uint8_t X, uint8_t Y, uint8_t Width, uint8_t Height)
{
 8000328:	b490      	push	{r4, r7}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	4604      	mov	r4, r0
 8000330:	4608      	mov	r0, r1
 8000332:	4611      	mov	r1, r2
 8000334:	461a      	mov	r2, r3
 8000336:	4623      	mov	r3, r4
 8000338:	71fb      	strb	r3, [r7, #7]
 800033a:	4603      	mov	r3, r0
 800033c:	71bb      	strb	r3, [r7, #6]
 800033e:	460b      	mov	r3, r1
 8000340:	717b      	strb	r3, [r7, #5]
 8000342:	4613      	mov	r3, r2
 8000344:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;

	if (X > 127) {return;}
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	2b00      	cmp	r3, #0
 800034c:	db4d      	blt.n	80003ea <OLED_reverse+0xc2>
	if (Y > 63) {return;}
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2b3f      	cmp	r3, #63	@ 0x3f
 8000352:	d84c      	bhi.n	80003ee <OLED_reverse+0xc6>
	if (X + Width > 128) {Width = 128 - X;}
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	797b      	ldrb	r3, [r7, #5]
 8000358:	4413      	add	r3, r2
 800035a:	2b80      	cmp	r3, #128	@ 0x80
 800035c:	dd06      	ble.n	800036c <OLED_reverse+0x44>
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000364:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000368:	3380      	adds	r3, #128	@ 0x80
 800036a:	717b      	strb	r3, [r7, #5]
	if (Y + Height > 64) {Height = 64 - Y;}
 800036c:	79ba      	ldrb	r2, [r7, #6]
 800036e:	793b      	ldrb	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	2b40      	cmp	r3, #64	@ 0x40
 8000374:	dd03      	ble.n	800037e <OLED_reverse+0x56>
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800037c:	713b      	strb	r3, [r7, #4]

	for (j = Y; j < Y + Height; j ++)		//遍历指定页
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	73bb      	strb	r3, [r7, #14]
 8000382:	e02b      	b.n	80003dc <OLED_reverse+0xb4>
	{
		for (i = X; i < X + Width; i ++)	//遍历指定列
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	73fb      	strb	r3, [r7, #15]
 8000388:	e01f      	b.n	80003ca <OLED_reverse+0xa2>
		{
			DisplayBuf[j / 8][i] ^= 0x01 << (j % 8);	//将显存数组指定数据取反
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	08db      	lsrs	r3, r3, #3
 800038e:	b2d8      	uxtb	r0, r3
 8000390:	4602      	mov	r2, r0
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	4918      	ldr	r1, [pc, #96]	@ (80003f8 <OLED_reverse+0xd0>)
 8000396:	01d2      	lsls	r2, r2, #7
 8000398:	440a      	add	r2, r1
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b25a      	sxtb	r2, r3
 80003a0:	7bbb      	ldrb	r3, [r7, #14]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	b25b      	sxtb	r3, r3
 80003ae:	4053      	eors	r3, r2
 80003b0:	b259      	sxtb	r1, r3
 80003b2:	4602      	mov	r2, r0
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	b2c8      	uxtb	r0, r1
 80003b8:	490f      	ldr	r1, [pc, #60]	@ (80003f8 <OLED_reverse+0xd0>)
 80003ba:	01d2      	lsls	r2, r2, #7
 80003bc:	440a      	add	r2, r1
 80003be:	4413      	add	r3, r2
 80003c0:	4602      	mov	r2, r0
 80003c2:	701a      	strb	r2, [r3, #0]
		for (i = X; i < X + Width; i ++)	//遍历指定列
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	3301      	adds	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
 80003ca:	7bfa      	ldrb	r2, [r7, #15]
 80003cc:	79f9      	ldrb	r1, [r7, #7]
 80003ce:	797b      	ldrb	r3, [r7, #5]
 80003d0:	440b      	add	r3, r1
 80003d2:	429a      	cmp	r2, r3
 80003d4:	dbd9      	blt.n	800038a <OLED_reverse+0x62>
	for (j = Y; j < Y + Height; j ++)		//遍历指定页
 80003d6:	7bbb      	ldrb	r3, [r7, #14]
 80003d8:	3301      	adds	r3, #1
 80003da:	73bb      	strb	r3, [r7, #14]
 80003dc:	7bba      	ldrb	r2, [r7, #14]
 80003de:	79b9      	ldrb	r1, [r7, #6]
 80003e0:	793b      	ldrb	r3, [r7, #4]
 80003e2:	440b      	add	r3, r1
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dbcd      	blt.n	8000384 <OLED_reverse+0x5c>
 80003e8:	e002      	b.n	80003f0 <OLED_reverse+0xc8>
	if (X > 127) {return;}
 80003ea:	bf00      	nop
 80003ec:	e000      	b.n	80003f0 <OLED_reverse+0xc8>
	if (Y > 63) {return;}
 80003ee:	bf00      	nop
		}
	}
}
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc90      	pop	{r4, r7}
 80003f6:	4770      	bx	lr
 80003f8:	20000164 	.word	0x20000164

080003fc <OLED_showImage>:
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
	}
}

void OLED_showImage(uint8_t Page, uint8_t X, uint8_t Width, uint8_t Height,uint8_t *Image)
{
 80003fc:	b490      	push	{r4, r7}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	4604      	mov	r4, r0
 8000404:	4608      	mov	r0, r1
 8000406:	4611      	mov	r1, r2
 8000408:	461a      	mov	r2, r3
 800040a:	4623      	mov	r3, r4
 800040c:	71fb      	strb	r3, [r7, #7]
 800040e:	4603      	mov	r3, r0
 8000410:	71bb      	strb	r3, [r7, #6]
 8000412:	460b      	mov	r3, r1
 8000414:	717b      	strb	r3, [r7, #5]
 8000416:	4613      	mov	r3, r2
 8000418:	713b      	strb	r3, [r7, #4]
	for (int j = 0; j < Height; ++j)
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e022      	b.n	8000466 <OLED_showImage+0x6a>
	{
//		OLED_SetCursor( Page+j , X);
		for (int i = 0; i < Width; ++i)
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	e018      	b.n	8000458 <OLED_showImage+0x5c>
		{
//			OLED_WriteData(Image[Width*j+i]);
			DisplayBuf[Page+j][X+i] = Image[Width*j+i];
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	fb03 f202 	mul.w	r2, r3, r2
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	4413      	add	r3, r2
 8000432:	461a      	mov	r2, r3
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	1899      	adds	r1, r3, r2
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	441a      	add	r2, r3
 800043e:	79b8      	ldrb	r0, [r7, #6]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	4403      	add	r3, r0
 8000444:	7808      	ldrb	r0, [r1, #0]
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <OLED_showImage+0x80>)
 8000448:	01d2      	lsls	r2, r2, #7
 800044a:	440a      	add	r2, r1
 800044c:	4413      	add	r3, r2
 800044e:	4602      	mov	r2, r0
 8000450:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < Width; ++i)
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	3301      	adds	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	797b      	ldrb	r3, [r7, #5]
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbe2      	blt.n	8000426 <OLED_showImage+0x2a>
	for (int j = 0; j < Height; ++j)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3301      	adds	r3, #1
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	793b      	ldrb	r3, [r7, #4]
 8000468:	68fa      	ldr	r2, [r7, #12]
 800046a:	429a      	cmp	r2, r3
 800046c:	dbd8      	blt.n	8000420 <OLED_showImage+0x24>
		}
	}
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bc90      	pop	{r4, r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	20000164 	.word	0x20000164

08000480 <OLED_showChinese>:

void OLED_showChinese(uint8_t Page, uint8_t X, char *Chinese)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af02      	add	r7, sp, #8
 8000486:	4603      	mov	r3, r0
 8000488:	603a      	str	r2, [r7, #0]
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	460b      	mov	r3, r1
 800048e:	71bb      	strb	r3, [r7, #6]
	uint8_t perchinese[3];
	uint8_t pointAllChinese = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	75fb      	strb	r3, [r7, #23]
	uint8_t stopseek[3]={0xff,0xff,0xff};
 8000494:	4a42      	ldr	r2, [pc, #264]	@ (80005a0 <OLED_showChinese+0x120>)
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	6812      	ldr	r2, [r2, #0]
 800049c:	4611      	mov	r1, r2
 800049e:	8019      	strh	r1, [r3, #0]
 80004a0:	3302      	adds	r3, #2
 80004a2:	0c12      	lsrs	r2, r2, #16
 80004a4:	701a      	strb	r2, [r3, #0]
	uint8_t seek = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	75bb      	strb	r3, [r7, #22]
	uint8_t locateX = X;
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	757b      	strb	r3, [r7, #21]
	while (1)
	{
		seek = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i=0;i<3 && Chinese[i]!='\0';i++)//utf8的编码下，一个汉字占用3字节，这个循环取出字符串中的一个汉字的utf8编码
 80004b2:	2300      	movs	r3, #0
 80004b4:	753b      	strb	r3, [r7, #20]
 80004b6:	e00e      	b.n	80004d6 <OLED_showChinese+0x56>
		{
			perchinese[i] = Chinese[pointAllChinese];
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	683a      	ldr	r2, [r7, #0]
 80004bc:	441a      	add	r2, r3
 80004be:	7d3b      	ldrb	r3, [r7, #20]
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	3318      	adds	r3, #24
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
			pointAllChinese++;
 80004ca:	7dfb      	ldrb	r3, [r7, #23]
 80004cc:	3301      	adds	r3, #1
 80004ce:	75fb      	strb	r3, [r7, #23]
		for(uint8_t i=0;i<3 && Chinese[i]!='\0';i++)//utf8的编码下，一个汉字占用3字节，这个循环取出字符串中的一个汉字的utf8编码
 80004d0:	7d3b      	ldrb	r3, [r7, #20]
 80004d2:	3301      	adds	r3, #1
 80004d4:	753b      	strb	r3, [r7, #20]
 80004d6:	7d3b      	ldrb	r3, [r7, #20]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d81a      	bhi.n	8000512 <OLED_showChinese+0x92>
 80004dc:	7d3b      	ldrb	r3, [r7, #20]
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1e7      	bne.n	80004b8 <OLED_showChinese+0x38>
		}
		for (; memcmp(stopseek,cn16_16[seek].ch_utf8,3) != 0 /*字库中最后一个字是stopseek，代表没有找到，此时跳出循环*/; ++seek)
 80004e8:	e013      	b.n	8000512 <OLED_showChinese+0x92>
		{
			if( memcmp(perchinese, cn16_16[seek].ch_utf8 ,3) == 0 )//将取出的3字节与字库中的字对比
 80004ea:	7dba      	ldrb	r2, [r7, #22]
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	00da      	lsls	r2, r3, #3
 80004f4:	1ad2      	subs	r2, r2, r3
 80004f6:	4b2b      	ldr	r3, [pc, #172]	@ (80005a4 <OLED_showChinese+0x124>)
 80004f8:	18d1      	adds	r1, r2, r3
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2203      	movs	r2, #3
 8000500:	4618      	mov	r0, r3
 8000502:	f001 ff63 	bl	80023cc <memcmp>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d014      	beq.n	8000536 <OLED_showChinese+0xb6>
		for (; memcmp(stopseek,cn16_16[seek].ch_utf8,3) != 0 /*字库中最后一个字是stopseek，代表没有找到，此时跳出循环*/; ++seek)
 800050c:	7dbb      	ldrb	r3, [r7, #22]
 800050e:	3301      	adds	r3, #1
 8000510:	75bb      	strb	r3, [r7, #22]
 8000512:	7dba      	ldrb	r2, [r7, #22]
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	00da      	lsls	r2, r3, #3
 800051c:	1ad2      	subs	r2, r2, r3
 800051e:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <OLED_showChinese+0x124>)
 8000520:	18d1      	adds	r1, r2, r3
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2203      	movs	r2, #3
 8000528:	4618      	mov	r0, r3
 800052a:	f001 ff4f 	bl	80023cc <memcmp>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1da      	bne.n	80004ea <OLED_showChinese+0x6a>
 8000534:	e000      	b.n	8000538 <OLED_showChinese+0xb8>
			{
				break;
 8000536:	bf00      	nop
			}
		}
		OLED_showImage(Page, locateX, 16, 1, cn16_16[seek].ch_dt1);//显示汉字第一部分
 8000538:	7dba      	ldrb	r2, [r7, #22]
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	00da      	lsls	r2, r3, #3
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <OLED_showChinese+0x124>)
 8000546:	4413      	add	r3, r2
 8000548:	3303      	adds	r3, #3
 800054a:	7d79      	ldrb	r1, [r7, #21]
 800054c:	79f8      	ldrb	r0, [r7, #7]
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2210      	movs	r2, #16
 8000554:	f7ff ff52 	bl	80003fc <OLED_showImage>
		OLED_showImage(Page+1, locateX, 16, 1, cn16_16[seek].ch_dt2);//显示汉字第二部分
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	3301      	adds	r3, #1
 800055c:	b2d8      	uxtb	r0, r3
 800055e:	7dba      	ldrb	r2, [r7, #22]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	00da      	lsls	r2, r3, #3
 8000568:	1ad2      	subs	r2, r2, r3
 800056a:	f102 0310 	add.w	r3, r2, #16
 800056e:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <OLED_showChinese+0x124>)
 8000570:	4413      	add	r3, r2
 8000572:	3303      	adds	r3, #3
 8000574:	7d79      	ldrb	r1, [r7, #21]
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2301      	movs	r3, #1
 800057a:	2210      	movs	r2, #16
 800057c:	f7ff ff3e 	bl	80003fc <OLED_showImage>
		locateX += 16;
 8000580:	7d7b      	ldrb	r3, [r7, #21]
 8000582:	3310      	adds	r3, #16
 8000584:	757b      	strb	r3, [r7, #21]
		if(Chinese[pointAllChinese]==0x00){break;}
 8000586:	7dfb      	ldrb	r3, [r7, #23]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	4413      	add	r3, r2
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d000      	beq.n	8000594 <OLED_showChinese+0x114>
		seek = 0;
 8000592:	e78c      	b.n	80004ae <OLED_showChinese+0x2e>
		if(Chinese[pointAllChinese]==0x00){break;}
 8000594:	bf00      	nop
	}
}
 8000596:	bf00      	nop
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08002478 	.word	0x08002478
 80005a4:	20000000 	.word	0x20000000

080005a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2010      	movs	r0, #16
 80005cc:	f000 fb4b 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005d0:	2010      	movs	r0, #16
 80005d2:	f000 fb64 	bl	8000c9e <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_GPIO_Init+0x58>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a13      	ldr	r2, [pc, #76]	@ (800063c <MX_GPIO_Init+0x58>)
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_GPIO_Init+0x58>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_GPIO_Init+0x58>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <MX_GPIO_Init+0x58>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_GPIO_Init+0x58>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_GPIO_Init+0x58>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a07      	ldr	r2, [pc, #28]	@ (800063c <MX_GPIO_Init+0x58>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <MX_GPIO_Init+0x58>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000

08000640 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f000 fe0d 	bl	800129c <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f8f5 	bl	8000876 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000564 	.word	0x20000564
 8000694:	40005400 	.word	0x40005400
 8000698:	00061a80 	.word	0x00061a80

0800069c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a30      	ldr	r2, [pc, #192]	@ (8000778 <HAL_I2C_MspInit+0xdc>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d158      	bne.n	800076e <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b2f      	ldr	r3, [pc, #188]	@ (800077c <HAL_I2C_MspInit+0xe0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a2e      	ldr	r2, [pc, #184]	@ (800077c <HAL_I2C_MspInit+0xe0>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <HAL_I2C_MspInit+0xe0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4825      	ldr	r0, [pc, #148]	@ (8000780 <HAL_I2C_MspInit+0xe4>)
 80006ea:	f000 fc53 	bl	8000f94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <HAL_I2C_MspInit+0xe8>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80006fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
 8000704:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <HAL_I2C_MspInit+0xe8>)
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_I2C_MspInit+0xe0>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <HAL_I2C_MspInit+0xe0>)
 8000710:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <HAL_I2C_MspInit+0xe0>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000724:	4a19      	ldr	r2, [pc, #100]	@ (800078c <HAL_I2C_MspInit+0xf0>)
 8000726:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 800072a:	2210      	movs	r2, #16
 800072c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000754:	f000 fabe 	bl	8000cd4 <HAL_DMA_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800075e:	f000 f88a 	bl	8000876 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 8000766:	635a      	str	r2, [r3, #52]	@ 0x34
 8000768:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <HAL_I2C_MspInit+0xec>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	@ 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000
 8000780:	40010c00 	.word	0x40010c00
 8000784:	40010000 	.word	0x40010000
 8000788:	200005b8 	.word	0x200005b8
 800078c:	4002006c 	.word	0x4002006c

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 f90a 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f828 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f7ff ff22 	bl	80005e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a0:	f7ff ff02 	bl	80005a8 <MX_DMA_Init>
  MX_I2C1_Init();
 80007a4:	f7ff ff4c 	bl	8000640 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 80007a8:	f7ff fd0d 	bl	80001c6 <OLED_init>
  OLED_showChinese(0, 0, "你好世界");
 80007ac:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <main+0x58>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fe65 	bl	8000480 <OLED_showChinese>
  OLED_showChinese(2, 0, "你好世界");
 80007b6:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <main+0x58>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff fe60 	bl	8000480 <OLED_showChinese>
  OLED_showChinese(4, 0, "你好世界");
 80007c0:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <main+0x58>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	2004      	movs	r0, #4
 80007c6:	f7ff fe5b 	bl	8000480 <OLED_showChinese>
  OLED_showChinese(6, 0, "你好世界");
 80007ca:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <main+0x58>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	2006      	movs	r0, #6
 80007d0:	f7ff fe56 	bl	8000480 <OLED_showChinese>
  OLED_reverse(0, 0, 127, 16);
 80007d4:	2310      	movs	r3, #16
 80007d6:	227f      	movs	r2, #127	@ 0x7f
 80007d8:	2100      	movs	r1, #0
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fda4 	bl	8000328 <OLED_reverse>
  OLED_updata();
 80007e0:	f7ff fd66 	bl	80002b0 <OLED_updata>
//      HAL_Delay(1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <main+0x54>
 80007e8:	0800248c 	.word	0x0800248c

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	@ 0x40
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2228      	movs	r2, #40	@ 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fdf6 	bl	80023ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000828:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800082a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f9cd 	bl	8001bd4 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000840:	f000 f819 	bl	8000876 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2102      	movs	r1, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fc3a 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800086a:	f000 f804 	bl	8000876 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3740      	adds	r7, #64	@ 0x40
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087a:	b672      	cpsid	i
}
 800087c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <HAL_MspInit+0x5c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_MspInit+0x5c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	@ (80008e0 <HAL_MspInit+0x5c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <HAL_MspInit+0x5c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_MspInit+0x60>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HAL_MspInit+0x60>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010000 	.word	0x40010000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <NMI_Handler+0x4>

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <MemManage_Handler+0x4>

08000900 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <UsageFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f87e 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <DMA1_Channel6_IRQHandler+0x10>)
 8000946:	f000 fa1f 	bl	8000d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200005b8 	.word	0x200005b8

08000954 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000960:	f7ff fff8 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000966:	490c      	ldr	r1, [pc, #48]	@ (8000998 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000968:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <LoopFillZerobss+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a09      	ldr	r2, [pc, #36]	@ (80009a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800097c:	4c09      	ldr	r4, [pc, #36]	@ (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f001 fd37 	bl	80023fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff feff 	bl	8000790 <main>
  bx lr
 8000992:	4770      	bx	lr
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800099c:	080024d0 	.word	0x080024d0
  ldr r2, =_sbss
 80009a0:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80009a4:	20000600 	.word	0x20000600

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f947 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff ff5c 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f95f 	bl	8000cba <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f000 f927 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	@ (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000013c 	.word	0x2000013c
 8000a30:	20000144 	.word	0x20000144
 8000a34:	20000140 	.word	0x20000140

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_IncTick+0x1c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_IncTick+0x20>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a03      	ldr	r2, [pc, #12]	@ (8000a58 <HAL_IncTick+0x20>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	20000144 	.word	0x20000144
 8000a58:	200005fc 	.word	0x200005fc

08000a5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b02      	ldr	r3, [pc, #8]	@ (8000a6c <HAL_GetTick+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	200005fc 	.word	0x200005fc

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff fff0 	bl	8000a5c <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_Delay+0x44>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffe0 	bl	8000a5c <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000144 	.word	0x20000144

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4906      	ldr	r1, [pc, #24]	@ (8000b50 <__NVIC_EnableIRQ+0x34>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	@ 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff90 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff2d 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff42 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff35 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e043      	b.n	8000d72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <HAL_DMA_Init+0xa8>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <HAL_DMA_Init+0xac>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	009a      	lsls	r2, r3, #2
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <HAL_DMA_Init+0xb0>)
 8000d06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d1e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	bffdfff8 	.word	0xbffdfff8
 8000d80:	cccccccd 	.word	0xcccccccd
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	2204      	movs	r2, #4
 8000da6:	409a      	lsls	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d04f      	beq.n	8000e50 <HAL_DMA_IRQHandler+0xc8>
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d04a      	beq.n	8000e50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d107      	bne.n	8000dd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0204 	bic.w	r2, r2, #4
 8000dd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a66      	ldr	r2, [pc, #408]	@ (8000f78 <HAL_DMA_IRQHandler+0x1f0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d029      	beq.n	8000e36 <HAL_DMA_IRQHandler+0xae>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a65      	ldr	r2, [pc, #404]	@ (8000f7c <HAL_DMA_IRQHandler+0x1f4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d022      	beq.n	8000e32 <HAL_DMA_IRQHandler+0xaa>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a63      	ldr	r2, [pc, #396]	@ (8000f80 <HAL_DMA_IRQHandler+0x1f8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01a      	beq.n	8000e2c <HAL_DMA_IRQHandler+0xa4>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a62      	ldr	r2, [pc, #392]	@ (8000f84 <HAL_DMA_IRQHandler+0x1fc>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d012      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x9e>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a60      	ldr	r2, [pc, #384]	@ (8000f88 <HAL_DMA_IRQHandler+0x200>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00a      	beq.n	8000e20 <HAL_DMA_IRQHandler+0x98>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8000f8c <HAL_DMA_IRQHandler+0x204>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d102      	bne.n	8000e1a <HAL_DMA_IRQHandler+0x92>
 8000e14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e18:	e00e      	b.n	8000e38 <HAL_DMA_IRQHandler+0xb0>
 8000e1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e1e:	e00b      	b.n	8000e38 <HAL_DMA_IRQHandler+0xb0>
 8000e20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e24:	e008      	b.n	8000e38 <HAL_DMA_IRQHandler+0xb0>
 8000e26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e2a:	e005      	b.n	8000e38 <HAL_DMA_IRQHandler+0xb0>
 8000e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e30:	e002      	b.n	8000e38 <HAL_DMA_IRQHandler+0xb0>
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	e000      	b.n	8000e38 <HAL_DMA_IRQHandler+0xb0>
 8000e36:	2304      	movs	r3, #4
 8000e38:	4a55      	ldr	r2, [pc, #340]	@ (8000f90 <HAL_DMA_IRQHandler+0x208>)
 8000e3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 8094 	beq.w	8000f6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e4e:	e08e      	b.n	8000f6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	2202      	movs	r2, #2
 8000e56:	409a      	lsls	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d056      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x186>
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d051      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10b      	bne.n	8000e90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 020a 	bic.w	r2, r2, #10
 8000e86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a38      	ldr	r2, [pc, #224]	@ (8000f78 <HAL_DMA_IRQHandler+0x1f0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d029      	beq.n	8000eee <HAL_DMA_IRQHandler+0x166>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a37      	ldr	r2, [pc, #220]	@ (8000f7c <HAL_DMA_IRQHandler+0x1f4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d022      	beq.n	8000eea <HAL_DMA_IRQHandler+0x162>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a35      	ldr	r2, [pc, #212]	@ (8000f80 <HAL_DMA_IRQHandler+0x1f8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01a      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x15c>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a34      	ldr	r2, [pc, #208]	@ (8000f84 <HAL_DMA_IRQHandler+0x1fc>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d012      	beq.n	8000ede <HAL_DMA_IRQHandler+0x156>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a32      	ldr	r2, [pc, #200]	@ (8000f88 <HAL_DMA_IRQHandler+0x200>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x150>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a31      	ldr	r2, [pc, #196]	@ (8000f8c <HAL_DMA_IRQHandler+0x204>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d102      	bne.n	8000ed2 <HAL_DMA_IRQHandler+0x14a>
 8000ecc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ed0:	e00e      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x168>
 8000ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ed6:	e00b      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x168>
 8000ed8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000edc:	e008      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x168>
 8000ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee2:	e005      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x168>
 8000ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee8:	e002      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x168>
 8000eea:	2320      	movs	r3, #32
 8000eec:	e000      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x168>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	4a27      	ldr	r2, [pc, #156]	@ (8000f90 <HAL_DMA_IRQHandler+0x208>)
 8000ef2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d034      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f0c:	e02f      	b.n	8000f6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	2208      	movs	r2, #8
 8000f14:	409a      	lsls	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d028      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x1e8>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 020e 	bic.w	r2, r2, #14
 8000f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	4798      	blx	r3
    }
  }
  return;
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020008 	.word	0x40020008
 8000f7c:	4002001c 	.word	0x4002001c
 8000f80:	40020030 	.word	0x40020030
 8000f84:	40020044 	.word	0x40020044
 8000f88:	40020058 	.word	0x40020058
 8000f8c:	4002006c 	.word	0x4002006c
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	@ 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e169      	b.n	800127c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8158 	bne.w	8001276 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a9a      	ldr	r2, [pc, #616]	@ (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05e      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a98      	ldr	r2, [pc, #608]	@ (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d875      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fd6:	4a98      	ldr	r2, [pc, #608]	@ (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d058      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fdc:	4a96      	ldr	r2, [pc, #600]	@ (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d86f      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fe2:	4a96      	ldr	r2, [pc, #600]	@ (800123c <HAL_GPIO_Init+0x2a8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d052      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fe8:	4a94      	ldr	r2, [pc, #592]	@ (800123c <HAL_GPIO_Init+0x2a8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d869      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fee:	4a94      	ldr	r2, [pc, #592]	@ (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d04c      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000ff4:	4a92      	ldr	r2, [pc, #584]	@ (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d863      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a92      	ldr	r2, [pc, #584]	@ (8001244 <HAL_GPIO_Init+0x2b0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d046      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8001000:	4a90      	ldr	r2, [pc, #576]	@ (8001244 <HAL_GPIO_Init+0x2b0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d85d      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d82a      	bhi.n	8001060 <HAL_GPIO_Init+0xcc>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d859      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 800100e:	a201      	add	r2, pc, #4	@ (adr r2, 8001014 <HAL_GPIO_Init+0x80>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	0800108f 	.word	0x0800108f
 8001018:	08001069 	.word	0x08001069
 800101c:	0800107b 	.word	0x0800107b
 8001020:	080010bd 	.word	0x080010bd
 8001024:	080010c3 	.word	0x080010c3
 8001028:	080010c3 	.word	0x080010c3
 800102c:	080010c3 	.word	0x080010c3
 8001030:	080010c3 	.word	0x080010c3
 8001034:	080010c3 	.word	0x080010c3
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010c3 	.word	0x080010c3
 8001040:	080010c3 	.word	0x080010c3
 8001044:	080010c3 	.word	0x080010c3
 8001048:	080010c3 	.word	0x080010c3
 800104c:	080010c3 	.word	0x080010c3
 8001050:	080010c3 	.word	0x080010c3
 8001054:	080010c3 	.word	0x080010c3
 8001058:	08001071 	.word	0x08001071
 800105c:	08001085 	.word	0x08001085
 8001060:	4a79      	ldr	r2, [pc, #484]	@ (8001248 <HAL_GPIO_Init+0x2b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001066:	e02c      	b.n	80010c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e029      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	3304      	adds	r3, #4
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e024      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	3308      	adds	r3, #8
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e01f      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	330c      	adds	r3, #12
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e01a      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001096:	2304      	movs	r3, #4
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e013      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a4:	2308      	movs	r3, #8
 80010a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	611a      	str	r2, [r3, #16]
          break;
 80010ae:	e009      	b.n	80010c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	615a      	str	r2, [r3, #20]
          break;
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          break;
 80010c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d801      	bhi.n	80010ce <HAL_GPIO_Init+0x13a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	e001      	b.n	80010d2 <HAL_GPIO_Init+0x13e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3304      	adds	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	@ 0xff
 80010d8:	d802      	bhi.n	80010e0 <HAL_GPIO_Init+0x14c>
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x152>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	3b08      	subs	r3, #8
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	210f      	movs	r1, #15
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80b1 	beq.w	8001276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	@ (800124c <HAL_GPIO_Init+0x2b8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a4c      	ldr	r2, [pc, #304]	@ (800124c <HAL_GPIO_Init+0x2b8>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b4a      	ldr	r3, [pc, #296]	@ (800124c <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800112c:	4a48      	ldr	r2, [pc, #288]	@ (8001250 <HAL_GPIO_Init+0x2bc>)
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a40      	ldr	r2, [pc, #256]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d013      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3f      	ldr	r2, [pc, #252]	@ (8001258 <HAL_GPIO_Init+0x2c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3e      	ldr	r2, [pc, #248]	@ (800125c <HAL_GPIO_Init+0x2c8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1e4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3d      	ldr	r2, [pc, #244]	@ (8001260 <HAL_GPIO_Init+0x2cc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001170:	2303      	movs	r3, #3
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001174:	2304      	movs	r3, #4
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001178:	2302      	movs	r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001180:	2300      	movs	r3, #0
 8001182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001192:	492f      	ldr	r1, [pc, #188]	@ (8001250 <HAL_GPIO_Init+0x2bc>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	492c      	ldr	r1, [pc, #176]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4928      	ldr	r1, [pc, #160]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	4922      	ldr	r1, [pc, #136]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	491e      	ldr	r1, [pc, #120]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4918      	ldr	r1, [pc, #96]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	4914      	ldr	r1, [pc, #80]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d021      	beq.n	8001268 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	490e      	ldr	r1, [pc, #56]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e021      	b.n	8001276 <HAL_GPIO_Init+0x2e2>
 8001232:	bf00      	nop
 8001234:	10320000 	.word	0x10320000
 8001238:	10310000 	.word	0x10310000
 800123c:	10220000 	.word	0x10220000
 8001240:	10210000 	.word	0x10210000
 8001244:	10120000 	.word	0x10120000
 8001248:	10110000 	.word	0x10110000
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011000 	.word	0x40011000
 8001260:	40011400 	.word	0x40011400
 8001264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_GPIO_Init+0x304>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	43db      	mvns	r3, r3
 8001270:	4909      	ldr	r1, [pc, #36]	@ (8001298 <HAL_GPIO_Init+0x304>)
 8001272:	4013      	ands	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	3301      	adds	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	f47f ae8e 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	372c      	adds	r7, #44	@ 0x2c
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e12b      	b.n	8001506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f9ea 	bl	800069c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2224      	movs	r2, #36	@ 0x24
 80012cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001300:	f001 f832 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a81      	ldr	r2, [pc, #516]	@ (8001510 <HAL_I2C_Init+0x274>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d807      	bhi.n	8001320 <HAL_I2C_Init+0x84>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a80      	ldr	r2, [pc, #512]	@ (8001514 <HAL_I2C_Init+0x278>)
 8001314:	4293      	cmp	r3, r2
 8001316:	bf94      	ite	ls
 8001318:	2301      	movls	r3, #1
 800131a:	2300      	movhi	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	e006      	b.n	800132e <HAL_I2C_Init+0x92>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a7d      	ldr	r2, [pc, #500]	@ (8001518 <HAL_I2C_Init+0x27c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	bf94      	ite	ls
 8001328:	2301      	movls	r3, #1
 800132a:	2300      	movhi	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0e7      	b.n	8001506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4a78      	ldr	r2, [pc, #480]	@ (800151c <HAL_I2C_Init+0x280>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a6a      	ldr	r2, [pc, #424]	@ (8001510 <HAL_I2C_Init+0x274>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d802      	bhi.n	8001370 <HAL_I2C_Init+0xd4>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	e009      	b.n	8001384 <HAL_I2C_Init+0xe8>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a69      	ldr	r2, [pc, #420]	@ (8001520 <HAL_I2C_Init+0x284>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	3301      	adds	r3, #1
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	430b      	orrs	r3, r1
 800138a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001396:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	495c      	ldr	r1, [pc, #368]	@ (8001510 <HAL_I2C_Init+0x274>)
 80013a0:	428b      	cmp	r3, r1
 80013a2:	d819      	bhi.n	80013d8 <HAL_I2C_Init+0x13c>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1e59      	subs	r1, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b2:	1c59      	adds	r1, r3, #1
 80013b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013b8:	400b      	ands	r3, r1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <HAL_I2C_Init+0x138>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1e59      	subs	r1, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d2:	e051      	b.n	8001478 <HAL_I2C_Init+0x1dc>
 80013d4:	2304      	movs	r3, #4
 80013d6:	e04f      	b.n	8001478 <HAL_I2C_Init+0x1dc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d111      	bne.n	8001404 <HAL_I2C_Init+0x168>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1e58      	subs	r0, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	e012      	b.n	800142a <HAL_I2C_Init+0x18e>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1e58      	subs	r0, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	0099      	lsls	r1, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	fbb0 f3f3 	udiv	r3, r0, r3
 800141a:	3301      	adds	r3, #1
 800141c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_Init+0x196>
 800142e:	2301      	movs	r3, #1
 8001430:	e022      	b.n	8001478 <HAL_I2C_Init+0x1dc>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10e      	bne.n	8001458 <HAL_I2C_Init+0x1bc>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1e58      	subs	r0, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6859      	ldr	r1, [r3, #4]
 8001442:	460b      	mov	r3, r1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	440b      	add	r3, r1
 8001448:	fbb0 f3f3 	udiv	r3, r0, r3
 800144c:	3301      	adds	r3, #1
 800144e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001456:	e00f      	b.n	8001478 <HAL_I2C_Init+0x1dc>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e58      	subs	r0, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	0099      	lsls	r1, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	3301      	adds	r3, #1
 8001470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	6809      	ldr	r1, [r1, #0]
 800147c:	4313      	orrs	r3, r2
 800147e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69da      	ldr	r2, [r3, #28]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6911      	ldr	r1, [r2, #16]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68d2      	ldr	r2, [r2, #12]
 80014b2:	4311      	orrs	r1, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	000186a0 	.word	0x000186a0
 8001514:	001e847f 	.word	0x001e847f
 8001518:	003d08ff 	.word	0x003d08ff
 800151c:	431bde83 	.word	0x431bde83
 8001520:	10624dd3 	.word	0x10624dd3

08001524 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	461a      	mov	r2, r3
 8001530:	460b      	mov	r3, r1
 8001532:	817b      	strh	r3, [r7, #10]
 8001534:	4613      	mov	r3, r2
 8001536:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff fa90 	bl	8000a5c <HAL_GetTick>
 800153c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b20      	cmp	r3, #32
 8001548:	f040 80e0 	bne.w	800170c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2319      	movs	r3, #25
 8001552:	2201      	movs	r2, #1
 8001554:	4970      	ldr	r1, [pc, #448]	@ (8001718 <HAL_I2C_Master_Transmit+0x1f4>)
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f964 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001562:	2302      	movs	r3, #2
 8001564:	e0d3      	b.n	800170e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_I2C_Master_Transmit+0x50>
 8001570:	2302      	movs	r3, #2
 8001572:	e0cc      	b.n	800170e <HAL_I2C_Master_Transmit+0x1ea>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d007      	beq.n	800159a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2221      	movs	r2, #33	@ 0x21
 80015ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2210      	movs	r2, #16
 80015b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	893a      	ldrh	r2, [r7, #8]
 80015ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a50      	ldr	r2, [pc, #320]	@ (800171c <HAL_I2C_Master_Transmit+0x1f8>)
 80015da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015dc:	8979      	ldrh	r1, [r7, #10]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	6a3a      	ldr	r2, [r7, #32]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f89c 	bl	8001720 <I2C_MasterRequestWrite>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e08d      	b.n	800170e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001608:	e066      	b.n	80016d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	6a39      	ldr	r1, [r7, #32]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fa22 	bl	8001a58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00d      	beq.n	8001636 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	2b04      	cmp	r3, #4
 8001620:	d107      	bne.n	8001632 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06b      	b.n	800170e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b04      	cmp	r3, #4
 8001672:	d11b      	bne.n	80016ac <HAL_I2C_Master_Transmit+0x188>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d017      	beq.n	80016ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	6a39      	ldr	r1, [r7, #32]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 fa19 	bl	8001ae8 <I2C_WaitOnBTFFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00d      	beq.n	80016d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d107      	bne.n	80016d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e01a      	b.n	800170e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d194      	bne.n	800160a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	e000      	b.n	800170e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800170c:	2302      	movs	r3, #2
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	00100002 	.word	0x00100002
 800171c:	ffff0000 	.word	0xffff0000

08001720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	460b      	mov	r3, r1
 800172e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d006      	beq.n	800174a <I2C_MasterRequestWrite+0x2a>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d003      	beq.n	800174a <I2C_MasterRequestWrite+0x2a>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001748:	d108      	bne.n	800175c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e00b      	b.n	8001774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	2b12      	cmp	r3, #18
 8001762:	d107      	bne.n	8001774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f84f 	bl	8001824 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800179a:	d103      	bne.n	80017a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e035      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017b0:	d108      	bne.n	80017c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017b2:	897b      	ldrh	r3, [r7, #10]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	e01b      	b.n	80017fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017c4:	897b      	ldrh	r3, [r7, #10]
 80017c6:	11db      	asrs	r3, r3, #7
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0306 	and.w	r3, r3, #6
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f063 030f 	orn	r3, r3, #15
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	490e      	ldr	r1, [pc, #56]	@ (800181c <I2C_MasterRequestWrite+0xfc>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f898 	bl	8001918 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e010      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4907      	ldr	r1, [pc, #28]	@ (8001820 <I2C_MasterRequestWrite+0x100>)
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f888 	bl	8001918 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	00010008 	.word	0x00010008
 8001820:	00010002 	.word	0x00010002

08001824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001834:	e048      	b.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d044      	beq.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183e:	f7ff f90d 	bl	8000a5c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d302      	bcc.n	8001854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d139      	bne.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10d      	bne.n	800187a <I2C_WaitOnFlagUntilTimeout+0x56>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	43da      	mvns	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	4013      	ands	r3, r2
 800186a:	b29b      	uxth	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	e00c      	b.n	8001894 <I2C_WaitOnFlagUntilTimeout+0x70>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	43da      	mvns	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4013      	ands	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	429a      	cmp	r2, r3
 8001898:	d116      	bne.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f043 0220 	orr.w	r2, r3, #32
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e023      	b.n	8001910 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10d      	bne.n	80018ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	43da      	mvns	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4013      	ands	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	e00c      	b.n	8001908 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	43da      	mvns	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4013      	ands	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	429a      	cmp	r2, r3
 800190c:	d093      	beq.n	8001836 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001926:	e071      	b.n	8001a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001936:	d123      	bne.n	8001980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001946:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f043 0204 	orr.w	r2, r3, #4
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e067      	b.n	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d041      	beq.n	8001a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001988:	f7ff f868 	bl	8000a5c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d302      	bcc.n	800199e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d136      	bne.n	8001a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10c      	bne.n	80019c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4013      	ands	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	e00b      	b.n	80019da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4013      	ands	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e021      	b.n	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10c      	bne.n	8001a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e00b      	b.n	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f af6d 	bne.w	8001928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a64:	e034      	b.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f886 	bl	8001b78 <I2C_IsAcknowledgeFailed>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e034      	b.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d028      	beq.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7fe ffed 	bl	8000a5c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11d      	bne.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	2b80      	cmp	r3, #128	@ 0x80
 8001aa0:	d016      	beq.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e007      	b.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ada:	2b80      	cmp	r3, #128	@ 0x80
 8001adc:	d1c3      	bne.n	8001a66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001af4:	e034      	b.n	8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f83e 	bl	8001b78 <I2C_IsAcknowledgeFailed>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e034      	b.n	8001b70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d028      	beq.n	8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0e:	f7fe ffa5 	bl	8000a5c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11d      	bne.n	8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d016      	beq.n	8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f043 0220 	orr.w	r2, r3, #32
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e007      	b.n	8001b70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d1c3      	bne.n	8001af6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8e:	d11b      	bne.n	8001bc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e272      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8087 	beq.w	8001d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d00c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c00:	4b8f      	ldr	r3, [pc, #572]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d112      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
 8001c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b89      	ldr	r3, [pc, #548]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x12c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d168      	bne.n	8001d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e24c      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x76>
 8001c3c:	4b80      	ldr	r3, [pc, #512]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7f      	ldr	r2, [pc, #508]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e02e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b7b      	ldr	r3, [pc, #492]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7a      	ldr	r2, [pc, #488]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b78      	ldr	r3, [pc, #480]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a77      	ldr	r2, [pc, #476]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbc>
 8001c76:	4b72      	ldr	r3, [pc, #456]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a71      	ldr	r2, [pc, #452]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6e      	ldr	r2, [pc, #440]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c90:	4b6b      	ldr	r3, [pc, #428]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b68      	ldr	r3, [pc, #416]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a67      	ldr	r2, [pc, #412]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fed4 	bl	8000a5c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fed0 	bl	8000a5c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e200      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe4>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fec0 	bl	8000a5c <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7fe febc 	bl	8000a5c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	@ 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1ec      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x10c>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1a:	4b49      	ldr	r3, [pc, #292]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
 8001d26:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b43      	ldr	r3, [pc, #268]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c0      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4939      	ldr	r1, [pc, #228]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fe75 	bl	8000a5c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7fe fe71 	bl	8000a5c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1a1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4927      	ldr	r1, [pc, #156]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fe54 	bl	8000a5c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7fe fe50 	bl	8000a5c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e180      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03a      	beq.n	8001e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d019      	beq.n	8001e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7fe fe34 	bl	8000a5c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7fe fe30 	bl	8000a5c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e160      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 faba 	bl	8002390 <RCC_Delay>
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7fe fe1a 	bl	8000a5c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7fe fe16 	bl	8000a5c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d908      	bls.n	8001e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e146      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	42420000 	.word	0x42420000
 8001e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e9      	bne.n	8001e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a6 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a87      	ldr	r2, [pc, #540]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b85      	ldr	r3, [pc, #532]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b82      	ldr	r3, [pc, #520]	@ (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe fdd7 	bl	8000a5c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7fe fdd3 	bl	8000a5c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	@ 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e103      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b75      	ldr	r3, [pc, #468]	@ (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e02d      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x334>
 8001eee:	4b6a      	ldr	r3, [pc, #424]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a69      	ldr	r2, [pc, #420]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b67      	ldr	r3, [pc, #412]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a66      	ldr	r2, [pc, #408]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x356>
 8001f10:	4b61      	ldr	r3, [pc, #388]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a60      	ldr	r2, [pc, #384]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a5d      	ldr	r2, [pc, #372]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b58      	ldr	r3, [pc, #352]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a57      	ldr	r2, [pc, #348]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe fd87 	bl	8000a5c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe fd83 	bl	8000a5c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0b1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4b4b      	ldr	r3, [pc, #300]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x37e>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fd71 	bl	8000a5c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fd6d 	bl	8000a5c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e09b      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	4b40      	ldr	r3, [pc, #256]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fbc:	4b36      	ldr	r3, [pc, #216]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d061      	beq.n	800208c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d146      	bne.n	800205e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fd41 	bl	8000a5c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7fe fd3d 	bl	8000a5c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e06d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4921      	ldr	r1, [pc, #132]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002018:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a19      	ldr	r1, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	430b      	orrs	r3, r1
 800202a:	491b      	ldr	r1, [pc, #108]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe fd11 	bl	8000a5c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7fe fd0d 	bl	8000a5c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x46a>
 800205c:	e035      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe fcfa 	bl	8000a5c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe fcf6 	bl	8000a5c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e026      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x498>
 800208a:	e01e      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e019      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_RCC_OscConfig+0x500>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0d0      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4965      	ldr	r1, [pc, #404]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a58      	ldr	r2, [pc, #352]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800213e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d040      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b41      	ldr	r3, [pc, #260]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e073      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	4b3d      	ldr	r3, [pc, #244]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e06b      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b39      	ldr	r3, [pc, #228]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4936      	ldr	r1, [pc, #216]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7fe fc48 	bl	8000a5c <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fc44 	bl	8000a5c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e053      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d210      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4922      	ldr	r1, [pc, #136]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fba6 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
 80022a0:	0800249c 	.word	0x0800249c
 80022a4:	2000013c 	.word	0x2000013c
 80022a8:	20000140 	.word	0x20000140

080022ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x30>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x36>
 80022da:	e027      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 80022de:	613b      	str	r3, [r7, #16]
      break;
 80022e0:	e027      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d010      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0c5b      	lsrs	r3, r3, #17
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	4a11      	ldr	r2, [pc, #68]	@ (800234c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e004      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0c      	ldr	r2, [pc, #48]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	613b      	str	r3, [r7, #16]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 800232e:	613b      	str	r3, [r7, #16]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	693b      	ldr	r3, [r7, #16]
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	080024b4 	.word	0x080024b4
 800234c:	080024c4 	.word	0x080024c4
 8002350:	003d0900 	.word	0x003d0900

08002354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b02      	ldr	r3, [pc, #8]	@ (8002364 <HAL_RCC_GetHCLKFreq+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	2000013c 	.word	0x2000013c

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff2 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080024ac 	.word	0x080024ac

08002390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <RCC_Delay+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <RCC_Delay+0x38>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a5b      	lsrs	r3, r3, #9
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023ac:	bf00      	nop
  }
  while (Delay --);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <RCC_Delay+0x1c>
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	2000013c 	.word	0x2000013c
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <memcmp>:
 80023cc:	b510      	push	{r4, lr}
 80023ce:	3901      	subs	r1, #1
 80023d0:	4402      	add	r2, r0
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d101      	bne.n	80023da <memcmp+0xe>
 80023d6:	2000      	movs	r0, #0
 80023d8:	e005      	b.n	80023e6 <memcmp+0x1a>
 80023da:	7803      	ldrb	r3, [r0, #0]
 80023dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80023e0:	42a3      	cmp	r3, r4
 80023e2:	d001      	beq.n	80023e8 <memcmp+0x1c>
 80023e4:	1b18      	subs	r0, r3, r4
 80023e6:	bd10      	pop	{r4, pc}
 80023e8:	3001      	adds	r0, #1
 80023ea:	e7f2      	b.n	80023d2 <memcmp+0x6>

080023ec <memset>:
 80023ec:	4603      	mov	r3, r0
 80023ee:	4402      	add	r2, r0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d100      	bne.n	80023f6 <memset+0xa>
 80023f4:	4770      	bx	lr
 80023f6:	f803 1b01 	strb.w	r1, [r3], #1
 80023fa:	e7f9      	b.n	80023f0 <memset+0x4>

080023fc <__libc_init_array>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	2600      	movs	r6, #0
 8002400:	4d0c      	ldr	r5, [pc, #48]	@ (8002434 <__libc_init_array+0x38>)
 8002402:	4c0d      	ldr	r4, [pc, #52]	@ (8002438 <__libc_init_array+0x3c>)
 8002404:	1b64      	subs	r4, r4, r5
 8002406:	10a4      	asrs	r4, r4, #2
 8002408:	42a6      	cmp	r6, r4
 800240a:	d109      	bne.n	8002420 <__libc_init_array+0x24>
 800240c:	f000 f828 	bl	8002460 <_init>
 8002410:	2600      	movs	r6, #0
 8002412:	4d0a      	ldr	r5, [pc, #40]	@ (800243c <__libc_init_array+0x40>)
 8002414:	4c0a      	ldr	r4, [pc, #40]	@ (8002440 <__libc_init_array+0x44>)
 8002416:	1b64      	subs	r4, r4, r5
 8002418:	10a4      	asrs	r4, r4, #2
 800241a:	42a6      	cmp	r6, r4
 800241c:	d105      	bne.n	800242a <__libc_init_array+0x2e>
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	f855 3b04 	ldr.w	r3, [r5], #4
 8002424:	4798      	blx	r3
 8002426:	3601      	adds	r6, #1
 8002428:	e7ee      	b.n	8002408 <__libc_init_array+0xc>
 800242a:	f855 3b04 	ldr.w	r3, [r5], #4
 800242e:	4798      	blx	r3
 8002430:	3601      	adds	r6, #1
 8002432:	e7f2      	b.n	800241a <__libc_init_array+0x1e>
 8002434:	080024c8 	.word	0x080024c8
 8002438:	080024c8 	.word	0x080024c8
 800243c:	080024c8 	.word	0x080024c8
 8002440:	080024cc 	.word	0x080024cc

08002444 <memcpy>:
 8002444:	440a      	add	r2, r1
 8002446:	4291      	cmp	r1, r2
 8002448:	f100 33ff 	add.w	r3, r0, #4294967295
 800244c:	d100      	bne.n	8002450 <memcpy+0xc>
 800244e:	4770      	bx	lr
 8002450:	b510      	push	{r4, lr}
 8002452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002456:	4291      	cmp	r1, r2
 8002458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800245c:	d1f9      	bne.n	8002452 <memcpy+0xe>
 800245e:	bd10      	pop	{r4, pc}

08002460 <_init>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	bf00      	nop
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr

0800246c <_fini>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	bf00      	nop
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr
