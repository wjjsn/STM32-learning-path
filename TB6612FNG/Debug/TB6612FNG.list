
TB6612FNG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080034cc  080034cc  000044cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003540  08003540  00005888  2**0
                  CONTENTS
  4 .ARM          00000000  08003540  08003540  00005888  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003540  08003540  00005888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003544  08003544  00004544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000888  20000000  08003548  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000888  08003dd0  00005888  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e90  08003dd0  00005e90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b88e  00000000  00000000  000058b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208f  00000000  00000000  0001113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000131d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2c  00000000  00000000  00013f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bef  00000000  00000000  0001492c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001161a  00000000  00000000  0002d51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a89c  00000000  00000000  0003eb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c93d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b4c  00000000  00000000  000c9414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ccf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000888 	.word	0x20000888
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b4 	.word	0x080034b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000088c 	.word	0x2000088c
 8000148:	080034b4 	.word	0x080034b4

0800014c <OLED_WriteCommand>:

uint8_t DisplayBuf[8][128] = {0};
const uint8_t dataHead = 0x40;

void OLED_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 800015e:	f107 020c 	add.w	r2, r7, #12
 8000162:	f04f 33ff 	mov.w	r3, #4294967295
 8000166:	9300      	str	r3, [sp, #0]
 8000168:	2302      	movs	r3, #2
 800016a:	2178      	movs	r1, #120	@ 0x78
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <OLED_WriteCommand+0x30>)
 800016e:	f001 f91f 	bl	80013b0 <HAL_I2C_Master_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000ca4 	.word	0x20000ca4

08000180 <OLED_SetCursor>:
	sendBuffer[1]=dat;
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
}

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4618      	mov	r0, r3
 800019a:	f7ff ffd7 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	f043 0310 	orr.w	r3, r3, #16
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	4618      	mov	r0, r3
 80001ac:	f7ff ffce 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	4618      	mov	r0, r3
 80001ba:	f7ff ffc7 	bl	800014c <OLED_WriteCommand>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
	...

080001c8 <OLED_updata>:
		}
	}
}

void OLED_updata()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b0a4      	sub	sp, #144	@ 0x90
 80001cc:	af02      	add	r7, sp, #8
	for (int i = 0; i < 8; ++i)
 80001ce:	2300      	movs	r3, #0
 80001d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80001d4:	e027      	b.n	8000226 <OLED_updata+0x5e>
	{
		uint8_t dataBuf[129]={0x40,0};
 80001d6:	2340      	movs	r3, #64	@ 0x40
 80001d8:	603b      	str	r3, [r7, #0]
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	227d      	movs	r2, #125	@ 0x7d
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 fcd7 	bl	8002b94 <memset>
		OLED_SetCursor(i, 0);
 80001e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f7ff ffc6 	bl	8000180 <OLED_SetCursor>
		memcpy(dataBuf+1, DisplayBuf[i], 128);
 80001f4:	463b      	mov	r3, r7
 80001f6:	3301      	adds	r3, #1
 80001f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80001fc:	01d2      	lsls	r2, r2, #7
 80001fe:	490e      	ldr	r1, [pc, #56]	@ (8000238 <OLED_updata+0x70>)
 8000200:	4411      	add	r1, r2
 8000202:	2280      	movs	r2, #128	@ 0x80
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fcf9 	bl	8002bfc <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, dataBuf, 129, HAL_MAX_DELAY);
 800020a:	463a      	mov	r2, r7
 800020c:	f04f 33ff 	mov.w	r3, #4294967295
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2381      	movs	r3, #129	@ 0x81
 8000214:	2178      	movs	r1, #120	@ 0x78
 8000216:	4809      	ldr	r0, [pc, #36]	@ (800023c <OLED_updata+0x74>)
 8000218:	f001 f8ca 	bl	80013b0 <HAL_I2C_Master_Transmit>
	for (int i = 0; i < 8; ++i)
 800021c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000220:	3301      	adds	r3, #1
 8000222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800022a:	2b07      	cmp	r3, #7
 800022c:	ddd3      	ble.n	80001d6 <OLED_updata+0xe>
	}
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3788      	adds	r7, #136	@ 0x88
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	200008a4 	.word	0x200008a4
 800023c:	20000ca4 	.word	0x20000ca4

08000240 <OLED_showChar>:
		--Y;
	}
}

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b085      	sub	sp, #20
 8000244:	af02      	add	r7, sp, #8
 8000246:	4604      	mov	r4, r0
 8000248:	4608      	mov	r0, r1
 800024a:	4611      	mov	r1, r2
 800024c:	461a      	mov	r2, r3
 800024e:	4623      	mov	r3, r4
 8000250:	71fb      	strb	r3, [r7, #7]
 8000252:	4603      	mov	r3, r0
 8000254:	71bb      	strb	r3, [r7, #6]
 8000256:	460b      	mov	r3, r1
 8000258:	717b      	strb	r3, [r7, #5]
 800025a:	4613      	mov	r3, r2
 800025c:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 800025e:	79ba      	ldrb	r2, [r7, #6]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4611      	mov	r1, r2
 8000264:	4618      	mov	r0, r3
 8000266:	f7ff ff8b 	bl	8000180 <OLED_SetCursor>
	if (fontSize == 8)
 800026a:	793b      	ldrb	r3, [r7, #4]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d10c      	bne.n	800028a <OLED_showChar+0x4a>
	{
		OLED_showImage(Page, X, 8, 2, EN8_16[ a - ' ' ]);
 8000270:	797b      	ldrb	r3, [r7, #5]
 8000272:	3b20      	subs	r3, #32
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <OLED_showChar+0x78>)
 8000278:	4413      	add	r3, r2
 800027a:	79b9      	ldrb	r1, [r7, #6]
 800027c:	79f8      	ldrb	r0, [r7, #7]
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2302      	movs	r3, #2
 8000282:	2208      	movs	r2, #8
 8000284:	f000 f84a 	bl	800031c <OLED_showImage>
	}
	else if (fontSize == 6)
	{
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
	}
}
 8000288:	e012      	b.n	80002b0 <OLED_showChar+0x70>
	else if (fontSize == 6)
 800028a:	793b      	ldrb	r3, [r7, #4]
 800028c:	2b06      	cmp	r3, #6
 800028e:	d10f      	bne.n	80002b0 <OLED_showChar+0x70>
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
 8000290:	797b      	ldrb	r3, [r7, #5]
 8000292:	f1a3 0220 	sub.w	r2, r3, #32
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	4a07      	ldr	r2, [pc, #28]	@ (80002bc <OLED_showChar+0x7c>)
 80002a0:	4413      	add	r3, r2
 80002a2:	79b9      	ldrb	r1, [r7, #6]
 80002a4:	79f8      	ldrb	r0, [r7, #7]
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2301      	movs	r3, #1
 80002aa:	2206      	movs	r2, #6
 80002ac:	f000 f836 	bl	800031c <OLED_showImage>
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd90      	pop	{r4, r7, pc}
 80002b8:	20000000 	.word	0x20000000
 80002bc:	200005f0 	.word	0x200005f0

080002c0 <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	603a      	str	r2, [r7, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 80002ce:	460b      	mov	r3, r1
 80002d0:	71bb      	strb	r3, [r7, #6]
 80002d2:	4613      	mov	r3, r2
 80002d4:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e013      	b.n	8000304 <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	797a      	ldrb	r2, [r7, #5]
 80002e2:	fb02 f303 	mul.w	r3, r2, r3
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	4413      	add	r3, r2
 80002ec:	b2d9      	uxtb	r1, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	683a      	ldr	r2, [r7, #0]
 80002f2:	4413      	add	r3, r2
 80002f4:	781a      	ldrb	r2, [r3, #0]
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	79f8      	ldrb	r0, [r7, #7]
 80002fa:	f7ff ffa1 	bl	8000240 <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3301      	adds	r3, #1
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	4413      	add	r3, r2
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1e5      	bne.n	80002dc <OLED_showString+0x1c>
	}
}
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <OLED_showImage>:

void OLED_showImage(uint8_t Page, uint8_t X, uint8_t Width, uint8_t Height,uint8_t *Image)
{
 800031c:	b490      	push	{r4, r7}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4604      	mov	r4, r0
 8000324:	4608      	mov	r0, r1
 8000326:	4611      	mov	r1, r2
 8000328:	461a      	mov	r2, r3
 800032a:	4623      	mov	r3, r4
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	4603      	mov	r3, r0
 8000330:	71bb      	strb	r3, [r7, #6]
 8000332:	460b      	mov	r3, r1
 8000334:	717b      	strb	r3, [r7, #5]
 8000336:	4613      	mov	r3, r2
 8000338:	713b      	strb	r3, [r7, #4]
	for (int j = 0; j < Height; ++j)
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e022      	b.n	8000386 <OLED_showImage+0x6a>
	{
//		OLED_SetCursor( Page+j , X);
		for (int i = 0; i < Width; ++i)
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	e018      	b.n	8000378 <OLED_showImage+0x5c>
		{
//			OLED_WriteData(Image[Width*j+i]);
			DisplayBuf[Page+j][X+i] = Image[Width*j+i];
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	fb03 f202 	mul.w	r2, r3, r2
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	4413      	add	r3, r2
 8000352:	461a      	mov	r2, r3
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	1899      	adds	r1, r3, r2
 8000358:	79fa      	ldrb	r2, [r7, #7]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	441a      	add	r2, r3
 800035e:	79b8      	ldrb	r0, [r7, #6]
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4403      	add	r3, r0
 8000364:	7808      	ldrb	r0, [r1, #0]
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <OLED_showImage+0x80>)
 8000368:	01d2      	lsls	r2, r2, #7
 800036a:	440a      	add	r2, r1
 800036c:	4413      	add	r3, r2
 800036e:	4602      	mov	r2, r0
 8000370:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < Width; ++i)
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	3301      	adds	r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	797b      	ldrb	r3, [r7, #5]
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	429a      	cmp	r2, r3
 800037e:	dbe2      	blt.n	8000346 <OLED_showImage+0x2a>
	for (int j = 0; j < Height; ++j)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	793b      	ldrb	r3, [r7, #4]
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	429a      	cmp	r2, r3
 800038c:	dbd8      	blt.n	8000340 <OLED_showImage+0x24>
		}
	}
}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bc90      	pop	{r4, r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	200008a4 	.word	0x200008a4

080003a0 <OLED_showNUM>:
		if(Chinese[pointAllChinese]==0x00){break;}
	}
}

void OLED_showNUM(uint8_t Page, uint8_t X, uint32_t num, uint8_t fontSize)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	603a      	str	r2, [r7, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
 80003ae:	460b      	mov	r3, r1
 80003b0:	71bb      	strb	r3, [r7, #6]
 80003b2:	4613      	mov	r3, r2
 80003b4:	717b      	strb	r3, [r7, #5]
	char buffer[10];
	sprintf(buffer, "%lu", num);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	4907      	ldr	r1, [pc, #28]	@ (80003dc <OLED_showNUM+0x3c>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fbc8 	bl	8002b54 <siprintf>
	OLED_showString(Page, X, buffer, fontSize);
 80003c4:	797b      	ldrb	r3, [r7, #5]
 80003c6:	f107 020c 	add.w	r2, r7, #12
 80003ca:	79b9      	ldrb	r1, [r7, #6]
 80003cc:	79f8      	ldrb	r0, [r7, #7]
 80003ce:	f7ff ff77 	bl	80002c0 <OLED_showString>
}
 80003d2:	bf00      	nop
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	080034d0 	.word	0x080034d0

080003e0 <motorSet>:
 */

#include "motor.h"

void motorSet(uint8_t motor, uint8_t dir, uint8_t speed)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	460b      	mov	r3, r1
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	4613      	mov	r3, r2
 80003f0:	717b      	strb	r3, [r7, #5]
	GPIO_PinState in1, in2;
	switch(dir)
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	d81f      	bhi.n	800043a <motorSet+0x5a>
 80003fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000400 <motorSet+0x20>)
 80003fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000400:	08000411 	.word	0x08000411
 8000404:	0800041b 	.word	0x0800041b
 8000408:	08000425 	.word	0x08000425
 800040c:	0800042f 	.word	0x0800042f
	{
		case MOTOR_FORWARD:
			in1 = GPIO_PIN_SET;//1
 8000410:	2301      	movs	r3, #1
 8000412:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_RESET;//0
 8000414:	2300      	movs	r3, #0
 8000416:	73bb      	strb	r3, [r7, #14]
			break;
 8000418:	e00f      	b.n	800043a <motorSet+0x5a>
		case MOTOR_BACKWARD:
			in1 = GPIO_PIN_RESET;//0
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_SET;//1
 800041e:	2301      	movs	r3, #1
 8000420:	73bb      	strb	r3, [r7, #14]
			break;
 8000422:	e00a      	b.n	800043a <motorSet+0x5a>
		case MOTOR_BREAK:
			in1 = GPIO_PIN_SET;//0
 8000424:	2301      	movs	r3, #1
 8000426:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_SET;//1
 8000428:	2301      	movs	r3, #1
 800042a:	73bb      	strb	r3, [r7, #14]
			break;
 800042c:	e005      	b.n	800043a <motorSet+0x5a>
		case MOTOR_STOP:
			in1 = GPIO_PIN_RESET;//0
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_RESET;//0
 8000432:	2300      	movs	r3, #0
 8000434:	73bb      	strb	r3, [r7, #14]
			speed = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	717b      	strb	r3, [r7, #5]
	}
	if(motor == MOTOR_A)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d10d      	bne.n	800045c <motorSet+0x7c>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, in1);
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	461a      	mov	r2, r3
 8000444:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000448:	4813      	ldr	r0, [pc, #76]	@ (8000498 <motorSet+0xb8>)
 800044a:	f000 fe55 	bl	80010f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, in2);
 800044e:	7bbb      	ldrb	r3, [r7, #14]
 8000450:	461a      	mov	r2, r3
 8000452:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000456:	4811      	ldr	r0, [pc, #68]	@ (800049c <motorSet+0xbc>)
 8000458:	f000 fe4e 	bl	80010f8 <HAL_GPIO_WritePin>
		//__HAL_TIM_SET_COMPARE(MOTOR_PWM_TIM, TIM_CHANNEL_1, speed);
	}
	if(motor == MOTOR_B)
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d10d      	bne.n	800047e <motorSet+0x9e>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, in1);
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	461a      	mov	r2, r3
 8000466:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800046a:	480c      	ldr	r0, [pc, #48]	@ (800049c <motorSet+0xbc>)
 800046c:	f000 fe44 	bl	80010f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, in2);
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	461a      	mov	r2, r3
 8000474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000478:	4808      	ldr	r0, [pc, #32]	@ (800049c <motorSet+0xbc>)
 800047a:	f000 fe3d 	bl	80010f8 <HAL_GPIO_WritePin>
		//__HAL_TIM_SET_COMPARE(MOTOR_PWM_TIM, TIM_CHANNEL_2, speed);
	}
	Set_PWM_DutyCycle(speed);
 800047e:	797b      	ldrb	r3, [r7, #5]
 8000480:	b29b      	uxth	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f84c 	bl	8000520 <Set_PWM_DutyCycle>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000488:	2100      	movs	r1, #0
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <motorSet+0xc0>)
 800048c:	f001 ff34 	bl	80022f8 <HAL_TIM_PWM_Start>
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40010c00 	.word	0x40010c00
 800049c:	40011000 	.word	0x40011000
 80004a0:	20000cfc 	.word	0x20000cfc

080004a4 <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint32_t freq_hz) //1.1k~72kHz
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    // 计算ARR（确保ARR≥999以维持0.1%精度）
    uint32_t new_arr = (72000000 / freq_hz) - 1;
 80004ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000518 <Set_PWM_Frequency+0x74>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b4:	3b01      	subs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
    if (new_arr < 999) new_arr = 999; // 强制最低ARR=999
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80004be:	4293      	cmp	r3, r2
 80004c0:	d802      	bhi.n	80004c8 <Set_PWM_Frequency+0x24>
 80004c2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80004c6:	617b      	str	r3, [r7, #20]
    if (new_arr > 65535)
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80004ce:	d302      	bcc.n	80004d6 <Set_PWM_Frequency+0x32>
    {
    	new_arr = 65535;
 80004d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d4:	617b      	str	r3, [r7, #20]

    }

    // 更新ARR（自动保持当前占空比）
    uint32_t current_ccr = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <Set_PWM_Frequency+0x78>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004dc:	613b      	str	r3, [r7, #16]
    uint32_t new_ccr = (current_ccr * (new_arr + 1)) / (htim1.Instance->ARR + 1);
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	fb03 f202 	mul.w	r2, r3, r2
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <Set_PWM_Frequency+0x78>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	3301      	adds	r3, #1
 80004f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f4:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim1, new_arr);
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <Set_PWM_Frequency+0x78>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4a07      	ldr	r2, [pc, #28]	@ (800051c <Set_PWM_Frequency+0x78>)
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, new_ccr);
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <Set_PWM_Frequency+0x78>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800050c:	bf00      	nop
 800050e:	371c      	adds	r7, #28
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	044aa200 	.word	0x044aa200
 800051c:	20000cfc 	.word	0x20000cfc

08000520 <Set_PWM_DutyCycle>:

void Set_PWM_DutyCycle(uint16_t duty)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
    // 参数限制：1~1000（对应0.1%~100.0%）
    if (duty < 1) duty = 1;
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d101      	bne.n	8000534 <Set_PWM_DutyCycle+0x14>
 8000530:	2301      	movs	r3, #1
 8000532:	80fb      	strh	r3, [r7, #6]
    if (duty > 1000) duty = 1000;
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800053a:	d902      	bls.n	8000542 <Set_PWM_DutyCycle+0x22>
 800053c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000540:	80fb      	strh	r3, [r7, #6]

    // 计算CCR（四舍五入）
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <Set_PWM_DutyCycle+0x54>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000548:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (duty * (arr + 1) + 500) / 1000; // +500实现四舍五入
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	3201      	adds	r2, #1
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <Set_PWM_DutyCycle+0x58>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	099b      	lsrs	r3, r3, #6
 8000560:	60bb      	str	r3, [r7, #8]

    // 更新CCR
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ccr);
 8000562:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <Set_PWM_DutyCycle+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000cfc 	.word	0x20000cfc
 8000578:	10624dd3 	.word	0x10624dd3

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000590:	4b2e      	ldr	r3, [pc, #184]	@ (800064c <MX_GPIO_Init+0xd0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a2d      	ldr	r2, [pc, #180]	@ (800064c <MX_GPIO_Init+0xd0>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b2b      	ldr	r3, [pc, #172]	@ (800064c <MX_GPIO_Init+0xd0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0310 	and.w	r3, r3, #16
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a8:	4b28      	ldr	r3, [pc, #160]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a27      	ldr	r2, [pc, #156]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005ae:	f043 0320 	orr.w	r3, r3, #32
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a1b      	ldr	r2, [pc, #108]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_GPIO_Init+0xd0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80005f6:	4816      	ldr	r0, [pc, #88]	@ (8000650 <MX_GPIO_Init+0xd4>)
 80005f8:	f000 fd7e 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000602:	4814      	ldr	r0, [pc, #80]	@ (8000654 <MX_GPIO_Init+0xd8>)
 8000604:	f000 fd78 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN2_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|BIN1_Pin|BIN2_Pin;
 8000608:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <MX_GPIO_Init+0xd4>)
 8000622:	f000 fbe5 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIN1_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin;
 8000626:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AIN1_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_GPIO_Init+0xd8>)
 8000640:	f000 fbd6 	bl	8000df0 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	40011000 	.word	0x40011000
 8000654:	40010c00 	.word	0x40010c00

08000658 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2C1_Init+0x50>)
 800065e:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <MX_I2C1_Init+0x54>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_I2C1_Init+0x50>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x58>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_I2C1_Init+0x50>)
 8000676:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800067a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MX_I2C1_Init+0x50>)
 8000696:	f000 fd47 	bl	8001128 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 f8c3 	bl	800082a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000ca4 	.word	0x20000ca4
 80006ac:	40005400 	.word	0x40005400
 80006b0:	000186a0 	.word	0x000186a0

080006b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000744 <HAL_I2C_MspInit+0x90>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d132      	bne.n	800073a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_I2C_MspInit+0x94>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <HAL_I2C_MspInit+0x94>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <HAL_I2C_MspInit+0x94>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f2:	2312      	movs	r3, #18
 80006f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <HAL_I2C_MspInit+0x98>)
 8000702:	f000 fb75 	bl	8000df0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_I2C_MspInit+0x9c>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
 800070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
 8000714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <HAL_I2C_MspInit+0x9c>)
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_I2C_MspInit+0x94>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <HAL_I2C_MspInit+0x94>)
 8000728:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_I2C_MspInit+0x94>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40005400 	.word	0x40005400
 8000748:	40021000 	.word	0x40021000
 800074c:	40010c00 	.word	0x40010c00
 8000750:	40010000 	.word	0x40010000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fa03 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f81f 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f7ff ff0b 	bl	800057c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000766:	f000 f901 	bl	800096c <MX_TIM1_Init>
  MX_I2C1_Init();
 800076a:	f7ff ff75 	bl	8000658 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  motorSet(MOTOR_A, MOTOR_FORWARD, 410);
 800076e:	229a      	movs	r2, #154	@ 0x9a
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fe34 	bl	80003e0 <motorSet>
  int a=1100;
 8000778:	f240 434c 	movw	r3, #1100	@ 0x44c
 800077c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Set_PWM_Frequency(a);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fe8f 	bl	80004a4 <Set_PWM_Frequency>
	  OLED_showNUM(0, 0, a, 8);
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	2308      	movs	r3, #8
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe07 	bl	80003a0 <OLED_showNUM>
	  OLED_updata();
 8000792:	f7ff fd19 	bl	80001c8 <OLED_updata>
//	  HAL_Delay(1);
	  a=a+200;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	33c8      	adds	r3, #200	@ 0xc8
 800079a:	607b      	str	r3, [r7, #4]
	  Set_PWM_Frequency(a);
 800079c:	bf00      	nop
 800079e:	e7ee      	b.n	800077e <main+0x2a>

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	@ 0x40
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2228      	movs	r2, #40	@ 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 f9f0 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f939 	bl	8001a60 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007f4:	f000 f819 	bl	800082a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fba6 	bl	8001f64 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800081e:	f000 f804 	bl	800082a <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3740      	adds	r7, #64	@ 0x40
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082e:	b672      	cpsid	i
}
 8000830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <HAL_MspInit+0x5c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_MspInit+0x5c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_MspInit+0x60>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <HAL_MspInit+0x60>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000
 8000898:	40010000 	.word	0x40010000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f980 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	@ (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f002 f93e 	bl	8002ba4 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20005000 	.word	0x20005000
 8000954:	00000400 	.word	0x00000400
 8000958:	20000cf8 	.word	0x20000cf8
 800095c:	20000e90 	.word	0x20000e90

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b092      	sub	sp, #72	@ 0x48
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2220      	movs	r2, #32
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f8fc 	bl	8002b94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099c:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <MX_TIM1_Init+0x100>)
 800099e:	4a34      	ldr	r2, [pc, #208]	@ (8000a70 <MX_TIM1_Init+0x104>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a2:	4b32      	ldr	r3, [pc, #200]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009bc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c8:	4828      	ldr	r0, [pc, #160]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009ca:	f001 fc45 	bl	8002258 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009d4:	f7ff ff29 	bl	800082a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009e4:	4619      	mov	r1, r3
 80009e6:	4821      	ldr	r0, [pc, #132]	@ (8000a6c <MX_TIM1_Init+0x100>)
 80009e8:	f002 f804 	bl	80029f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009f2:	f7ff ff1a 	bl	800082a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	@ 0x60
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a06:	2304      	movs	r3, #4
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4814      	ldr	r0, [pc, #80]	@ (8000a6c <MX_TIM1_Init+0x100>)
 8000a1c:	f001 fd0e 	bl	800243c <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a26:	f7ff ff00 	bl	800082a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <MX_TIM1_Init+0x100>)
 8000a4e:	f002 f82f 	bl	8002ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a58:	f7ff fee7 	bl	800082a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <MX_TIM1_Init+0x100>)
 8000a5e:	f000 f827 	bl	8000ab0 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3748      	adds	r7, #72	@ 0x48
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000cfc 	.word	0x20000cfc
 8000a70:	40012c00 	.word	0x40012c00

08000a74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <HAL_TIM_PWM_MspInit+0x34>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10b      	bne.n	8000a9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40012c00 	.word	0x40012c00
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a10      	ldr	r2, [pc, #64]	@ (8000b0c <HAL_TIM_MspPostInit+0x5c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d118      	bne.n	8000b02 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_TIM_MspPostInit+0x60>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <HAL_TIM_MspPostInit+0x60>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_TIM_MspPostInit+0x60>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000afe:	f000 f977 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800

08000b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b18:	f7ff ff22 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b1e:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b20:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a09      	ldr	r2, [pc, #36]	@ (8000b58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b34:	4c09      	ldr	r4, [pc, #36]	@ (8000b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f002 f835 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff fe05 	bl	8000754 <main>
  bx lr
 8000b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000888 	.word	0x20000888
  ldr r2, =_sidata
 8000b54:	08003548 	.word	0x08003548
  ldr r2, =_sbss
 8000b58:	20000888 	.word	0x20000888
  ldr r4, =_ebss
 8000b5c:	20000e90 	.word	0x20000e90

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f907 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe5a 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f911 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f8e7 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000082c 	.word	0x2000082c
 8000be8:	20000834 	.word	0x20000834
 8000bec:	20000830 	.word	0x20000830

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	@ (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000834 	.word	0x20000834
 8000c10:	20000d44 	.word	0x20000d44

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	@ (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000d44 	.word	0x20000d44

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff90 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff49 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff5e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff90 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5f 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffb0 	bl	8000d44 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b08b      	sub	sp, #44	@ 0x2c
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	e169      	b.n	80010d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e04:	2201      	movs	r2, #1
 8000e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8158 	bne.w	80010d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4a9a      	ldr	r2, [pc, #616]	@ (8001090 <HAL_GPIO_Init+0x2a0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d05e      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e2c:	4a98      	ldr	r2, [pc, #608]	@ (8001090 <HAL_GPIO_Init+0x2a0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d875      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e32:	4a98      	ldr	r2, [pc, #608]	@ (8001094 <HAL_GPIO_Init+0x2a4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d058      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e38:	4a96      	ldr	r2, [pc, #600]	@ (8001094 <HAL_GPIO_Init+0x2a4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d86f      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e3e:	4a96      	ldr	r2, [pc, #600]	@ (8001098 <HAL_GPIO_Init+0x2a8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d052      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e44:	4a94      	ldr	r2, [pc, #592]	@ (8001098 <HAL_GPIO_Init+0x2a8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d869      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e4a:	4a94      	ldr	r2, [pc, #592]	@ (800109c <HAL_GPIO_Init+0x2ac>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d04c      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e50:	4a92      	ldr	r2, [pc, #584]	@ (800109c <HAL_GPIO_Init+0x2ac>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d863      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e56:	4a92      	ldr	r2, [pc, #584]	@ (80010a0 <HAL_GPIO_Init+0x2b0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d046      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e5c:	4a90      	ldr	r2, [pc, #576]	@ (80010a0 <HAL_GPIO_Init+0x2b0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d85d      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d82a      	bhi.n	8000ebc <HAL_GPIO_Init+0xcc>
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d859      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <HAL_GPIO_Init+0x80>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000ec5 	.word	0x08000ec5
 8000e78:	08000ed7 	.word	0x08000ed7
 8000e7c:	08000f19 	.word	0x08000f19
 8000e80:	08000f1f 	.word	0x08000f1f
 8000e84:	08000f1f 	.word	0x08000f1f
 8000e88:	08000f1f 	.word	0x08000f1f
 8000e8c:	08000f1f 	.word	0x08000f1f
 8000e90:	08000f1f 	.word	0x08000f1f
 8000e94:	08000f1f 	.word	0x08000f1f
 8000e98:	08000f1f 	.word	0x08000f1f
 8000e9c:	08000f1f 	.word	0x08000f1f
 8000ea0:	08000f1f 	.word	0x08000f1f
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000f1f 	.word	0x08000f1f
 8000eac:	08000f1f 	.word	0x08000f1f
 8000eb0:	08000f1f 	.word	0x08000f1f
 8000eb4:	08000ecd 	.word	0x08000ecd
 8000eb8:	08000ee1 	.word	0x08000ee1
 8000ebc:	4a79      	ldr	r2, [pc, #484]	@ (80010a4 <HAL_GPIO_Init+0x2b4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec2:	e02c      	b.n	8000f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e029      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e024      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	3308      	adds	r3, #8
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e01f      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e01a      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e013      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	611a      	str	r2, [r3, #16]
          break;
 8000f0a:	e009      	b.n	8000f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	615a      	str	r2, [r3, #20]
          break;
 8000f16:	e003      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          break;
 8000f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2bff      	cmp	r3, #255	@ 0xff
 8000f24:	d801      	bhi.n	8000f2a <HAL_GPIO_Init+0x13a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e001      	b.n	8000f2e <HAL_GPIO_Init+0x13e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2bff      	cmp	r3, #255	@ 0xff
 8000f34:	d802      	bhi.n	8000f3c <HAL_GPIO_Init+0x14c>
 8000f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x152>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	3b08      	subs	r3, #8
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	210f      	movs	r1, #15
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	6a39      	ldr	r1, [r7, #32]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80b1 	beq.w	80010d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f70:	4b4d      	ldr	r3, [pc, #308]	@ (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	@ (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f88:	4a48      	ldr	r2, [pc, #288]	@ (80010ac <HAL_GPIO_Init+0x2bc>)
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a40      	ldr	r2, [pc, #256]	@ (80010b0 <HAL_GPIO_Init+0x2c0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d013      	beq.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00d      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a3e      	ldr	r2, [pc, #248]	@ (80010b8 <HAL_GPIO_Init+0x2c8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x1e4>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80010bc <HAL_GPIO_Init+0x2cc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_GPIO_Init+0x1e0>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e004      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e002      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fe0:	f002 0203 	and.w	r2, r2, #3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fee:	492f      	ldr	r1, [pc, #188]	@ (80010ac <HAL_GPIO_Init+0x2bc>)
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	492c      	ldr	r1, [pc, #176]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	608b      	str	r3, [r1, #8]
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	4928      	ldr	r1, [pc, #160]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001020:	4013      	ands	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4922      	ldr	r1, [pc, #136]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	60cb      	str	r3, [r1, #12]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	491e      	ldr	r1, [pc, #120]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001048:	4013      	ands	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4918      	ldr	r1, [pc, #96]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	4914      	ldr	r1, [pc, #80]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001070:	4013      	ands	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d021      	beq.n	80010c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
 800108c:	e021      	b.n	80010d2 <HAL_GPIO_Init+0x2e2>
 800108e:	bf00      	nop
 8001090:	10320000 	.word	0x10320000
 8001094:	10310000 	.word	0x10310000
 8001098:	10220000 	.word	0x10220000
 800109c:	10210000 	.word	0x10210000
 80010a0:	10120000 	.word	0x10120000
 80010a4:	10110000 	.word	0x10110000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40011400 	.word	0x40011400
 80010c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_GPIO_Init+0x304>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	4909      	ldr	r1, [pc, #36]	@ (80010f4 <HAL_GPIO_Init+0x304>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	3301      	adds	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	fa22 f303 	lsr.w	r3, r2, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f47f ae8e 	bne.w	8000e04 <HAL_GPIO_Init+0x14>
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	372c      	adds	r7, #44	@ 0x2c
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e12b      	b.n	8001392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fab0 	bl	80006b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	@ 0x24
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800117a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800118a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800118c:	f001 f832 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 8001190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a81      	ldr	r2, [pc, #516]	@ (800139c <HAL_I2C_Init+0x274>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d807      	bhi.n	80011ac <HAL_I2C_Init+0x84>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a80      	ldr	r2, [pc, #512]	@ (80013a0 <HAL_I2C_Init+0x278>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	e006      	b.n	80011ba <HAL_I2C_Init+0x92>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a7d      	ldr	r2, [pc, #500]	@ (80013a4 <HAL_I2C_Init+0x27c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	bf94      	ite	ls
 80011b4:	2301      	movls	r3, #1
 80011b6:	2300      	movhi	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e7      	b.n	8001392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a78      	ldr	r2, [pc, #480]	@ (80013a8 <HAL_I2C_Init+0x280>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a6a      	ldr	r2, [pc, #424]	@ (800139c <HAL_I2C_Init+0x274>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d802      	bhi.n	80011fc <HAL_I2C_Init+0xd4>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	e009      	b.n	8001210 <HAL_I2C_Init+0xe8>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a69      	ldr	r2, [pc, #420]	@ (80013ac <HAL_I2C_Init+0x284>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	3301      	adds	r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	430b      	orrs	r3, r1
 8001216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	495c      	ldr	r1, [pc, #368]	@ (800139c <HAL_I2C_Init+0x274>)
 800122c:	428b      	cmp	r3, r1
 800122e:	d819      	bhi.n	8001264 <HAL_I2C_Init+0x13c>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e59      	subs	r1, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fbb1 f3f3 	udiv	r3, r1, r3
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001244:	400b      	ands	r3, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_I2C_Init+0x138>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1e59      	subs	r1, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fbb1 f3f3 	udiv	r3, r1, r3
 8001258:	3301      	adds	r3, #1
 800125a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125e:	e051      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001260:	2304      	movs	r3, #4
 8001262:	e04f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_I2C_Init+0x168>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	fbb0 f3f3 	udiv	r3, r0, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e012      	b.n	80012b6 <HAL_I2C_Init+0x18e>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	0099      	lsls	r1, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Init+0x196>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e022      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10e      	bne.n	80012e4 <HAL_I2C_Init+0x1bc>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e58      	subs	r0, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	6809      	ldr	r1, [r1, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6911      	ldr	r1, [r2, #16]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68d2      	ldr	r2, [r2, #12]
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	000186a0 	.word	0x000186a0
 80013a0:	001e847f 	.word	0x001e847f
 80013a4:	003d08ff 	.word	0x003d08ff
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	10624dd3 	.word	0x10624dd3

080013b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	817b      	strh	r3, [r7, #10]
 80013c0:	4613      	mov	r3, r2
 80013c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff fc26 	bl	8000c14 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	f040 80e0 	bne.w	8001598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2319      	movs	r3, #25
 80013de:	2201      	movs	r2, #1
 80013e0:	4970      	ldr	r1, [pc, #448]	@ (80015a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f964 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	e0d3      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_I2C_Master_Transmit+0x50>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e0cc      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b01      	cmp	r3, #1
 8001414:	d007      	beq.n	8001426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2221      	movs	r2, #33	@ 0x21
 800143a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2210      	movs	r2, #16
 8001442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	893a      	ldrh	r2, [r7, #8]
 8001456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a50      	ldr	r2, [pc, #320]	@ (80015a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001468:	8979      	ldrh	r1, [r7, #10]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f89c 	bl	80015ac <I2C_MasterRequestWrite>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e08d      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001494:	e066      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fa22 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00d      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d107      	bne.n	80014be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06b      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d11b      	bne.n	8001538 <HAL_I2C_Master_Transmit+0x188>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d017      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	6a39      	ldr	r1, [r7, #32]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fa19 	bl	8001974 <I2C_WaitOnBTFFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00d      	beq.n	8001564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	2b04      	cmp	r3, #4
 800154e:	d107      	bne.n	8001560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800155e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e01a      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d194      	bne.n	8001496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	00100002 	.word	0x00100002
 80015a8:	ffff0000 	.word	0xffff0000

080015ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d006      	beq.n	80015d6 <I2C_MasterRequestWrite+0x2a>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d003      	beq.n	80015d6 <I2C_MasterRequestWrite+0x2a>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015d4:	d108      	bne.n	80015e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00b      	b.n	8001600 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d107      	bne.n	8001600 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f84f 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001626:	d103      	bne.n	8001630 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e035      	b.n	80016a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800163c:	d108      	bne.n	8001650 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	e01b      	b.n	8001688 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001650:	897b      	ldrh	r3, [r7, #10]
 8001652:	11db      	asrs	r3, r3, #7
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0306 	and.w	r3, r3, #6
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f063 030f 	orn	r3, r3, #15
 8001660:	b2da      	uxtb	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	490e      	ldr	r1, [pc, #56]	@ (80016a8 <I2C_MasterRequestWrite+0xfc>)
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f898 	bl	80017a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e010      	b.n	80016a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800167e:	897b      	ldrh	r3, [r7, #10]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4907      	ldr	r1, [pc, #28]	@ (80016ac <I2C_MasterRequestWrite+0x100>)
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f888 	bl	80017a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	00010008 	.word	0x00010008
 80016ac:	00010002 	.word	0x00010002

080016b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016c0:	e048      	b.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d044      	beq.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ca:	f7ff faa3 	bl	8000c14 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d302      	bcc.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d139      	bne.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10d      	bne.n	8001706 <I2C_WaitOnFlagUntilTimeout+0x56>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	43da      	mvns	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	e00c      	b.n	8001720 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	43da      	mvns	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4013      	ands	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	429a      	cmp	r2, r3
 8001724:	d116      	bne.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f043 0220 	orr.w	r2, r3, #32
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e023      	b.n	800179c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10d      	bne.n	800177a <I2C_WaitOnFlagUntilTimeout+0xca>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	43da      	mvns	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	4013      	ands	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	e00c      	b.n	8001794 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	43da      	mvns	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4013      	ands	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	429a      	cmp	r2, r3
 8001798:	d093      	beq.n	80016c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b2:	e071      	b.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c2:	d123      	bne.n	800180c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f043 0204 	orr.w	r2, r3, #4
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e067      	b.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001812:	d041      	beq.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001814:	f7ff f9fe 	bl	8000c14 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d302      	bcc.n	800182a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d136      	bne.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10c      	bne.n	800184e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4013      	ands	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	e00b      	b.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	43da      	mvns	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4013      	ands	r3, r2
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f043 0220 	orr.w	r2, r3, #32
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e021      	b.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10c      	bne.n	80018bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4013      	ands	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e00b      	b.n	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4013      	ands	r3, r2
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f47f af6d 	bne.w	80017b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f0:	e034      	b.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f886 	bl	8001a04 <I2C_IsAcknowledgeFailed>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e034      	b.n	800196c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d028      	beq.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190a:	f7ff f983 	bl	8000c14 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11d      	bne.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	2b80      	cmp	r3, #128	@ 0x80
 800192c:	d016      	beq.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	f043 0220 	orr.w	r2, r3, #32
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b80      	cmp	r3, #128	@ 0x80
 8001968:	d1c3      	bne.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001980:	e034      	b.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f83e 	bl	8001a04 <I2C_IsAcknowledgeFailed>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e034      	b.n	80019fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d028      	beq.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199a:	f7ff f93b 	bl	8000c14 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d302      	bcc.n	80019b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11d      	bne.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d016      	beq.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d1c3      	bne.n	8001982 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1a:	d11b      	bne.n	8001a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f043 0204 	orr.w	r2, r3, #4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e272      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	4b92      	ldr	r3, [pc, #584]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d112      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
 8001a98:	4b8c      	ldr	r3, [pc, #560]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b89      	ldr	r3, [pc, #548]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x12c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d168      	bne.n	8001b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e24c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x76>
 8001ac8:	4b80      	ldr	r3, [pc, #512]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7f      	ldr	r2, [pc, #508]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x98>
 8001ade:	4b7b      	ldr	r3, [pc, #492]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b78      	ldr	r3, [pc, #480]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a77      	ldr	r2, [pc, #476]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xbc>
 8001b02:	4b72      	ldr	r3, [pc, #456]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a71      	ldr	r2, [pc, #452]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6e      	ldr	r2, [pc, #440]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6a      	ldr	r2, [pc, #424]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b68      	ldr	r3, [pc, #416]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a67      	ldr	r2, [pc, #412]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f86a 	bl	8000c14 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f866 	bl	8000c14 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	@ 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e200      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b5d      	ldr	r3, [pc, #372]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe4>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f856 	bl	8000c14 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f852 	bl	8000c14 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1ec      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b53      	ldr	r3, [pc, #332]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x10c>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ba6:	4b49      	ldr	r3, [pc, #292]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
 8001bb2:	4b46      	ldr	r3, [pc, #280]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b43      	ldr	r3, [pc, #268]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4939      	ldr	r1, [pc, #228]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f80b 	bl	8000c14 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f807 	bl	8000c14 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1a1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4927      	ldr	r1, [pc, #156]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ffea 	bl	8000c14 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c44:	f7fe ffe6 	bl	8000c14 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e180      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d03a      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7fe ffca 	bl	8000c14 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7fe ffc6 	bl	8000c14 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e160      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 faba 	bl	800221c <RCC_Delay>
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7fe ffb0 	bl	8000c14 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7fe ffac 	bl	8000c14 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d908      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e146      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	42420000 	.word	0x42420000
 8001cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b92      	ldr	r3, [pc, #584]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e9      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a6 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b88      	ldr	r3, [pc, #544]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a87      	ldr	r2, [pc, #540]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b85      	ldr	r3, [pc, #532]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b82      	ldr	r3, [pc, #520]	@ (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7fe ff6d 	bl	8000c14 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7fe ff69 	bl	8000c14 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	@ 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e103      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b75      	ldr	r3, [pc, #468]	@ (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x312>
 8001d64:	4b6f      	ldr	r3, [pc, #444]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6e      	ldr	r2, [pc, #440]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e02d      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x334>
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a69      	ldr	r2, [pc, #420]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b67      	ldr	r3, [pc, #412]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a66      	ldr	r2, [pc, #408]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x356>
 8001d9c:	4b61      	ldr	r3, [pc, #388]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a60      	ldr	r2, [pc, #384]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a5d      	ldr	r2, [pc, #372]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001db6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a5a      	ldr	r2, [pc, #360]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b58      	ldr	r3, [pc, #352]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a57      	ldr	r2, [pc, #348]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe ff1d 	bl	8000c14 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe ff19 	bl	8000c14 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0b1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x37e>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7fe ff07 	bl	8000c14 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff03 	bl	8000c14 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e09b      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b3c      	ldr	r3, [pc, #240]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a3b      	ldr	r2, [pc, #236]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e48:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d061      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d146      	bne.n	8001eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b33      	ldr	r3, [pc, #204]	@ (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe fed7 	bl	8000c14 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fed3 	bl	8000c14 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e06d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e92:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4921      	ldr	r1, [pc, #132]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a19      	ldr	r1, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	491b      	ldr	r1, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fea7 	bl	8000c14 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7fe fea3 	bl	8000c14 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x46a>
 8001ee8:	e035      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fe90 	bl	8000c14 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fe8c 	bl	8000c14 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e026      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x498>
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e019      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_OscConfig+0x500>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7fe fdde 	bl	8000c14 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe fdda 	bl	8000c14 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	@ (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fd3c 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	080034e0 	.word	0x080034e0
 8002130:	2000082c 	.word	0x2000082c
 8002134:	20000830 	.word	0x20000830

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002152:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x30>
 8002162:	2b08      	cmp	r3, #8
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x36>
 8002166:	e027      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800216a:	613b      	str	r3, [r7, #16]
      break;
 800216c:	e027      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0c5b      	lsrs	r3, r3, #17
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	fb03 f202 	mul.w	r2, r3, r2
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e004      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	613b      	str	r3, [r7, #16]
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	693b      	ldr	r3, [r7, #16]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	080034f8 	.word	0x080034f8
 80021d8:	08003508 	.word	0x08003508
 80021dc:	003d0900 	.word	0x003d0900

080021e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	2000082c 	.word	0x2000082c

080021f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f8:	f7ff fff2 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4903      	ldr	r1, [pc, #12]	@ (8002218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	080034f0 	.word	0x080034f0

0800221c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <RCC_Delay+0x34>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <RCC_Delay+0x38>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0a5b      	lsrs	r3, r3, #9
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002238:	bf00      	nop
  }
  while (Delay --);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	60fa      	str	r2, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <RCC_Delay+0x1c>
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	2000082c 	.word	0x2000082c
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e041      	b.n	80022ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fbf8 	bl	8000a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 f992 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_TIM_PWM_Start+0x24>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e022      	b.n	8002362 <HAL_TIM_PWM_Start+0x6a>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d109      	bne.n	8002336 <HAL_TIM_PWM_Start+0x3e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e015      	b.n	8002362 <HAL_TIM_PWM_Start+0x6a>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d109      	bne.n	8002350 <HAL_TIM_PWM_Start+0x58>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e008      	b.n	8002362 <HAL_TIM_PWM_Start+0x6a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e05e      	b.n	8002428 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <HAL_TIM_PWM_Start+0x82>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002378:	e013      	b.n	80023a2 <HAL_TIM_PWM_Start+0xaa>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d104      	bne.n	800238a <HAL_TIM_PWM_Start+0x92>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002388:	e00b      	b.n	80023a2 <HAL_TIM_PWM_Start+0xaa>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d104      	bne.n	800239a <HAL_TIM_PWM_Start+0xa2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002398:	e003      	b.n	80023a2 <HAL_TIM_PWM_Start+0xaa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2201      	movs	r2, #1
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fafe 	bl	80029ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_TIM_PWM_Start+0x138>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <HAL_TIM_PWM_Start+0x138>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00e      	beq.n	80023f2 <HAL_TIM_PWM_Start+0xfa>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023dc:	d009      	beq.n	80023f2 <HAL_TIM_PWM_Start+0xfa>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a14      	ldr	r2, [pc, #80]	@ (8002434 <HAL_TIM_PWM_Start+0x13c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_TIM_PWM_Start+0xfa>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <HAL_TIM_PWM_Start+0x140>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d111      	bne.n	8002416 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d010      	beq.n	8002426 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002414:	e007      	b.n	8002426 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800

0800243c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002456:	2302      	movs	r3, #2
 8002458:	e0ae      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	f200 809f 	bhi.w	80025a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	080024a5 	.word	0x080024a5
 8002474:	080025a9 	.word	0x080025a9
 8002478:	080025a9 	.word	0x080025a9
 800247c:	080025a9 	.word	0x080025a9
 8002480:	080024e5 	.word	0x080024e5
 8002484:	080025a9 	.word	0x080025a9
 8002488:	080025a9 	.word	0x080025a9
 800248c:	080025a9 	.word	0x080025a9
 8002490:	08002527 	.word	0x08002527
 8002494:	080025a9 	.word	0x080025a9
 8002498:	080025a9 	.word	0x080025a9
 800249c:	080025a9 	.word	0x080025a9
 80024a0:	08002567 	.word	0x08002567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f8f6 	bl	800269c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6999      	ldr	r1, [r3, #24]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	619a      	str	r2, [r3, #24]
      break;
 80024e2:	e064      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f93c 	bl	8002768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800250e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6999      	ldr	r1, [r3, #24]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	021a      	lsls	r2, r3, #8
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	619a      	str	r2, [r3, #24]
      break;
 8002524:	e043      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f985 	bl	800283c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0208 	orr.w	r2, r2, #8
 8002540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0204 	bic.w	r2, r2, #4
 8002550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69d9      	ldr	r1, [r3, #28]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	61da      	str	r2, [r3, #28]
      break;
 8002564:	e023      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f9cf 	bl	8002910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69d9      	ldr	r1, [r3, #28]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	61da      	str	r2, [r3, #28]
      break;
 80025a6:	e002      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
      break;
 80025ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <TIM_Base_SetConfig+0xd0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_Base_SetConfig+0x30>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0x30>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002694 <TIM_Base_SetConfig+0xd4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0x30>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002698 <TIM_Base_SetConfig+0xd8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d108      	bne.n	8002602 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <TIM_Base_SetConfig+0xd0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <TIM_Base_SetConfig+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002610:	d007      	beq.n	8002622 <TIM_Base_SetConfig+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <TIM_Base_SetConfig+0xd4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_Base_SetConfig+0x62>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <TIM_Base_SetConfig+0xd8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <TIM_Base_SetConfig+0xd0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d103      	bne.n	8002668 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f023 0201 	bic.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	611a      	str	r2, [r3, #16]
  }
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800

0800269c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 0201 	bic.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 0302 	bic.w	r3, r3, #2
 80026e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <TIM_OC1_SetConfig+0xc8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10c      	bne.n	8002712 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0308 	bic.w	r3, r3, #8
 80026fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <TIM_OC1_SetConfig+0xc8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00

08002768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f023 0210 	bic.w	r2, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0320 	bic.w	r3, r3, #32
 80027b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <TIM_OC2_SetConfig+0xd0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10d      	bne.n	80027e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <TIM_OC2_SetConfig+0xd0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d113      	bne.n	8002814 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40012c00 	.word	0x40012c00

0800283c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <TIM_OC3_SetConfig+0xd0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10d      	bne.n	80028b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a14      	ldr	r2, [pc, #80]	@ (800290c <TIM_OC3_SetConfig+0xd0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800295a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <TIM_OC4_SetConfig+0x98>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d109      	bne.n	8002984 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00

080029ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2201      	movs	r2, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	401a      	ands	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1a      	ldr	r2, [r3, #32]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e046      	b.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a58:	d009      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10c      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800

08002ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e03d      	b.n	8002b48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <siprintf>:
 8002b54:	b40e      	push	{r1, r2, r3}
 8002b56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b5a:	b500      	push	{lr}
 8002b5c:	b09c      	sub	sp, #112	@ 0x70
 8002b5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b60:	9002      	str	r0, [sp, #8]
 8002b62:	9006      	str	r0, [sp, #24]
 8002b64:	9107      	str	r1, [sp, #28]
 8002b66:	9104      	str	r1, [sp, #16]
 8002b68:	4808      	ldr	r0, [pc, #32]	@ (8002b8c <siprintf+0x38>)
 8002b6a:	4909      	ldr	r1, [pc, #36]	@ (8002b90 <siprintf+0x3c>)
 8002b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b70:	9105      	str	r1, [sp, #20]
 8002b72:	6800      	ldr	r0, [r0, #0]
 8002b74:	a902      	add	r1, sp, #8
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	f000 f9a0 	bl	8002ebc <_svfiprintf_r>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	9b02      	ldr	r3, [sp, #8]
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	b01c      	add	sp, #112	@ 0x70
 8002b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b88:	b003      	add	sp, #12
 8002b8a:	4770      	bx	lr
 8002b8c:	20000838 	.word	0x20000838
 8002b90:	ffff0208 	.word	0xffff0208

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <__errno>:
 8002ba4:	4b01      	ldr	r3, [pc, #4]	@ (8002bac <__errno+0x8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000838 	.word	0x20000838

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	4d0c      	ldr	r5, [pc, #48]	@ (8002be8 <__libc_init_array+0x38>)
 8002bb6:	4c0d      	ldr	r4, [pc, #52]	@ (8002bec <__libc_init_array+0x3c>)
 8002bb8:	1b64      	subs	r4, r4, r5
 8002bba:	10a4      	asrs	r4, r4, #2
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	f000 fc78 	bl	80034b4 <_init>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	4d0a      	ldr	r5, [pc, #40]	@ (8002bf0 <__libc_init_array+0x40>)
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf4 <__libc_init_array+0x44>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08003540 	.word	0x08003540
 8002bec:	08003540 	.word	0x08003540
 8002bf0:	08003540 	.word	0x08003540
 8002bf4:	08003544 	.word	0x08003544

08002bf8 <__retarget_lock_acquire_recursive>:
 8002bf8:	4770      	bx	lr

08002bfa <__retarget_lock_release_recursive>:
 8002bfa:	4770      	bx	lr

08002bfc <memcpy>:
 8002bfc:	440a      	add	r2, r1
 8002bfe:	4291      	cmp	r1, r2
 8002c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c04:	d100      	bne.n	8002c08 <memcpy+0xc>
 8002c06:	4770      	bx	lr
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c0e:	4291      	cmp	r1, r2
 8002c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c14:	d1f9      	bne.n	8002c0a <memcpy+0xe>
 8002c16:	bd10      	pop	{r4, pc}

08002c18 <_free_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	d040      	beq.n	8002ca2 <_free_r+0x8a>
 8002c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c24:	1f0c      	subs	r4, r1, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bfb8      	it	lt
 8002c2a:	18e4      	addlt	r4, r4, r3
 8002c2c:	f000 f8de 	bl	8002dec <__malloc_lock>
 8002c30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <_free_r+0x8c>)
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	b933      	cbnz	r3, 8002c44 <_free_r+0x2c>
 8002c36:	6063      	str	r3, [r4, #4]
 8002c38:	6014      	str	r4, [r2, #0]
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c40:	f000 b8da 	b.w	8002df8 <__malloc_unlock>
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d908      	bls.n	8002c5a <_free_r+0x42>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	1821      	adds	r1, r4, r0
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	bf01      	itttt	eq
 8002c50:	6819      	ldreq	r1, [r3, #0]
 8002c52:	685b      	ldreq	r3, [r3, #4]
 8002c54:	1809      	addeq	r1, r1, r0
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	e7ed      	b.n	8002c36 <_free_r+0x1e>
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b10b      	cbz	r3, 8002c64 <_free_r+0x4c>
 8002c60:	42a3      	cmp	r3, r4
 8002c62:	d9fa      	bls.n	8002c5a <_free_r+0x42>
 8002c64:	6811      	ldr	r1, [r2, #0]
 8002c66:	1850      	adds	r0, r2, r1
 8002c68:	42a0      	cmp	r0, r4
 8002c6a:	d10b      	bne.n	8002c84 <_free_r+0x6c>
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	4401      	add	r1, r0
 8002c70:	1850      	adds	r0, r2, r1
 8002c72:	4283      	cmp	r3, r0
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	d1e0      	bne.n	8002c3a <_free_r+0x22>
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4408      	add	r0, r1
 8002c7e:	6010      	str	r0, [r2, #0]
 8002c80:	6053      	str	r3, [r2, #4]
 8002c82:	e7da      	b.n	8002c3a <_free_r+0x22>
 8002c84:	d902      	bls.n	8002c8c <_free_r+0x74>
 8002c86:	230c      	movs	r3, #12
 8002c88:	602b      	str	r3, [r5, #0]
 8002c8a:	e7d6      	b.n	8002c3a <_free_r+0x22>
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	1821      	adds	r1, r4, r0
 8002c90:	428b      	cmp	r3, r1
 8002c92:	bf01      	itttt	eq
 8002c94:	6819      	ldreq	r1, [r3, #0]
 8002c96:	685b      	ldreq	r3, [r3, #4]
 8002c98:	1809      	addeq	r1, r1, r0
 8002c9a:	6021      	streq	r1, [r4, #0]
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	6054      	str	r4, [r2, #4]
 8002ca0:	e7cb      	b.n	8002c3a <_free_r+0x22>
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	20000e8c 	.word	0x20000e8c

08002ca8 <sbrk_aligned>:
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	4e0f      	ldr	r6, [pc, #60]	@ (8002ce8 <sbrk_aligned+0x40>)
 8002cac:	460c      	mov	r4, r1
 8002cae:	6831      	ldr	r1, [r6, #0]
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	b911      	cbnz	r1, 8002cba <sbrk_aligned+0x12>
 8002cb4:	f000 fbaa 	bl	800340c <_sbrk_r>
 8002cb8:	6030      	str	r0, [r6, #0]
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 fba5 	bl	800340c <_sbrk_r>
 8002cc2:	1c43      	adds	r3, r0, #1
 8002cc4:	d103      	bne.n	8002cce <sbrk_aligned+0x26>
 8002cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8002cca:	4620      	mov	r0, r4
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	1cc4      	adds	r4, r0, #3
 8002cd0:	f024 0403 	bic.w	r4, r4, #3
 8002cd4:	42a0      	cmp	r0, r4
 8002cd6:	d0f8      	beq.n	8002cca <sbrk_aligned+0x22>
 8002cd8:	1a21      	subs	r1, r4, r0
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f000 fb96 	bl	800340c <_sbrk_r>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d1f2      	bne.n	8002cca <sbrk_aligned+0x22>
 8002ce4:	e7ef      	b.n	8002cc6 <sbrk_aligned+0x1e>
 8002ce6:	bf00      	nop
 8002ce8:	20000e88 	.word	0x20000e88

08002cec <_malloc_r>:
 8002cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf0:	1ccd      	adds	r5, r1, #3
 8002cf2:	f025 0503 	bic.w	r5, r5, #3
 8002cf6:	3508      	adds	r5, #8
 8002cf8:	2d0c      	cmp	r5, #12
 8002cfa:	bf38      	it	cc
 8002cfc:	250c      	movcc	r5, #12
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	4606      	mov	r6, r0
 8002d02:	db01      	blt.n	8002d08 <_malloc_r+0x1c>
 8002d04:	42a9      	cmp	r1, r5
 8002d06:	d904      	bls.n	8002d12 <_malloc_r+0x26>
 8002d08:	230c      	movs	r3, #12
 8002d0a:	6033      	str	r3, [r6, #0]
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002de8 <_malloc_r+0xfc>
 8002d16:	f000 f869 	bl	8002dec <__malloc_lock>
 8002d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d1e:	461c      	mov	r4, r3
 8002d20:	bb44      	cbnz	r4, 8002d74 <_malloc_r+0x88>
 8002d22:	4629      	mov	r1, r5
 8002d24:	4630      	mov	r0, r6
 8002d26:	f7ff ffbf 	bl	8002ca8 <sbrk_aligned>
 8002d2a:	1c43      	adds	r3, r0, #1
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	d158      	bne.n	8002de2 <_malloc_r+0xf6>
 8002d30:	f8d8 4000 	ldr.w	r4, [r8]
 8002d34:	4627      	mov	r7, r4
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d143      	bne.n	8002dc2 <_malloc_r+0xd6>
 8002d3a:	2c00      	cmp	r4, #0
 8002d3c:	d04b      	beq.n	8002dd6 <_malloc_r+0xea>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	4639      	mov	r1, r7
 8002d42:	4630      	mov	r0, r6
 8002d44:	eb04 0903 	add.w	r9, r4, r3
 8002d48:	f000 fb60 	bl	800340c <_sbrk_r>
 8002d4c:	4581      	cmp	r9, r0
 8002d4e:	d142      	bne.n	8002dd6 <_malloc_r+0xea>
 8002d50:	6821      	ldr	r1, [r4, #0]
 8002d52:	4630      	mov	r0, r6
 8002d54:	1a6d      	subs	r5, r5, r1
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7ff ffa6 	bl	8002ca8 <sbrk_aligned>
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d03a      	beq.n	8002dd6 <_malloc_r+0xea>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	442b      	add	r3, r5
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	bb62      	cbnz	r2, 8002dc8 <_malloc_r+0xdc>
 8002d6e:	f8c8 7000 	str.w	r7, [r8]
 8002d72:	e00f      	b.n	8002d94 <_malloc_r+0xa8>
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	1b52      	subs	r2, r2, r5
 8002d78:	d420      	bmi.n	8002dbc <_malloc_r+0xd0>
 8002d7a:	2a0b      	cmp	r2, #11
 8002d7c:	d917      	bls.n	8002dae <_malloc_r+0xc2>
 8002d7e:	1961      	adds	r1, r4, r5
 8002d80:	42a3      	cmp	r3, r4
 8002d82:	6025      	str	r5, [r4, #0]
 8002d84:	bf18      	it	ne
 8002d86:	6059      	strne	r1, [r3, #4]
 8002d88:	6863      	ldr	r3, [r4, #4]
 8002d8a:	bf08      	it	eq
 8002d8c:	f8c8 1000 	streq.w	r1, [r8]
 8002d90:	5162      	str	r2, [r4, r5]
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	4630      	mov	r0, r6
 8002d96:	f000 f82f 	bl	8002df8 <__malloc_unlock>
 8002d9a:	f104 000b 	add.w	r0, r4, #11
 8002d9e:	1d23      	adds	r3, r4, #4
 8002da0:	f020 0007 	bic.w	r0, r0, #7
 8002da4:	1ac2      	subs	r2, r0, r3
 8002da6:	bf1c      	itt	ne
 8002da8:	1a1b      	subne	r3, r3, r0
 8002daa:	50a3      	strne	r3, [r4, r2]
 8002dac:	e7af      	b.n	8002d0e <_malloc_r+0x22>
 8002dae:	6862      	ldr	r2, [r4, #4]
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	bf0c      	ite	eq
 8002db4:	f8c8 2000 	streq.w	r2, [r8]
 8002db8:	605a      	strne	r2, [r3, #4]
 8002dba:	e7eb      	b.n	8002d94 <_malloc_r+0xa8>
 8002dbc:	4623      	mov	r3, r4
 8002dbe:	6864      	ldr	r4, [r4, #4]
 8002dc0:	e7ae      	b.n	8002d20 <_malloc_r+0x34>
 8002dc2:	463c      	mov	r4, r7
 8002dc4:	687f      	ldr	r7, [r7, #4]
 8002dc6:	e7b6      	b.n	8002d36 <_malloc_r+0x4a>
 8002dc8:	461a      	mov	r2, r3
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d1fb      	bne.n	8002dc8 <_malloc_r+0xdc>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e7de      	b.n	8002d94 <_malloc_r+0xa8>
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	4630      	mov	r0, r6
 8002dda:	6033      	str	r3, [r6, #0]
 8002ddc:	f000 f80c 	bl	8002df8 <__malloc_unlock>
 8002de0:	e794      	b.n	8002d0c <_malloc_r+0x20>
 8002de2:	6005      	str	r5, [r0, #0]
 8002de4:	e7d6      	b.n	8002d94 <_malloc_r+0xa8>
 8002de6:	bf00      	nop
 8002de8:	20000e8c 	.word	0x20000e8c

08002dec <__malloc_lock>:
 8002dec:	4801      	ldr	r0, [pc, #4]	@ (8002df4 <__malloc_lock+0x8>)
 8002dee:	f7ff bf03 	b.w	8002bf8 <__retarget_lock_acquire_recursive>
 8002df2:	bf00      	nop
 8002df4:	20000e84 	.word	0x20000e84

08002df8 <__malloc_unlock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	@ (8002e00 <__malloc_unlock+0x8>)
 8002dfa:	f7ff befe 	b.w	8002bfa <__retarget_lock_release_recursive>
 8002dfe:	bf00      	nop
 8002e00:	20000e84 	.word	0x20000e84

08002e04 <__ssputs_r>:
 8002e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e08:	461f      	mov	r7, r3
 8002e0a:	688e      	ldr	r6, [r1, #8]
 8002e0c:	4682      	mov	sl, r0
 8002e0e:	42be      	cmp	r6, r7
 8002e10:	460c      	mov	r4, r1
 8002e12:	4690      	mov	r8, r2
 8002e14:	680b      	ldr	r3, [r1, #0]
 8002e16:	d82d      	bhi.n	8002e74 <__ssputs_r+0x70>
 8002e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e20:	d026      	beq.n	8002e70 <__ssputs_r+0x6c>
 8002e22:	6965      	ldr	r5, [r4, #20]
 8002e24:	6909      	ldr	r1, [r1, #16]
 8002e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e2a:	eba3 0901 	sub.w	r9, r3, r1
 8002e2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e32:	1c7b      	adds	r3, r7, #1
 8002e34:	444b      	add	r3, r9
 8002e36:	106d      	asrs	r5, r5, #1
 8002e38:	429d      	cmp	r5, r3
 8002e3a:	bf38      	it	cc
 8002e3c:	461d      	movcc	r5, r3
 8002e3e:	0553      	lsls	r3, r2, #21
 8002e40:	d527      	bpl.n	8002e92 <__ssputs_r+0x8e>
 8002e42:	4629      	mov	r1, r5
 8002e44:	f7ff ff52 	bl	8002cec <_malloc_r>
 8002e48:	4606      	mov	r6, r0
 8002e4a:	b360      	cbz	r0, 8002ea6 <__ssputs_r+0xa2>
 8002e4c:	464a      	mov	r2, r9
 8002e4e:	6921      	ldr	r1, [r4, #16]
 8002e50:	f7ff fed4 	bl	8002bfc <memcpy>
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e5e:	81a3      	strh	r3, [r4, #12]
 8002e60:	6126      	str	r6, [r4, #16]
 8002e62:	444e      	add	r6, r9
 8002e64:	6026      	str	r6, [r4, #0]
 8002e66:	463e      	mov	r6, r7
 8002e68:	6165      	str	r5, [r4, #20]
 8002e6a:	eba5 0509 	sub.w	r5, r5, r9
 8002e6e:	60a5      	str	r5, [r4, #8]
 8002e70:	42be      	cmp	r6, r7
 8002e72:	d900      	bls.n	8002e76 <__ssputs_r+0x72>
 8002e74:	463e      	mov	r6, r7
 8002e76:	4632      	mov	r2, r6
 8002e78:	4641      	mov	r1, r8
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	f000 faac 	bl	80033d8 <memmove>
 8002e80:	2000      	movs	r0, #0
 8002e82:	68a3      	ldr	r3, [r4, #8]
 8002e84:	1b9b      	subs	r3, r3, r6
 8002e86:	60a3      	str	r3, [r4, #8]
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	4433      	add	r3, r6
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e92:	462a      	mov	r2, r5
 8002e94:	f000 fad8 	bl	8003448 <_realloc_r>
 8002e98:	4606      	mov	r6, r0
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d1e0      	bne.n	8002e60 <__ssputs_r+0x5c>
 8002e9e:	4650      	mov	r0, sl
 8002ea0:	6921      	ldr	r1, [r4, #16]
 8002ea2:	f7ff feb9 	bl	8002c18 <_free_r>
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	f8ca 3000 	str.w	r3, [sl]
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	e7e9      	b.n	8002e8e <__ssputs_r+0x8a>
	...

08002ebc <_svfiprintf_r>:
 8002ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	898b      	ldrh	r3, [r1, #12]
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	460d      	mov	r5, r1
 8002eca:	4614      	mov	r4, r2
 8002ecc:	b09d      	sub	sp, #116	@ 0x74
 8002ece:	d510      	bpl.n	8002ef2 <_svfiprintf_r+0x36>
 8002ed0:	690b      	ldr	r3, [r1, #16]
 8002ed2:	b973      	cbnz	r3, 8002ef2 <_svfiprintf_r+0x36>
 8002ed4:	2140      	movs	r1, #64	@ 0x40
 8002ed6:	f7ff ff09 	bl	8002cec <_malloc_r>
 8002eda:	6028      	str	r0, [r5, #0]
 8002edc:	6128      	str	r0, [r5, #16]
 8002ede:	b930      	cbnz	r0, 8002eee <_svfiprintf_r+0x32>
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	b01d      	add	sp, #116	@ 0x74
 8002eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eee:	2340      	movs	r3, #64	@ 0x40
 8002ef0:	616b      	str	r3, [r5, #20]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002efc:	2330      	movs	r3, #48	@ 0x30
 8002efe:	f04f 0901 	mov.w	r9, #1
 8002f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80030a0 <_svfiprintf_r+0x1e4>
 8002f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f0e:	4623      	mov	r3, r4
 8002f10:	469a      	mov	sl, r3
 8002f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f16:	b10a      	cbz	r2, 8002f1c <_svfiprintf_r+0x60>
 8002f18:	2a25      	cmp	r2, #37	@ 0x25
 8002f1a:	d1f9      	bne.n	8002f10 <_svfiprintf_r+0x54>
 8002f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f20:	d00b      	beq.n	8002f3a <_svfiprintf_r+0x7e>
 8002f22:	465b      	mov	r3, fp
 8002f24:	4622      	mov	r2, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	4638      	mov	r0, r7
 8002f2a:	f7ff ff6b 	bl	8002e04 <__ssputs_r>
 8002f2e:	3001      	adds	r0, #1
 8002f30:	f000 80a7 	beq.w	8003082 <_svfiprintf_r+0x1c6>
 8002f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f36:	445a      	add	r2, fp
 8002f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 809f 	beq.w	8003082 <_svfiprintf_r+0x1c6>
 8002f44:	2300      	movs	r3, #0
 8002f46:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f4e:	f10a 0a01 	add.w	sl, sl, #1
 8002f52:	9304      	str	r3, [sp, #16]
 8002f54:	9307      	str	r3, [sp, #28]
 8002f56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f5c:	4654      	mov	r4, sl
 8002f5e:	2205      	movs	r2, #5
 8002f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f64:	484e      	ldr	r0, [pc, #312]	@ (80030a0 <_svfiprintf_r+0x1e4>)
 8002f66:	f000 fa61 	bl	800342c <memchr>
 8002f6a:	9a04      	ldr	r2, [sp, #16]
 8002f6c:	b9d8      	cbnz	r0, 8002fa6 <_svfiprintf_r+0xea>
 8002f6e:	06d0      	lsls	r0, r2, #27
 8002f70:	bf44      	itt	mi
 8002f72:	2320      	movmi	r3, #32
 8002f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f78:	0711      	lsls	r1, r2, #28
 8002f7a:	bf44      	itt	mi
 8002f7c:	232b      	movmi	r3, #43	@ 0x2b
 8002f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f82:	f89a 3000 	ldrb.w	r3, [sl]
 8002f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f88:	d015      	beq.n	8002fb6 <_svfiprintf_r+0xfa>
 8002f8a:	4654      	mov	r4, sl
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f04f 0c0a 	mov.w	ip, #10
 8002f92:	9a07      	ldr	r2, [sp, #28]
 8002f94:	4621      	mov	r1, r4
 8002f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f9a:	3b30      	subs	r3, #48	@ 0x30
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	d94b      	bls.n	8003038 <_svfiprintf_r+0x17c>
 8002fa0:	b1b0      	cbz	r0, 8002fd0 <_svfiprintf_r+0x114>
 8002fa2:	9207      	str	r2, [sp, #28]
 8002fa4:	e014      	b.n	8002fd0 <_svfiprintf_r+0x114>
 8002fa6:	eba0 0308 	sub.w	r3, r0, r8
 8002faa:	fa09 f303 	lsl.w	r3, r9, r3
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	46a2      	mov	sl, r4
 8002fb2:	9304      	str	r3, [sp, #16]
 8002fb4:	e7d2      	b.n	8002f5c <_svfiprintf_r+0xa0>
 8002fb6:	9b03      	ldr	r3, [sp, #12]
 8002fb8:	1d19      	adds	r1, r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	9103      	str	r1, [sp, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bfbb      	ittet	lt
 8002fc2:	425b      	neglt	r3, r3
 8002fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8002fc8:	9307      	strge	r3, [sp, #28]
 8002fca:	9307      	strlt	r3, [sp, #28]
 8002fcc:	bfb8      	it	lt
 8002fce:	9204      	strlt	r2, [sp, #16]
 8002fd0:	7823      	ldrb	r3, [r4, #0]
 8002fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fd4:	d10a      	bne.n	8002fec <_svfiprintf_r+0x130>
 8002fd6:	7863      	ldrb	r3, [r4, #1]
 8002fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fda:	d132      	bne.n	8003042 <_svfiprintf_r+0x186>
 8002fdc:	9b03      	ldr	r3, [sp, #12]
 8002fde:	3402      	adds	r4, #2
 8002fe0:	1d1a      	adds	r2, r3, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	9203      	str	r2, [sp, #12]
 8002fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fea:	9305      	str	r3, [sp, #20]
 8002fec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80030a4 <_svfiprintf_r+0x1e8>
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4650      	mov	r0, sl
 8002ff4:	7821      	ldrb	r1, [r4, #0]
 8002ff6:	f000 fa19 	bl	800342c <memchr>
 8002ffa:	b138      	cbz	r0, 800300c <_svfiprintf_r+0x150>
 8002ffc:	2240      	movs	r2, #64	@ 0x40
 8002ffe:	9b04      	ldr	r3, [sp, #16]
 8003000:	eba0 000a 	sub.w	r0, r0, sl
 8003004:	4082      	lsls	r2, r0
 8003006:	4313      	orrs	r3, r2
 8003008:	3401      	adds	r4, #1
 800300a:	9304      	str	r3, [sp, #16]
 800300c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003010:	2206      	movs	r2, #6
 8003012:	4825      	ldr	r0, [pc, #148]	@ (80030a8 <_svfiprintf_r+0x1ec>)
 8003014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003018:	f000 fa08 	bl	800342c <memchr>
 800301c:	2800      	cmp	r0, #0
 800301e:	d036      	beq.n	800308e <_svfiprintf_r+0x1d2>
 8003020:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <_svfiprintf_r+0x1f0>)
 8003022:	bb1b      	cbnz	r3, 800306c <_svfiprintf_r+0x1b0>
 8003024:	9b03      	ldr	r3, [sp, #12]
 8003026:	3307      	adds	r3, #7
 8003028:	f023 0307 	bic.w	r3, r3, #7
 800302c:	3308      	adds	r3, #8
 800302e:	9303      	str	r3, [sp, #12]
 8003030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003032:	4433      	add	r3, r6
 8003034:	9309      	str	r3, [sp, #36]	@ 0x24
 8003036:	e76a      	b.n	8002f0e <_svfiprintf_r+0x52>
 8003038:	460c      	mov	r4, r1
 800303a:	2001      	movs	r0, #1
 800303c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003040:	e7a8      	b.n	8002f94 <_svfiprintf_r+0xd8>
 8003042:	2300      	movs	r3, #0
 8003044:	f04f 0c0a 	mov.w	ip, #10
 8003048:	4619      	mov	r1, r3
 800304a:	3401      	adds	r4, #1
 800304c:	9305      	str	r3, [sp, #20]
 800304e:	4620      	mov	r0, r4
 8003050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003054:	3a30      	subs	r2, #48	@ 0x30
 8003056:	2a09      	cmp	r2, #9
 8003058:	d903      	bls.n	8003062 <_svfiprintf_r+0x1a6>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0c6      	beq.n	8002fec <_svfiprintf_r+0x130>
 800305e:	9105      	str	r1, [sp, #20]
 8003060:	e7c4      	b.n	8002fec <_svfiprintf_r+0x130>
 8003062:	4604      	mov	r4, r0
 8003064:	2301      	movs	r3, #1
 8003066:	fb0c 2101 	mla	r1, ip, r1, r2
 800306a:	e7f0      	b.n	800304e <_svfiprintf_r+0x192>
 800306c:	ab03      	add	r3, sp, #12
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	462a      	mov	r2, r5
 8003072:	4638      	mov	r0, r7
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <_svfiprintf_r+0x1f4>)
 8003076:	a904      	add	r1, sp, #16
 8003078:	f3af 8000 	nop.w
 800307c:	1c42      	adds	r2, r0, #1
 800307e:	4606      	mov	r6, r0
 8003080:	d1d6      	bne.n	8003030 <_svfiprintf_r+0x174>
 8003082:	89ab      	ldrh	r3, [r5, #12]
 8003084:	065b      	lsls	r3, r3, #25
 8003086:	f53f af2d 	bmi.w	8002ee4 <_svfiprintf_r+0x28>
 800308a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800308c:	e72c      	b.n	8002ee8 <_svfiprintf_r+0x2c>
 800308e:	ab03      	add	r3, sp, #12
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	462a      	mov	r2, r5
 8003094:	4638      	mov	r0, r7
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <_svfiprintf_r+0x1f4>)
 8003098:	a904      	add	r1, sp, #16
 800309a:	f000 f87d 	bl	8003198 <_printf_i>
 800309e:	e7ed      	b.n	800307c <_svfiprintf_r+0x1c0>
 80030a0:	0800350a 	.word	0x0800350a
 80030a4:	08003510 	.word	0x08003510
 80030a8:	08003514 	.word	0x08003514
 80030ac:	00000000 	.word	0x00000000
 80030b0:	08002e05 	.word	0x08002e05

080030b4 <_printf_common>:
 80030b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b8:	4616      	mov	r6, r2
 80030ba:	4698      	mov	r8, r3
 80030bc:	688a      	ldr	r2, [r1, #8]
 80030be:	690b      	ldr	r3, [r1, #16]
 80030c0:	4607      	mov	r7, r0
 80030c2:	4293      	cmp	r3, r2
 80030c4:	bfb8      	it	lt
 80030c6:	4613      	movlt	r3, r2
 80030c8:	6033      	str	r3, [r6, #0]
 80030ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030ce:	460c      	mov	r4, r1
 80030d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030d4:	b10a      	cbz	r2, 80030da <_printf_common+0x26>
 80030d6:	3301      	adds	r3, #1
 80030d8:	6033      	str	r3, [r6, #0]
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	0699      	lsls	r1, r3, #26
 80030de:	bf42      	ittt	mi
 80030e0:	6833      	ldrmi	r3, [r6, #0]
 80030e2:	3302      	addmi	r3, #2
 80030e4:	6033      	strmi	r3, [r6, #0]
 80030e6:	6825      	ldr	r5, [r4, #0]
 80030e8:	f015 0506 	ands.w	r5, r5, #6
 80030ec:	d106      	bne.n	80030fc <_printf_common+0x48>
 80030ee:	f104 0a19 	add.w	sl, r4, #25
 80030f2:	68e3      	ldr	r3, [r4, #12]
 80030f4:	6832      	ldr	r2, [r6, #0]
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	42ab      	cmp	r3, r5
 80030fa:	dc2b      	bgt.n	8003154 <_printf_common+0xa0>
 80030fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	3b00      	subs	r3, #0
 8003104:	bf18      	it	ne
 8003106:	2301      	movne	r3, #1
 8003108:	0692      	lsls	r2, r2, #26
 800310a:	d430      	bmi.n	800316e <_printf_common+0xba>
 800310c:	4641      	mov	r1, r8
 800310e:	4638      	mov	r0, r7
 8003110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003114:	47c8      	blx	r9
 8003116:	3001      	adds	r0, #1
 8003118:	d023      	beq.n	8003162 <_printf_common+0xae>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	6922      	ldr	r2, [r4, #16]
 800311e:	f003 0306 	and.w	r3, r3, #6
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf14      	ite	ne
 8003126:	2500      	movne	r5, #0
 8003128:	6833      	ldreq	r3, [r6, #0]
 800312a:	f04f 0600 	mov.w	r6, #0
 800312e:	bf08      	it	eq
 8003130:	68e5      	ldreq	r5, [r4, #12]
 8003132:	f104 041a 	add.w	r4, r4, #26
 8003136:	bf08      	it	eq
 8003138:	1aed      	subeq	r5, r5, r3
 800313a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800313e:	bf08      	it	eq
 8003140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003144:	4293      	cmp	r3, r2
 8003146:	bfc4      	itt	gt
 8003148:	1a9b      	subgt	r3, r3, r2
 800314a:	18ed      	addgt	r5, r5, r3
 800314c:	42b5      	cmp	r5, r6
 800314e:	d11a      	bne.n	8003186 <_printf_common+0xd2>
 8003150:	2000      	movs	r0, #0
 8003152:	e008      	b.n	8003166 <_printf_common+0xb2>
 8003154:	2301      	movs	r3, #1
 8003156:	4652      	mov	r2, sl
 8003158:	4641      	mov	r1, r8
 800315a:	4638      	mov	r0, r7
 800315c:	47c8      	blx	r9
 800315e:	3001      	adds	r0, #1
 8003160:	d103      	bne.n	800316a <_printf_common+0xb6>
 8003162:	f04f 30ff 	mov.w	r0, #4294967295
 8003166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316a:	3501      	adds	r5, #1
 800316c:	e7c1      	b.n	80030f2 <_printf_common+0x3e>
 800316e:	2030      	movs	r0, #48	@ 0x30
 8003170:	18e1      	adds	r1, r4, r3
 8003172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800317c:	4422      	add	r2, r4
 800317e:	3302      	adds	r3, #2
 8003180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003184:	e7c2      	b.n	800310c <_printf_common+0x58>
 8003186:	2301      	movs	r3, #1
 8003188:	4622      	mov	r2, r4
 800318a:	4641      	mov	r1, r8
 800318c:	4638      	mov	r0, r7
 800318e:	47c8      	blx	r9
 8003190:	3001      	adds	r0, #1
 8003192:	d0e6      	beq.n	8003162 <_printf_common+0xae>
 8003194:	3601      	adds	r6, #1
 8003196:	e7d9      	b.n	800314c <_printf_common+0x98>

08003198 <_printf_i>:
 8003198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800319c:	7e0f      	ldrb	r7, [r1, #24]
 800319e:	4691      	mov	r9, r2
 80031a0:	2f78      	cmp	r7, #120	@ 0x78
 80031a2:	4680      	mov	r8, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	469a      	mov	sl, r3
 80031a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031ae:	d807      	bhi.n	80031c0 <_printf_i+0x28>
 80031b0:	2f62      	cmp	r7, #98	@ 0x62
 80031b2:	d80a      	bhi.n	80031ca <_printf_i+0x32>
 80031b4:	2f00      	cmp	r7, #0
 80031b6:	f000 80d3 	beq.w	8003360 <_printf_i+0x1c8>
 80031ba:	2f58      	cmp	r7, #88	@ 0x58
 80031bc:	f000 80ba 	beq.w	8003334 <_printf_i+0x19c>
 80031c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031c8:	e03a      	b.n	8003240 <_printf_i+0xa8>
 80031ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031ce:	2b15      	cmp	r3, #21
 80031d0:	d8f6      	bhi.n	80031c0 <_printf_i+0x28>
 80031d2:	a101      	add	r1, pc, #4	@ (adr r1, 80031d8 <_printf_i+0x40>)
 80031d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031d8:	08003231 	.word	0x08003231
 80031dc:	08003245 	.word	0x08003245
 80031e0:	080031c1 	.word	0x080031c1
 80031e4:	080031c1 	.word	0x080031c1
 80031e8:	080031c1 	.word	0x080031c1
 80031ec:	080031c1 	.word	0x080031c1
 80031f0:	08003245 	.word	0x08003245
 80031f4:	080031c1 	.word	0x080031c1
 80031f8:	080031c1 	.word	0x080031c1
 80031fc:	080031c1 	.word	0x080031c1
 8003200:	080031c1 	.word	0x080031c1
 8003204:	08003347 	.word	0x08003347
 8003208:	0800326f 	.word	0x0800326f
 800320c:	08003301 	.word	0x08003301
 8003210:	080031c1 	.word	0x080031c1
 8003214:	080031c1 	.word	0x080031c1
 8003218:	08003369 	.word	0x08003369
 800321c:	080031c1 	.word	0x080031c1
 8003220:	0800326f 	.word	0x0800326f
 8003224:	080031c1 	.word	0x080031c1
 8003228:	080031c1 	.word	0x080031c1
 800322c:	08003309 	.word	0x08003309
 8003230:	6833      	ldr	r3, [r6, #0]
 8003232:	1d1a      	adds	r2, r3, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6032      	str	r2, [r6, #0]
 8003238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800323c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003240:	2301      	movs	r3, #1
 8003242:	e09e      	b.n	8003382 <_printf_i+0x1ea>
 8003244:	6833      	ldr	r3, [r6, #0]
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	1d19      	adds	r1, r3, #4
 800324a:	6031      	str	r1, [r6, #0]
 800324c:	0606      	lsls	r6, r0, #24
 800324e:	d501      	bpl.n	8003254 <_printf_i+0xbc>
 8003250:	681d      	ldr	r5, [r3, #0]
 8003252:	e003      	b.n	800325c <_printf_i+0xc4>
 8003254:	0645      	lsls	r5, r0, #25
 8003256:	d5fb      	bpl.n	8003250 <_printf_i+0xb8>
 8003258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800325c:	2d00      	cmp	r5, #0
 800325e:	da03      	bge.n	8003268 <_printf_i+0xd0>
 8003260:	232d      	movs	r3, #45	@ 0x2d
 8003262:	426d      	negs	r5, r5
 8003264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003268:	230a      	movs	r3, #10
 800326a:	4859      	ldr	r0, [pc, #356]	@ (80033d0 <_printf_i+0x238>)
 800326c:	e011      	b.n	8003292 <_printf_i+0xfa>
 800326e:	6821      	ldr	r1, [r4, #0]
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	0608      	lsls	r0, r1, #24
 8003274:	f853 5b04 	ldr.w	r5, [r3], #4
 8003278:	d402      	bmi.n	8003280 <_printf_i+0xe8>
 800327a:	0649      	lsls	r1, r1, #25
 800327c:	bf48      	it	mi
 800327e:	b2ad      	uxthmi	r5, r5
 8003280:	2f6f      	cmp	r7, #111	@ 0x6f
 8003282:	6033      	str	r3, [r6, #0]
 8003284:	bf14      	ite	ne
 8003286:	230a      	movne	r3, #10
 8003288:	2308      	moveq	r3, #8
 800328a:	4851      	ldr	r0, [pc, #324]	@ (80033d0 <_printf_i+0x238>)
 800328c:	2100      	movs	r1, #0
 800328e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003292:	6866      	ldr	r6, [r4, #4]
 8003294:	2e00      	cmp	r6, #0
 8003296:	bfa8      	it	ge
 8003298:	6821      	ldrge	r1, [r4, #0]
 800329a:	60a6      	str	r6, [r4, #8]
 800329c:	bfa4      	itt	ge
 800329e:	f021 0104 	bicge.w	r1, r1, #4
 80032a2:	6021      	strge	r1, [r4, #0]
 80032a4:	b90d      	cbnz	r5, 80032aa <_printf_i+0x112>
 80032a6:	2e00      	cmp	r6, #0
 80032a8:	d04b      	beq.n	8003342 <_printf_i+0x1aa>
 80032aa:	4616      	mov	r6, r2
 80032ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80032b0:	fb03 5711 	mls	r7, r3, r1, r5
 80032b4:	5dc7      	ldrb	r7, [r0, r7]
 80032b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032ba:	462f      	mov	r7, r5
 80032bc:	42bb      	cmp	r3, r7
 80032be:	460d      	mov	r5, r1
 80032c0:	d9f4      	bls.n	80032ac <_printf_i+0x114>
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d10b      	bne.n	80032de <_printf_i+0x146>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	07df      	lsls	r7, r3, #31
 80032ca:	d508      	bpl.n	80032de <_printf_i+0x146>
 80032cc:	6923      	ldr	r3, [r4, #16]
 80032ce:	6861      	ldr	r1, [r4, #4]
 80032d0:	4299      	cmp	r1, r3
 80032d2:	bfde      	ittt	le
 80032d4:	2330      	movle	r3, #48	@ 0x30
 80032d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032de:	1b92      	subs	r2, r2, r6
 80032e0:	6122      	str	r2, [r4, #16]
 80032e2:	464b      	mov	r3, r9
 80032e4:	4621      	mov	r1, r4
 80032e6:	4640      	mov	r0, r8
 80032e8:	f8cd a000 	str.w	sl, [sp]
 80032ec:	aa03      	add	r2, sp, #12
 80032ee:	f7ff fee1 	bl	80030b4 <_printf_common>
 80032f2:	3001      	adds	r0, #1
 80032f4:	d14a      	bne.n	800338c <_printf_i+0x1f4>
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295
 80032fa:	b004      	add	sp, #16
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	f043 0320 	orr.w	r3, r3, #32
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	2778      	movs	r7, #120	@ 0x78
 800330a:	4832      	ldr	r0, [pc, #200]	@ (80033d4 <_printf_i+0x23c>)
 800330c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	6831      	ldr	r1, [r6, #0]
 8003314:	061f      	lsls	r7, r3, #24
 8003316:	f851 5b04 	ldr.w	r5, [r1], #4
 800331a:	d402      	bmi.n	8003322 <_printf_i+0x18a>
 800331c:	065f      	lsls	r7, r3, #25
 800331e:	bf48      	it	mi
 8003320:	b2ad      	uxthmi	r5, r5
 8003322:	6031      	str	r1, [r6, #0]
 8003324:	07d9      	lsls	r1, r3, #31
 8003326:	bf44      	itt	mi
 8003328:	f043 0320 	orrmi.w	r3, r3, #32
 800332c:	6023      	strmi	r3, [r4, #0]
 800332e:	b11d      	cbz	r5, 8003338 <_printf_i+0x1a0>
 8003330:	2310      	movs	r3, #16
 8003332:	e7ab      	b.n	800328c <_printf_i+0xf4>
 8003334:	4826      	ldr	r0, [pc, #152]	@ (80033d0 <_printf_i+0x238>)
 8003336:	e7e9      	b.n	800330c <_printf_i+0x174>
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	f023 0320 	bic.w	r3, r3, #32
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	e7f6      	b.n	8003330 <_printf_i+0x198>
 8003342:	4616      	mov	r6, r2
 8003344:	e7bd      	b.n	80032c2 <_printf_i+0x12a>
 8003346:	6833      	ldr	r3, [r6, #0]
 8003348:	6825      	ldr	r5, [r4, #0]
 800334a:	1d18      	adds	r0, r3, #4
 800334c:	6961      	ldr	r1, [r4, #20]
 800334e:	6030      	str	r0, [r6, #0]
 8003350:	062e      	lsls	r6, r5, #24
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	d501      	bpl.n	800335a <_printf_i+0x1c2>
 8003356:	6019      	str	r1, [r3, #0]
 8003358:	e002      	b.n	8003360 <_printf_i+0x1c8>
 800335a:	0668      	lsls	r0, r5, #25
 800335c:	d5fb      	bpl.n	8003356 <_printf_i+0x1be>
 800335e:	8019      	strh	r1, [r3, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	4616      	mov	r6, r2
 8003364:	6123      	str	r3, [r4, #16]
 8003366:	e7bc      	b.n	80032e2 <_printf_i+0x14a>
 8003368:	6833      	ldr	r3, [r6, #0]
 800336a:	2100      	movs	r1, #0
 800336c:	1d1a      	adds	r2, r3, #4
 800336e:	6032      	str	r2, [r6, #0]
 8003370:	681e      	ldr	r6, [r3, #0]
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f859 	bl	800342c <memchr>
 800337a:	b108      	cbz	r0, 8003380 <_printf_i+0x1e8>
 800337c:	1b80      	subs	r0, r0, r6
 800337e:	6060      	str	r0, [r4, #4]
 8003380:	6863      	ldr	r3, [r4, #4]
 8003382:	6123      	str	r3, [r4, #16]
 8003384:	2300      	movs	r3, #0
 8003386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800338a:	e7aa      	b.n	80032e2 <_printf_i+0x14a>
 800338c:	4632      	mov	r2, r6
 800338e:	4649      	mov	r1, r9
 8003390:	4640      	mov	r0, r8
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	47d0      	blx	sl
 8003396:	3001      	adds	r0, #1
 8003398:	d0ad      	beq.n	80032f6 <_printf_i+0x15e>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	079b      	lsls	r3, r3, #30
 800339e:	d413      	bmi.n	80033c8 <_printf_i+0x230>
 80033a0:	68e0      	ldr	r0, [r4, #12]
 80033a2:	9b03      	ldr	r3, [sp, #12]
 80033a4:	4298      	cmp	r0, r3
 80033a6:	bfb8      	it	lt
 80033a8:	4618      	movlt	r0, r3
 80033aa:	e7a6      	b.n	80032fa <_printf_i+0x162>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4632      	mov	r2, r6
 80033b0:	4649      	mov	r1, r9
 80033b2:	4640      	mov	r0, r8
 80033b4:	47d0      	blx	sl
 80033b6:	3001      	adds	r0, #1
 80033b8:	d09d      	beq.n	80032f6 <_printf_i+0x15e>
 80033ba:	3501      	adds	r5, #1
 80033bc:	68e3      	ldr	r3, [r4, #12]
 80033be:	9903      	ldr	r1, [sp, #12]
 80033c0:	1a5b      	subs	r3, r3, r1
 80033c2:	42ab      	cmp	r3, r5
 80033c4:	dcf2      	bgt.n	80033ac <_printf_i+0x214>
 80033c6:	e7eb      	b.n	80033a0 <_printf_i+0x208>
 80033c8:	2500      	movs	r5, #0
 80033ca:	f104 0619 	add.w	r6, r4, #25
 80033ce:	e7f5      	b.n	80033bc <_printf_i+0x224>
 80033d0:	0800351b 	.word	0x0800351b
 80033d4:	0800352c 	.word	0x0800352c

080033d8 <memmove>:
 80033d8:	4288      	cmp	r0, r1
 80033da:	b510      	push	{r4, lr}
 80033dc:	eb01 0402 	add.w	r4, r1, r2
 80033e0:	d902      	bls.n	80033e8 <memmove+0x10>
 80033e2:	4284      	cmp	r4, r0
 80033e4:	4623      	mov	r3, r4
 80033e6:	d807      	bhi.n	80033f8 <memmove+0x20>
 80033e8:	1e43      	subs	r3, r0, #1
 80033ea:	42a1      	cmp	r1, r4
 80033ec:	d008      	beq.n	8003400 <memmove+0x28>
 80033ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033f6:	e7f8      	b.n	80033ea <memmove+0x12>
 80033f8:	4601      	mov	r1, r0
 80033fa:	4402      	add	r2, r0
 80033fc:	428a      	cmp	r2, r1
 80033fe:	d100      	bne.n	8003402 <memmove+0x2a>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800340a:	e7f7      	b.n	80033fc <memmove+0x24>

0800340c <_sbrk_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	2300      	movs	r3, #0
 8003410:	4d05      	ldr	r5, [pc, #20]	@ (8003428 <_sbrk_r+0x1c>)
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	602b      	str	r3, [r5, #0]
 8003418:	f7fd fa6c 	bl	80008f4 <_sbrk>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_sbrk_r+0x1a>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_sbrk_r+0x1a>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	20000e80 	.word	0x20000e80

0800342c <memchr>:
 800342c:	4603      	mov	r3, r0
 800342e:	b510      	push	{r4, lr}
 8003430:	b2c9      	uxtb	r1, r1
 8003432:	4402      	add	r2, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	4618      	mov	r0, r3
 8003438:	d101      	bne.n	800343e <memchr+0x12>
 800343a:	2000      	movs	r0, #0
 800343c:	e003      	b.n	8003446 <memchr+0x1a>
 800343e:	7804      	ldrb	r4, [r0, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	428c      	cmp	r4, r1
 8003444:	d1f6      	bne.n	8003434 <memchr+0x8>
 8003446:	bd10      	pop	{r4, pc}

08003448 <_realloc_r>:
 8003448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800344c:	4680      	mov	r8, r0
 800344e:	4615      	mov	r5, r2
 8003450:	460c      	mov	r4, r1
 8003452:	b921      	cbnz	r1, 800345e <_realloc_r+0x16>
 8003454:	4611      	mov	r1, r2
 8003456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800345a:	f7ff bc47 	b.w	8002cec <_malloc_r>
 800345e:	b92a      	cbnz	r2, 800346c <_realloc_r+0x24>
 8003460:	f7ff fbda 	bl	8002c18 <_free_r>
 8003464:	2400      	movs	r4, #0
 8003466:	4620      	mov	r0, r4
 8003468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800346c:	f000 f81a 	bl	80034a4 <_malloc_usable_size_r>
 8003470:	4285      	cmp	r5, r0
 8003472:	4606      	mov	r6, r0
 8003474:	d802      	bhi.n	800347c <_realloc_r+0x34>
 8003476:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800347a:	d8f4      	bhi.n	8003466 <_realloc_r+0x1e>
 800347c:	4629      	mov	r1, r5
 800347e:	4640      	mov	r0, r8
 8003480:	f7ff fc34 	bl	8002cec <_malloc_r>
 8003484:	4607      	mov	r7, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	d0ec      	beq.n	8003464 <_realloc_r+0x1c>
 800348a:	42b5      	cmp	r5, r6
 800348c:	462a      	mov	r2, r5
 800348e:	4621      	mov	r1, r4
 8003490:	bf28      	it	cs
 8003492:	4632      	movcs	r2, r6
 8003494:	f7ff fbb2 	bl	8002bfc <memcpy>
 8003498:	4621      	mov	r1, r4
 800349a:	4640      	mov	r0, r8
 800349c:	f7ff fbbc 	bl	8002c18 <_free_r>
 80034a0:	463c      	mov	r4, r7
 80034a2:	e7e0      	b.n	8003466 <_realloc_r+0x1e>

080034a4 <_malloc_usable_size_r>:
 80034a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a8:	1f18      	subs	r0, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bfbc      	itt	lt
 80034ae:	580b      	ldrlt	r3, [r1, r0]
 80034b0:	18c0      	addlt	r0, r0, r3
 80034b2:	4770      	bx	lr

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
