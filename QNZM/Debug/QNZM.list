
QNZM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08009ba4  08009ba4  0000aba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  0000b18c  2**0
                  CONTENTS
  4 .ARM          00000000  08009c48  08009c48  0000b18c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c48  08009c48  0000b18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c4c  08009c4c  0000ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08009c50  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  2000018c  08009ddc  0000b18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  08009ddc  0000b9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcc2  00000000  00000000  0000b1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326a  00000000  00000000  0001ae77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3b  00000000  00000000  0001eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a350  00000000  00000000  0001f8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152cf  00000000  00000000  00039c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008762e  00000000  00000000  0004ef02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6530  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000d6574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000d9b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009b8c 	.word	0x08009b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	08009b8c 	.word	0x08009b8c

0800014c <ifkey>:
#include "Keyboard_Driver.h"

uint8_t report[15]={0};

void ifkey(int command)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(command)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	3b01      	subs	r3, #1
 8000158:	2bcf      	cmp	r3, #207	@ 0xcf
 800015a:	f201 807f 	bhi.w	800125c <ifkey+0x1110>
 800015e:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <ifkey+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	080004a5 	.word	0x080004a5
 8000168:	080004b7 	.word	0x080004b7
 800016c:	080004c9 	.word	0x080004c9
 8000170:	080004db 	.word	0x080004db
 8000174:	080004ed 	.word	0x080004ed
 8000178:	080004ff 	.word	0x080004ff
 800017c:	08000511 	.word	0x08000511
 8000180:	08000523 	.word	0x08000523
 8000184:	08000535 	.word	0x08000535
 8000188:	08000547 	.word	0x08000547
 800018c:	08000559 	.word	0x08000559
 8000190:	0800056b 	.word	0x0800056b
 8000194:	0800057d 	.word	0x0800057d
 8000198:	0800058f 	.word	0x0800058f
 800019c:	080005a1 	.word	0x080005a1
 80001a0:	080005b3 	.word	0x080005b3
 80001a4:	080005c5 	.word	0x080005c5
 80001a8:	080005d7 	.word	0x080005d7
 80001ac:	080005e9 	.word	0x080005e9
 80001b0:	080005fb 	.word	0x080005fb
 80001b4:	0800060d 	.word	0x0800060d
 80001b8:	0800061f 	.word	0x0800061f
 80001bc:	08000631 	.word	0x08000631
 80001c0:	08000643 	.word	0x08000643
 80001c4:	08000655 	.word	0x08000655
 80001c8:	08000667 	.word	0x08000667
 80001cc:	08000679 	.word	0x08000679
 80001d0:	0800068b 	.word	0x0800068b
 80001d4:	0800069d 	.word	0x0800069d
 80001d8:	080006af 	.word	0x080006af
 80001dc:	080006c1 	.word	0x080006c1
 80001e0:	080006d3 	.word	0x080006d3
 80001e4:	080006e5 	.word	0x080006e5
 80001e8:	080006f7 	.word	0x080006f7
 80001ec:	08000709 	.word	0x08000709
 80001f0:	0800071b 	.word	0x0800071b
 80001f4:	0800072d 	.word	0x0800072d
 80001f8:	0800073f 	.word	0x0800073f
 80001fc:	08000751 	.word	0x08000751
 8000200:	08000769 	.word	0x08000769
 8000204:	0800077b 	.word	0x0800077b
 8000208:	0800078d 	.word	0x0800078d
 800020c:	0800079f 	.word	0x0800079f
 8000210:	080007b1 	.word	0x080007b1
 8000214:	080007c3 	.word	0x080007c3
 8000218:	080007d5 	.word	0x080007d5
 800021c:	080007e7 	.word	0x080007e7
 8000220:	080007f9 	.word	0x080007f9
 8000224:	0800080b 	.word	0x0800080b
 8000228:	0800081d 	.word	0x0800081d
 800022c:	0800082f 	.word	0x0800082f
 8000230:	08000841 	.word	0x08000841
 8000234:	08000853 	.word	0x08000853
 8000238:	08000865 	.word	0x08000865
 800023c:	08000877 	.word	0x08000877
 8000240:	08000889 	.word	0x08000889
 8000244:	0800089b 	.word	0x0800089b
 8000248:	080008ad 	.word	0x080008ad
 800024c:	080008bf 	.word	0x080008bf
 8000250:	080008d1 	.word	0x080008d1
 8000254:	080008e3 	.word	0x080008e3
 8000258:	080008f5 	.word	0x080008f5
 800025c:	08000907 	.word	0x08000907
 8000260:	08000919 	.word	0x08000919
 8000264:	0800092b 	.word	0x0800092b
 8000268:	0800093d 	.word	0x0800093d
 800026c:	0800094f 	.word	0x0800094f
 8000270:	08000961 	.word	0x08000961
 8000274:	08000973 	.word	0x08000973
 8000278:	08000985 	.word	0x08000985
 800027c:	08000997 	.word	0x08000997
 8000280:	080009a9 	.word	0x080009a9
 8000284:	080009bb 	.word	0x080009bb
 8000288:	080009cd 	.word	0x080009cd
 800028c:	080009df 	.word	0x080009df
 8000290:	080009f1 	.word	0x080009f1
 8000294:	08000a03 	.word	0x08000a03
 8000298:	08000a15 	.word	0x08000a15
 800029c:	08000a2d 	.word	0x08000a2d
 80002a0:	08000a3f 	.word	0x08000a3f
 80002a4:	08000a51 	.word	0x08000a51
 80002a8:	08000a61 	.word	0x08000a61
 80002ac:	08000a71 	.word	0x08000a71
 80002b0:	08000a81 	.word	0x08000a81
 80002b4:	08000a91 	.word	0x08000a91
 80002b8:	08000aa1 	.word	0x08000aa1
 80002bc:	08000ab1 	.word	0x08000ab1
 80002c0:	08000ac1 	.word	0x08000ac1
 80002c4:	08000ad1 	.word	0x08000ad1
 80002c8:	08000ae1 	.word	0x08000ae1
 80002cc:	08000af1 	.word	0x08000af1
 80002d0:	08000b01 	.word	0x08000b01
 80002d4:	08000b11 	.word	0x08000b11
 80002d8:	08000b21 	.word	0x08000b21
 80002dc:	08000b31 	.word	0x08000b31
 80002e0:	08000b41 	.word	0x08000b41
 80002e4:	08000b51 	.word	0x08000b51
 80002e8:	08000b61 	.word	0x08000b61
 80002ec:	08000b71 	.word	0x08000b71
 80002f0:	08000b81 	.word	0x08000b81
 80002f4:	08000b91 	.word	0x08000b91
 80002f8:	08000ba1 	.word	0x08000ba1
 80002fc:	08000bb1 	.word	0x08000bb1
 8000300:	08000bc1 	.word	0x08000bc1
 8000304:	08000bd1 	.word	0x08000bd1
 8000308:	08000be1 	.word	0x08000be1
 800030c:	08000bf1 	.word	0x08000bf1
 8000310:	08000c01 	.word	0x08000c01
 8000314:	08000c11 	.word	0x08000c11
 8000318:	08000c21 	.word	0x08000c21
 800031c:	08000c31 	.word	0x08000c31
 8000320:	08000c41 	.word	0x08000c41
 8000324:	08000c51 	.word	0x08000c51
 8000328:	08000c61 	.word	0x08000c61
 800032c:	08000c71 	.word	0x08000c71
 8000330:	08000c81 	.word	0x08000c81
 8000334:	08000c91 	.word	0x08000c91
 8000338:	08000ca5 	.word	0x08000ca5
 800033c:	08000cb5 	.word	0x08000cb5
 8000340:	08000cc5 	.word	0x08000cc5
 8000344:	08000cd5 	.word	0x08000cd5
 8000348:	08000ce5 	.word	0x08000ce5
 800034c:	08000cf5 	.word	0x08000cf5
 8000350:	08000d05 	.word	0x08000d05
 8000354:	08000d15 	.word	0x08000d15
 8000358:	08000d25 	.word	0x08000d25
 800035c:	08000d35 	.word	0x08000d35
 8000360:	08000d45 	.word	0x08000d45
 8000364:	08000d55 	.word	0x08000d55
 8000368:	08000d65 	.word	0x08000d65
 800036c:	08000d75 	.word	0x08000d75
 8000370:	08000d85 	.word	0x08000d85
 8000374:	08000d95 	.word	0x08000d95
 8000378:	08000da5 	.word	0x08000da5
 800037c:	08000db5 	.word	0x08000db5
 8000380:	08000dc5 	.word	0x08000dc5
 8000384:	08000dd5 	.word	0x08000dd5
 8000388:	08000de5 	.word	0x08000de5
 800038c:	08000df5 	.word	0x08000df5
 8000390:	08000e05 	.word	0x08000e05
 8000394:	08000e15 	.word	0x08000e15
 8000398:	08000e25 	.word	0x08000e25
 800039c:	08000e35 	.word	0x08000e35
 80003a0:	08000e45 	.word	0x08000e45
 80003a4:	08000e55 	.word	0x08000e55
 80003a8:	08000e65 	.word	0x08000e65
 80003ac:	08000e75 	.word	0x08000e75
 80003b0:	08000e85 	.word	0x08000e85
 80003b4:	08000e95 	.word	0x08000e95
 80003b8:	08000ea5 	.word	0x08000ea5
 80003bc:	08000eb5 	.word	0x08000eb5
 80003c0:	08000ec5 	.word	0x08000ec5
 80003c4:	08000ed5 	.word	0x08000ed5
 80003c8:	08000ee5 	.word	0x08000ee5
 80003cc:	08000ef5 	.word	0x08000ef5
 80003d0:	08000f05 	.word	0x08000f05
 80003d4:	08000f19 	.word	0x08000f19
 80003d8:	08000f29 	.word	0x08000f29
 80003dc:	08000f39 	.word	0x08000f39
 80003e0:	08000f49 	.word	0x08000f49
 80003e4:	08000f59 	.word	0x08000f59
 80003e8:	08000f69 	.word	0x08000f69
 80003ec:	08000f79 	.word	0x08000f79
 80003f0:	08000f89 	.word	0x08000f89
 80003f4:	08000f99 	.word	0x08000f99
 80003f8:	08000fa9 	.word	0x08000fa9
 80003fc:	08000fb9 	.word	0x08000fb9
 8000400:	08000fc9 	.word	0x08000fc9
 8000404:	08000fd9 	.word	0x08000fd9
 8000408:	08000fe9 	.word	0x08000fe9
 800040c:	08000ff9 	.word	0x08000ff9
 8000410:	08001009 	.word	0x08001009
 8000414:	08001019 	.word	0x08001019
 8000418:	08001029 	.word	0x08001029
 800041c:	08001039 	.word	0x08001039
 8000420:	08001049 	.word	0x08001049
 8000424:	08001059 	.word	0x08001059
 8000428:	08001069 	.word	0x08001069
 800042c:	08001079 	.word	0x08001079
 8000430:	08001089 	.word	0x08001089
 8000434:	08001099 	.word	0x08001099
 8000438:	080010a9 	.word	0x080010a9
 800043c:	080010b9 	.word	0x080010b9
 8000440:	080010c9 	.word	0x080010c9
 8000444:	080010d9 	.word	0x080010d9
 8000448:	080010e9 	.word	0x080010e9
 800044c:	080010f9 	.word	0x080010f9
 8000450:	08001109 	.word	0x08001109
 8000454:	08001119 	.word	0x08001119
 8000458:	08001129 	.word	0x08001129
 800045c:	08001139 	.word	0x08001139
 8000460:	08001149 	.word	0x08001149
 8000464:	08001159 	.word	0x08001159
 8000468:	08001169 	.word	0x08001169
 800046c:	08001179 	.word	0x08001179
 8000470:	0800118d 	.word	0x0800118d
 8000474:	0800119d 	.word	0x0800119d
 8000478:	080011ad 	.word	0x080011ad
 800047c:	080011bd 	.word	0x080011bd
 8000480:	080011cd 	.word	0x080011cd
 8000484:	080011dd 	.word	0x080011dd
 8000488:	080011ed 	.word	0x080011ed
 800048c:	080011fd 	.word	0x080011fd
 8000490:	0800120d 	.word	0x0800120d
 8000494:	0800121d 	.word	0x0800121d
 8000498:	0800122d 	.word	0x0800122d
 800049c:	0800123d 	.word	0x0800123d
 80004a0:	0800124d 	.word	0x0800124d
	  	{
	  		case 1:report[0]|=0x01;break;//LeftCtrl
 80004a4:	4baf      	ldr	r3, [pc, #700]	@ (8000764 <ifkey+0x618>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	4bad      	ldr	r3, [pc, #692]	@ (8000764 <ifkey+0x618>)
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	f000 bed3 	b.w	800125c <ifkey+0x1110>
	  		case 2:report[0]&=(~0x01);break;
 80004b6:	4bab      	ldr	r3, [pc, #684]	@ (8000764 <ifkey+0x618>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4ba8      	ldr	r3, [pc, #672]	@ (8000764 <ifkey+0x618>)
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	f000 beca 	b.w	800125c <ifkey+0x1110>
	  		case 3:report[0]|=0x02;break;//LeftShift
 80004c8:	4ba6      	ldr	r3, [pc, #664]	@ (8000764 <ifkey+0x618>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4ba4      	ldr	r3, [pc, #656]	@ (8000764 <ifkey+0x618>)
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	f000 bec1 	b.w	800125c <ifkey+0x1110>
	  		case 4:report[0]&=(~0x02);break;
 80004da:	4ba2      	ldr	r3, [pc, #648]	@ (8000764 <ifkey+0x618>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f023 0302 	bic.w	r3, r3, #2
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b9f      	ldr	r3, [pc, #636]	@ (8000764 <ifkey+0x618>)
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	f000 beb8 	b.w	800125c <ifkey+0x1110>
	  		case 5:report[0]|=0x04;break;//LeftAlt
 80004ec:	4b9d      	ldr	r3, [pc, #628]	@ (8000764 <ifkey+0x618>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b9b      	ldr	r3, [pc, #620]	@ (8000764 <ifkey+0x618>)
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	f000 beaf 	b.w	800125c <ifkey+0x1110>
	  		case 6:report[0]&=(~0x04);break;
 80004fe:	4b99      	ldr	r3, [pc, #612]	@ (8000764 <ifkey+0x618>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	f023 0304 	bic.w	r3, r3, #4
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b96      	ldr	r3, [pc, #600]	@ (8000764 <ifkey+0x618>)
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	f000 bea6 	b.w	800125c <ifkey+0x1110>
	  		case 7:report[0]|=0x08;break;//LeftGUI
 8000510:	4b94      	ldr	r3, [pc, #592]	@ (8000764 <ifkey+0x618>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b92      	ldr	r3, [pc, #584]	@ (8000764 <ifkey+0x618>)
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	f000 be9d 	b.w	800125c <ifkey+0x1110>
	  		case 8:report[0]&=(~0x08);break;
 8000522:	4b90      	ldr	r3, [pc, #576]	@ (8000764 <ifkey+0x618>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f023 0308 	bic.w	r3, r3, #8
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b8d      	ldr	r3, [pc, #564]	@ (8000764 <ifkey+0x618>)
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	f000 be94 	b.w	800125c <ifkey+0x1110>
	  		case 9:report[0]|=0x10;break;//RightCtrl
 8000534:	4b8b      	ldr	r3, [pc, #556]	@ (8000764 <ifkey+0x618>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b89      	ldr	r3, [pc, #548]	@ (8000764 <ifkey+0x618>)
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	f000 be8b 	b.w	800125c <ifkey+0x1110>
	  		case 10:report[0]&=(~0x10);break;
 8000546:	4b87      	ldr	r3, [pc, #540]	@ (8000764 <ifkey+0x618>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0310 	bic.w	r3, r3, #16
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b84      	ldr	r3, [pc, #528]	@ (8000764 <ifkey+0x618>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	f000 be82 	b.w	800125c <ifkey+0x1110>
	  		case 11:report[0]|=0x20;break;//RightShift
 8000558:	4b82      	ldr	r3, [pc, #520]	@ (8000764 <ifkey+0x618>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b80      	ldr	r3, [pc, #512]	@ (8000764 <ifkey+0x618>)
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	f000 be79 	b.w	800125c <ifkey+0x1110>
	  		case 12:report[0]&=(~0x20);break;
 800056a:	4b7e      	ldr	r3, [pc, #504]	@ (8000764 <ifkey+0x618>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f023 0320 	bic.w	r3, r3, #32
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b7b      	ldr	r3, [pc, #492]	@ (8000764 <ifkey+0x618>)
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	f000 be70 	b.w	800125c <ifkey+0x1110>
	  		case 13:report[0]|=0x40;break;//RightAlt
 800057c:	4b79      	ldr	r3, [pc, #484]	@ (8000764 <ifkey+0x618>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b77      	ldr	r3, [pc, #476]	@ (8000764 <ifkey+0x618>)
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	f000 be67 	b.w	800125c <ifkey+0x1110>
	  		case 14:report[0]&=(~0x40);break;
 800058e:	4b75      	ldr	r3, [pc, #468]	@ (8000764 <ifkey+0x618>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b72      	ldr	r3, [pc, #456]	@ (8000764 <ifkey+0x618>)
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	f000 be5e 	b.w	800125c <ifkey+0x1110>
	  		case 15:report[0]|=0x80;break;//RightGUI
 80005a0:	4b70      	ldr	r3, [pc, #448]	@ (8000764 <ifkey+0x618>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000764 <ifkey+0x618>)
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	f000 be55 	b.w	800125c <ifkey+0x1110>
	  		case 16:report[0]&=(~0x80);break;
 80005b2:	4b6c      	ldr	r3, [pc, #432]	@ (8000764 <ifkey+0x618>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b69      	ldr	r3, [pc, #420]	@ (8000764 <ifkey+0x618>)
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	f000 be4c 	b.w	800125c <ifkey+0x1110>
	  		case 17:report[2]|=0x01;break;//a按下
 80005c4:	4b67      	ldr	r3, [pc, #412]	@ (8000764 <ifkey+0x618>)
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b65      	ldr	r3, [pc, #404]	@ (8000764 <ifkey+0x618>)
 80005d0:	709a      	strb	r2, [r3, #2]
 80005d2:	f000 be43 	b.w	800125c <ifkey+0x1110>
	  		case 18:report[2]&=(~0x01);break;//a释放
 80005d6:	4b63      	ldr	r3, [pc, #396]	@ (8000764 <ifkey+0x618>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	f023 0301 	bic.w	r3, r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b60      	ldr	r3, [pc, #384]	@ (8000764 <ifkey+0x618>)
 80005e2:	709a      	strb	r2, [r3, #2]
 80005e4:	f000 be3a 	b.w	800125c <ifkey+0x1110>
	  		case 19:report[2]|=0x02;break;//b
 80005e8:	4b5e      	ldr	r3, [pc, #376]	@ (8000764 <ifkey+0x618>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b5c      	ldr	r3, [pc, #368]	@ (8000764 <ifkey+0x618>)
 80005f4:	709a      	strb	r2, [r3, #2]
 80005f6:	f000 be31 	b.w	800125c <ifkey+0x1110>
	  		case 20:report[2]&=(~0x02);break;
 80005fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000764 <ifkey+0x618>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	f023 0302 	bic.w	r3, r3, #2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b57      	ldr	r3, [pc, #348]	@ (8000764 <ifkey+0x618>)
 8000606:	709a      	strb	r2, [r3, #2]
 8000608:	f000 be28 	b.w	800125c <ifkey+0x1110>
	  		case 21:report[2]|=0x04;break;//c
 800060c:	4b55      	ldr	r3, [pc, #340]	@ (8000764 <ifkey+0x618>)
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b53      	ldr	r3, [pc, #332]	@ (8000764 <ifkey+0x618>)
 8000618:	709a      	strb	r2, [r3, #2]
 800061a:	f000 be1f 	b.w	800125c <ifkey+0x1110>
	  		case 22:report[2]&=(~0x04);break;
 800061e:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <ifkey+0x618>)
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b4e      	ldr	r3, [pc, #312]	@ (8000764 <ifkey+0x618>)
 800062a:	709a      	strb	r2, [r3, #2]
 800062c:	f000 be16 	b.w	800125c <ifkey+0x1110>
	  		case 23:report[2]|=0x08;break;//d
 8000630:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <ifkey+0x618>)
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b4a      	ldr	r3, [pc, #296]	@ (8000764 <ifkey+0x618>)
 800063c:	709a      	strb	r2, [r3, #2]
 800063e:	f000 be0d 	b.w	800125c <ifkey+0x1110>
	  		case 24:report[2]&=(~0x08);break;
 8000642:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <ifkey+0x618>)
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	f023 0308 	bic.w	r3, r3, #8
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <ifkey+0x618>)
 800064e:	709a      	strb	r2, [r3, #2]
 8000650:	f000 be04 	b.w	800125c <ifkey+0x1110>
	  		case 25:report[2]|=0x10;break;//e
 8000654:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <ifkey+0x618>)
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <ifkey+0x618>)
 8000660:	709a      	strb	r2, [r3, #2]
 8000662:	f000 bdfb 	b.w	800125c <ifkey+0x1110>
	  		case 26:report[2]&=(~0x10);break;
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <ifkey+0x618>)
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	f023 0310 	bic.w	r3, r3, #16
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <ifkey+0x618>)
 8000672:	709a      	strb	r2, [r3, #2]
 8000674:	f000 bdf2 	b.w	800125c <ifkey+0x1110>
	  		case 27:report[2]|=0x20;break;//f
 8000678:	4b3a      	ldr	r3, [pc, #232]	@ (8000764 <ifkey+0x618>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b38      	ldr	r3, [pc, #224]	@ (8000764 <ifkey+0x618>)
 8000684:	709a      	strb	r2, [r3, #2]
 8000686:	f000 bde9 	b.w	800125c <ifkey+0x1110>
	  		case 28:report[2]&=(~0x20);break;
 800068a:	4b36      	ldr	r3, [pc, #216]	@ (8000764 <ifkey+0x618>)
 800068c:	789b      	ldrb	r3, [r3, #2]
 800068e:	f023 0320 	bic.w	r3, r3, #32
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <ifkey+0x618>)
 8000696:	709a      	strb	r2, [r3, #2]
 8000698:	f000 bde0 	b.w	800125c <ifkey+0x1110>
	  		case 29:report[2]|=0x40;break;//g
 800069c:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <ifkey+0x618>)
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <ifkey+0x618>)
 80006a8:	709a      	strb	r2, [r3, #2]
 80006aa:	f000 bdd7 	b.w	800125c <ifkey+0x1110>
	  		case 30:report[2]&=(~0x40);break;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <ifkey+0x618>)
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <ifkey+0x618>)
 80006ba:	709a      	strb	r2, [r3, #2]
 80006bc:	f000 bdce 	b.w	800125c <ifkey+0x1110>
	  		case 31:report[2]|=0x80;break;//h
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <ifkey+0x618>)
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <ifkey+0x618>)
 80006cc:	709a      	strb	r2, [r3, #2]
 80006ce:	f000 bdc5 	b.w	800125c <ifkey+0x1110>
	  		case 32:report[2]&=(~0x80);break;
 80006d2:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <ifkey+0x618>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <ifkey+0x618>)
 80006de:	709a      	strb	r2, [r3, #2]
 80006e0:	f000 bdbc 	b.w	800125c <ifkey+0x1110>
	  		case 33:report[3]|=0x01;break;//i
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <ifkey+0x618>)
 80006e6:	78db      	ldrb	r3, [r3, #3]
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <ifkey+0x618>)
 80006f0:	70da      	strb	r2, [r3, #3]
 80006f2:	f000 bdb3 	b.w	800125c <ifkey+0x1110>
	  		case 34:report[3]&=(~0x01);break;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <ifkey+0x618>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	f023 0301 	bic.w	r3, r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <ifkey+0x618>)
 8000702:	70da      	strb	r2, [r3, #3]
 8000704:	f000 bdaa 	b.w	800125c <ifkey+0x1110>
	  		case 35:report[3]|=0x02;break;//j
 8000708:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <ifkey+0x618>)
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <ifkey+0x618>)
 8000714:	70da      	strb	r2, [r3, #3]
 8000716:	f000 bda1 	b.w	800125c <ifkey+0x1110>
	  		case 36:report[3]&=(~0x02);break;
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <ifkey+0x618>)
 800071c:	78db      	ldrb	r3, [r3, #3]
 800071e:	f023 0302 	bic.w	r3, r3, #2
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <ifkey+0x618>)
 8000726:	70da      	strb	r2, [r3, #3]
 8000728:	f000 bd98 	b.w	800125c <ifkey+0x1110>
	  		case 37:report[3]|=0x04;break;//k
 800072c:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <ifkey+0x618>)
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <ifkey+0x618>)
 8000738:	70da      	strb	r2, [r3, #3]
 800073a:	f000 bd8f 	b.w	800125c <ifkey+0x1110>
	  		case 38:report[3]&=(~0x04);break;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <ifkey+0x618>)
 8000740:	78db      	ldrb	r3, [r3, #3]
 8000742:	f023 0304 	bic.w	r3, r3, #4
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <ifkey+0x618>)
 800074a:	70da      	strb	r2, [r3, #3]
 800074c:	f000 bd86 	b.w	800125c <ifkey+0x1110>
	  		case 39:report[3]|=0x08;break;//l
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <ifkey+0x618>)
 8000752:	78db      	ldrb	r3, [r3, #3]
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <ifkey+0x618>)
 800075c:	70da      	strb	r2, [r3, #3]
 800075e:	f000 bd7d 	b.w	800125c <ifkey+0x1110>
 8000762:	bf00      	nop
 8000764:	200001a8 	.word	0x200001a8
	  		case 40:report[3]&=(~0x08);break;
 8000768:	4baf      	ldr	r3, [pc, #700]	@ (8000a28 <ifkey+0x8dc>)
 800076a:	78db      	ldrb	r3, [r3, #3]
 800076c:	f023 0308 	bic.w	r3, r3, #8
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4bad      	ldr	r3, [pc, #692]	@ (8000a28 <ifkey+0x8dc>)
 8000774:	70da      	strb	r2, [r3, #3]
 8000776:	f000 bd71 	b.w	800125c <ifkey+0x1110>
	  		case 41:report[3]|=0x10;break;//m
 800077a:	4bab      	ldr	r3, [pc, #684]	@ (8000a28 <ifkey+0x8dc>)
 800077c:	78db      	ldrb	r3, [r3, #3]
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4ba8      	ldr	r3, [pc, #672]	@ (8000a28 <ifkey+0x8dc>)
 8000786:	70da      	strb	r2, [r3, #3]
 8000788:	f000 bd68 	b.w	800125c <ifkey+0x1110>
	  		case 42:report[3]&=(~0x10);break;
 800078c:	4ba6      	ldr	r3, [pc, #664]	@ (8000a28 <ifkey+0x8dc>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	f023 0310 	bic.w	r3, r3, #16
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4ba4      	ldr	r3, [pc, #656]	@ (8000a28 <ifkey+0x8dc>)
 8000798:	70da      	strb	r2, [r3, #3]
 800079a:	f000 bd5f 	b.w	800125c <ifkey+0x1110>
	  		case 43:report[3]|=0x20;break;//n
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <ifkey+0x8dc>)
 80007a0:	78db      	ldrb	r3, [r3, #3]
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b9f      	ldr	r3, [pc, #636]	@ (8000a28 <ifkey+0x8dc>)
 80007aa:	70da      	strb	r2, [r3, #3]
 80007ac:	f000 bd56 	b.w	800125c <ifkey+0x1110>
	  		case 44:report[3]&=(~0x20);break;
 80007b0:	4b9d      	ldr	r3, [pc, #628]	@ (8000a28 <ifkey+0x8dc>)
 80007b2:	78db      	ldrb	r3, [r3, #3]
 80007b4:	f023 0320 	bic.w	r3, r3, #32
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b9b      	ldr	r3, [pc, #620]	@ (8000a28 <ifkey+0x8dc>)
 80007bc:	70da      	strb	r2, [r3, #3]
 80007be:	f000 bd4d 	b.w	800125c <ifkey+0x1110>
	  		case 45:report[3]|=0x40;break;//o
 80007c2:	4b99      	ldr	r3, [pc, #612]	@ (8000a28 <ifkey+0x8dc>)
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b96      	ldr	r3, [pc, #600]	@ (8000a28 <ifkey+0x8dc>)
 80007ce:	70da      	strb	r2, [r3, #3]
 80007d0:	f000 bd44 	b.w	800125c <ifkey+0x1110>
	  		case 46:report[3]&=(~0x40);break;
 80007d4:	4b94      	ldr	r3, [pc, #592]	@ (8000a28 <ifkey+0x8dc>)
 80007d6:	78db      	ldrb	r3, [r3, #3]
 80007d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b92      	ldr	r3, [pc, #584]	@ (8000a28 <ifkey+0x8dc>)
 80007e0:	70da      	strb	r2, [r3, #3]
 80007e2:	f000 bd3b 	b.w	800125c <ifkey+0x1110>
	  		case 47:report[3]|=0x80;break;//p
 80007e6:	4b90      	ldr	r3, [pc, #576]	@ (8000a28 <ifkey+0x8dc>)
 80007e8:	78db      	ldrb	r3, [r3, #3]
 80007ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b8d      	ldr	r3, [pc, #564]	@ (8000a28 <ifkey+0x8dc>)
 80007f2:	70da      	strb	r2, [r3, #3]
 80007f4:	f000 bd32 	b.w	800125c <ifkey+0x1110>
	  		case 48:report[3]&=(~0x80);break;
 80007f8:	4b8b      	ldr	r3, [pc, #556]	@ (8000a28 <ifkey+0x8dc>)
 80007fa:	78db      	ldrb	r3, [r3, #3]
 80007fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b89      	ldr	r3, [pc, #548]	@ (8000a28 <ifkey+0x8dc>)
 8000804:	70da      	strb	r2, [r3, #3]
 8000806:	f000 bd29 	b.w	800125c <ifkey+0x1110>
	  		case 49:report[4]|=0x01;break;//q
 800080a:	4b87      	ldr	r3, [pc, #540]	@ (8000a28 <ifkey+0x8dc>)
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b84      	ldr	r3, [pc, #528]	@ (8000a28 <ifkey+0x8dc>)
 8000816:	711a      	strb	r2, [r3, #4]
 8000818:	f000 bd20 	b.w	800125c <ifkey+0x1110>
	  		case 50:report[4]&=(~0x01);break;
 800081c:	4b82      	ldr	r3, [pc, #520]	@ (8000a28 <ifkey+0x8dc>)
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b80      	ldr	r3, [pc, #512]	@ (8000a28 <ifkey+0x8dc>)
 8000828:	711a      	strb	r2, [r3, #4]
 800082a:	f000 bd17 	b.w	800125c <ifkey+0x1110>
	  		case 51:report[4]|=0x02;break;//r
 800082e:	4b7e      	ldr	r3, [pc, #504]	@ (8000a28 <ifkey+0x8dc>)
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b7b      	ldr	r3, [pc, #492]	@ (8000a28 <ifkey+0x8dc>)
 800083a:	711a      	strb	r2, [r3, #4]
 800083c:	f000 bd0e 	b.w	800125c <ifkey+0x1110>
	  		case 52:report[4]&=(~0x02);break;
 8000840:	4b79      	ldr	r3, [pc, #484]	@ (8000a28 <ifkey+0x8dc>)
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	f023 0302 	bic.w	r3, r3, #2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b77      	ldr	r3, [pc, #476]	@ (8000a28 <ifkey+0x8dc>)
 800084c:	711a      	strb	r2, [r3, #4]
 800084e:	f000 bd05 	b.w	800125c <ifkey+0x1110>
	  		case 53:report[4]|=0x04;break;//s
 8000852:	4b75      	ldr	r3, [pc, #468]	@ (8000a28 <ifkey+0x8dc>)
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b72      	ldr	r3, [pc, #456]	@ (8000a28 <ifkey+0x8dc>)
 800085e:	711a      	strb	r2, [r3, #4]
 8000860:	f000 bcfc 	b.w	800125c <ifkey+0x1110>
	  		case 54:report[4]&=(~0x04);break;
 8000864:	4b70      	ldr	r3, [pc, #448]	@ (8000a28 <ifkey+0x8dc>)
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	f023 0304 	bic.w	r3, r3, #4
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a28 <ifkey+0x8dc>)
 8000870:	711a      	strb	r2, [r3, #4]
 8000872:	f000 bcf3 	b.w	800125c <ifkey+0x1110>
	  		case 55:report[4]|=0x08;break;//t
 8000876:	4b6c      	ldr	r3, [pc, #432]	@ (8000a28 <ifkey+0x8dc>)
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b69      	ldr	r3, [pc, #420]	@ (8000a28 <ifkey+0x8dc>)
 8000882:	711a      	strb	r2, [r3, #4]
 8000884:	f000 bcea 	b.w	800125c <ifkey+0x1110>
	  		case 56:report[4]&=(~0x08);break;
 8000888:	4b67      	ldr	r3, [pc, #412]	@ (8000a28 <ifkey+0x8dc>)
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	f023 0308 	bic.w	r3, r3, #8
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b65      	ldr	r3, [pc, #404]	@ (8000a28 <ifkey+0x8dc>)
 8000894:	711a      	strb	r2, [r3, #4]
 8000896:	f000 bce1 	b.w	800125c <ifkey+0x1110>
	  		case 57:report[4]|=0x10;break;//u
 800089a:	4b63      	ldr	r3, [pc, #396]	@ (8000a28 <ifkey+0x8dc>)
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b60      	ldr	r3, [pc, #384]	@ (8000a28 <ifkey+0x8dc>)
 80008a6:	711a      	strb	r2, [r3, #4]
 80008a8:	f000 bcd8 	b.w	800125c <ifkey+0x1110>
	  		case 58:report[4]&=(~0x10);break;
 80008ac:	4b5e      	ldr	r3, [pc, #376]	@ (8000a28 <ifkey+0x8dc>)
 80008ae:	791b      	ldrb	r3, [r3, #4]
 80008b0:	f023 0310 	bic.w	r3, r3, #16
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a28 <ifkey+0x8dc>)
 80008b8:	711a      	strb	r2, [r3, #4]
 80008ba:	f000 bccf 	b.w	800125c <ifkey+0x1110>
	  		case 59:report[4]|=0x20;break;//v
 80008be:	4b5a      	ldr	r3, [pc, #360]	@ (8000a28 <ifkey+0x8dc>)
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b57      	ldr	r3, [pc, #348]	@ (8000a28 <ifkey+0x8dc>)
 80008ca:	711a      	strb	r2, [r3, #4]
 80008cc:	f000 bcc6 	b.w	800125c <ifkey+0x1110>
	  		case 60:report[4]&=(~0x20);break;
 80008d0:	4b55      	ldr	r3, [pc, #340]	@ (8000a28 <ifkey+0x8dc>)
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f023 0320 	bic.w	r3, r3, #32
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <ifkey+0x8dc>)
 80008dc:	711a      	strb	r2, [r3, #4]
 80008de:	f000 bcbd 	b.w	800125c <ifkey+0x1110>
	  		case 61:report[4]|=0x40;break;//w
 80008e2:	4b51      	ldr	r3, [pc, #324]	@ (8000a28 <ifkey+0x8dc>)
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000a28 <ifkey+0x8dc>)
 80008ee:	711a      	strb	r2, [r3, #4]
 80008f0:	f000 bcb4 	b.w	800125c <ifkey+0x1110>
	  		case 62:report[4]&=(~0x40);break;
 80008f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000a28 <ifkey+0x8dc>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <ifkey+0x8dc>)
 8000900:	711a      	strb	r2, [r3, #4]
 8000902:	f000 bcab 	b.w	800125c <ifkey+0x1110>
	  		case 63:report[4]|=0x80;break;//x
 8000906:	4b48      	ldr	r3, [pc, #288]	@ (8000a28 <ifkey+0x8dc>)
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b45      	ldr	r3, [pc, #276]	@ (8000a28 <ifkey+0x8dc>)
 8000912:	711a      	strb	r2, [r3, #4]
 8000914:	f000 bca2 	b.w	800125c <ifkey+0x1110>
	  		case 64:report[4]&=(~0x80);break;
 8000918:	4b43      	ldr	r3, [pc, #268]	@ (8000a28 <ifkey+0x8dc>)
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b41      	ldr	r3, [pc, #260]	@ (8000a28 <ifkey+0x8dc>)
 8000924:	711a      	strb	r2, [r3, #4]
 8000926:	f000 bc99 	b.w	800125c <ifkey+0x1110>
	  		case 65:report[5]|=0x01;break;//y
 800092a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <ifkey+0x8dc>)
 800092c:	795b      	ldrb	r3, [r3, #5]
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b3c      	ldr	r3, [pc, #240]	@ (8000a28 <ifkey+0x8dc>)
 8000936:	715a      	strb	r2, [r3, #5]
 8000938:	f000 bc90 	b.w	800125c <ifkey+0x1110>
	  		case 66:report[5]&=(~0x01);break;
 800093c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a28 <ifkey+0x8dc>)
 800093e:	795b      	ldrb	r3, [r3, #5]
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b38      	ldr	r3, [pc, #224]	@ (8000a28 <ifkey+0x8dc>)
 8000948:	715a      	strb	r2, [r3, #5]
 800094a:	f000 bc87 	b.w	800125c <ifkey+0x1110>
	  		case 67:report[5]|=0x02;break;//z
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <ifkey+0x8dc>)
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <ifkey+0x8dc>)
 800095a:	715a      	strb	r2, [r3, #5]
 800095c:	f000 bc7e 	b.w	800125c <ifkey+0x1110>
	  		case 68:report[5]&=(~0x02);break;
 8000960:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <ifkey+0x8dc>)
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	f023 0302 	bic.w	r3, r3, #2
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <ifkey+0x8dc>)
 800096c:	715a      	strb	r2, [r3, #5]
 800096e:	f000 bc75 	b.w	800125c <ifkey+0x1110>
	  		case 69:report[5]|=0x04;break;//上键盘数字1
 8000972:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <ifkey+0x8dc>)
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <ifkey+0x8dc>)
 800097e:	715a      	strb	r2, [r3, #5]
 8000980:	f000 bc6c 	b.w	800125c <ifkey+0x1110>
	  		case 70:report[5]&=(~0x04);break;
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <ifkey+0x8dc>)
 8000986:	795b      	ldrb	r3, [r3, #5]
 8000988:	f023 0304 	bic.w	r3, r3, #4
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <ifkey+0x8dc>)
 8000990:	715a      	strb	r2, [r3, #5]
 8000992:	f000 bc63 	b.w	800125c <ifkey+0x1110>
	  		case 71:report[5]|=0x08;break;//2
 8000996:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <ifkey+0x8dc>)
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <ifkey+0x8dc>)
 80009a2:	715a      	strb	r2, [r3, #5]
 80009a4:	f000 bc5a 	b.w	800125c <ifkey+0x1110>
	  		case 72:report[5]&=(~0x08);break;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <ifkey+0x8dc>)
 80009aa:	795b      	ldrb	r3, [r3, #5]
 80009ac:	f023 0308 	bic.w	r3, r3, #8
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <ifkey+0x8dc>)
 80009b4:	715a      	strb	r2, [r3, #5]
 80009b6:	f000 bc51 	b.w	800125c <ifkey+0x1110>
	  		case 73:report[5]|=0x10;break;//3
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <ifkey+0x8dc>)
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <ifkey+0x8dc>)
 80009c6:	715a      	strb	r2, [r3, #5]
 80009c8:	f000 bc48 	b.w	800125c <ifkey+0x1110>
	  		case 74:report[5]&=(~0x10);break;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <ifkey+0x8dc>)
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	f023 0310 	bic.w	r3, r3, #16
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <ifkey+0x8dc>)
 80009d8:	715a      	strb	r2, [r3, #5]
 80009da:	f000 bc3f 	b.w	800125c <ifkey+0x1110>
	  		case 75:report[5]|=0x20;break;//4
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <ifkey+0x8dc>)
 80009e0:	795b      	ldrb	r3, [r3, #5]
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <ifkey+0x8dc>)
 80009ea:	715a      	strb	r2, [r3, #5]
 80009ec:	f000 bc36 	b.w	800125c <ifkey+0x1110>
	  		case 76:report[5]&=(~0x20);break;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <ifkey+0x8dc>)
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	f023 0320 	bic.w	r3, r3, #32
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <ifkey+0x8dc>)
 80009fc:	715a      	strb	r2, [r3, #5]
 80009fe:	f000 bc2d 	b.w	800125c <ifkey+0x1110>
	  		case 77:report[5]|=0x40;break;//5
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <ifkey+0x8dc>)
 8000a04:	795b      	ldrb	r3, [r3, #5]
 8000a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <ifkey+0x8dc>)
 8000a0e:	715a      	strb	r2, [r3, #5]
 8000a10:	f000 bc24 	b.w	800125c <ifkey+0x1110>
	  		case 78:report[5]&=(~0x40);break;
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <ifkey+0x8dc>)
 8000a16:	795b      	ldrb	r3, [r3, #5]
 8000a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <ifkey+0x8dc>)
 8000a20:	715a      	strb	r2, [r3, #5]
 8000a22:	f000 bc1b 	b.w	800125c <ifkey+0x1110>
 8000a26:	bf00      	nop
 8000a28:	200001a8 	.word	0x200001a8
	  		case 79:report[5]|=0x80;break;//6
 8000a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8000ca0 <ifkey+0xb54>)
 8000a2e:	795b      	ldrb	r3, [r3, #5]
 8000a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b9a      	ldr	r3, [pc, #616]	@ (8000ca0 <ifkey+0xb54>)
 8000a38:	715a      	strb	r2, [r3, #5]
 8000a3a:	f000 bc0f 	b.w	800125c <ifkey+0x1110>
	  		case 80:report[5]&=(~0x80);break;
 8000a3e:	4b98      	ldr	r3, [pc, #608]	@ (8000ca0 <ifkey+0xb54>)
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b95      	ldr	r3, [pc, #596]	@ (8000ca0 <ifkey+0xb54>)
 8000a4a:	715a      	strb	r2, [r3, #5]
 8000a4c:	f000 bc06 	b.w	800125c <ifkey+0x1110>
	  		case 81:report[6]|=0x01;break;//7
 8000a50:	4b93      	ldr	r3, [pc, #588]	@ (8000ca0 <ifkey+0xb54>)
 8000a52:	799b      	ldrb	r3, [r3, #6]
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b91      	ldr	r3, [pc, #580]	@ (8000ca0 <ifkey+0xb54>)
 8000a5c:	719a      	strb	r2, [r3, #6]
 8000a5e:	e3fd      	b.n	800125c <ifkey+0x1110>
	  		case 82:report[6]&=(~0x01);break;
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <ifkey+0xb54>)
 8000a62:	799b      	ldrb	r3, [r3, #6]
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8000ca0 <ifkey+0xb54>)
 8000a6c:	719a      	strb	r2, [r3, #6]
 8000a6e:	e3f5      	b.n	800125c <ifkey+0x1110>
	  		case 83:report[6]|=0x02;break;//8
 8000a70:	4b8b      	ldr	r3, [pc, #556]	@ (8000ca0 <ifkey+0xb54>)
 8000a72:	799b      	ldrb	r3, [r3, #6]
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b89      	ldr	r3, [pc, #548]	@ (8000ca0 <ifkey+0xb54>)
 8000a7c:	719a      	strb	r2, [r3, #6]
 8000a7e:	e3ed      	b.n	800125c <ifkey+0x1110>
	  		case 84:report[6]&=(~0x02);break;
 8000a80:	4b87      	ldr	r3, [pc, #540]	@ (8000ca0 <ifkey+0xb54>)
 8000a82:	799b      	ldrb	r3, [r3, #6]
 8000a84:	f023 0302 	bic.w	r3, r3, #2
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b85      	ldr	r3, [pc, #532]	@ (8000ca0 <ifkey+0xb54>)
 8000a8c:	719a      	strb	r2, [r3, #6]
 8000a8e:	e3e5      	b.n	800125c <ifkey+0x1110>
	  		case 85:report[6]|=0x04;break;//9
 8000a90:	4b83      	ldr	r3, [pc, #524]	@ (8000ca0 <ifkey+0xb54>)
 8000a92:	799b      	ldrb	r3, [r3, #6]
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b81      	ldr	r3, [pc, #516]	@ (8000ca0 <ifkey+0xb54>)
 8000a9c:	719a      	strb	r2, [r3, #6]
 8000a9e:	e3dd      	b.n	800125c <ifkey+0x1110>
	  		case 86:report[6]&=(~0x04);break;
 8000aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8000ca0 <ifkey+0xb54>)
 8000aa2:	799b      	ldrb	r3, [r3, #6]
 8000aa4:	f023 0304 	bic.w	r3, r3, #4
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8000ca0 <ifkey+0xb54>)
 8000aac:	719a      	strb	r2, [r3, #6]
 8000aae:	e3d5      	b.n	800125c <ifkey+0x1110>
	  		case 87:report[6]|=0x08;break;//0
 8000ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8000ca0 <ifkey+0xb54>)
 8000ab2:	799b      	ldrb	r3, [r3, #6]
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b79      	ldr	r3, [pc, #484]	@ (8000ca0 <ifkey+0xb54>)
 8000abc:	719a      	strb	r2, [r3, #6]
 8000abe:	e3cd      	b.n	800125c <ifkey+0x1110>
	  		case 88:report[6]&=(~0x08);break;
 8000ac0:	4b77      	ldr	r3, [pc, #476]	@ (8000ca0 <ifkey+0xb54>)
 8000ac2:	799b      	ldrb	r3, [r3, #6]
 8000ac4:	f023 0308 	bic.w	r3, r3, #8
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b75      	ldr	r3, [pc, #468]	@ (8000ca0 <ifkey+0xb54>)
 8000acc:	719a      	strb	r2, [r3, #6]
 8000ace:	e3c5      	b.n	800125c <ifkey+0x1110>
	  		case 89:report[6]|=0x10;break;//enter
 8000ad0:	4b73      	ldr	r3, [pc, #460]	@ (8000ca0 <ifkey+0xb54>)
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b71      	ldr	r3, [pc, #452]	@ (8000ca0 <ifkey+0xb54>)
 8000adc:	719a      	strb	r2, [r3, #6]
 8000ade:	e3bd      	b.n	800125c <ifkey+0x1110>
	  		case 90:report[6]&=(~0x10);break;
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8000ca0 <ifkey+0xb54>)
 8000ae2:	799b      	ldrb	r3, [r3, #6]
 8000ae4:	f023 0310 	bic.w	r3, r3, #16
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b6d      	ldr	r3, [pc, #436]	@ (8000ca0 <ifkey+0xb54>)
 8000aec:	719a      	strb	r2, [r3, #6]
 8000aee:	e3b5      	b.n	800125c <ifkey+0x1110>
	  		case 91:report[6]|=0x20;break;//esc
 8000af0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ca0 <ifkey+0xb54>)
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b69      	ldr	r3, [pc, #420]	@ (8000ca0 <ifkey+0xb54>)
 8000afc:	719a      	strb	r2, [r3, #6]
 8000afe:	e3ad      	b.n	800125c <ifkey+0x1110>
	  		case 92:report[6]&=(~0x20);break;
 8000b00:	4b67      	ldr	r3, [pc, #412]	@ (8000ca0 <ifkey+0xb54>)
 8000b02:	799b      	ldrb	r3, [r3, #6]
 8000b04:	f023 0320 	bic.w	r3, r3, #32
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b65      	ldr	r3, [pc, #404]	@ (8000ca0 <ifkey+0xb54>)
 8000b0c:	719a      	strb	r2, [r3, #6]
 8000b0e:	e3a5      	b.n	800125c <ifkey+0x1110>
	  		case 93:report[6]|=0x40;break;//backspace
 8000b10:	4b63      	ldr	r3, [pc, #396]	@ (8000ca0 <ifkey+0xb54>)
 8000b12:	799b      	ldrb	r3, [r3, #6]
 8000b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b61      	ldr	r3, [pc, #388]	@ (8000ca0 <ifkey+0xb54>)
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e39d      	b.n	800125c <ifkey+0x1110>
	  		case 94:report[6]&=(~0x40);break;
 8000b20:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca0 <ifkey+0xb54>)
 8000b22:	799b      	ldrb	r3, [r3, #6]
 8000b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca0 <ifkey+0xb54>)
 8000b2c:	719a      	strb	r2, [r3, #6]
 8000b2e:	e395      	b.n	800125c <ifkey+0x1110>
	  		case 95:report[6]|=0x80;break;//tab
 8000b30:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca0 <ifkey+0xb54>)
 8000b32:	799b      	ldrb	r3, [r3, #6]
 8000b34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b59      	ldr	r3, [pc, #356]	@ (8000ca0 <ifkey+0xb54>)
 8000b3c:	719a      	strb	r2, [r3, #6]
 8000b3e:	e38d      	b.n	800125c <ifkey+0x1110>
	  		case 96:report[6]&=(~0x80);break;
 8000b40:	4b57      	ldr	r3, [pc, #348]	@ (8000ca0 <ifkey+0xb54>)
 8000b42:	799b      	ldrb	r3, [r3, #6]
 8000b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b55      	ldr	r3, [pc, #340]	@ (8000ca0 <ifkey+0xb54>)
 8000b4c:	719a      	strb	r2, [r3, #6]
 8000b4e:	e385      	b.n	800125c <ifkey+0x1110>
	  		case 97:report[7]|=0x01;break;//space
 8000b50:	4b53      	ldr	r3, [pc, #332]	@ (8000ca0 <ifkey+0xb54>)
 8000b52:	79db      	ldrb	r3, [r3, #7]
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ca0 <ifkey+0xb54>)
 8000b5c:	71da      	strb	r2, [r3, #7]
 8000b5e:	e37d      	b.n	800125c <ifkey+0x1110>
	  		case 98:report[7]&=(~0x01);break;
 8000b60:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca0 <ifkey+0xb54>)
 8000b62:	79db      	ldrb	r3, [r3, #7]
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca0 <ifkey+0xb54>)
 8000b6c:	71da      	strb	r2, [r3, #7]
 8000b6e:	e375      	b.n	800125c <ifkey+0x1110>
	  		case 99:report[7]|=0x02;break;//-和_
 8000b70:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca0 <ifkey+0xb54>)
 8000b72:	79db      	ldrb	r3, [r3, #7]
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b49      	ldr	r3, [pc, #292]	@ (8000ca0 <ifkey+0xb54>)
 8000b7c:	71da      	strb	r2, [r3, #7]
 8000b7e:	e36d      	b.n	800125c <ifkey+0x1110>
	  		case 100:report[7]&=(~0x02);break;
 8000b80:	4b47      	ldr	r3, [pc, #284]	@ (8000ca0 <ifkey+0xb54>)
 8000b82:	79db      	ldrb	r3, [r3, #7]
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b45      	ldr	r3, [pc, #276]	@ (8000ca0 <ifkey+0xb54>)
 8000b8c:	71da      	strb	r2, [r3, #7]
 8000b8e:	e365      	b.n	800125c <ifkey+0x1110>
	  		case 101:report[7]|=0x04;break;//=和+
 8000b90:	4b43      	ldr	r3, [pc, #268]	@ (8000ca0 <ifkey+0xb54>)
 8000b92:	79db      	ldrb	r3, [r3, #7]
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <ifkey+0xb54>)
 8000b9c:	71da      	strb	r2, [r3, #7]
 8000b9e:	e35d      	b.n	800125c <ifkey+0x1110>
	  		case 102:report[7]&=(~0x04);break;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca0 <ifkey+0xb54>)
 8000ba2:	79db      	ldrb	r3, [r3, #7]
 8000ba4:	f023 0304 	bic.w	r3, r3, #4
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca0 <ifkey+0xb54>)
 8000bac:	71da      	strb	r2, [r3, #7]
 8000bae:	e355      	b.n	800125c <ifkey+0x1110>
	  		case 103:report[7]|=0x08;break;//[和{
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <ifkey+0xb54>)
 8000bb2:	79db      	ldrb	r3, [r3, #7]
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b39      	ldr	r3, [pc, #228]	@ (8000ca0 <ifkey+0xb54>)
 8000bbc:	71da      	strb	r2, [r3, #7]
 8000bbe:	e34d      	b.n	800125c <ifkey+0x1110>
	  		case 104:report[7]&=(~0x08);break;
 8000bc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ca0 <ifkey+0xb54>)
 8000bc2:	79db      	ldrb	r3, [r3, #7]
 8000bc4:	f023 0308 	bic.w	r3, r3, #8
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <ifkey+0xb54>)
 8000bcc:	71da      	strb	r2, [r3, #7]
 8000bce:	e345      	b.n	800125c <ifkey+0x1110>
	  		case 105:report[7]|=0x10;break;//]和}
 8000bd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <ifkey+0xb54>)
 8000bd2:	79db      	ldrb	r3, [r3, #7]
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <ifkey+0xb54>)
 8000bdc:	71da      	strb	r2, [r3, #7]
 8000bde:	e33d      	b.n	800125c <ifkey+0x1110>
	  		case 106:report[7]&=(~0x10);break;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <ifkey+0xb54>)
 8000be2:	79db      	ldrb	r3, [r3, #7]
 8000be4:	f023 0310 	bic.w	r3, r3, #16
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <ifkey+0xb54>)
 8000bec:	71da      	strb	r2, [r3, #7]
 8000bee:	e335      	b.n	800125c <ifkey+0x1110>
	  		case 107:report[7]|=0x20;break;//'\'和|
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <ifkey+0xb54>)
 8000bf2:	79db      	ldrb	r3, [r3, #7]
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <ifkey+0xb54>)
 8000bfc:	71da      	strb	r2, [r3, #7]
 8000bfe:	e32d      	b.n	800125c <ifkey+0x1110>
	  		case 108:report[7]&=(~0x20);break;
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <ifkey+0xb54>)
 8000c02:	79db      	ldrb	r3, [r3, #7]
 8000c04:	f023 0320 	bic.w	r3, r3, #32
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <ifkey+0xb54>)
 8000c0c:	71da      	strb	r2, [r3, #7]
 8000c0e:	e325      	b.n	800125c <ifkey+0x1110>
	  		case 109:report[7]|=0x40;break;//'\'和|
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <ifkey+0xb54>)
 8000c12:	79db      	ldrb	r3, [r3, #7]
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <ifkey+0xb54>)
 8000c1c:	71da      	strb	r2, [r3, #7]
 8000c1e:	e31d      	b.n	800125c <ifkey+0x1110>
	  		case 110:report[7]&=(~0x40);break;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <ifkey+0xb54>)
 8000c22:	79db      	ldrb	r3, [r3, #7]
 8000c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <ifkey+0xb54>)
 8000c2c:	71da      	strb	r2, [r3, #7]
 8000c2e:	e315      	b.n	800125c <ifkey+0x1110>
	  		case 111:report[7]|=0x80;break;//;和:
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <ifkey+0xb54>)
 8000c32:	79db      	ldrb	r3, [r3, #7]
 8000c34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <ifkey+0xb54>)
 8000c3c:	71da      	strb	r2, [r3, #7]
 8000c3e:	e30d      	b.n	800125c <ifkey+0x1110>
	  		case 112:report[7]&=(~0x80);break;
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <ifkey+0xb54>)
 8000c42:	79db      	ldrb	r3, [r3, #7]
 8000c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <ifkey+0xb54>)
 8000c4c:	71da      	strb	r2, [r3, #7]
 8000c4e:	e305      	b.n	800125c <ifkey+0x1110>
	  		case 113:report[8]|=0x01;break;//'和"
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <ifkey+0xb54>)
 8000c52:	7a1b      	ldrb	r3, [r3, #8]
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <ifkey+0xb54>)
 8000c5c:	721a      	strb	r2, [r3, #8]
 8000c5e:	e2fd      	b.n	800125c <ifkey+0x1110>
	  		case 114:report[8]&=(~0x01);break;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <ifkey+0xb54>)
 8000c62:	7a1b      	ldrb	r3, [r3, #8]
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <ifkey+0xb54>)
 8000c6c:	721a      	strb	r2, [r3, #8]
 8000c6e:	e2f5      	b.n	800125c <ifkey+0x1110>
	  		case 115:report[8]|=0x02;break;//`和~
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <ifkey+0xb54>)
 8000c72:	7a1b      	ldrb	r3, [r3, #8]
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <ifkey+0xb54>)
 8000c7c:	721a      	strb	r2, [r3, #8]
 8000c7e:	e2ed      	b.n	800125c <ifkey+0x1110>
	  		case 116:report[8]&=(~0x02);break;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <ifkey+0xb54>)
 8000c82:	7a1b      	ldrb	r3, [r3, #8]
 8000c84:	f023 0302 	bic.w	r3, r3, #2
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <ifkey+0xb54>)
 8000c8c:	721a      	strb	r2, [r3, #8]
 8000c8e:	e2e5      	b.n	800125c <ifkey+0x1110>
	  		case 117:report[8]|=0x04;break;//,和<
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <ifkey+0xb54>)
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b01      	ldr	r3, [pc, #4]	@ (8000ca0 <ifkey+0xb54>)
 8000c9c:	721a      	strb	r2, [r3, #8]
 8000c9e:	e2dd      	b.n	800125c <ifkey+0x1110>
 8000ca0:	200001a8 	.word	0x200001a8
	  		case 118:report[8]&=(~0x04);break;
 8000ca4:	4b9b      	ldr	r3, [pc, #620]	@ (8000f14 <ifkey+0xdc8>)
 8000ca6:	7a1b      	ldrb	r3, [r3, #8]
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b99      	ldr	r3, [pc, #612]	@ (8000f14 <ifkey+0xdc8>)
 8000cb0:	721a      	strb	r2, [r3, #8]
 8000cb2:	e2d3      	b.n	800125c <ifkey+0x1110>
	  		case 119:report[8]|=0x08;break;//.和>
 8000cb4:	4b97      	ldr	r3, [pc, #604]	@ (8000f14 <ifkey+0xdc8>)
 8000cb6:	7a1b      	ldrb	r3, [r3, #8]
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b95      	ldr	r3, [pc, #596]	@ (8000f14 <ifkey+0xdc8>)
 8000cc0:	721a      	strb	r2, [r3, #8]
 8000cc2:	e2cb      	b.n	800125c <ifkey+0x1110>
	  		case 120:report[8]&=(~0x08);break;
 8000cc4:	4b93      	ldr	r3, [pc, #588]	@ (8000f14 <ifkey+0xdc8>)
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	f023 0308 	bic.w	r3, r3, #8
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b91      	ldr	r3, [pc, #580]	@ (8000f14 <ifkey+0xdc8>)
 8000cd0:	721a      	strb	r2, [r3, #8]
 8000cd2:	e2c3      	b.n	800125c <ifkey+0x1110>
	  		case 121:report[8]|=0x10;break;///和?
 8000cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8000f14 <ifkey+0xdc8>)
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b8d      	ldr	r3, [pc, #564]	@ (8000f14 <ifkey+0xdc8>)
 8000ce0:	721a      	strb	r2, [r3, #8]
 8000ce2:	e2bb      	b.n	800125c <ifkey+0x1110>
	  		case 122:report[8]&=(~0x10);break;
 8000ce4:	4b8b      	ldr	r3, [pc, #556]	@ (8000f14 <ifkey+0xdc8>)
 8000ce6:	7a1b      	ldrb	r3, [r3, #8]
 8000ce8:	f023 0310 	bic.w	r3, r3, #16
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b89      	ldr	r3, [pc, #548]	@ (8000f14 <ifkey+0xdc8>)
 8000cf0:	721a      	strb	r2, [r3, #8]
 8000cf2:	e2b3      	b.n	800125c <ifkey+0x1110>
	  		case 123:report[8]|=0x20;break;//大写锁定
 8000cf4:	4b87      	ldr	r3, [pc, #540]	@ (8000f14 <ifkey+0xdc8>)
 8000cf6:	7a1b      	ldrb	r3, [r3, #8]
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b85      	ldr	r3, [pc, #532]	@ (8000f14 <ifkey+0xdc8>)
 8000d00:	721a      	strb	r2, [r3, #8]
 8000d02:	e2ab      	b.n	800125c <ifkey+0x1110>
	  		case 124:report[8]&=(~0x20);break;
 8000d04:	4b83      	ldr	r3, [pc, #524]	@ (8000f14 <ifkey+0xdc8>)
 8000d06:	7a1b      	ldrb	r3, [r3, #8]
 8000d08:	f023 0320 	bic.w	r3, r3, #32
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b81      	ldr	r3, [pc, #516]	@ (8000f14 <ifkey+0xdc8>)
 8000d10:	721a      	strb	r2, [r3, #8]
 8000d12:	e2a3      	b.n	800125c <ifkey+0x1110>
	  		case 125:report[8]|=0x40;break;//F1
 8000d14:	4b7f      	ldr	r3, [pc, #508]	@ (8000f14 <ifkey+0xdc8>)
 8000d16:	7a1b      	ldrb	r3, [r3, #8]
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f14 <ifkey+0xdc8>)
 8000d20:	721a      	strb	r2, [r3, #8]
 8000d22:	e29b      	b.n	800125c <ifkey+0x1110>
	  		case 126:report[8]&=(~0x40);break;
 8000d24:	4b7b      	ldr	r3, [pc, #492]	@ (8000f14 <ifkey+0xdc8>)
 8000d26:	7a1b      	ldrb	r3, [r3, #8]
 8000d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b79      	ldr	r3, [pc, #484]	@ (8000f14 <ifkey+0xdc8>)
 8000d30:	721a      	strb	r2, [r3, #8]
 8000d32:	e293      	b.n	800125c <ifkey+0x1110>
	  		case 127:report[8]|=0x80;break;//F2
 8000d34:	4b77      	ldr	r3, [pc, #476]	@ (8000f14 <ifkey+0xdc8>)
 8000d36:	7a1b      	ldrb	r3, [r3, #8]
 8000d38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b75      	ldr	r3, [pc, #468]	@ (8000f14 <ifkey+0xdc8>)
 8000d40:	721a      	strb	r2, [r3, #8]
 8000d42:	e28b      	b.n	800125c <ifkey+0x1110>
	  		case 128:report[8]&=(~0x80);break;
 8000d44:	4b73      	ldr	r3, [pc, #460]	@ (8000f14 <ifkey+0xdc8>)
 8000d46:	7a1b      	ldrb	r3, [r3, #8]
 8000d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b71      	ldr	r3, [pc, #452]	@ (8000f14 <ifkey+0xdc8>)
 8000d50:	721a      	strb	r2, [r3, #8]
 8000d52:	e283      	b.n	800125c <ifkey+0x1110>
	  		case 129:report[9]|=0x01;break;//F3
 8000d54:	4b6f      	ldr	r3, [pc, #444]	@ (8000f14 <ifkey+0xdc8>)
 8000d56:	7a5b      	ldrb	r3, [r3, #9]
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f14 <ifkey+0xdc8>)
 8000d60:	725a      	strb	r2, [r3, #9]
 8000d62:	e27b      	b.n	800125c <ifkey+0x1110>
	  		case 130:report[9]&=(~0x01);break;
 8000d64:	4b6b      	ldr	r3, [pc, #428]	@ (8000f14 <ifkey+0xdc8>)
 8000d66:	7a5b      	ldrb	r3, [r3, #9]
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b69      	ldr	r3, [pc, #420]	@ (8000f14 <ifkey+0xdc8>)
 8000d70:	725a      	strb	r2, [r3, #9]
 8000d72:	e273      	b.n	800125c <ifkey+0x1110>
	  		case 131:report[9]|=0x02;break;//F4
 8000d74:	4b67      	ldr	r3, [pc, #412]	@ (8000f14 <ifkey+0xdc8>)
 8000d76:	7a5b      	ldrb	r3, [r3, #9]
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b65      	ldr	r3, [pc, #404]	@ (8000f14 <ifkey+0xdc8>)
 8000d80:	725a      	strb	r2, [r3, #9]
 8000d82:	e26b      	b.n	800125c <ifkey+0x1110>
	  		case 132:report[9]&=(~0x02);break;
 8000d84:	4b63      	ldr	r3, [pc, #396]	@ (8000f14 <ifkey+0xdc8>)
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
 8000d88:	f023 0302 	bic.w	r3, r3, #2
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b61      	ldr	r3, [pc, #388]	@ (8000f14 <ifkey+0xdc8>)
 8000d90:	725a      	strb	r2, [r3, #9]
 8000d92:	e263      	b.n	800125c <ifkey+0x1110>
	  		case 133:report[9]|=0x04;break;//F5
 8000d94:	4b5f      	ldr	r3, [pc, #380]	@ (8000f14 <ifkey+0xdc8>)
 8000d96:	7a5b      	ldrb	r3, [r3, #9]
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f14 <ifkey+0xdc8>)
 8000da0:	725a      	strb	r2, [r3, #9]
 8000da2:	e25b      	b.n	800125c <ifkey+0x1110>
	  		case 134:report[9]&=(~0x04);break;
 8000da4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f14 <ifkey+0xdc8>)
 8000da6:	7a5b      	ldrb	r3, [r3, #9]
 8000da8:	f023 0304 	bic.w	r3, r3, #4
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b59      	ldr	r3, [pc, #356]	@ (8000f14 <ifkey+0xdc8>)
 8000db0:	725a      	strb	r2, [r3, #9]
 8000db2:	e253      	b.n	800125c <ifkey+0x1110>
	  		case 135:report[9]|=0x08;break;//F6
 8000db4:	4b57      	ldr	r3, [pc, #348]	@ (8000f14 <ifkey+0xdc8>)
 8000db6:	7a5b      	ldrb	r3, [r3, #9]
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b55      	ldr	r3, [pc, #340]	@ (8000f14 <ifkey+0xdc8>)
 8000dc0:	725a      	strb	r2, [r3, #9]
 8000dc2:	e24b      	b.n	800125c <ifkey+0x1110>
	  		case 136:report[9]&=(~0x08);break;
 8000dc4:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <ifkey+0xdc8>)
 8000dc6:	7a5b      	ldrb	r3, [r3, #9]
 8000dc8:	f023 0308 	bic.w	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <ifkey+0xdc8>)
 8000dd0:	725a      	strb	r2, [r3, #9]
 8000dd2:	e243      	b.n	800125c <ifkey+0x1110>
	  		case 137:report[9]|=0x10;break;//F7
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f14 <ifkey+0xdc8>)
 8000dd6:	7a5b      	ldrb	r3, [r3, #9]
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b4d      	ldr	r3, [pc, #308]	@ (8000f14 <ifkey+0xdc8>)
 8000de0:	725a      	strb	r2, [r3, #9]
 8000de2:	e23b      	b.n	800125c <ifkey+0x1110>
	  		case 138:report[9]&=(~0x10);break;
 8000de4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f14 <ifkey+0xdc8>)
 8000de6:	7a5b      	ldrb	r3, [r3, #9]
 8000de8:	f023 0310 	bic.w	r3, r3, #16
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b49      	ldr	r3, [pc, #292]	@ (8000f14 <ifkey+0xdc8>)
 8000df0:	725a      	strb	r2, [r3, #9]
 8000df2:	e233      	b.n	800125c <ifkey+0x1110>
	  		case 139:report[9]|=0x20;break;//F8
 8000df4:	4b47      	ldr	r3, [pc, #284]	@ (8000f14 <ifkey+0xdc8>)
 8000df6:	7a5b      	ldrb	r3, [r3, #9]
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b45      	ldr	r3, [pc, #276]	@ (8000f14 <ifkey+0xdc8>)
 8000e00:	725a      	strb	r2, [r3, #9]
 8000e02:	e22b      	b.n	800125c <ifkey+0x1110>
	  		case 140:report[9]&=(~0x20);break;
 8000e04:	4b43      	ldr	r3, [pc, #268]	@ (8000f14 <ifkey+0xdc8>)
 8000e06:	7a5b      	ldrb	r3, [r3, #9]
 8000e08:	f023 0320 	bic.w	r3, r3, #32
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <ifkey+0xdc8>)
 8000e10:	725a      	strb	r2, [r3, #9]
 8000e12:	e223      	b.n	800125c <ifkey+0x1110>
	  		case 141:report[9]|=0x40;break;//F9
 8000e14:	4b3f      	ldr	r3, [pc, #252]	@ (8000f14 <ifkey+0xdc8>)
 8000e16:	7a5b      	ldrb	r3, [r3, #9]
 8000e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <ifkey+0xdc8>)
 8000e20:	725a      	strb	r2, [r3, #9]
 8000e22:	e21b      	b.n	800125c <ifkey+0x1110>
	  		case 142:report[9]&=(~0x40);break;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <ifkey+0xdc8>)
 8000e26:	7a5b      	ldrb	r3, [r3, #9]
 8000e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <ifkey+0xdc8>)
 8000e30:	725a      	strb	r2, [r3, #9]
 8000e32:	e213      	b.n	800125c <ifkey+0x1110>
	  		case 143:report[9]|=0x80;break;//F10
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <ifkey+0xdc8>)
 8000e36:	7a5b      	ldrb	r3, [r3, #9]
 8000e38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <ifkey+0xdc8>)
 8000e40:	725a      	strb	r2, [r3, #9]
 8000e42:	e20b      	b.n	800125c <ifkey+0x1110>
	  		case 144:report[9]&=(~0x80);break;
 8000e44:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <ifkey+0xdc8>)
 8000e46:	7a5b      	ldrb	r3, [r3, #9]
 8000e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <ifkey+0xdc8>)
 8000e50:	725a      	strb	r2, [r3, #9]
 8000e52:	e203      	b.n	800125c <ifkey+0x1110>
	  		case 145:report[10]|=0x01;break;//F11
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <ifkey+0xdc8>)
 8000e56:	7a9b      	ldrb	r3, [r3, #10]
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <ifkey+0xdc8>)
 8000e60:	729a      	strb	r2, [r3, #10]
 8000e62:	e1fb      	b.n	800125c <ifkey+0x1110>
	  		case 146:report[10]&=(~0x01);break;
 8000e64:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <ifkey+0xdc8>)
 8000e66:	7a9b      	ldrb	r3, [r3, #10]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <ifkey+0xdc8>)
 8000e70:	729a      	strb	r2, [r3, #10]
 8000e72:	e1f3      	b.n	800125c <ifkey+0x1110>
	  		case 147:report[10]|=0x02;break;//F12
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <ifkey+0xdc8>)
 8000e76:	7a9b      	ldrb	r3, [r3, #10]
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <ifkey+0xdc8>)
 8000e80:	729a      	strb	r2, [r3, #10]
 8000e82:	e1eb      	b.n	800125c <ifkey+0x1110>
	  		case 148:report[10]&=(~0x02);break;
 8000e84:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <ifkey+0xdc8>)
 8000e86:	7a9b      	ldrb	r3, [r3, #10]
 8000e88:	f023 0302 	bic.w	r3, r3, #2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <ifkey+0xdc8>)
 8000e90:	729a      	strb	r2, [r3, #10]
 8000e92:	e1e3      	b.n	800125c <ifkey+0x1110>
	  		case 149:report[10]|=0x04;break;//PrtSc屏幕截图
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <ifkey+0xdc8>)
 8000e96:	7a9b      	ldrb	r3, [r3, #10]
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <ifkey+0xdc8>)
 8000ea0:	729a      	strb	r2, [r3, #10]
 8000ea2:	e1db      	b.n	800125c <ifkey+0x1110>
	  		case 150:report[10]&=(~0x04);break;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <ifkey+0xdc8>)
 8000ea6:	7a9b      	ldrb	r3, [r3, #10]
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <ifkey+0xdc8>)
 8000eb0:	729a      	strb	r2, [r3, #10]
 8000eb2:	e1d3      	b.n	800125c <ifkey+0x1110>
	  		case 151:report[10]|=0x08;break;//ScroIILOCK
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <ifkey+0xdc8>)
 8000eb6:	7a9b      	ldrb	r3, [r3, #10]
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <ifkey+0xdc8>)
 8000ec0:	729a      	strb	r2, [r3, #10]
 8000ec2:	e1cb      	b.n	800125c <ifkey+0x1110>
	  		case 152:report[10]&=(~0x08);break;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <ifkey+0xdc8>)
 8000ec6:	7a9b      	ldrb	r3, [r3, #10]
 8000ec8:	f023 0308 	bic.w	r3, r3, #8
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <ifkey+0xdc8>)
 8000ed0:	729a      	strb	r2, [r3, #10]
 8000ed2:	e1c3      	b.n	800125c <ifkey+0x1110>
	  		case 153:report[10]|=0x10;break;//Pause
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <ifkey+0xdc8>)
 8000ed6:	7a9b      	ldrb	r3, [r3, #10]
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <ifkey+0xdc8>)
 8000ee0:	729a      	strb	r2, [r3, #10]
 8000ee2:	e1bb      	b.n	800125c <ifkey+0x1110>
	  		case 154:report[10]&=(~0x10);break;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <ifkey+0xdc8>)
 8000ee6:	7a9b      	ldrb	r3, [r3, #10]
 8000ee8:	f023 0310 	bic.w	r3, r3, #16
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <ifkey+0xdc8>)
 8000ef0:	729a      	strb	r2, [r3, #10]
 8000ef2:	e1b3      	b.n	800125c <ifkey+0x1110>
	  		case 155:report[10]|=0x20;break;//Insert
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <ifkey+0xdc8>)
 8000ef6:	7a9b      	ldrb	r3, [r3, #10]
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <ifkey+0xdc8>)
 8000f00:	729a      	strb	r2, [r3, #10]
 8000f02:	e1ab      	b.n	800125c <ifkey+0x1110>
	  		case 156:report[10]&=(~0x20);break;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <ifkey+0xdc8>)
 8000f06:	7a9b      	ldrb	r3, [r3, #10]
 8000f08:	f023 0320 	bic.w	r3, r3, #32
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b01      	ldr	r3, [pc, #4]	@ (8000f14 <ifkey+0xdc8>)
 8000f10:	729a      	strb	r2, [r3, #10]
 8000f12:	e1a3      	b.n	800125c <ifkey+0x1110>
 8000f14:	200001a8 	.word	0x200001a8
	  		case 157:report[10]|=0x40;break;//Home
 8000f18:	4b9b      	ldr	r3, [pc, #620]	@ (8001188 <ifkey+0x103c>)
 8000f1a:	7a9b      	ldrb	r3, [r3, #10]
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b99      	ldr	r3, [pc, #612]	@ (8001188 <ifkey+0x103c>)
 8000f24:	729a      	strb	r2, [r3, #10]
 8000f26:	e199      	b.n	800125c <ifkey+0x1110>
	  		case 158:report[10]&=(~0x40);break;
 8000f28:	4b97      	ldr	r3, [pc, #604]	@ (8001188 <ifkey+0x103c>)
 8000f2a:	7a9b      	ldrb	r3, [r3, #10]
 8000f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b95      	ldr	r3, [pc, #596]	@ (8001188 <ifkey+0x103c>)
 8000f34:	729a      	strb	r2, [r3, #10]
 8000f36:	e191      	b.n	800125c <ifkey+0x1110>
	  		case 159:report[10]|=0x80;break;//Pgup
 8000f38:	4b93      	ldr	r3, [pc, #588]	@ (8001188 <ifkey+0x103c>)
 8000f3a:	7a9b      	ldrb	r3, [r3, #10]
 8000f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b91      	ldr	r3, [pc, #580]	@ (8001188 <ifkey+0x103c>)
 8000f44:	729a      	strb	r2, [r3, #10]
 8000f46:	e189      	b.n	800125c <ifkey+0x1110>
	  		case 160:report[10]&=(~0x80);break;
 8000f48:	4b8f      	ldr	r3, [pc, #572]	@ (8001188 <ifkey+0x103c>)
 8000f4a:	7a9b      	ldrb	r3, [r3, #10]
 8000f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b8d      	ldr	r3, [pc, #564]	@ (8001188 <ifkey+0x103c>)
 8000f54:	729a      	strb	r2, [r3, #10]
 8000f56:	e181      	b.n	800125c <ifkey+0x1110>
	  		case 161:report[11]|=0x01;break;//DEL
 8000f58:	4b8b      	ldr	r3, [pc, #556]	@ (8001188 <ifkey+0x103c>)
 8000f5a:	7adb      	ldrb	r3, [r3, #11]
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b89      	ldr	r3, [pc, #548]	@ (8001188 <ifkey+0x103c>)
 8000f64:	72da      	strb	r2, [r3, #11]
 8000f66:	e179      	b.n	800125c <ifkey+0x1110>
	  		case 162:report[11]&=(~0x01);break;
 8000f68:	4b87      	ldr	r3, [pc, #540]	@ (8001188 <ifkey+0x103c>)
 8000f6a:	7adb      	ldrb	r3, [r3, #11]
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b85      	ldr	r3, [pc, #532]	@ (8001188 <ifkey+0x103c>)
 8000f74:	72da      	strb	r2, [r3, #11]
 8000f76:	e171      	b.n	800125c <ifkey+0x1110>
	  		case 163:report[11]|=0x02;break;//END
 8000f78:	4b83      	ldr	r3, [pc, #524]	@ (8001188 <ifkey+0x103c>)
 8000f7a:	7adb      	ldrb	r3, [r3, #11]
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b81      	ldr	r3, [pc, #516]	@ (8001188 <ifkey+0x103c>)
 8000f84:	72da      	strb	r2, [r3, #11]
 8000f86:	e169      	b.n	800125c <ifkey+0x1110>
	  		case 164:report[11]&=(~0x02);break;
 8000f88:	4b7f      	ldr	r3, [pc, #508]	@ (8001188 <ifkey+0x103c>)
 8000f8a:	7adb      	ldrb	r3, [r3, #11]
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b7d      	ldr	r3, [pc, #500]	@ (8001188 <ifkey+0x103c>)
 8000f94:	72da      	strb	r2, [r3, #11]
 8000f96:	e161      	b.n	800125c <ifkey+0x1110>
	  		case 165:report[11]|=0x04;break;//Pgdn
 8000f98:	4b7b      	ldr	r3, [pc, #492]	@ (8001188 <ifkey+0x103c>)
 8000f9a:	7adb      	ldrb	r3, [r3, #11]
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b79      	ldr	r3, [pc, #484]	@ (8001188 <ifkey+0x103c>)
 8000fa4:	72da      	strb	r2, [r3, #11]
 8000fa6:	e159      	b.n	800125c <ifkey+0x1110>
	  		case 166:report[11]&=(~0x04);break;
 8000fa8:	4b77      	ldr	r3, [pc, #476]	@ (8001188 <ifkey+0x103c>)
 8000faa:	7adb      	ldrb	r3, [r3, #11]
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <ifkey+0x103c>)
 8000fb4:	72da      	strb	r2, [r3, #11]
 8000fb6:	e151      	b.n	800125c <ifkey+0x1110>
	  		case 167:report[11]|=0x08;break;//方向键右
 8000fb8:	4b73      	ldr	r3, [pc, #460]	@ (8001188 <ifkey+0x103c>)
 8000fba:	7adb      	ldrb	r3, [r3, #11]
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <ifkey+0x103c>)
 8000fc4:	72da      	strb	r2, [r3, #11]
 8000fc6:	e149      	b.n	800125c <ifkey+0x1110>
	  		case 168:report[11]&=(~0x08);break;
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001188 <ifkey+0x103c>)
 8000fca:	7adb      	ldrb	r3, [r3, #11]
 8000fcc:	f023 0308 	bic.w	r3, r3, #8
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001188 <ifkey+0x103c>)
 8000fd4:	72da      	strb	r2, [r3, #11]
 8000fd6:	e141      	b.n	800125c <ifkey+0x1110>
	  		case 169:report[11]|=0x10;break;//方向键左
 8000fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001188 <ifkey+0x103c>)
 8000fda:	7adb      	ldrb	r3, [r3, #11]
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b69      	ldr	r3, [pc, #420]	@ (8001188 <ifkey+0x103c>)
 8000fe4:	72da      	strb	r2, [r3, #11]
 8000fe6:	e139      	b.n	800125c <ifkey+0x1110>
	  		case 170:report[11]&=(~0x10);break;
 8000fe8:	4b67      	ldr	r3, [pc, #412]	@ (8001188 <ifkey+0x103c>)
 8000fea:	7adb      	ldrb	r3, [r3, #11]
 8000fec:	f023 0310 	bic.w	r3, r3, #16
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b65      	ldr	r3, [pc, #404]	@ (8001188 <ifkey+0x103c>)
 8000ff4:	72da      	strb	r2, [r3, #11]
 8000ff6:	e131      	b.n	800125c <ifkey+0x1110>
	  		case 171:report[11]|=0x20;break;//方向键下
 8000ff8:	4b63      	ldr	r3, [pc, #396]	@ (8001188 <ifkey+0x103c>)
 8000ffa:	7adb      	ldrb	r3, [r3, #11]
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b61      	ldr	r3, [pc, #388]	@ (8001188 <ifkey+0x103c>)
 8001004:	72da      	strb	r2, [r3, #11]
 8001006:	e129      	b.n	800125c <ifkey+0x1110>
	  		case 172:report[11]&=(~0x20);break;
 8001008:	4b5f      	ldr	r3, [pc, #380]	@ (8001188 <ifkey+0x103c>)
 800100a:	7adb      	ldrb	r3, [r3, #11]
 800100c:	f023 0320 	bic.w	r3, r3, #32
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b5d      	ldr	r3, [pc, #372]	@ (8001188 <ifkey+0x103c>)
 8001014:	72da      	strb	r2, [r3, #11]
 8001016:	e121      	b.n	800125c <ifkey+0x1110>
	  		case 173:report[11]|=0x40;break;//方向键上
 8001018:	4b5b      	ldr	r3, [pc, #364]	@ (8001188 <ifkey+0x103c>)
 800101a:	7adb      	ldrb	r3, [r3, #11]
 800101c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b59      	ldr	r3, [pc, #356]	@ (8001188 <ifkey+0x103c>)
 8001024:	72da      	strb	r2, [r3, #11]
 8001026:	e119      	b.n	800125c <ifkey+0x1110>
	  		case 174:report[11]&=(~0x40);break;
 8001028:	4b57      	ldr	r3, [pc, #348]	@ (8001188 <ifkey+0x103c>)
 800102a:	7adb      	ldrb	r3, [r3, #11]
 800102c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b55      	ldr	r3, [pc, #340]	@ (8001188 <ifkey+0x103c>)
 8001034:	72da      	strb	r2, [r3, #11]
 8001036:	e111      	b.n	800125c <ifkey+0x1110>
	  		case 175:report[11]|=0x80;break;//小键盘数字锁定
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <ifkey+0x103c>)
 800103a:	7adb      	ldrb	r3, [r3, #11]
 800103c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <ifkey+0x103c>)
 8001044:	72da      	strb	r2, [r3, #11]
 8001046:	e109      	b.n	800125c <ifkey+0x1110>
	  		case 176:report[11]&=(~0x80);break;
 8001048:	4b4f      	ldr	r3, [pc, #316]	@ (8001188 <ifkey+0x103c>)
 800104a:	7adb      	ldrb	r3, [r3, #11]
 800104c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b4d      	ldr	r3, [pc, #308]	@ (8001188 <ifkey+0x103c>)
 8001054:	72da      	strb	r2, [r3, #11]
 8001056:	e101      	b.n	800125c <ifkey+0x1110>
	  		case 177:report[12]|=0x01;break;//小键盘/
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <ifkey+0x103c>)
 800105a:	7b1b      	ldrb	r3, [r3, #12]
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b49      	ldr	r3, [pc, #292]	@ (8001188 <ifkey+0x103c>)
 8001064:	731a      	strb	r2, [r3, #12]
 8001066:	e0f9      	b.n	800125c <ifkey+0x1110>
	  		case 178:report[12]&=(~0x01);break;
 8001068:	4b47      	ldr	r3, [pc, #284]	@ (8001188 <ifkey+0x103c>)
 800106a:	7b1b      	ldrb	r3, [r3, #12]
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <ifkey+0x103c>)
 8001074:	731a      	strb	r2, [r3, #12]
 8001076:	e0f1      	b.n	800125c <ifkey+0x1110>
	  		case 179:report[12]|=0x02;break;//小键盘*
 8001078:	4b43      	ldr	r3, [pc, #268]	@ (8001188 <ifkey+0x103c>)
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <ifkey+0x103c>)
 8001084:	731a      	strb	r2, [r3, #12]
 8001086:	e0e9      	b.n	800125c <ifkey+0x1110>
	  		case 180:report[12]&=(~0x02);break;
 8001088:	4b3f      	ldr	r3, [pc, #252]	@ (8001188 <ifkey+0x103c>)
 800108a:	7b1b      	ldrb	r3, [r3, #12]
 800108c:	f023 0302 	bic.w	r3, r3, #2
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <ifkey+0x103c>)
 8001094:	731a      	strb	r2, [r3, #12]
 8001096:	e0e1      	b.n	800125c <ifkey+0x1110>
	  		case 181:report[12]|=0x04;break;//小键盘-
 8001098:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <ifkey+0x103c>)
 800109a:	7b1b      	ldrb	r3, [r3, #12]
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <ifkey+0x103c>)
 80010a4:	731a      	strb	r2, [r3, #12]
 80010a6:	e0d9      	b.n	800125c <ifkey+0x1110>
	  		case 182:report[12]&=(~0x04);break;
 80010a8:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <ifkey+0x103c>)
 80010aa:	7b1b      	ldrb	r3, [r3, #12]
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <ifkey+0x103c>)
 80010b4:	731a      	strb	r2, [r3, #12]
 80010b6:	e0d1      	b.n	800125c <ifkey+0x1110>
	  		case 183:report[12]|=0x08;break;//小键盘+
 80010b8:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <ifkey+0x103c>)
 80010ba:	7b1b      	ldrb	r3, [r3, #12]
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <ifkey+0x103c>)
 80010c4:	731a      	strb	r2, [r3, #12]
 80010c6:	e0c9      	b.n	800125c <ifkey+0x1110>
	  		case 184:report[12]&=(~0x08);break;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <ifkey+0x103c>)
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	f023 0308 	bic.w	r3, r3, #8
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <ifkey+0x103c>)
 80010d4:	731a      	strb	r2, [r3, #12]
 80010d6:	e0c1      	b.n	800125c <ifkey+0x1110>
	  		case 185:report[12]|=0x10;break;//小键盘Enter回车
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <ifkey+0x103c>)
 80010da:	7b1b      	ldrb	r3, [r3, #12]
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <ifkey+0x103c>)
 80010e4:	731a      	strb	r2, [r3, #12]
 80010e6:	e0b9      	b.n	800125c <ifkey+0x1110>
	  		case 186:report[12]&=(~0x10);break;
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <ifkey+0x103c>)
 80010ea:	7b1b      	ldrb	r3, [r3, #12]
 80010ec:	f023 0310 	bic.w	r3, r3, #16
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <ifkey+0x103c>)
 80010f4:	731a      	strb	r2, [r3, #12]
 80010f6:	e0b1      	b.n	800125c <ifkey+0x1110>
	  		case 187:report[12]|=0x20;break;//小键盘数字1
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <ifkey+0x103c>)
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <ifkey+0x103c>)
 8001104:	731a      	strb	r2, [r3, #12]
 8001106:	e0a9      	b.n	800125c <ifkey+0x1110>
	  		case 188:report[12]&=(~0x20);break;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <ifkey+0x103c>)
 800110a:	7b1b      	ldrb	r3, [r3, #12]
 800110c:	f023 0320 	bic.w	r3, r3, #32
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <ifkey+0x103c>)
 8001114:	731a      	strb	r2, [r3, #12]
 8001116:	e0a1      	b.n	800125c <ifkey+0x1110>
	  		case 189:report[12]|=0x40;break;//小键盘数字2
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <ifkey+0x103c>)
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <ifkey+0x103c>)
 8001124:	731a      	strb	r2, [r3, #12]
 8001126:	e099      	b.n	800125c <ifkey+0x1110>
	  		case 190:report[12]&=(~0x40);break;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <ifkey+0x103c>)
 800112a:	7b1b      	ldrb	r3, [r3, #12]
 800112c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <ifkey+0x103c>)
 8001134:	731a      	strb	r2, [r3, #12]
 8001136:	e091      	b.n	800125c <ifkey+0x1110>
	  		case 191:report[12]|=0x80;break;//小键盘数字3
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <ifkey+0x103c>)
 800113a:	7b1b      	ldrb	r3, [r3, #12]
 800113c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <ifkey+0x103c>)
 8001144:	731a      	strb	r2, [r3, #12]
 8001146:	e089      	b.n	800125c <ifkey+0x1110>
	  		case 192:report[12]&=(~0x80);break;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <ifkey+0x103c>)
 800114a:	7b1b      	ldrb	r3, [r3, #12]
 800114c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <ifkey+0x103c>)
 8001154:	731a      	strb	r2, [r3, #12]
 8001156:	e081      	b.n	800125c <ifkey+0x1110>
	  		case 193:report[13]|=0x01;break;//小键盘数字4
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <ifkey+0x103c>)
 800115a:	7b5b      	ldrb	r3, [r3, #13]
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <ifkey+0x103c>)
 8001164:	735a      	strb	r2, [r3, #13]
 8001166:	e079      	b.n	800125c <ifkey+0x1110>
      		case 194:report[13]&=(~0x01);break;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <ifkey+0x103c>)
 800116a:	7b5b      	ldrb	r3, [r3, #13]
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <ifkey+0x103c>)
 8001174:	735a      	strb	r2, [r3, #13]
 8001176:	e071      	b.n	800125c <ifkey+0x1110>
      		case 195:report[13]|=0x02;break;//小键盘数字5
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <ifkey+0x103c>)
 800117a:	7b5b      	ldrb	r3, [r3, #13]
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b01      	ldr	r3, [pc, #4]	@ (8001188 <ifkey+0x103c>)
 8001184:	735a      	strb	r2, [r3, #13]
 8001186:	e069      	b.n	800125c <ifkey+0x1110>
 8001188:	200001a8 	.word	0x200001a8
      		case 196:report[13]&=(~0x02);break;
 800118c:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <ifkey+0x111c>)
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	f023 0302 	bic.w	r3, r3, #2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <ifkey+0x111c>)
 8001198:	735a      	strb	r2, [r3, #13]
 800119a:	e05f      	b.n	800125c <ifkey+0x1110>
      		case 197:report[13]|=0x04;break;//小键盘数字6
 800119c:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <ifkey+0x111c>)
 800119e:	7b5b      	ldrb	r3, [r3, #13]
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <ifkey+0x111c>)
 80011a8:	735a      	strb	r2, [r3, #13]
 80011aa:	e057      	b.n	800125c <ifkey+0x1110>
      		case 198:report[13]&=(~0x04);break;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <ifkey+0x111c>)
 80011ae:	7b5b      	ldrb	r3, [r3, #13]
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <ifkey+0x111c>)
 80011b8:	735a      	strb	r2, [r3, #13]
 80011ba:	e04f      	b.n	800125c <ifkey+0x1110>
      		case 199:report[13]|=0x08;break;//小键盘数字7
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <ifkey+0x111c>)
 80011be:	7b5b      	ldrb	r3, [r3, #13]
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <ifkey+0x111c>)
 80011c8:	735a      	strb	r2, [r3, #13]
 80011ca:	e047      	b.n	800125c <ifkey+0x1110>
      		case 200:report[13]&=(~0x08);break;
 80011cc:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <ifkey+0x111c>)
 80011ce:	7b5b      	ldrb	r3, [r3, #13]
 80011d0:	f023 0308 	bic.w	r3, r3, #8
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <ifkey+0x111c>)
 80011d8:	735a      	strb	r2, [r3, #13]
 80011da:	e03f      	b.n	800125c <ifkey+0x1110>
      		case 201:report[13]|=0x10;break;//小键盘数字8
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <ifkey+0x111c>)
 80011de:	7b5b      	ldrb	r3, [r3, #13]
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <ifkey+0x111c>)
 80011e8:	735a      	strb	r2, [r3, #13]
 80011ea:	e037      	b.n	800125c <ifkey+0x1110>
      		case 202:report[13]&=(~0x10);break;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <ifkey+0x111c>)
 80011ee:	7b5b      	ldrb	r3, [r3, #13]
 80011f0:	f023 0310 	bic.w	r3, r3, #16
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <ifkey+0x111c>)
 80011f8:	735a      	strb	r2, [r3, #13]
 80011fa:	e02f      	b.n	800125c <ifkey+0x1110>
      		case 203:report[13]|=0x20;break;//小键盘数字9
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <ifkey+0x111c>)
 80011fe:	7b5b      	ldrb	r3, [r3, #13]
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <ifkey+0x111c>)
 8001208:	735a      	strb	r2, [r3, #13]
 800120a:	e027      	b.n	800125c <ifkey+0x1110>
      		case 204:report[13]&=(~0x20);break;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <ifkey+0x111c>)
 800120e:	7b5b      	ldrb	r3, [r3, #13]
 8001210:	f023 0320 	bic.w	r3, r3, #32
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <ifkey+0x111c>)
 8001218:	735a      	strb	r2, [r3, #13]
 800121a:	e01f      	b.n	800125c <ifkey+0x1110>
      		case 205:report[13]|=0x40;break;//小键盘数字0
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <ifkey+0x111c>)
 800121e:	7b5b      	ldrb	r3, [r3, #13]
 8001220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <ifkey+0x111c>)
 8001228:	735a      	strb	r2, [r3, #13]
 800122a:	e017      	b.n	800125c <ifkey+0x1110>
      		case 206:report[13]&=(~0x40);break;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <ifkey+0x111c>)
 800122e:	7b5b      	ldrb	r3, [r3, #13]
 8001230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <ifkey+0x111c>)
 8001238:	735a      	strb	r2, [r3, #13]
 800123a:	e00f      	b.n	800125c <ifkey+0x1110>
      		case 207:report[13]|=0x80;break;//小键盘数字.
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <ifkey+0x111c>)
 800123e:	7b5b      	ldrb	r3, [r3, #13]
 8001240:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <ifkey+0x111c>)
 8001248:	735a      	strb	r2, [r3, #13]
 800124a:	e007      	b.n	800125c <ifkey+0x1110>
      		case 208:report[13]&=(~0x80);break;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <ifkey+0x111c>)
 800124e:	7b5b      	ldrb	r3, [r3, #13]
 8001250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <ifkey+0x111c>)
 8001258:	735a      	strb	r2, [r3, #13]
 800125a:	bf00      	nop
      	}
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200001a8 	.word	0x200001a8

0800126c <mpr121_init>:
#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

HAL_StatusTypeDef status;

uint8_t mpr121_init(const mpr121_t *mpr121)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	writeRegister(mpr121, MPR121_SOFTRESET, 0x63);//软重置
 8001274:	2263      	movs	r2, #99	@ 0x63
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f8eb 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_ECR, 0x00);
 800127e:	2200      	movs	r2, #0
 8001280:	215e      	movs	r1, #94	@ 0x5e
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f8e6 	bl	8001454 <writeRegister>

	uint8_t c = readRegister8(mpr121, MPR121_CONFIG2);
 8001288:	215d      	movs	r1, #93	@ 0x5d
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f8b6 	bl	80013fc <readRegister8>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
	if (c != 0x24){return 1;}
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b24      	cmp	r3, #36	@ 0x24
 8001298:	d001      	beq.n	800129e <mpr121_init+0x32>
 800129a:	2301      	movs	r3, #1
 800129c:	e067      	b.n	800136e <mpr121_init+0x102>

	setThresholds(mpr121, MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 800129e:	2206      	movs	r2, #6
 80012a0:	210c      	movs	r1, #12
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f867 	bl	8001376 <setThresholds>
	writeRegister(mpr121, MPR121_MHDR, 0x01);
 80012a8:	2201      	movs	r2, #1
 80012aa:	212b      	movs	r1, #43	@ 0x2b
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8d1 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_NHDR, 0x01);
 80012b2:	2201      	movs	r2, #1
 80012b4:	212c      	movs	r1, #44	@ 0x2c
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f8cc 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_NCLR, 0x0E);
 80012bc:	220e      	movs	r2, #14
 80012be:	212d      	movs	r1, #45	@ 0x2d
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f8c7 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_FDLR, 0x00);
 80012c6:	2200      	movs	r2, #0
 80012c8:	212e      	movs	r1, #46	@ 0x2e
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f8c2 	bl	8001454 <writeRegister>

	writeRegister(mpr121, MPR121_MHDF, 0x01);
 80012d0:	2201      	movs	r2, #1
 80012d2:	212f      	movs	r1, #47	@ 0x2f
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f8bd 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_NHDF, 0x05);
 80012da:	2205      	movs	r2, #5
 80012dc:	2130      	movs	r1, #48	@ 0x30
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f8b8 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_NCLF, 0x01);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2131      	movs	r1, #49	@ 0x31
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f8b3 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_FDLF, 0x00);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2132      	movs	r1, #50	@ 0x32
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f8ae 	bl	8001454 <writeRegister>

	writeRegister(mpr121, MPR121_NHDT, 0x00);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2133      	movs	r1, #51	@ 0x33
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f8a9 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_NCLT, 0x00);
 8001302:	2200      	movs	r2, #0
 8001304:	2134      	movs	r1, #52	@ 0x34
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8a4 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_FDLT, 0x00);
 800130c:	2200      	movs	r2, #0
 800130e:	2135      	movs	r1, #53	@ 0x35
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f89f 	bl	8001454 <writeRegister>

	writeRegister(mpr121, MPR121_DEBOUNCE, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	215b      	movs	r1, #91	@ 0x5b
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f89a 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8001320:	2210      	movs	r2, #16
 8001322:	215c      	movs	r1, #92	@ 0x5c
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f895 	bl	8001454 <writeRegister>
	writeRegister(mpr121, MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 800132a:	2220      	movs	r2, #32
 800132c:	215d      	movs	r1, #93	@ 0x5d
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f890 	bl	8001454 <writeRegister>

	#ifdef AUTOCONFIG
	  writeRegister(mpr121, MPR121_AUTOCONFIG0, 0x0B);
 8001334:	220b      	movs	r2, #11
 8001336:	217b      	movs	r1, #123	@ 0x7b
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f88b 	bl	8001454 <writeRegister>

	  // correct values for Vdd = 3.3V
	  writeRegister(mpr121, MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
 800133e:	22c8      	movs	r2, #200	@ 0xc8
 8001340:	217d      	movs	r1, #125	@ 0x7d
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f886 	bl	8001454 <writeRegister>
	  writeRegister(mpr121, MPR121_TARGETLIMIT, 180); // UPLIMIT * 0.9
 8001348:	22b4      	movs	r2, #180	@ 0xb4
 800134a:	217f      	movs	r1, #127	@ 0x7f
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f881 	bl	8001454 <writeRegister>
	  writeRegister(mpr121, MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65
 8001352:	2282      	movs	r2, #130	@ 0x82
 8001354:	217e      	movs	r1, #126	@ 0x7e
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f87c 	bl	8001454 <writeRegister>
	#endif

	uint8_t ECR_SETTING = 0x8C;//配置ECR寄存器，位的作用在数据手册的第16页
 800135c:	238c      	movs	r3, #140	@ 0x8c
 800135e:	73bb      	strb	r3, [r7, #14]
	writeRegister(mpr121, MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	461a      	mov	r2, r3
 8001364:	215e      	movs	r1, #94	@ 0x5e
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f874 	bl	8001454 <writeRegister>
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <setThresholds>:

void setThresholds(const mpr121_t *mpr121, uint8_t touch, uint8_t release)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
 8001382:	4613      	mov	r3, r2
 8001384:	70bb      	strb	r3, [r7, #2]
	// set all thresholds (the same)
	for (uint8_t i = 0; i < 12; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e016      	b.n	80013ba <setThresholds+0x44>
	{
		writeRegister(mpr121, MPR121_TOUCHTH_0 + 2 * i, touch);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3341      	adds	r3, #65	@ 0x41
 8001394:	b2db      	uxtb	r3, r3
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f85a 	bl	8001454 <writeRegister>
		writeRegister(mpr121, MPR121_RELEASETH_0 + 2 * i, release);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3321      	adds	r3, #33	@ 0x21
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	78ba      	ldrb	r2, [r7, #2]
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f850 	bl	8001454 <writeRegister>
	for (uint8_t i = 0; i < 12; i++)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	3301      	adds	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b0b      	cmp	r3, #11
 80013be:	d9e5      	bls.n	800138c <setThresholds+0x16>
	}
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <touched>:

uint16_t touched(const mpr121_t *mpr121)
{
 80013ca:	b590      	push	{r4, r7, lr}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	uint16_t data = ( readRegister8(mpr121, MPR121_TOUCHSTATUS_H)<<8 | readRegister8(mpr121, MPR121_TOUCHSTATUS_L) );
 80013d2:	2101      	movs	r1, #1
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f811 	bl	80013fc <readRegister8>
 80013da:	4603      	mov	r3, r0
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21c      	sxth	r4, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f80a 	bl	80013fc <readRegister8>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4323      	orrs	r3, r4
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	81fb      	strh	r3, [r7, #14]
	return data;
 80013f2:	89fb      	ldrh	r3, [r7, #14]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <readRegister8>:

uint8_t readRegister8(const mpr121_t *mpr121, uint8_t reg)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af04      	add	r7, sp, #16
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
	uint8_t readedBuffer=0;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(mpr121->hi2c, mpr121->i2cAddr, reg, I2C_MEMADD_SIZE_8BIT, &readedBuffer, 1, HAL_MAX_DELAY);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6858      	ldr	r0, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	b29a      	uxth	r2, r3
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2301      	movs	r3, #1
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	f107 030f 	add.w	r3, r7, #15
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	f001 f916 	bl	800265c <HAL_I2C_Mem_Read>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <readRegister8+0x54>)
 8001436:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return 0;}
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <readRegister8+0x54>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <readRegister8+0x48>
 8001440:	2300      	movs	r3, #0
 8001442:	e000      	b.n	8001446 <readRegister8+0x4a>
	return readedBuffer;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001b7 	.word	0x200001b7

08001454 <writeRegister>:

void writeRegister(const mpr121_t *mpr121, uint8_t reg, uint8_t value)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af04      	add	r7, sp, #16
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
 8001460:	4613      	mov	r3, r2
 8001462:	70bb      	strb	r3, [r7, #2]
	uint8_t stop_required = 1;//判断是否需要进入停止状态指示位
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
	uint8_t ecr_backup = readRegister8(mpr121, MPR121_ECR);//备份电极配置寄存器(ERC寄存器)
 8001468:	215e      	movs	r1, #94	@ 0x5e
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffc6 	bl	80013fc <readRegister8>
 8001470:	4603      	mov	r3, r0
 8001472:	73bb      	strb	r3, [r7, #14]
	uint8_t ecr_chear = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	737b      	strb	r3, [r7, #13]
	if( (reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A)) ){stop_required = 0;}//如果成立则无需进入停止状态
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	2b5e      	cmp	r3, #94	@ 0x5e
 800147c:	d005      	beq.n	800148a <writeRegister+0x36>
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	2b72      	cmp	r3, #114	@ 0x72
 8001482:	d904      	bls.n	800148e <writeRegister+0x3a>
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b7a      	cmp	r3, #122	@ 0x7a
 8001488:	d801      	bhi.n	800148e <writeRegister+0x3a>
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
	if (stop_required)//清除ERC寄存器，进入停止状态
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d018      	beq.n	80014c6 <writeRegister+0x72>
	{
		status = HAL_I2C_Mem_Write(mpr121->hi2c, mpr121->i2cAddr, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_chear, 1, HAL_MAX_DELAY);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6858      	ldr	r0, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	f107 030d 	add.w	r3, r7, #13
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	225e      	movs	r2, #94	@ 0x5e
 80014b2:	f000 ffd9 	bl	8002468 <HAL_I2C_Mem_Write>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <writeRegister+0xe8>)
 80014bc:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <writeRegister+0xe8>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d134      	bne.n	8001530 <writeRegister+0xdc>
	}
	status = HAL_I2C_Mem_Write(mpr121->hi2c, mpr121->i2cAddr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);//开始写入目标寄存器
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6858      	ldr	r0, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	f000 ffc0 	bl	8002468 <HAL_I2C_Mem_Write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <writeRegister+0xe8>)
 80014ee:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return;}
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <writeRegister+0xe8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d11d      	bne.n	8001534 <writeRegister+0xe0>
	if (stop_required) //还原ERC寄存器的值
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01b      	beq.n	8001536 <writeRegister+0xe2>
	{
		status = HAL_I2C_Mem_Write(mpr121->hi2c, mpr121->i2cAddr, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_backup, 1, HAL_MAX_DELAY);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6858      	ldr	r0, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	2301      	movs	r3, #1
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	f107 030e 	add.w	r3, r7, #14
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	225e      	movs	r2, #94	@ 0x5e
 800151c:	f000 ffa4 	bl	8002468 <HAL_I2C_Mem_Write>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <writeRegister+0xe8>)
 8001526:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <writeRegister+0xe8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	e002      	b.n	8001536 <writeRegister+0xe2>
		if (status != HAL_OK){return;}
 8001530:	bf00      	nop
 8001532:	e000      	b.n	8001536 <writeRegister+0xe2>
	if (status != HAL_OK){return;}
 8001534:	bf00      	nop
	}
}
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001b7 	.word	0x200001b7

08001540 <Transmit_Touch_Data>:

void ifkey(int command);
extern uint8_t report[15];

void Transmit_Touch_Data(const mpr121_t *mpr121)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	uint16_t data=touched(mpr121);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff3e 	bl	80013ca <touched>
 800154e:	4603      	mov	r3, r0
 8001550:	81fb      	strh	r3, [r7, #14]
	switch(mpr121->i2cAddr)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2bba      	cmp	r3, #186	@ 0xba
 8001558:	f000 80fb 	beq.w	8001752 <Transmit_Touch_Data+0x212>
 800155c:	2bba      	cmp	r3, #186	@ 0xba
 800155e:	f300 8189 	bgt.w	8001874 <Transmit_Touch_Data+0x334>
 8001562:	2bb4      	cmp	r3, #180	@ 0xb4
 8001564:	d003      	beq.n	800156e <Transmit_Touch_Data+0x2e>
 8001566:	2bb8      	cmp	r3, #184	@ 0xb8
 8001568:	f000 8092 	beq.w	8001690 <Transmit_Touch_Data+0x150>
 800156c:	e182      	b.n	8001874 <Transmit_Touch_Data+0x334>
	{
		case 0x5A<<1:
			if(data & ((uint16_t)0x01<<0)){ifkey(TOUCH11_TRIG);}else{ifkey(TOUCH11_RELEASE);}
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <Transmit_Touch_Data+0x40>
 8001578:	2029      	movs	r0, #41	@ 0x29
 800157a:	f7fe fde7 	bl	800014c <ifkey>
 800157e:	e002      	b.n	8001586 <Transmit_Touch_Data+0x46>
 8001580:	202a      	movs	r0, #42	@ 0x2a
 8001582:	f7fe fde3 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<1)){ifkey(TOUCH12_TRIG);}else{ifkey(TOUCH12_RELEASE);}
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <Transmit_Touch_Data+0x58>
 8001590:	2021      	movs	r0, #33	@ 0x21
 8001592:	f7fe fddb 	bl	800014c <ifkey>
 8001596:	e002      	b.n	800159e <Transmit_Touch_Data+0x5e>
 8001598:	2022      	movs	r0, #34	@ 0x22
 800159a:	f7fe fdd7 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<2)){ifkey(TOUCH9_TRIG);}else{ifkey(TOUCH9_RELEASE);}
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <Transmit_Touch_Data+0x70>
 80015a8:	2025      	movs	r0, #37	@ 0x25
 80015aa:	f7fe fdcf 	bl	800014c <ifkey>
 80015ae:	e002      	b.n	80015b6 <Transmit_Touch_Data+0x76>
 80015b0:	2026      	movs	r0, #38	@ 0x26
 80015b2:	f7fe fdcb 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<3)){ifkey(TOUCH10_TRIG);}else{ifkey(TOUCH10_RELEASE);}
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <Transmit_Touch_Data+0x88>
 80015c0:	2075      	movs	r0, #117	@ 0x75
 80015c2:	f7fe fdc3 	bl	800014c <ifkey>
 80015c6:	e002      	b.n	80015ce <Transmit_Touch_Data+0x8e>
 80015c8:	2076      	movs	r0, #118	@ 0x76
 80015ca:	f7fe fdbf 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<4)){ifkey(TOUCH7_TRIG);}else{ifkey(TOUCH7_RELEASE);}
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <Transmit_Touch_Data+0xa0>
 80015d8:	202d      	movs	r0, #45	@ 0x2d
 80015da:	f7fe fdb7 	bl	800014c <ifkey>
 80015de:	e002      	b.n	80015e6 <Transmit_Touch_Data+0xa6>
 80015e0:	202e      	movs	r0, #46	@ 0x2e
 80015e2:	f7fe fdb3 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<5)){ifkey(TOUCH8_TRIG);}else{ifkey(TOUCH8_RELEASE);}
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <Transmit_Touch_Data+0xb8>
 80015f0:	2027      	movs	r0, #39	@ 0x27
 80015f2:	f7fe fdab 	bl	800014c <ifkey>
 80015f6:	e002      	b.n	80015fe <Transmit_Touch_Data+0xbe>
 80015f8:	2028      	movs	r0, #40	@ 0x28
 80015fa:	f7fe fda7 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<6)){ifkey(TOUCH6_TRIG);}else{ifkey(TOUCH6_RELEASE);}
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <Transmit_Touch_Data+0xd0>
 8001608:	202f      	movs	r0, #47	@ 0x2f
 800160a:	f7fe fd9f 	bl	800014c <ifkey>
 800160e:	e002      	b.n	8001616 <Transmit_Touch_Data+0xd6>
 8001610:	2030      	movs	r0, #48	@ 0x30
 8001612:	f7fe fd9b 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<7)){ifkey(TOUCH5_TRIG);}else{ifkey(TOUCH5_RELEASE);}
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <Transmit_Touch_Data+0xe8>
 8001620:	2077      	movs	r0, #119	@ 0x77
 8001622:	f7fe fd93 	bl	800014c <ifkey>
 8001626:	e002      	b.n	800162e <Transmit_Touch_Data+0xee>
 8001628:	2078      	movs	r0, #120	@ 0x78
 800162a:	f7fe fd8f 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<8)){ifkey(TOUCH4_TRIG);}else{ifkey(TOUCH4_RELEASE);}
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <Transmit_Touch_Data+0x100>
 8001638:	2079      	movs	r0, #121	@ 0x79
 800163a:	f7fe fd87 	bl	800014c <ifkey>
 800163e:	e002      	b.n	8001646 <Transmit_Touch_Data+0x106>
 8001640:	207a      	movs	r0, #122	@ 0x7a
 8001642:	f7fe fd83 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<9)){ifkey(TOUCH3_TRIG);}else{ifkey(TOUCH3_RELEASE);}
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <Transmit_Touch_Data+0x118>
 8001650:	206f      	movs	r0, #111	@ 0x6f
 8001652:	f7fe fd7b 	bl	800014c <ifkey>
 8001656:	e002      	b.n	800165e <Transmit_Touch_Data+0x11e>
 8001658:	2070      	movs	r0, #112	@ 0x70
 800165a:	f7fe fd77 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<10)){ifkey(TOUCH2_TRIG);}else{ifkey(TOUCH2_RELEASE);}
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <Transmit_Touch_Data+0x130>
 8001668:	2071      	movs	r0, #113	@ 0x71
 800166a:	f7fe fd6f 	bl	800014c <ifkey>
 800166e:	e002      	b.n	8001676 <Transmit_Touch_Data+0x136>
 8001670:	2072      	movs	r0, #114	@ 0x72
 8001672:	f7fe fd6b 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<11)){ifkey(TOUCH1_TRIG);}else{ifkey(TOUCH1_RELEASE);}
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <Transmit_Touch_Data+0x148>
 8001680:	2067      	movs	r0, #103	@ 0x67
 8001682:	f7fe fd63 	bl	800014c <ifkey>
			break;
 8001686:	e0f5      	b.n	8001874 <Transmit_Touch_Data+0x334>
			if(data & ((uint16_t)0x01<<11)){ifkey(TOUCH1_TRIG);}else{ifkey(TOUCH1_RELEASE);}
 8001688:	2068      	movs	r0, #104	@ 0x68
 800168a:	f7fe fd5f 	bl	800014c <ifkey>
			break;
 800168e:	e0f1      	b.n	8001874 <Transmit_Touch_Data+0x334>
			
		case 0x5C<<1:
//			if(data & ((uint16_t)0x01<<0)){ifkey(TOUCH25_TRIG);}else{ifkey(TOUCH25_RELEASE);}
//			if(data & ((uint16_t)0x01<<1)){ifkey(TOUCH26_TRIG);}else{ifkey(TOUCH26_RELEASE);}
			if(data & ((uint16_t)0x01<<2)){ifkey(TOUCH31_TRIG);}else{ifkey(TOUCH31_RELEASE);}
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <Transmit_Touch_Data+0x162>
 800169a:	2031      	movs	r0, #49	@ 0x31
 800169c:	f7fe fd56 	bl	800014c <ifkey>
 80016a0:	e002      	b.n	80016a8 <Transmit_Touch_Data+0x168>
 80016a2:	2032      	movs	r0, #50	@ 0x32
 80016a4:	f7fe fd52 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<3)){ifkey(TOUCH32_TRIG);}else{ifkey(TOUCH32_RELEASE);}
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <Transmit_Touch_Data+0x17a>
 80016b2:	2011      	movs	r0, #17
 80016b4:	f7fe fd4a 	bl	800014c <ifkey>
 80016b8:	e002      	b.n	80016c0 <Transmit_Touch_Data+0x180>
 80016ba:	2012      	movs	r0, #18
 80016bc:	f7fe fd46 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<4)){ifkey(TOUCH29_TRIG);}else{ifkey(TOUCH29_RELEASE);}
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <Transmit_Touch_Data+0x192>
 80016ca:	2043      	movs	r0, #67	@ 0x43
 80016cc:	f7fe fd3e 	bl	800014c <ifkey>
 80016d0:	e002      	b.n	80016d8 <Transmit_Touch_Data+0x198>
 80016d2:	2044      	movs	r0, #68	@ 0x44
 80016d4:	f7fe fd3a 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<5)){ifkey(TOUCH30_TRIG);}else{ifkey(TOUCH30_RELEASE);}
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <Transmit_Touch_Data+0x1aa>
 80016e2:	203d      	movs	r0, #61	@ 0x3d
 80016e4:	f7fe fd32 	bl	800014c <ifkey>
 80016e8:	e002      	b.n	80016f0 <Transmit_Touch_Data+0x1b0>
 80016ea:	203e      	movs	r0, #62	@ 0x3e
 80016ec:	f7fe fd2e 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<6)){ifkey(TOUCH28_TRIG);}else{ifkey(TOUCH28_RELEASE);}
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <Transmit_Touch_Data+0x1c2>
 80016fa:	203f      	movs	r0, #63	@ 0x3f
 80016fc:	f7fe fd26 	bl	800014c <ifkey>
 8001700:	e002      	b.n	8001708 <Transmit_Touch_Data+0x1c8>
 8001702:	2040      	movs	r0, #64	@ 0x40
 8001704:	f7fe fd22 	bl	800014c <ifkey>
			if(data & ((uint16_t)0x01<<7)){ifkey(TOUCH27_TRIG);}else{ifkey(TOUCH27_RELEASE);}
 8001708:	89fb      	ldrh	r3, [r7, #14]
 800170a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <Transmit_Touch_Data+0x1da>
 8001712:	2035      	movs	r0, #53	@ 0x35
 8001714:	f7fe fd1a 	bl	800014c <ifkey>
 8001718:	e002      	b.n	8001720 <Transmit_Touch_Data+0x1e0>
 800171a:	2036      	movs	r0, #54	@ 0x36
 800171c:	f7fe fd16 	bl	800014c <ifkey>
			if((data & ((uint16_t)0x01<<8))){ifkey(TOUCH26_TRIG);}else{ifkey(TOUCH26_RELEASE);}
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <Transmit_Touch_Data+0x1f2>
 800172a:	2017      	movs	r0, #23
 800172c:	f7fe fd0e 	bl	800014c <ifkey>
 8001730:	e002      	b.n	8001738 <Transmit_Touch_Data+0x1f8>
 8001732:	2018      	movs	r0, #24
 8001734:	f7fe fd0a 	bl	800014c <ifkey>
			if((data & ((uint16_t)0x01<<9))){ifkey(TOUCH25_TRIG);}else{ifkey(TOUCH25_RELEASE);}
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <Transmit_Touch_Data+0x20a>
 8001742:	2019      	movs	r0, #25
 8001744:	f7fe fd02 	bl	800014c <ifkey>
//			if((data & ((uint16_t)0x01<<10))){ifkey(TOUCH23_TRIG);}else{ifkey(TOUCH23_RELEASE);}
//			if((data & ((uint16_t)0x01<<11))){ifkey(TOUCH24_TRIG);}else{ifkey(TOUCH24_RELEASE);}
			break;
 8001748:	e094      	b.n	8001874 <Transmit_Touch_Data+0x334>
			if((data & ((uint16_t)0x01<<9))){ifkey(TOUCH25_TRIG);}else{ifkey(TOUCH25_RELEASE);}
 800174a:	201a      	movs	r0, #26
 800174c:	f7fe fcfe 	bl	800014c <ifkey>
			break;
 8001750:	e090      	b.n	8001874 <Transmit_Touch_Data+0x334>

		case 0x5D<<1:
				if(data & ((uint16_t)0x01<<0)){ifkey(TOUCH23_TRIG);}else{ifkey(TOUCH23_RELEASE);}
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <Transmit_Touch_Data+0x224>
 800175c:	2015      	movs	r0, #21
 800175e:	f7fe fcf5 	bl	800014c <ifkey>
 8001762:	e002      	b.n	800176a <Transmit_Touch_Data+0x22a>
 8001764:	2016      	movs	r0, #22
 8001766:	f7fe fcf1 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<1)){ifkey(TOUCH24_TRIG);}else{ifkey(TOUCH24_RELEASE);}
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <Transmit_Touch_Data+0x23c>
 8001774:	2033      	movs	r0, #51	@ 0x33
 8001776:	f7fe fce9 	bl	800014c <ifkey>
 800177a:	e002      	b.n	8001782 <Transmit_Touch_Data+0x242>
 800177c:	2034      	movs	r0, #52	@ 0x34
 800177e:	f7fe fce5 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<2)){ifkey(TOUCH21_TRIG);}else{ifkey(TOUCH21_RELEASE);}
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <Transmit_Touch_Data+0x254>
 800178c:	201b      	movs	r0, #27
 800178e:	f7fe fcdd 	bl	800014c <ifkey>
 8001792:	e002      	b.n	800179a <Transmit_Touch_Data+0x25a>
 8001794:	201c      	movs	r0, #28
 8001796:	f7fe fcd9 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<3)){ifkey(TOUCH22_TRIG);}else{ifkey(TOUCH22_RELEASE);}
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <Transmit_Touch_Data+0x26c>
 80017a4:	203b      	movs	r0, #59	@ 0x3b
 80017a6:	f7fe fcd1 	bl	800014c <ifkey>
 80017aa:	e002      	b.n	80017b2 <Transmit_Touch_Data+0x272>
 80017ac:	203c      	movs	r0, #60	@ 0x3c
 80017ae:	f7fe fccd 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<4)){ifkey(TOUCH19_TRIG);}else{ifkey(TOUCH19_RELEASE);}
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <Transmit_Touch_Data+0x284>
 80017bc:	2037      	movs	r0, #55	@ 0x37
 80017be:	f7fe fcc5 	bl	800014c <ifkey>
 80017c2:	e002      	b.n	80017ca <Transmit_Touch_Data+0x28a>
 80017c4:	2038      	movs	r0, #56	@ 0x38
 80017c6:	f7fe fcc1 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<5)){ifkey(TOUCH20_TRIG);}else{ifkey(TOUCH20_RELEASE);}
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <Transmit_Touch_Data+0x29c>
 80017d4:	201d      	movs	r0, #29
 80017d6:	f7fe fcb9 	bl	800014c <ifkey>
 80017da:	e002      	b.n	80017e2 <Transmit_Touch_Data+0x2a2>
 80017dc:	201e      	movs	r0, #30
 80017de:	f7fe fcb5 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<6)){ifkey(TOUCH18_TRIG);}else{ifkey(TOUCH18_RELEASE);}
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <Transmit_Touch_Data+0x2b4>
 80017ec:	2041      	movs	r0, #65	@ 0x41
 80017ee:	f7fe fcad 	bl	800014c <ifkey>
 80017f2:	e002      	b.n	80017fa <Transmit_Touch_Data+0x2ba>
 80017f4:	2042      	movs	r0, #66	@ 0x42
 80017f6:	f7fe fca9 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<7)){ifkey(TOUCH17_TRIG);}else{ifkey(TOUCH17_RELEASE);}
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <Transmit_Touch_Data+0x2cc>
 8001804:	2013      	movs	r0, #19
 8001806:	f7fe fca1 	bl	800014c <ifkey>
 800180a:	e002      	b.n	8001812 <Transmit_Touch_Data+0x2d2>
 800180c:	2014      	movs	r0, #20
 800180e:	f7fe fc9d 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<8)){ifkey(TOUCH16_TRIG);}else{ifkey(TOUCH16_RELEASE);}
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <Transmit_Touch_Data+0x2e4>
 800181c:	202b      	movs	r0, #43	@ 0x2b
 800181e:	f7fe fc95 	bl	800014c <ifkey>
 8001822:	e002      	b.n	800182a <Transmit_Touch_Data+0x2ea>
 8001824:	202c      	movs	r0, #44	@ 0x2c
 8001826:	f7fe fc91 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<9)){ifkey(TOUCH15_TRIG);}else{ifkey(TOUCH15_RELEASE);}
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <Transmit_Touch_Data+0x2fc>
 8001834:	201f      	movs	r0, #31
 8001836:	f7fe fc89 	bl	800014c <ifkey>
 800183a:	e002      	b.n	8001842 <Transmit_Touch_Data+0x302>
 800183c:	2020      	movs	r0, #32
 800183e:	f7fe fc85 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<10)){ifkey(TOUCH14_TRIG);}else{ifkey(TOUCH14_RELEASE);}
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <Transmit_Touch_Data+0x314>
 800184c:	2023      	movs	r0, #35	@ 0x23
 800184e:	f7fe fc7d 	bl	800014c <ifkey>
 8001852:	e002      	b.n	800185a <Transmit_Touch_Data+0x31a>
 8001854:	2024      	movs	r0, #36	@ 0x24
 8001856:	f7fe fc79 	bl	800014c <ifkey>
				if(data & ((uint16_t)0x01<<11)){ifkey(TOUCH13_TRIG);}else{ifkey(TOUCH13_RELEASE);}
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <Transmit_Touch_Data+0x32c>
 8001864:	2039      	movs	r0, #57	@ 0x39
 8001866:	f7fe fc71 	bl	800014c <ifkey>
			break;
 800186a:	e002      	b.n	8001872 <Transmit_Touch_Data+0x332>
				if(data & ((uint16_t)0x01<<11)){ifkey(TOUCH13_TRIG);}else{ifkey(TOUCH13_RELEASE);}
 800186c:	203a      	movs	r0, #58	@ 0x3a
 800186e:	f7fe fc6d 	bl	800014c <ifkey>
			break;
 8001872:	bf00      	nop
	}
	extern USBD_HandleTypeDef hUsbDeviceFS;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report,sizeof(report));
 8001874:	220f      	movs	r2, #15
 8001876:	4904      	ldr	r1, [pc, #16]	@ (8001888 <Transmit_Touch_Data+0x348>)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <Transmit_Touch_Data+0x34c>)
 800187a:	f006 fc15 	bl	80080a8 <USBD_CUSTOM_HID_SendReport>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001a8 	.word	0x200001a8
 800188c:	20000214 	.word	0x20000214

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_GPIO_Init+0x58>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <MX_GPIO_Init+0x58>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6193      	str	r3, [r2, #24]
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <MX_GPIO_Init+0x58>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000

080018ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <MX_I2C1_Init+0x50>)
 80018f2:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <MX_I2C1_Init+0x54>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_I2C1_Init+0x50>)
 80018f8:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <MX_I2C1_Init+0x58>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_I2C1_Init+0x50>)
 800190a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800190e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <MX_I2C1_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_I2C1_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_I2C1_Init+0x50>)
 800192a:	f000 fc59 	bl	80021e0 <HAL_I2C_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001934:	f000 f8c6 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200001b8 	.word	0x200001b8
 8001940:	40005400 	.word	0x40005400
 8001944:	000186a0 	.word	0x000186a0

08001948 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a15      	ldr	r2, [pc, #84]	@ (80019b8 <HAL_I2C_MspInit+0x70>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d123      	bne.n	80019b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <HAL_I2C_MspInit+0x74>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <HAL_I2C_MspInit+0x74>)
 800196e:	f043 0308 	orr.w	r3, r3, #8
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_I2C_MspInit+0x74>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001980:	23c0      	movs	r3, #192	@ 0xc0
 8001982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001984:	2312      	movs	r3, #18
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <HAL_I2C_MspInit+0x78>)
 8001994:	f000 faa0 	bl	8001ed8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_I2C_MspInit+0x74>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_I2C_MspInit+0x74>)
 800199e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a2:	61d3      	str	r3, [r2, #28]
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_I2C_MspInit+0x74>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005400 	.word	0x40005400
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010c00 	.word	0x40010c00

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c8:	f000 f916 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019cc:	f000 f820 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d0:	f7ff ff5e 	bl	8001890 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019d4:	f7ff ff8a 	bl	80018ec <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80019d8:	f007 fcc6 	bl	8009368 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  mpr121_init(&mpr121_1);
 80019dc:	4809      	ldr	r0, [pc, #36]	@ (8001a04 <main+0x40>)
 80019de:	f7ff fc45 	bl	800126c <mpr121_init>
  mpr121_init(&mpr121_2);
 80019e2:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <main+0x44>)
 80019e4:	f7ff fc42 	bl	800126c <mpr121_init>
  mpr121_init(&mpr121_3);
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <main+0x48>)
 80019ea:	f7ff fc3f 	bl	800126c <mpr121_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Transmit_Touch_Data(&mpr121_1);
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <main+0x40>)
 80019f0:	f7ff fda6 	bl	8001540 <Transmit_Touch_Data>
	  Transmit_Touch_Data(&mpr121_2);
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <main+0x44>)
 80019f6:	f7ff fda3 	bl	8001540 <Transmit_Touch_Data>
	  Transmit_Touch_Data(&mpr121_3);
 80019fa:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <main+0x48>)
 80019fc:	f7ff fda0 	bl	8001540 <Transmit_Touch_Data>
	  Transmit_Touch_Data(&mpr121_1);
 8001a00:	bf00      	nop
 8001a02:	e7f4      	b.n	80019ee <main+0x2a>
 8001a04:	08009c04 	.word	0x08009c04
 8001a08:	08009c0c 	.word	0x08009c0c
 8001a0c:	08009c14 	.word	0x08009c14

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	@ 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a1a:	2228      	movs	r2, #40	@ 0x28
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f008 f888 	bl	8009b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a52:	2302      	movs	r3, #2
 8001a54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a5c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 f968 	bl	8004d3c <HAL_RCC_OscConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a72:	f000 f827 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a76:	230f      	movs	r3, #15
 8001a78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fbd4 	bl	8005240 <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a9e:	f000 f811 	bl	8001ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fd41 	bl	8005534 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001ab8:	f000 f804 	bl	8001ac4 <Error_Handler>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3750      	adds	r7, #80	@ 0x50
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <Error_Handler+0x8>

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_MspInit+0x5c>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <HAL_MspInit+0x5c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_MspInit+0x5c>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_MspInit+0x5c>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <HAL_MspInit+0x5c>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_MspInit+0x5c>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_MspInit+0x60>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <HAL_MspInit+0x60>)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <NMI_Handler+0x4>

08001b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 f87e 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b92:	f001 fca6 	bl	80034e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200006d8 	.word	0x200006d8

08001ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bac:	f7ff fff8 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bb2:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a09      	ldr	r2, [pc, #36]	@ (8001bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc8:	4c09      	ldr	r4, [pc, #36]	@ (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f007 ffb5 	bl	8009b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bda:	f7ff fef3 	bl	80019c4 <main>
  bx lr
 8001bde:	4770      	bx	lr
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001be8:	08009c50 	.word	0x08009c50
  ldr r2, =_sbss
 8001bec:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001bf0:	200009cc 	.word	0x200009cc

08001bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f923 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff ff5c 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f93b 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f903 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x1c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_IncTick+0x20>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a03      	ldr	r2, [pc, #12]	@ (8001ca4 <HAL_IncTick+0x20>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	2000020c 	.word	0x2000020c

08001ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b02      	ldr	r3, [pc, #8]	@ (8001cb8 <HAL_GetTick+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	2000020c 	.word	0x2000020c

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4906      	ldr	r1, [pc, #24]	@ (8001d54 <__NVIC_EnableIRQ+0x34>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	@ 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff42 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff35 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b08b      	sub	sp, #44	@ 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eea:	e169      	b.n	80021c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eec:	2201      	movs	r2, #1
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8158 	bne.w	80021ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a9a      	ldr	r2, [pc, #616]	@ (8002178 <HAL_GPIO_Init+0x2a0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d05e      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f14:	4a98      	ldr	r2, [pc, #608]	@ (8002178 <HAL_GPIO_Init+0x2a0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d875      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a98      	ldr	r2, [pc, #608]	@ (800217c <HAL_GPIO_Init+0x2a4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d058      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f20:	4a96      	ldr	r2, [pc, #600]	@ (800217c <HAL_GPIO_Init+0x2a4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d86f      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f26:	4a96      	ldr	r2, [pc, #600]	@ (8002180 <HAL_GPIO_Init+0x2a8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d052      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f2c:	4a94      	ldr	r2, [pc, #592]	@ (8002180 <HAL_GPIO_Init+0x2a8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d869      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f32:	4a94      	ldr	r2, [pc, #592]	@ (8002184 <HAL_GPIO_Init+0x2ac>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d04c      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f38:	4a92      	ldr	r2, [pc, #584]	@ (8002184 <HAL_GPIO_Init+0x2ac>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d863      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f3e:	4a92      	ldr	r2, [pc, #584]	@ (8002188 <HAL_GPIO_Init+0x2b0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d046      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
 8001f44:	4a90      	ldr	r2, [pc, #576]	@ (8002188 <HAL_GPIO_Init+0x2b0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d85d      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f4a:	2b12      	cmp	r3, #18
 8001f4c:	d82a      	bhi.n	8001fa4 <HAL_GPIO_Init+0xcc>
 8001f4e:	2b12      	cmp	r3, #18
 8001f50:	d859      	bhi.n	8002006 <HAL_GPIO_Init+0x12e>
 8001f52:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <HAL_GPIO_Init+0x80>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001fd3 	.word	0x08001fd3
 8001f5c:	08001fad 	.word	0x08001fad
 8001f60:	08001fbf 	.word	0x08001fbf
 8001f64:	08002001 	.word	0x08002001
 8001f68:	08002007 	.word	0x08002007
 8001f6c:	08002007 	.word	0x08002007
 8001f70:	08002007 	.word	0x08002007
 8001f74:	08002007 	.word	0x08002007
 8001f78:	08002007 	.word	0x08002007
 8001f7c:	08002007 	.word	0x08002007
 8001f80:	08002007 	.word	0x08002007
 8001f84:	08002007 	.word	0x08002007
 8001f88:	08002007 	.word	0x08002007
 8001f8c:	08002007 	.word	0x08002007
 8001f90:	08002007 	.word	0x08002007
 8001f94:	08002007 	.word	0x08002007
 8001f98:	08002007 	.word	0x08002007
 8001f9c:	08001fb5 	.word	0x08001fb5
 8001fa0:	08001fc9 	.word	0x08001fc9
 8001fa4:	4a79      	ldr	r2, [pc, #484]	@ (800218c <HAL_GPIO_Init+0x2b4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001faa:	e02c      	b.n	8002006 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e029      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e024      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e01f      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	330c      	adds	r3, #12
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e01a      	b.n	8002008 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e013      	b.n	8002008 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	611a      	str	r2, [r3, #16]
          break;
 8001ff2:	e009      	b.n	8002008 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	615a      	str	r2, [r3, #20]
          break;
 8001ffe:	e003      	b.n	8002008 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
          break;
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x130>
          break;
 8002006:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2bff      	cmp	r3, #255	@ 0xff
 800200c:	d801      	bhi.n	8002012 <HAL_GPIO_Init+0x13a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_Init+0x13e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2bff      	cmp	r3, #255	@ 0xff
 800201c:	d802      	bhi.n	8002024 <HAL_GPIO_Init+0x14c>
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x152>
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	3b08      	subs	r3, #8
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	210f      	movs	r1, #15
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	401a      	ands	r2, r3
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80b1 	beq.w	80021ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002058:	4b4d      	ldr	r3, [pc, #308]	@ (8002190 <HAL_GPIO_Init+0x2b8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <HAL_GPIO_Init+0x2b8>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <HAL_GPIO_Init+0x2b8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002070:	4a48      	ldr	r2, [pc, #288]	@ (8002194 <HAL_GPIO_Init+0x2bc>)
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a40      	ldr	r2, [pc, #256]	@ (8002198 <HAL_GPIO_Init+0x2c0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_GPIO_Init+0x1ec>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3f      	ldr	r2, [pc, #252]	@ (800219c <HAL_GPIO_Init+0x2c4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00d      	beq.n	80020c0 <HAL_GPIO_Init+0x1e8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3e      	ldr	r2, [pc, #248]	@ (80021a0 <HAL_GPIO_Init+0x2c8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <HAL_GPIO_Init+0x1e4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3d      	ldr	r2, [pc, #244]	@ (80021a4 <HAL_GPIO_Init+0x2cc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_GPIO_Init+0x1e0>
 80020b4:	2303      	movs	r3, #3
 80020b6:	e006      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020b8:	2304      	movs	r3, #4
 80020ba:	e004      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020bc:	2302      	movs	r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020c4:	2300      	movs	r3, #0
 80020c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c8:	f002 0203 	and.w	r2, r2, #3
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	4093      	lsls	r3, r2
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020d6:	492f      	ldr	r1, [pc, #188]	@ (8002194 <HAL_GPIO_Init+0x2bc>)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020f0:	4b2d      	ldr	r3, [pc, #180]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	492c      	ldr	r1, [pc, #176]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020fe:	4b2a      	ldr	r3, [pc, #168]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	43db      	mvns	r3, r3
 8002106:	4928      	ldr	r1, [pc, #160]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002108:	4013      	ands	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002118:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4922      	ldr	r1, [pc, #136]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	43db      	mvns	r3, r3
 800212e:	491e      	ldr	r1, [pc, #120]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002130:	4013      	ands	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002140:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4918      	ldr	r1, [pc, #96]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	43db      	mvns	r3, r3
 8002156:	4914      	ldr	r1, [pc, #80]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 8002158:	4013      	ands	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d021      	beq.n	80021ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	490e      	ldr	r1, [pc, #56]	@ (80021a8 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e021      	b.n	80021ba <HAL_GPIO_Init+0x2e2>
 8002176:	bf00      	nop
 8002178:	10320000 	.word	0x10320000
 800217c:	10310000 	.word	0x10310000
 8002180:	10220000 	.word	0x10220000
 8002184:	10210000 	.word	0x10210000
 8002188:	10120000 	.word	0x10120000
 800218c:	10110000 	.word	0x10110000
 8002190:	40021000 	.word	0x40021000
 8002194:	40010000 	.word	0x40010000
 8002198:	40010800 	.word	0x40010800
 800219c:	40010c00 	.word	0x40010c00
 80021a0:	40011000 	.word	0x40011000
 80021a4:	40011400 	.word	0x40011400
 80021a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_GPIO_Init+0x304>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4909      	ldr	r1, [pc, #36]	@ (80021dc <HAL_GPIO_Init+0x304>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	3301      	adds	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f47f ae8e 	bne.w	8001eec <HAL_GPIO_Init+0x14>
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	372c      	adds	r7, #44	@ 0x2c
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12b      	b.n	800244a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fb9e 	bl	8001948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	@ 0x24
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002244:	f003 f944 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a81      	ldr	r2, [pc, #516]	@ (8002454 <HAL_I2C_Init+0x274>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d807      	bhi.n	8002264 <HAL_I2C_Init+0x84>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a80      	ldr	r2, [pc, #512]	@ (8002458 <HAL_I2C_Init+0x278>)
 8002258:	4293      	cmp	r3, r2
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e006      	b.n	8002272 <HAL_I2C_Init+0x92>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a7d      	ldr	r2, [pc, #500]	@ (800245c <HAL_I2C_Init+0x27c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	bf94      	ite	ls
 800226c:	2301      	movls	r3, #1
 800226e:	2300      	movhi	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0e7      	b.n	800244a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a78      	ldr	r2, [pc, #480]	@ (8002460 <HAL_I2C_Init+0x280>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002454 <HAL_I2C_Init+0x274>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d802      	bhi.n	80022b4 <HAL_I2C_Init+0xd4>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e009      	b.n	80022c8 <HAL_I2C_Init+0xe8>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	4a69      	ldr	r2, [pc, #420]	@ (8002464 <HAL_I2C_Init+0x284>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	3301      	adds	r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	495c      	ldr	r1, [pc, #368]	@ (8002454 <HAL_I2C_Init+0x274>)
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d819      	bhi.n	800231c <HAL_I2C_Init+0x13c>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e59      	subs	r1, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f6:	1c59      	adds	r1, r3, #1
 80022f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_I2C_Init+0x138>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e59      	subs	r1, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	e051      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002318:	2304      	movs	r3, #4
 800231a:	e04f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_I2C_Init+0x168>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e012      	b.n	800236e <HAL_I2C_Init+0x18e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	0099      	lsls	r1, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Init+0x196>
 8002372:	2301      	movs	r3, #1
 8002374:	e022      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10e      	bne.n	800239c <HAL_I2C_Init+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e58      	subs	r0, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	440b      	add	r3, r1
 800238c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	6809      	ldr	r1, [r1, #0]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6911      	ldr	r1, [r2, #16]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	000186a0 	.word	0x000186a0
 8002458:	001e847f 	.word	0x001e847f
 800245c:	003d08ff 	.word	0x003d08ff
 8002460:	431bde83 	.word	0x431bde83
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002482:	f7ff fc11 	bl	8001ca8 <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 80d9 	bne.w	8002648 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	496d      	ldr	r1, [pc, #436]	@ (8002654 <HAL_I2C_Mem_Write+0x1ec>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fccd 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0cc      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Write+0x56>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0c5      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2221      	movs	r2, #33	@ 0x21
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a4d      	ldr	r2, [pc, #308]	@ (8002658 <HAL_I2C_Mem_Write+0x1f0>)
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fb04 	bl	8002b44 <I2C_RequestMemoryWrite>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d052      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e081      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fd92 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	2b04      	cmp	r3, #4
 800255c:	d107      	bne.n	800256e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x180>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1aa      	bne.n	8002546 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fd85 	bl	8003104 <I2C_WaitOnBTFFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	2b04      	cmp	r3, #4
 8002606:	d107      	bne.n	8002618 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002616:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e016      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000

0800265c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4603      	mov	r3, r0
 800266c:	817b      	strh	r3, [r7, #10]
 800266e:	460b      	mov	r3, r1
 8002670:	813b      	strh	r3, [r7, #8]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800267a:	f7ff fb15 	bl	8001ca8 <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b20      	cmp	r3, #32
 800268a:	f040 8250 	bne.w	8002b2e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2319      	movs	r3, #25
 8002694:	2201      	movs	r2, #1
 8002696:	4982      	ldr	r1, [pc, #520]	@ (80028a0 <HAL_I2C_Mem_Read+0x244>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fbd1 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
 80026a6:	e243      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_Mem_Read+0x5a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e23c      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d007      	beq.n	80026dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2222      	movs	r2, #34	@ 0x22
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800270c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a62      	ldr	r2, [pc, #392]	@ (80028a4 <HAL_I2C_Mem_Read+0x248>)
 800271c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800271e:	88f8      	ldrh	r0, [r7, #6]
 8002720:	893a      	ldrh	r2, [r7, #8]
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4603      	mov	r3, r0
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa9e 	bl	8002c70 <I2C_RequestMemoryRead>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1f8      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d113      	bne.n	800276e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e1cc      	b.n	8002b08 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	2b01      	cmp	r3, #1
 8002774:	d11e      	bne.n	80027b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002784:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002786:	b672      	cpsid	i
}
 8002788:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027b0:	b662      	cpsie	i
}
 80027b2:	e035      	b.n	8002820 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d11e      	bne.n	80027fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027f6:	b662      	cpsie	i
}
 80027f8:	e012      	b.n	8002820 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002808:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002820:	e172      	b.n	8002b08 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	2b03      	cmp	r3, #3
 8002828:	f200 811f 	bhi.w	8002a6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	2b01      	cmp	r3, #1
 8002832:	d123      	bne.n	800287c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002836:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fcab 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e173      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800287a:	e145      	b.n	8002b08 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	2b02      	cmp	r3, #2
 8002882:	d152      	bne.n	800292a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288a:	2200      	movs	r2, #0
 800288c:	4906      	ldr	r1, [pc, #24]	@ (80028a8 <HAL_I2C_Mem_Read+0x24c>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fad6 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e148      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
 800289e:	bf00      	nop
 80028a0:	00100002 	.word	0x00100002
 80028a4:	ffff0000 	.word	0xffff0000
 80028a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028ac:	b672      	cpsid	i
}
 80028ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028f2:	b662      	cpsie	i
}
 80028f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002928:	e0ee      	b.n	8002b08 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	2200      	movs	r2, #0
 8002932:	4981      	ldr	r1, [pc, #516]	@ (8002b38 <HAL_I2C_Mem_Read+0x4dc>)
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fa83 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0f5      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002954:	b672      	cpsid	i
}
 8002956:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800298a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b3c <HAL_I2C_Mem_Read+0x4e0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	08db      	lsrs	r3, r3, #3
 8002990:	4a6b      	ldr	r2, [pc, #428]	@ (8002b40 <HAL_I2C_Mem_Read+0x4e4>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0a1a      	lsrs	r2, r3, #8
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00da      	lsls	r2, r3, #3
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d118      	bne.n	80029e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029d2:	b662      	cpsie	i
}
 80029d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0a6      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d1d9      	bne.n	80029a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a32:	b662      	cpsie	i
}
 8002a34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a68:	e04e      	b.n	8002b08 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fb90 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e058      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d124      	bne.n	8002b08 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d107      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f ae88 	bne.w	8002822 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3728      	adds	r7, #40	@ 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	00010004 	.word	0x00010004
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	14f8b589 	.word	0x14f8b589

08002b44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	460b      	mov	r3, r1
 8002b58:	813b      	strh	r3, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f960 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b94:	d103      	bne.n	8002b9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e05f      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	492d      	ldr	r1, [pc, #180]	@ (8002c6c <I2C_RequestMemoryWrite+0x128>)
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f9bb 	bl	8002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e04c      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa46 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e02b      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c10:	893b      	ldrh	r3, [r7, #8]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e021      	b.n	8002c60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fa20 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e005      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	00010002 	.word	0x00010002

08002c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	460b      	mov	r3, r1
 8002c84:	813b      	strh	r3, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f8c2 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd0:	d103      	bne.n	8002cda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0aa      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	4952      	ldr	r1, [pc, #328]	@ (8002e3c <I2C_RequestMemoryRead+0x1cc>)
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f91d 	bl	8002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e097      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f9a8 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e076      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	e021      	b.n	8002d9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	6a39      	ldr	r1, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f982 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d107      	bne.n	8002d8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e050      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9e:	6a39      	ldr	r1, [r7, #32]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f967 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e035      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f82b 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00d      	beq.n	8002e0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dfe:	d103      	bne.n	8002e08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e013      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e0c:	897b      	ldrh	r3, [r7, #10]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	4906      	ldr	r1, [pc, #24]	@ (8002e3c <I2C_RequestMemoryRead+0x1cc>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f886 	bl	8002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	00010002 	.word	0x00010002

08002e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e50:	e048      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d044      	beq.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe ff25 	bl	8001ca8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d139      	bne.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10d      	bne.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	e00c      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d116      	bne.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e023      	b.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10d      	bne.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	e00c      	b.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d093      	beq.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f42:	e071      	b.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f52:	d123      	bne.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e067      	b.n	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d041      	beq.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fe fe80 	bl	8001ca8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d136      	bne.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10c      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bf14      	ite	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	2300      	moveq	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e00b      	b.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e021      	b.n	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10c      	bne.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	43da      	mvns	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4013      	ands	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e00b      	b.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f af6d 	bne.w	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003080:	e034      	b.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8e3 	bl	800324e <I2C_IsAcknowledgeFailed>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e034      	b.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d028      	beq.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe fe05 	bl	8001ca8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11d      	bne.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b80      	cmp	r3, #128	@ 0x80
 80030bc:	d016      	beq.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e007      	b.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d1c3      	bne.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003110:	e034      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f89b 	bl	800324e <I2C_IsAcknowledgeFailed>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e034      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d028      	beq.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe fdbd 	bl	8001ca8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11d      	bne.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d016      	beq.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d1c3      	bne.n	8003112 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	e049      	b.n	8003236 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d119      	bne.n	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0210 	mvn.w	r2, #16
 80031b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e030      	b.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fd60 	bl	8001ca8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d016      	beq.n	8003236 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e007      	b.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b40      	cmp	r3, #64	@ 0x40
 8003242:	d1ae      	bne.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003264:	d11b      	bne.n	800329e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0e8      	b.n	800348e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f006 f9a3 	bl	800961c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2203      	movs	r2, #3
 80032da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 f9fc 	bl	80056e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f8:	f002 f9d2 	bl	80056a0 <USB_CoreInit>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0bf      	b.n	800348e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f002 fa00 	bl	800571a <USB_SetCurrentMode>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b0      	b.n	800348e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e03e      	b.n	80033b0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	3311      	adds	r3, #17
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	3310      	adds	r3, #16
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	3313      	adds	r3, #19
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3320      	adds	r3, #32
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	3324      	adds	r3, #36	@ 0x24
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	3301      	adds	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	791b      	ldrb	r3, [r3, #4]
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d3bb      	bcc.n	8003332 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e044      	b.n	800344a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	3301      	adds	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	791b      	ldrb	r3, [r3, #4]
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	429a      	cmp	r2, r3
 8003452:	d3b5      	bcc.n	80033c0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345e:	f002 f968 	bl	8005732 <USB_DevInit>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e00c      	b.n	800348e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 fbe7 	bl	8007c5a <USB_DevDisconnect>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_PCD_Start+0x16>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e016      	b.n	80034da <HAL_PCD_Start+0x44>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 f8fe 	bl	80056ba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80034be:	2101      	movs	r1, #1
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f006 fb00 	bl	8009ac6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f004 fbbb 	bl	8007c46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b088      	sub	sp, #32
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f004 fbbd 	bl	8007c6e <USB_ReadInterrupts>
 80034f4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fb03 	bl	8003b0c <PCD_EP_ISR_Handler>

    return;
 8003506:	e119      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d013      	beq.n	800353a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003524:	b292      	uxth	r2, r2
 8003526:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f006 f8f1 	bl	8009712 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003530:	2100      	movs	r1, #0
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f905 	bl	8003742 <HAL_PCD_SetAddress>

    return;
 8003538:	e100      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003556:	b292      	uxth	r2, r2
 8003558:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800355c:	e0ee      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00c      	beq.n	8003582 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800357a:	b292      	uxth	r2, r2
 800357c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003580:	e0dc      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d027      	beq.n	80035dc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003594:	b29a      	uxth	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	b292      	uxth	r2, r2
 80035a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0208 	bic.w	r2, r2, #8
 80035b6:	b292      	uxth	r2, r2
 80035b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f006 f8e1 	bl	8009784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035d4:	b292      	uxth	r2, r2
 80035d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035da:	e0af      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8083 	beq.w	80036ee <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e010      	b.n	8003610 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	b292      	uxth	r2, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	3320      	adds	r3, #32
 8003604:	443b      	add	r3, r7
 8003606:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800360a:	7ffb      	ldrb	r3, [r7, #31]
 800360c:	3301      	adds	r3, #1
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	7ffb      	ldrb	r3, [r7, #31]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d9eb      	bls.n	80035ee <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	b292      	uxth	r2, r2
 800362a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	b292      	uxth	r2, r2
 8003642:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003646:	bf00      	nop
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003650:	b29b      	uxth	r3, r3
 8003652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f6      	beq.n	8003648 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366c:	b292      	uxth	r2, r2
 800366e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e00f      	b.n	8003698 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003678:	7ffb      	ldrb	r3, [r7, #31]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	4611      	mov	r1, r2
 8003680:	7ffa      	ldrb	r2, [r7, #31]
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	440a      	add	r2, r1
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	3320      	adds	r3, #32
 800368a:	443b      	add	r3, r7
 800368c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003690:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	3301      	adds	r3, #1
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	7ffb      	ldrb	r3, [r7, #31]
 800369a:	2b07      	cmp	r3, #7
 800369c:	d9ec      	bls.n	8003678 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0208 	orr.w	r2, r2, #8
 80036b0:	b292      	uxth	r2, r2
 80036b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c8:	b292      	uxth	r2, r2
 80036ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0204 	orr.w	r2, r2, #4
 80036e0:	b292      	uxth	r2, r2
 80036e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f006 f832 	bl	8009750 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036ec:	e026      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00f      	beq.n	8003718 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800370a:	b292      	uxth	r2, r2
 800370c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f005 fff0 	bl	80096f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003716:	e011      	b.n	800373c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800373a:	bf00      	nop
  }
}
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_PCD_SetAddress+0x1a>
 8003758:	2302      	movs	r3, #2
 800375a:	e012      	b.n	8003782 <HAL_PCD_SetAddress+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f004 fa54 	bl	8007c20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	4608      	mov	r0, r1
 8003794:	4611      	mov	r1, r2
 8003796:	461a      	mov	r2, r3
 8003798:	4603      	mov	r3, r0
 800379a:	70fb      	strb	r3, [r7, #3]
 800379c:	460b      	mov	r3, r1
 800379e:	803b      	strh	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da0e      	bge.n	80037ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 0207 	and.w	r2, r3, #7
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	3310      	adds	r3, #16
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	705a      	strb	r2, [r3, #1]
 80037cc:	e00e      	b.n	80037ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 0207 	and.w	r2, r3, #7
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037f8:	883a      	ldrh	r2, [r7, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	78ba      	ldrb	r2, [r7, #2]
 8003802:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003804:	78bb      	ldrb	r3, [r7, #2]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d102      	bne.n	8003810 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_PCD_EP_Open+0x94>
 800381a:	2302      	movs	r3, #2
 800381c:	e00e      	b.n	800383c <HAL_PCD_EP_Open+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	4618      	mov	r0, r3
 800382e:	f001 ff9d 	bl	800576c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800383a:	7afb      	ldrb	r3, [r7, #11]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003854:	2b00      	cmp	r3, #0
 8003856:	da0e      	bge.n	8003876 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 0207 	and.w	r2, r3, #7
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	3310      	adds	r3, #16
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	705a      	strb	r2, [r3, #1]
 8003874:	e00e      	b.n	8003894 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 0207 	and.w	r2, r3, #7
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_PCD_EP_Close+0x6a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e00e      	b.n	80038cc <HAL_PCD_EP_Close+0x88>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	4618      	mov	r0, r3
 80038be:	f002 fb15 	bl	8005eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	460b      	mov	r3, r1
 80038e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003914:	7afb      	ldrb	r3, [r7, #11]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	b2da      	uxtb	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6979      	ldr	r1, [r7, #20]
 8003926:	4618      	mov	r0, r3
 8003928:	f002 fccc 	bl	80062c4 <USB_EPStartXfer>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	460b      	mov	r3, r1
 8003944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003946:	7afb      	ldrb	r3, [r7, #11]
 8003948:	f003 0207 	and.w	r2, r3, #7
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	3310      	adds	r3, #16
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2201      	movs	r2, #1
 8003980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003982:	7afb      	ldrb	r3, [r7, #11]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	b2da      	uxtb	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	4618      	mov	r0, r3
 8003996:	f002 fc95 	bl	80062c4 <USB_EPStartXfer>

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	7912      	ldrb	r2, [r2, #4]
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e04c      	b.n	8003a5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da0e      	bge.n	80039e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	f003 0207 	and.w	r2, r3, #7
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	3310      	adds	r3, #16
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
 80039e6:	e00c      	b.n	8003a02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_PCD_EP_SetStall+0x7e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e01c      	b.n	8003a5c <HAL_PCD_EP_SetStall+0xb8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 fff8 	bl	8007a26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f004 f91d 	bl	8007c8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	7912      	ldrb	r2, [r2, #4]
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e040      	b.n	8003b04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da0e      	bge.n	8003aa8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 0207 	and.w	r2, r3, #7
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	3310      	adds	r3, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	705a      	strb	r2, [r3, #1]
 8003aa6:	e00e      	b.n	8003ac6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 0207 	and.w	r2, r3, #7
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_PCD_EP_ClrStall+0x82>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e00e      	b.n	8003b04 <HAL_PCD_EP_ClrStall+0xa0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 ffe6 	bl	8007ac6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b096      	sub	sp, #88	@ 0x58
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b14:	e3bb      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003b30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 8175 	bne.w	8003e24 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d14e      	bne.n	8003be4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b56:	81fb      	strh	r3, [r7, #14]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	3302      	adds	r3, #2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003baa:	2100      	movs	r1, #0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f005 fd88 	bl	80096c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7b5b      	ldrb	r3, [r3, #13]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8368 	beq.w	800428e <PCD_EP_ISR_Handler+0x782>
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 8363 	bne.w	800428e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7b5b      	ldrb	r3, [r3, #13]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	735a      	strb	r2, [r3, #13]
 8003be2:	e354      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bf6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d034      	beq.n	8003c6c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	3306      	adds	r3, #6
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f004 f873 	bl	8007d2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c52:	4013      	ands	r3, r2
 8003c54:	823b      	strh	r3, [r7, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	8a3a      	ldrh	r2, [r7, #16]
 8003c5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f005 fcff 	bl	8009668 <HAL_PCD_SetupStageCallback>
 8003c6a:	e310      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f280 830c 	bge.w	800428e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c82:	4013      	ands	r3, r2
 8003c84:	83fb      	strh	r3, [r7, #30]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	8bfa      	ldrh	r2, [r7, #30]
 8003c8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c90:	b292      	uxth	r2, r2
 8003c92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3306      	adds	r3, #6
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d019      	beq.n	8003cfc <PCD_EP_ISR_Handler+0x1f0>
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd6:	6959      	ldr	r1, [r3, #20]
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cde:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f004 f823 	bl	8007d2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	441a      	add	r2, r3
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f005 fcc8 	bl	800968c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 82bd 	bne.w	800428e <PCD_EP_ISR_Handler+0x782>
 8003d14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d18:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d20:	f000 82b5 	beq.w	800428e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d5a:	d91d      	bls.n	8003d98 <PCD_EP_ISR_Handler+0x28c>
 8003d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <PCD_EP_ISR_Handler+0x26a>
 8003d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d72:	3b01      	subs	r3, #1
 8003d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	029b      	lsls	r3, r3, #10
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	e026      	b.n	8003de6 <PCD_EP_ISR_Handler+0x2da>
 8003d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <PCD_EP_ISR_Handler+0x2aa>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e017      	b.n	8003de6 <PCD_EP_ISR_Handler+0x2da>
 8003db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <PCD_EP_ISR_Handler+0x2c4>
 8003dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dcc:	3301      	adds	r3, #1
 8003dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	827b      	strh	r3, [r7, #18]
 8003df8:	8a7b      	ldrh	r3, [r7, #18]
 8003dfa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003dfe:	827b      	strh	r3, [r7, #18]
 8003e00:	8a7b      	ldrh	r3, [r7, #18]
 8003e02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e06:	827b      	strh	r3, [r7, #18]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	8a7b      	ldrh	r3, [r7, #18]
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
 8003e22:	e234      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e38:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f280 80fc 	bge.w	800403a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e58:	4013      	ands	r3, r2
 8003e5a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003e70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e74:	b292      	uxth	r2, r2
 8003e76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e78:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e90:	7b1b      	ldrb	r3, [r3, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d125      	bne.n	8003ee2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3306      	adds	r3, #6
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ebe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003ec2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8092 	beq.w	8003ff0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed2:	6959      	ldr	r1, [r3, #20]
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	88da      	ldrh	r2, [r3, #6]
 8003ed8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003edc:	f003 ff26 	bl	8007d2c <USB_ReadPMA>
 8003ee0:	e086      	b.n	8003ff0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee4:	78db      	ldrb	r3, [r3, #3]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d10a      	bne.n	8003f00 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003eea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9d9 	bl	80042aa <HAL_PCD_EP_DB_Receive>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003efe:	e077      	b.n	8003ff0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d024      	beq.n	8003fa8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	3302      	adds	r3, #2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02e      	beq.n	8003ff0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	6959      	ldr	r1, [r3, #20]
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9c:	891a      	ldrh	r2, [r3, #8]
 8003f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fa2:	f003 fec3 	bl	8007d2c <USB_ReadPMA>
 8003fa6:	e023      	b.n	8003ff0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	3306      	adds	r3, #6
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	6959      	ldr	r1, [r3, #20]
 8003fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe6:	895a      	ldrh	r2, [r3, #10]
 8003fe8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fec:	f003 fe9e 	bl	8007d2c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ff8:	441a      	add	r2, r3
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004006:	441a      	add	r2, r3
 8004008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <PCD_EP_ISR_Handler+0x514>
 8004014:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d206      	bcs.n	800402e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f005 fb30 	bl	800968c <HAL_PCD_DataOutStageCallback>
 800402c:	e005      	b.n	800403a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004034:	4618      	mov	r0, r3
 8004036:	f002 f945 	bl	80062c4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800403a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8123 	beq.w	800428e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004048:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3310      	adds	r3, #16
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004076:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800408c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004094:	b29b      	uxth	r3, r3
 8004096:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409a:	78db      	ldrb	r3, [r3, #3]
 800409c:	2b01      	cmp	r3, #1
 800409e:	f040 80a2 	bne.w	80041e6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80040a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040aa:	7b1b      	ldrb	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8093 	beq.w	80041d8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d046      	beq.n	800414c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d126      	bne.n	8004114 <PCD_EP_ISR_Handler+0x608>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	4413      	add	r3, r2
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	011a      	lsls	r2, r3, #4
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	4413      	add	r3, r2
 80040e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040ec:	623b      	str	r3, [r7, #32]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	801a      	strh	r2, [r3, #0]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410c:	b29a      	uxth	r2, r3
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	e061      	b.n	80041d8 <PCD_EP_ISR_Handler+0x6cc>
 8004114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d15d      	bne.n	80041d8 <PCD_EP_ISR_Handler+0x6cc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	4413      	add	r3, r2
 8004132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413c:	4413      	add	r3, r2
 800413e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	2200      	movs	r2, #0
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	e045      	b.n	80041d8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d126      	bne.n	80041a8 <PCD_EP_ISR_Handler+0x69c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	4413      	add	r3, r2
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
 8004172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	011a      	lsls	r2, r3, #4
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	4413      	add	r3, r2
 800417c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418c:	b29a      	uxth	r2, r3
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	e017      	b.n	80041d8 <PCD_EP_ISR_Handler+0x6cc>
 80041a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d113      	bne.n	80041d8 <PCD_EP_ISR_Handler+0x6cc>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041be:	4413      	add	r3, r2
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f005 fa6f 	bl	80096c2 <HAL_PCD_DataInStageCallback>
 80041e4:	e053      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80041e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d146      	bne.n	8004280 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	3302      	adds	r3, #2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004226:	429a      	cmp	r2, r3
 8004228:	d907      	bls.n	800423a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800422a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	e002      	b.n	8004240 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f005 fa37 	bl	80096c2 <HAL_PCD_DataInStageCallback>
 8004254:	e01b      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800425e:	441a      	add	r2, r3
 8004260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004262:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800426c:	441a      	add	r2, r3
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004278:	4618      	mov	r0, r3
 800427a:	f002 f823 	bl	80062c4 <USB_EPStartXfer>
 800427e:	e006      	b.n	800428e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004280:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004284:	461a      	mov	r2, r3
 8004286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f91b 	bl	80044c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004296:	b29b      	uxth	r3, r3
 8004298:	b21b      	sxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	f6ff ac3b 	blt.w	8003b16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3758      	adds	r7, #88	@ 0x58
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b088      	sub	sp, #32
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d07e      	beq.n	80043c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	3302      	adds	r3, #2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	8b7b      	ldrh	r3, [r7, #26]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d306      	bcc.n	8004304 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	8b7b      	ldrh	r3, [r7, #26]
 80042fc:	1ad2      	subs	r2, r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	619a      	str	r2, [r3, #24]
 8004302:	e002      	b.n	800430a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d123      	bne.n	800435a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432c:	833b      	strh	r3, [r7, #24]
 800432e:	8b3b      	ldrh	r3, [r7, #24]
 8004330:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004334:	833b      	strh	r3, [r7, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	8b3b      	ldrh	r3, [r7, #24]
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01f      	beq.n	80043a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800437a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437e:	82fb      	strh	r3, [r7, #22]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	8afb      	ldrh	r3, [r7, #22]
 8004390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800439c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043a4:	8b7b      	ldrh	r3, [r7, #26]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8087 	beq.w	80044ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6959      	ldr	r1, [r3, #20]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	891a      	ldrh	r2, [r3, #8]
 80043b8:	8b7b      	ldrh	r3, [r7, #26]
 80043ba:	f003 fcb7 	bl	8007d2c <USB_ReadPMA>
 80043be:	e07c      	b.n	80044ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	3306      	adds	r3, #6
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	8b7b      	ldrh	r3, [r7, #26]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d306      	bcc.n	8004402 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	1ad2      	subs	r2, r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	619a      	str	r2, [r3, #24]
 8004400:	e002      	b.n	8004408 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d123      	bne.n	8004458 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442a:	83fb      	strh	r3, [r7, #30]
 800442c:	8bfb      	ldrh	r3, [r7, #30]
 800442e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004432:	83fb      	strh	r3, [r7, #30]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	8bfb      	ldrh	r3, [r7, #30]
 8004444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800444c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004454:	b29b      	uxth	r3, r3
 8004456:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11f      	bne.n	80044a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447c:	83bb      	strh	r3, [r7, #28]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	8bbb      	ldrh	r3, [r7, #28]
 800448e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800449a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044a2:	8b7b      	ldrh	r3, [r7, #26]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6959      	ldr	r1, [r3, #20]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	895a      	ldrh	r2, [r3, #10]
 80044b4:	8b7b      	ldrh	r3, [r7, #26]
 80044b6:	f003 fc39 	bl	8007d2c <USB_ReadPMA>
    }
  }

  return count;
 80044ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b0a4      	sub	sp, #144	@ 0x90
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 81dd 	beq.w	8004898 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	3302      	adds	r3, #2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004506:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004512:	429a      	cmp	r2, r3
 8004514:	d907      	bls.n	8004526 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	619a      	str	r2, [r3, #24]
 8004524:	e002      	b.n	800452c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 80b9 	bne.w	80046a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	785b      	ldrb	r3, [r3, #1]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d126      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0xc8>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	4413      	add	r3, r2
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	011a      	lsls	r2, r3, #4
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	4413      	add	r3, r2
 8004560:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004570:	b29a      	uxth	r2, r3
 8004572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29a      	uxth	r2, r3
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e01a      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d116      	bne.n	80045c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a8:	4413      	add	r3, r2
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	011a      	lsls	r2, r3, #4
 80045b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b4:	4413      	add	r3, r2
 80045b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	2200      	movs	r2, #0
 80045c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d126      	bne.n	800461e <HAL_PCD_EP_DB_Transmit+0x15a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	011a      	lsls	r2, r3, #4
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004602:	b29a      	uxth	r2, r3
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004616:	b29a      	uxth	r2, r3
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e017      	b.n	800464e <HAL_PCD_EP_DB_Transmit+0x18a>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d113      	bne.n	800464e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800462e:	b29b      	uxth	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	4413      	add	r3, r2
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	011a      	lsls	r2, r3, #4
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	4413      	add	r3, r2
 8004642:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	2200      	movs	r2, #0
 800464c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f005 f834 	bl	80096c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 82fc 	beq.w	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004680:	82fb      	strh	r3, [r7, #22]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	8afb      	ldrh	r3, [r7, #22]
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800469a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800469e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
 80046a6:	e2da      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d021      	beq.n	80046f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f040 82ae 	bne.w	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800470a:	441a      	add	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004718:	441a      	add	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	d30b      	bcc.n	8004742 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	621a      	str	r2, [r3, #32]
 8004740:	e017      	b.n	8004772 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d108      	bne.n	800475c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800474a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800474e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800475a:	e00a      	b.n	8004772 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d165      	bne.n	8004846 <HAL_PCD_EP_DB_Transmit+0x382>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478e:	4413      	add	r3, r2
 8004790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	011a      	lsls	r2, r3, #4
 8004798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479a:	4413      	add	r3, r2
 800479c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80047b8:	d91d      	bls.n	80047f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80047ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x310>
 80047ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d0:	3b01      	subs	r3, #1
 80047d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047dc:	b29b      	uxth	r3, r3
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e044      	b.n	8004880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_PCD_EP_DB_Transmit+0x350>
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480c:	b29a      	uxth	r2, r3
 800480e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e035      	b.n	8004880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800481c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_PCD_EP_DB_Transmit+0x36a>
 8004828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482a:	3301      	adds	r3, #1
 800482c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29a      	uxth	r2, r3
 8004834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004836:	b29b      	uxth	r3, r3
 8004838:	029b      	lsls	r3, r3, #10
 800483a:	b29b      	uxth	r3, r3
 800483c:	4313      	orrs	r3, r2
 800483e:	b29a      	uxth	r2, r3
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	e01c      	b.n	8004880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d118      	bne.n	8004880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	647b      	str	r3, [r7, #68]	@ 0x44
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	4413      	add	r3, r2
 8004864:	647b      	str	r3, [r7, #68]	@ 0x44
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	011a      	lsls	r2, r3, #4
 800486c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800486e:	4413      	add	r3, r2
 8004870:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004874:	643b      	str	r3, [r7, #64]	@ 0x40
 8004876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487a:	b29a      	uxth	r2, r3
 800487c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800487e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6959      	ldr	r1, [r3, #20]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	891a      	ldrh	r2, [r3, #8]
 800488c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004890:	b29b      	uxth	r3, r3
 8004892:	f003 fa06 	bl	8007ca2 <USB_WritePMA>
 8004896:	e1e2      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	3306      	adds	r3, #6
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d307      	bcc.n	80048e0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	619a      	str	r2, [r3, #24]
 80048de:	e002      	b.n	80048e6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 80c0 	bne.w	8004a70 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d126      	bne.n	8004946 <HAL_PCD_EP_DB_Transmit+0x482>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800490c:	4413      	add	r3, r2
 800490e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	011a      	lsls	r2, r3, #4
 8004916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004918:	4413      	add	r3, r2
 800491a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800491e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492a:	b29a      	uxth	r2, r3
 800492c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493e:	b29a      	uxth	r2, r3
 8004940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e01a      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d116      	bne.n	800497c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	667b      	str	r3, [r7, #100]	@ 0x64
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004962:	4413      	add	r3, r2
 8004964:	667b      	str	r3, [r7, #100]	@ 0x64
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	011a      	lsls	r2, r3, #4
 800496c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800496e:	4413      	add	r3, r2
 8004970:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004974:	663b      	str	r3, [r7, #96]	@ 0x60
 8004976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004978:	2200      	movs	r2, #0
 800497a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	677b      	str	r3, [r7, #116]	@ 0x74
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d12b      	bne.n	80049e2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800499e:	4413      	add	r3, r2
 80049a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	011a      	lsls	r2, r3, #4
 80049a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049aa:	4413      	add	r3, r2
 80049ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d8:	b29a      	uxth	r2, r3
 80049da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e017      	b.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x54e>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d113      	bne.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x54e>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f8:	4413      	add	r3, r2
 80049fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	011a      	lsls	r2, r3, #4
 8004a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a0e:	2200      	movs	r2, #0
 8004a10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f004 fe52 	bl	80096c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 811a 	bne.w	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a44:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]
 8004a6e:	e0f6      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d121      	bne.n	8004abe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 80ca 	bne.w	8004c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d30b      	bcc.n	8004b0a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	621a      	str	r2, [r3, #32]
 8004b08:	e017      	b.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004b12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b22:	e00a      	b.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d165      	bne.n	8004c14 <HAL_PCD_EP_DB_Transmit+0x750>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b5c:	4413      	add	r3, r2
 8004b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	011a      	lsls	r2, r3, #4
 8004b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b68:	4413      	add	r3, r2
 8004b6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b84:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b86:	d91d      	bls.n	8004bc4 <HAL_PCD_EP_DB_Transmit+0x700>
 8004b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	e041      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	e032      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x738>
 8004bf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	029b      	lsls	r3, r3, #10
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	e019      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d115      	bne.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2a:	4413      	add	r3, r2
 8004c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	011a      	lsls	r2, r3, #4
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	4413      	add	r3, r2
 8004c38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c46:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6959      	ldr	r1, [r3, #20]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	895a      	ldrh	r2, [r3, #10]
 8004c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f003 f822 	bl	8007ca2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c78:	82bb      	strh	r3, [r7, #20]
 8004c7a:	8abb      	ldrh	r3, [r7, #20]
 8004c7c:	f083 0310 	eor.w	r3, r3, #16
 8004c80:	82bb      	strh	r3, [r7, #20]
 8004c82:	8abb      	ldrh	r3, [r7, #20]
 8004c84:	f083 0320 	eor.w	r3, r3, #32
 8004c88:	82bb      	strh	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	8abb      	ldrh	r3, [r7, #20]
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3790      	adds	r7, #144	@ 0x90
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cca:	897b      	ldrh	r3, [r7, #10]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	f003 0207 	and.w	r2, r3, #7
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	3310      	adds	r3, #16
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e009      	b.n	8004d02 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d02:	893b      	ldrh	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	80da      	strh	r2, [r3, #6]
 8004d16:	e00b      	b.n	8004d30 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e272      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8087 	beq.w	8004e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d5c:	4b92      	ldr	r3, [pc, #584]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d00c      	beq.n	8004d82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d68:	4b8f      	ldr	r3, [pc, #572]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d112      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5e>
 8004d74:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d82:	4b89      	ldr	r3, [pc, #548]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d06c      	beq.n	8004e68 <HAL_RCC_OscConfig+0x12c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d168      	bne.n	8004e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e24c      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x76>
 8004da4:	4b80      	ldr	r3, [pc, #512]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7f      	ldr	r2, [pc, #508]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e02e      	b.n	8004e10 <HAL_RCC_OscConfig+0xd4>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x98>
 8004dba:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7a      	ldr	r2, [pc, #488]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b78      	ldr	r3, [pc, #480]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a77      	ldr	r2, [pc, #476]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e01d      	b.n	8004e10 <HAL_RCC_OscConfig+0xd4>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0xbc>
 8004dde:	4b72      	ldr	r3, [pc, #456]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a71      	ldr	r2, [pc, #452]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e00b      	b.n	8004e10 <HAL_RCC_OscConfig+0xd4>
 8004df8:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b68      	ldr	r3, [pc, #416]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a67      	ldr	r2, [pc, #412]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fc ff46 	bl	8001ca8 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fc ff42 	bl	8001ca8 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	@ 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e200      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe4>
 8004e3e:	e014      	b.n	8004e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fc ff32 	bl	8001ca8 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fc ff2e 	bl	8001ca8 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	@ 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1ec      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	4b53      	ldr	r3, [pc, #332]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x10c>
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d063      	beq.n	8004f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e76:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e82:	4b49      	ldr	r3, [pc, #292]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d11c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x18c>
 8004e8e:	4b46      	ldr	r3, [pc, #280]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d116      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9a:	4b43      	ldr	r3, [pc, #268]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x176>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e1c0      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4939      	ldr	r1, [pc, #228]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec6:	e03a      	b.n	8004f3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed0:	4b36      	ldr	r3, [pc, #216]	@ (8004fac <HAL_RCC_OscConfig+0x270>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fc fee7 	bl	8001ca8 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ede:	f7fc fee3 	bl	8001ca8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1a1      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4927      	ldr	r1, [pc, #156]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	e015      	b.n	8004f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f12:	4b26      	ldr	r3, [pc, #152]	@ (8004fac <HAL_RCC_OscConfig+0x270>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fc fec6 	bl	8001ca8 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fc fec2 	bl	8001ca8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e180      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d03a      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d019      	beq.n	8004f86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f52:	4b17      	ldr	r3, [pc, #92]	@ (8004fb0 <HAL_RCC_OscConfig+0x274>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7fc fea6 	bl	8001ca8 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fc fea2 	bl	8001ca8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e160      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <HAL_RCC_OscConfig+0x26c>)
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f7e:	2001      	movs	r0, #1
 8004f80:	f000 faba 	bl	80054f8 <RCC_Delay>
 8004f84:	e01c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f86:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb0 <HAL_RCC_OscConfig+0x274>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8c:	f7fc fe8c 	bl	8001ca8 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f92:	e00f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f94:	f7fc fe88 	bl	8001ca8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d908      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e146      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	42420000 	.word	0x42420000
 8004fb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	4b92      	ldr	r3, [pc, #584]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e9      	bne.n	8004f94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80a6 	beq.w	800511a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	4b88      	ldr	r3, [pc, #544]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	4a87      	ldr	r2, [pc, #540]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	61d3      	str	r3, [r2, #28]
 8004fea:	4b85      	ldr	r3, [pc, #532]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffa:	4b82      	ldr	r3, [pc, #520]	@ (8005204 <HAL_RCC_OscConfig+0x4c8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d118      	bne.n	8005038 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005006:	4b7f      	ldr	r3, [pc, #508]	@ (8005204 <HAL_RCC_OscConfig+0x4c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7e      	ldr	r2, [pc, #504]	@ (8005204 <HAL_RCC_OscConfig+0x4c8>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005012:	f7fc fe49 	bl	8001ca8 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fc fe45 	bl	8001ca8 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b64      	cmp	r3, #100	@ 0x64
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e103      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502c:	4b75      	ldr	r3, [pc, #468]	@ (8005204 <HAL_RCC_OscConfig+0x4c8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d106      	bne.n	800504e <HAL_RCC_OscConfig+0x312>
 8005040:	4b6f      	ldr	r3, [pc, #444]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4a6e      	ldr	r2, [pc, #440]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6213      	str	r3, [r2, #32]
 800504c:	e02d      	b.n	80050aa <HAL_RCC_OscConfig+0x36e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x334>
 8005056:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4a69      	ldr	r2, [pc, #420]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	6213      	str	r3, [r2, #32]
 8005062:	4b67      	ldr	r3, [pc, #412]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4a66      	ldr	r2, [pc, #408]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	f023 0304 	bic.w	r3, r3, #4
 800506c:	6213      	str	r3, [r2, #32]
 800506e:	e01c      	b.n	80050aa <HAL_RCC_OscConfig+0x36e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b05      	cmp	r3, #5
 8005076:	d10c      	bne.n	8005092 <HAL_RCC_OscConfig+0x356>
 8005078:	4b61      	ldr	r3, [pc, #388]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4a60      	ldr	r2, [pc, #384]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 800507e:	f043 0304 	orr.w	r3, r3, #4
 8005082:	6213      	str	r3, [r2, #32]
 8005084:	4b5e      	ldr	r3, [pc, #376]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4a5d      	ldr	r2, [pc, #372]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6213      	str	r3, [r2, #32]
 8005090:	e00b      	b.n	80050aa <HAL_RCC_OscConfig+0x36e>
 8005092:	4b5b      	ldr	r3, [pc, #364]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a5a      	ldr	r2, [pc, #360]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	6213      	str	r3, [r2, #32]
 800509e:	4b58      	ldr	r3, [pc, #352]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4a57      	ldr	r2, [pc, #348]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	f023 0304 	bic.w	r3, r3, #4
 80050a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d015      	beq.n	80050de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fc fdf9 	bl	8001ca8 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ba:	f7fc fdf5 	bl	8001ca8 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e0b1      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0ee      	beq.n	80050ba <HAL_RCC_OscConfig+0x37e>
 80050dc:	e014      	b.n	8005108 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050de:	f7fc fde3 	bl	8001ca8 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e4:	e00a      	b.n	80050fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fc fddf 	bl	8001ca8 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e09b      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fc:	4b40      	ldr	r3, [pc, #256]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1ee      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d105      	bne.n	800511a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510e:	4b3c      	ldr	r3, [pc, #240]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4a3b      	ldr	r2, [pc, #236]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005118:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8087 	beq.w	8005232 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005124:	4b36      	ldr	r3, [pc, #216]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b08      	cmp	r3, #8
 800512e:	d061      	beq.n	80051f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d146      	bne.n	80051c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005138:	4b33      	ldr	r3, [pc, #204]	@ (8005208 <HAL_RCC_OscConfig+0x4cc>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513e:	f7fc fdb3 	bl	8001ca8 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005146:	f7fc fdaf 	bl	8001ca8 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e06d      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005158:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f0      	bne.n	8005146 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d108      	bne.n	8005180 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800516e:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4921      	ldr	r1, [pc, #132]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005180:	4b1f      	ldr	r3, [pc, #124]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a19      	ldr	r1, [r3, #32]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	430b      	orrs	r3, r1
 8005192:	491b      	ldr	r1, [pc, #108]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <HAL_RCC_OscConfig+0x4cc>)
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fc fd83 	bl	8001ca8 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fc fd7f 	bl	8001ca8 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e03d      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x46a>
 80051c4:	e035      	b.n	8005232 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <HAL_RCC_OscConfig+0x4cc>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fc fd6c 	bl	8001ca8 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fc fd68 	bl	8001ca8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e026      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x498>
 80051f2:	e01e      	b.n	8005232 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e019      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
 8005200:	40021000 	.word	0x40021000
 8005204:	40007000 	.word	0x40007000
 8005208:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_RCC_OscConfig+0x500>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	429a      	cmp	r2, r3
 800521e:	d106      	bne.n	800522e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0d0      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005254:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d910      	bls.n	8005284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b67      	ldr	r3, [pc, #412]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 0207 	bic.w	r2, r3, #7
 800526a:	4965      	ldr	r1, [pc, #404]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b63      	ldr	r3, [pc, #396]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0b8      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d020      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800529c:	4b59      	ldr	r3, [pc, #356]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4a58      	ldr	r2, [pc, #352]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b4:	4b53      	ldr	r3, [pc, #332]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	4a52      	ldr	r2, [pc, #328]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80052be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c0:	4b50      	ldr	r3, [pc, #320]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	494d      	ldr	r1, [pc, #308]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d040      	beq.n	8005360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d115      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07f      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fe:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e073      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530e:	4b3d      	ldr	r3, [pc, #244]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e06b      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531e:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f023 0203 	bic.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4936      	ldr	r1, [pc, #216]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005330:	f7fc fcba 	bl	8001ca8 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	e00a      	b.n	800534e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005338:	f7fc fcb6 	bl	8001ca8 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e053      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	4b2d      	ldr	r3, [pc, #180]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 020c 	and.w	r2, r3, #12
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	429a      	cmp	r2, r3
 800535e:	d1eb      	bne.n	8005338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005360:	4b27      	ldr	r3, [pc, #156]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d210      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0207 	bic.w	r2, r3, #7
 8005376:	4922      	ldr	r1, [pc, #136]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b20      	ldr	r3, [pc, #128]	@ (8005400 <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e032      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800539c:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4916      	ldr	r1, [pc, #88]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ba:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	490e      	ldr	r1, [pc, #56]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ce:	f000 f821 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80053d2:	4602      	mov	r2, r0
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	490a      	ldr	r1, [pc, #40]	@ (8005408 <HAL_RCC_ClockConfig+0x1c8>)
 80053e0:	5ccb      	ldrb	r3, [r1, r3]
 80053e2:	fa22 f303 	lsr.w	r3, r2, r3
 80053e6:	4a09      	ldr	r2, [pc, #36]	@ (800540c <HAL_RCC_ClockConfig+0x1cc>)
 80053e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053ea:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <HAL_RCC_ClockConfig+0x1d0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc fc18 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40022000 	.word	0x40022000
 8005404:	40021000 	.word	0x40021000
 8005408:	08009c1c 	.word	0x08009c1c
 800540c:	20000000 	.word	0x20000000
 8005410:	20000004 	.word	0x20000004

08005414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800542e:	4b1e      	ldr	r3, [pc, #120]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b04      	cmp	r3, #4
 800543c:	d002      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0x30>
 800543e:	2b08      	cmp	r3, #8
 8005440:	d003      	beq.n	800544a <HAL_RCC_GetSysClockFreq+0x36>
 8005442:	e027      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005446:	613b      	str	r3, [r7, #16]
      break;
 8005448:	e027      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	0c9b      	lsrs	r3, r3, #18
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	4a17      	ldr	r2, [pc, #92]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005454:	5cd3      	ldrb	r3, [r2, r3]
 8005456:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005462:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	0c5b      	lsrs	r3, r3, #17
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	4a11      	ldr	r2, [pc, #68]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a0d      	ldr	r2, [pc, #52]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005476:	fb03 f202 	mul.w	r2, r3, r2
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e004      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0c      	ldr	r2, [pc, #48]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	613b      	str	r3, [r7, #16]
      break;
 8005492:	e002      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005496:	613b      	str	r3, [r7, #16]
      break;
 8005498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549a:	693b      	ldr	r3, [r7, #16]
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
 80054ac:	007a1200 	.word	0x007a1200
 80054b0:	08009c34 	.word	0x08009c34
 80054b4:	08009c44 	.word	0x08009c44
 80054b8:	003d0900 	.word	0x003d0900

080054bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c0:	4b02      	ldr	r3, [pc, #8]	@ (80054cc <HAL_RCC_GetHCLKFreq+0x10>)
 80054c2:	681b      	ldr	r3, [r3, #0]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr
 80054cc:	20000000 	.word	0x20000000

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d4:	f7ff fff2 	bl	80054bc <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4903      	ldr	r1, [pc, #12]	@ (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000
 80054f4:	08009c2c 	.word	0x08009c2c

080054f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005500:	4b0a      	ldr	r3, [pc, #40]	@ (800552c <RCC_Delay+0x34>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0a      	ldr	r2, [pc, #40]	@ (8005530 <RCC_Delay+0x38>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	0a5b      	lsrs	r3, r3, #9
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005514:	bf00      	nop
  }
  while (Delay --);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	60fa      	str	r2, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f9      	bne.n	8005514 <RCC_Delay+0x1c>
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	20000000 	.word	0x20000000
 8005530:	10624dd3 	.word	0x10624dd3

08005534 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d07d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005554:	4b4f      	ldr	r3, [pc, #316]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10d      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005560:	4b4c      	ldr	r3, [pc, #304]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4a4b      	ldr	r2, [pc, #300]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556a:	61d3      	str	r3, [r2, #28]
 800556c:	4b49      	ldr	r3, [pc, #292]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005578:	2301      	movs	r3, #1
 800557a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557c:	4b46      	ldr	r3, [pc, #280]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d118      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005588:	4b43      	ldr	r3, [pc, #268]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a42      	ldr	r2, [pc, #264]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800558e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005594:	f7fc fb88 	bl	8001ca8 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559a:	e008      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800559c:	f7fc fb84 	bl	8001ca8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	@ 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e06d      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055ba:	4b36      	ldr	r3, [pc, #216]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d02e      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d027      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055e2:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055e8:	4b2c      	ldr	r3, [pc, #176]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055ee:	4a29      	ldr	r2, [pc, #164]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d014      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fe:	f7fc fb53 	bl	8001ca8 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005604:	e00a      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fc fb4f 	bl	8001ca8 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d901      	bls.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e036      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0ee      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005628:	4b1a      	ldr	r3, [pc, #104]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4917      	ldr	r1, [pc, #92]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005636:	4313      	orrs	r3, r2
 8005638:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005640:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800564a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005658:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	490b      	ldr	r1, [pc, #44]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	4313      	orrs	r3, r2
 8005668:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d008      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005676:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4904      	ldr	r1, [pc, #16]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005684:	4313      	orrs	r3, r2
 8005686:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000
 8005698:	40007000 	.word	0x40007000
 800569c:	42420440 	.word	0x42420440

080056a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	4638      	mov	r0, r7
 80056aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056ca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80056ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr

080056e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80056f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	4013      	ands	r3, r2
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	4638      	mov	r0, r7
 800573c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800576c:	b480      	push	{r7}
 800576e:	b09d      	sub	sp, #116	@ 0x74
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800578e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005792:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d81f      	bhi.n	80057de <USB_ActivateEndpoint+0x72>
 800579e:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <USB_ActivateEndpoint+0x38>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057e7 	.word	0x080057e7
 80057b0:	080057c3 	.word	0x080057c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80057b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057c0:	e012      	b.n	80057e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80057ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057ce:	e00b      	b.n	80057e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057dc:	e004      	b.n	80057e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80057e4:	e000      	b.n	80057e8 <USB_ActivateEndpoint+0x7c>
      break;
 80057e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005806:	b29b      	uxth	r3, r3
 8005808:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	b29b      	uxth	r3, r3
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7b1b      	ldrb	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 8178 	bne.w	8005b48 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8084 	beq.w	800596a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	4413      	add	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	011a      	lsls	r2, r3, #4
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	88db      	ldrh	r3, [r3, #6]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	b29b      	uxth	r3, r3
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	827b      	strh	r3, [r7, #18]
 80058a4:	8a7b      	ldrh	r3, [r7, #18]
 80058a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01b      	beq.n	80058e6 <USB_ActivateEndpoint+0x17a>
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c4:	823b      	strh	r3, [r7, #16]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8a3b      	ldrh	r3, [r7, #16]
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	78db      	ldrb	r3, [r3, #3]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d020      	beq.n	8005930 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005904:	81bb      	strh	r3, [r7, #12]
 8005906:	89bb      	ldrh	r3, [r7, #12]
 8005908:	f083 0320 	eor.w	r3, r3, #32
 800590c:	81bb      	strh	r3, [r7, #12]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	89bb      	ldrh	r3, [r7, #12]
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
 800592e:	e2d5      	b.n	8005edc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005946:	81fb      	strh	r3, [r7, #14]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	441a      	add	r2, r3
 8005952:	89fb      	ldrh	r3, [r7, #14]
 8005954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800595c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005964:	b29b      	uxth	r3, r3
 8005966:	8013      	strh	r3, [r2, #0]
 8005968:	e2b8      	b.n	8005edc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	633b      	str	r3, [r7, #48]	@ 0x30
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	4413      	add	r3, r2
 800597c:	633b      	str	r3, [r7, #48]	@ 0x30
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	011a      	lsls	r2, r3, #4
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	4413      	add	r3, r2
 8005988:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	88db      	ldrh	r3, [r3, #6]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	4413      	add	r3, r2
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	011a      	lsls	r2, r3, #4
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80059d8:	d91d      	bls.n	8005a16 <USB_ActivateEndpoint+0x2aa>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <USB_ActivateEndpoint+0x288>
 80059ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059f0:	3b01      	subs	r3, #1
 80059f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	029b      	lsls	r3, r3, #10
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4313      	orrs	r3, r2
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e026      	b.n	8005a64 <USB_ActivateEndpoint+0x2f8>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <USB_ActivateEndpoint+0x2c8>
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e017      	b.n	8005a64 <USB_ActivateEndpoint+0x2f8>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <USB_ActivateEndpoint+0x2e2>
 8005a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <USB_ActivateEndpoint+0x348>
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a92:	843b      	strh	r3, [r7, #32]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	8c3b      	ldrh	r3, [r7, #32]
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d124      	bne.n	8005b06 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad2:	83bb      	strh	r3, [r7, #28]
 8005ad4:	8bbb      	ldrh	r3, [r7, #28]
 8005ad6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ada:	83bb      	strh	r3, [r7, #28]
 8005adc:	8bbb      	ldrh	r3, [r7, #28]
 8005ade:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ae2:	83bb      	strh	r3, [r7, #28]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	8bbb      	ldrh	r3, [r7, #28]
 8005af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]
 8005b04:	e1ea      	b.n	8005edc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1c:	83fb      	strh	r3, [r7, #30]
 8005b1e:	8bfb      	ldrh	r3, [r7, #30]
 8005b20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b24:	83fb      	strh	r3, [r7, #30]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	8bfb      	ldrh	r3, [r7, #30]
 8005b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]
 8005b46:	e1c9      	b.n	8005edc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d11e      	bne.n	8005b8e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b66:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b80:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]
 8005b8c:	e01d      	b.n	8005bca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bda:	4413      	add	r3, r2
 8005bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	011a      	lsls	r2, r3, #4
 8005be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	891b      	ldrh	r3, [r3, #8]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0e:	4413      	add	r3, r2
 8005c10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c20:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	895b      	ldrh	r3, [r3, #10]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c30:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 8093 	bne.w	8005d62 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01b      	beq.n	8005c90 <USB_ActivateEndpoint+0x524>
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005c9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <USB_ActivateEndpoint+0x574>
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	441a      	add	r2, r3
 8005cca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cf8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cfa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cfe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	8013      	strh	r3, [r2, #0]
 8005d60:	e0bc      	b.n	8005edc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01d      	beq.n	8005dba <USB_ActivateEndpoint+0x64e>
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005dca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <USB_ActivateEndpoint+0x6a6>
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	78db      	ldrb	r3, [r3, #3]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d024      	beq.n	8005e64 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e30:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e38:	f083 0320 	eor.w	r3, r3, #32
 8005e3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	441a      	add	r2, r3
 8005e4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8013      	strh	r3, [r2, #0]
 8005e62:	e01d      	b.n	8005ea0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005edc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3774      	adds	r7, #116	@ 0x74
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop

08005eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b08d      	sub	sp, #52	@ 0x34
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	7b1b      	ldrb	r3, [r3, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 808e 	bne.w	800601c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d044      	beq.n	8005f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	81bb      	strh	r3, [r7, #12]
 8005f16:	89bb      	ldrh	r3, [r7, #12]
 8005f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <USB_DeactivateEndpoint+0x6c>
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	817b      	strh	r3, [r7, #10]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6e:	813b      	strh	r3, [r7, #8]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	893b      	ldrh	r3, [r7, #8]
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
 8005f90:	e192      	b.n	80062b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	827b      	strh	r3, [r7, #18]
 8005fa0:	8a7b      	ldrh	r3, [r7, #18]
 8005fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01b      	beq.n	8005fe2 <USB_DeactivateEndpoint+0xf6>
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc0:	823b      	strh	r3, [r7, #16]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	8a3b      	ldrh	r3, [r7, #16]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff8:	81fb      	strh	r3, [r7, #14]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	89fb      	ldrh	r3, [r7, #14]
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
 800601a:	e14d      	b.n	80062b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 80a5 	bne.w	8006170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	843b      	strh	r3, [r7, #32]
 8006034:	8c3b      	ldrh	r3, [r7, #32]
 8006036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01b      	beq.n	8006076 <USB_DeactivateEndpoint+0x18a>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006054:	83fb      	strh	r3, [r7, #30]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	8bfb      	ldrh	r3, [r7, #30]
 8006062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800606a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800606e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006072:	b29b      	uxth	r3, r3
 8006074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	83bb      	strh	r3, [r7, #28]
 8006084:	8bbb      	ldrh	r3, [r7, #28]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01b      	beq.n	80060c6 <USB_DeactivateEndpoint+0x1da>
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a4:	837b      	strh	r3, [r7, #26]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	8b7b      	ldrh	r3, [r7, #26]
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060dc:	833b      	strh	r3, [r7, #24]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	8b3b      	ldrh	r3, [r7, #24]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006114:	82fb      	strh	r3, [r7, #22]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	8afb      	ldrh	r3, [r7, #22]
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614c:	82bb      	strh	r3, [r7, #20]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	8abb      	ldrh	r3, [r7, #20]
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
 800616e:	e0a3      	b.n	80062b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800617e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01b      	beq.n	80061c0 <USB_DeactivateEndpoint+0x2d4>
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80061ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01b      	beq.n	8006210 <USB_DeactivateEndpoint+0x324>
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006208:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800620c:	b29b      	uxth	r3, r3
 800620e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006226:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800625a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800626c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006270:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627c:	b29b      	uxth	r3, r3
 800627e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3734      	adds	r7, #52	@ 0x34
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b0c2      	sub	sp, #264	@ 0x108
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d2:	6018      	str	r0, [r3, #0]
 80062d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062dc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	f040 86b7 	bne.w	800705e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d908      	bls.n	800631e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800631c:	e007      	b.n	800632e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800632e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	7b1b      	ldrb	r3, [r3, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d13a      	bne.n	80063b4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6959      	ldr	r1, [r3, #20]
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	88da      	ldrh	r2, [r3, #6]
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635a:	b29b      	uxth	r3, r3
 800635c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006360:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006364:	6800      	ldr	r0, [r0, #0]
 8006366:	f001 fc9c 	bl	8007ca2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800636a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4413      	add	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	011a      	lsls	r2, r3, #4
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	f000 be1f 	b.w	8006ff2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	78db      	ldrb	r3, [r3, #3]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	f040 8462 	bne.w	8006c8a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	429a      	cmp	r2, r3
 80063e0:	f240 83df 	bls.w	8006ba2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800642c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006430:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006434:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800643c:	b29b      	uxth	r3, r3
 800643e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 81c7 	beq.w	8006814 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	633b      	str	r3, [r7, #48]	@ 0x30
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d177      	bne.n	8006592 <USB_EPStartXfer+0x2ce>
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064bc:	b29b      	uxth	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	4413      	add	r3, r2
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	011a      	lsls	r2, r3, #4
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80064f4:	d921      	bls.n	800653a <USB_EPStartXfer+0x276>
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <USB_EPStartXfer+0x252>
 800650c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006510:	3b01      	subs	r3, #1
 8006512:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006520:	b29b      	uxth	r3, r3
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	b29b      	uxth	r3, r3
 8006526:	4313      	orrs	r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006532:	b29a      	uxth	r2, r3
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	e050      	b.n	80065dc <USB_EPStartXfer+0x318>
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <USB_EPStartXfer+0x294>
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006550:	b29a      	uxth	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e041      	b.n	80065dc <USB_EPStartXfer+0x318>
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655c:	085b      	lsrs	r3, r3, #1
 800655e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <USB_EPStartXfer+0x2b4>
 800656e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006572:	3301      	adds	r3, #1
 8006574:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b29a      	uxth	r2, r3
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e024      	b.n	80065dc <USB_EPStartXfer+0x318>
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d11c      	bne.n	80065dc <USB_EPStartXfer+0x318>
 80065a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	4413      	add	r3, r2
 80065b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	011a      	lsls	r2, r3, #4
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	895b      	ldrh	r3, [r3, #10]
 80065e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6959      	ldr	r1, [r3, #20]
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006602:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006606:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	f001 fb49 	bl	8007ca2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006620:	441a      	add	r2, r3
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800662e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	d90f      	bls.n	800666a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	621a      	str	r2, [r3, #32]
 8006668:	e00e      	b.n	8006688 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800667a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d177      	bne.n	8006788 <USB_EPStartXfer+0x4c4>
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	4413      	add	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	011a      	lsls	r2, r3, #4
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066de:	b29a      	uxth	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ea:	d921      	bls.n	8006730 <USB_EPStartXfer+0x46c>
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <USB_EPStartXfer+0x448>
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006706:	3b01      	subs	r3, #1
 8006708:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006716:	b29b      	uxth	r3, r3
 8006718:	029b      	lsls	r3, r3, #10
 800671a:	b29b      	uxth	r3, r3
 800671c:	4313      	orrs	r3, r2
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006728:	b29a      	uxth	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e056      	b.n	80067de <USB_EPStartXfer+0x51a>
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <USB_EPStartXfer+0x48a>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006746:	b29a      	uxth	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	e047      	b.n	80067de <USB_EPStartXfer+0x51a>
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006752:	085b      	lsrs	r3, r3, #1
 8006754:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <USB_EPStartXfer+0x4aa>
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006768:	3301      	adds	r3, #1
 800676a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29b      	uxth	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b29a      	uxth	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e02a      	b.n	80067de <USB_EPStartXfer+0x51a>
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d122      	bne.n	80067de <USB_EPStartXfer+0x51a>
 8006798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	4413      	add	r3, r2
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	011a      	lsls	r2, r3, #4
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d8:	b29a      	uxth	r2, r3
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	891b      	ldrh	r3, [r3, #8]
 80067ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6959      	ldr	r1, [r3, #20]
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006804:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006808:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800680c:	6800      	ldr	r0, [r0, #0]
 800680e:	f001 fa48 	bl	8007ca2 <USB_WritePMA>
 8006812:	e3ee      	b.n	8006ff2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d177      	bne.n	8006914 <USB_EPStartXfer+0x650>
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006844:	4413      	add	r3, r2
 8006846:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	011a      	lsls	r2, r3, #4
 8006856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006858:	4413      	add	r3, r2
 800685a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800685e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800686a:	b29a      	uxth	r2, r3
 800686c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	2b3e      	cmp	r3, #62	@ 0x3e
 8006876:	d921      	bls.n	80068bc <USB_EPStartXfer+0x5f8>
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <USB_EPStartXfer+0x5d4>
 800688e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006892:	3b01      	subs	r3, #1
 8006894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29a      	uxth	r2, r3
 800689e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	029b      	lsls	r3, r3, #10
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4313      	orrs	r3, r2
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e056      	b.n	800696a <USB_EPStartXfer+0x6a6>
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <USB_EPStartXfer+0x616>
 80068c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e047      	b.n	800696a <USB_EPStartXfer+0x6a6>
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <USB_EPStartXfer+0x636>
 80068f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068f4:	3301      	adds	r3, #1
 80068f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006904:	b29b      	uxth	r3, r3
 8006906:	029b      	lsls	r3, r3, #10
 8006908:	b29b      	uxth	r3, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	b29a      	uxth	r2, r3
 800690e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	e02a      	b.n	800696a <USB_EPStartXfer+0x6a6>
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d122      	bne.n	800696a <USB_EPStartXfer+0x6a6>
 8006924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006944:	4413      	add	r3, r2
 8006946:	653b      	str	r3, [r7, #80]	@ 0x50
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006958:	4413      	add	r3, r2
 800695a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800695e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	b29a      	uxth	r2, r3
 8006966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	891b      	ldrh	r3, [r3, #8]
 8006976:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6959      	ldr	r1, [r3, #20]
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	b29b      	uxth	r3, r3
 800698c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006990:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006994:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006998:	6800      	ldr	r0, [r0, #0]
 800699a:	f001 f982 	bl	8007ca2 <USB_WritePMA>
            ep->xfer_buff += len;
 800699e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ae:	441a      	add	r2, r3
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d90f      	bls.n	80069f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	621a      	str	r2, [r3, #32]
 80069f6:	e00e      	b.n	8006a16 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d177      	bne.n	8006b22 <USB_EPStartXfer+0x85e>
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	4413      	add	r3, r2
 8006a54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	011a      	lsls	r2, r3, #4
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a82:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a84:	d921      	bls.n	8006aca <USB_EPStartXfer+0x806>
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d104      	bne.n	8006aa6 <USB_EPStartXfer+0x7e2>
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e050      	b.n	8006b6c <USB_EPStartXfer+0x8a8>
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <USB_EPStartXfer+0x824>
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	e041      	b.n	8006b6c <USB_EPStartXfer+0x8a8>
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <USB_EPStartXfer+0x844>
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b02:	3301      	adds	r3, #1
 8006b04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1e:	801a      	strh	r2, [r3, #0]
 8006b20:	e024      	b.n	8006b6c <USB_EPStartXfer+0x8a8>
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d11c      	bne.n	8006b6c <USB_EPStartXfer+0x8a8>
 8006b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b46:	4413      	add	r3, r2
 8006b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	011a      	lsls	r2, r3, #4
 8006b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	895b      	ldrh	r3, [r3, #10]
 8006b78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6959      	ldr	r1, [r3, #20]
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b9a:	6800      	ldr	r0, [r0, #0]
 8006b9c:	f001 f881 	bl	8007ca2 <USB_WritePMA>
 8006ba0:	e227      	b.n	8006ff2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c2e:	4413      	add	r3, r2
 8006c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	011a      	lsls	r2, r3, #4
 8006c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	891b      	ldrh	r3, [r3, #8]
 8006c60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6959      	ldr	r1, [r3, #20]
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	f001 f80d 	bl	8007ca2 <USB_WritePMA>
 8006c88:	e1b3      	b.n	8006ff2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80c6 	beq.w	8006e5c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d177      	bne.n	8006ddc <USB_EPStartXfer+0xb18>
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d0c:	4413      	add	r3, r2
 8006d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	011a      	lsls	r2, r3, #4
 8006d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d26:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d3e:	d921      	bls.n	8006d84 <USB_EPStartXfer+0xac0>
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <USB_EPStartXfer+0xa9c>
 8006d56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	029b      	lsls	r3, r3, #10
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	e050      	b.n	8006e26 <USB_EPStartXfer+0xb62>
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <USB_EPStartXfer+0xade>
 8006d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e041      	b.n	8006e26 <USB_EPStartXfer+0xb62>
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <USB_EPStartXfer+0xafe>
 8006db8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	029b      	lsls	r3, r3, #10
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e024      	b.n	8006e26 <USB_EPStartXfer+0xb62>
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d11c      	bne.n	8006e26 <USB_EPStartXfer+0xb62>
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e00:	4413      	add	r3, r2
 8006e02:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	011a      	lsls	r2, r3, #4
 8006e12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	895b      	ldrh	r3, [r3, #10]
 8006e32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6959      	ldr	r1, [r3, #20]
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e54:	6800      	ldr	r0, [r0, #0]
 8006e56:	f000 ff24 	bl	8007ca2 <USB_WritePMA>
 8006e5a:	e0ca      	b.n	8006ff2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d177      	bne.n	8006f5c <USB_EPStartXfer+0xc98>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e8c:	4413      	add	r3, r2
 8006e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	011a      	lsls	r2, r3, #4
 8006e9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ebe:	d921      	bls.n	8006f04 <USB_EPStartXfer+0xc40>
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <USB_EPStartXfer+0xc1c>
 8006ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006eda:	3b01      	subs	r3, #1
 8006edc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f00:	801a      	strh	r2, [r3, #0]
 8006f02:	e05c      	b.n	8006fbe <USB_EPStartXfer+0xcfa>
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <USB_EPStartXfer+0xc5e>
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f1e:	801a      	strh	r2, [r3, #0]
 8006f20:	e04d      	b.n	8006fbe <USB_EPStartXfer+0xcfa>
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <USB_EPStartXfer+0xc7e>
 8006f38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	029b      	lsls	r3, r3, #10
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	e030      	b.n	8006fbe <USB_EPStartXfer+0xcfa>
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d128      	bne.n	8006fbe <USB_EPStartXfer+0xcfa>
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f90:	4413      	add	r3, r2
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	011a      	lsls	r2, r3, #4
 8006fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fa8:	4413      	add	r3, r2
 8006faa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	891b      	ldrh	r3, [r3, #8]
 8006fca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6959      	ldr	r1, [r3, #20]
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fe4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fe8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f000 fe58 	bl	8007ca2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007018:	817b      	strh	r3, [r7, #10]
 800701a:	897b      	ldrh	r3, [r7, #10]
 800701c:	f083 0310 	eor.w	r3, r3, #16
 8007020:	817b      	strh	r3, [r7, #10]
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	f083 0320 	eor.w	r3, r3, #32
 8007028:	817b      	strh	r3, [r7, #10]
 800702a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	897b      	ldrh	r3, [r7, #10]
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
 800705a:	f000 bcde 	b.w	8007a1a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	7b1b      	ldrb	r3, [r3, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 80bb 	bne.w	80071e6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	429a      	cmp	r2, r3
 800708a:	d917      	bls.n	80070bc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800708c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	1ad2      	subs	r2, r2, r3
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	619a      	str	r2, [r3, #24]
 80070ba:	e00e      	b.n	80070da <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070fe:	4413      	add	r3, r2
 8007100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	011a      	lsls	r2, r3, #4
 8007112:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007116:	4413      	add	r3, r2
 8007118:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800711c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007138:	2b3e      	cmp	r3, #62	@ 0x3e
 800713a:	d924      	bls.n	8007186 <USB_EPStartXfer+0xec2>
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USB_EPStartXfer+0xe98>
 8007152:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007156:	3b01      	subs	r3, #1
 8007158:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800715c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29a      	uxth	r2, r3
 8007164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007168:	b29b      	uxth	r3, r3
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	b29b      	uxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	b29b      	uxth	r3, r3
 8007172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717a:	b29a      	uxth	r2, r3
 800717c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	f000 bc10 	b.w	80079a6 <USB_EPStartXfer+0x16e2>
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10c      	bne.n	80071a8 <USB_EPStartXfer+0xee4>
 800718e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719e:	b29a      	uxth	r2, r3
 80071a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	e3fe      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d004      	beq.n	80071c8 <USB_EPStartXfer+0xf04>
 80071be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071c2:	3301      	adds	r3, #1
 80071c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	b29b      	uxth	r3, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	e3df      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80071e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	78db      	ldrb	r3, [r3, #3]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	f040 8218 	bne.w	8007628 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 809d 	bne.w	8007344 <USB_EPStartXfer+0x1080>
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007226:	b29b      	uxth	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800722e:	4413      	add	r3, r2
 8007230:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	011a      	lsls	r2, r3, #4
 8007242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007246:	4413      	add	r3, r2
 8007248:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800724c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800725c:	b29a      	uxth	r2, r3
 800725e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b3e      	cmp	r3, #62	@ 0x3e
 8007272:	d92b      	bls.n	80072cc <USB_EPStartXfer+0x1008>
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <USB_EPStartXfer+0xfe0>
 800729a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729e:	3b01      	subs	r3, #1
 80072a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	029b      	lsls	r3, r3, #10
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	e070      	b.n	80073ae <USB_EPStartXfer+0x10ea>
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10c      	bne.n	80072f6 <USB_EPStartXfer+0x1032>
 80072dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e05b      	b.n	80073ae <USB_EPStartXfer+0x10ea>
 80072f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <USB_EPStartXfer+0x1062>
 800731c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007320:	3301      	adds	r3, #1
 8007322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29a      	uxth	r2, r3
 800732e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007332:	b29b      	uxth	r3, r3
 8007334:	029b      	lsls	r3, r3, #10
 8007336:	b29b      	uxth	r3, r3
 8007338:	4313      	orrs	r3, r2
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e034      	b.n	80073ae <USB_EPStartXfer+0x10ea>
 8007344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d12c      	bne.n	80073ae <USB_EPStartXfer+0x10ea>
 8007354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007370:	b29b      	uxth	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007378:	4413      	add	r3, r2
 800737a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	011a      	lsls	r2, r3, #4
 800738c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007390:	4413      	add	r3, r2
 8007392:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 809d 	bne.w	8007508 <USB_EPStartXfer+0x1244>
 80073ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073f2:	4413      	add	r3, r2
 80073f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	011a      	lsls	r2, r3, #4
 8007406:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800740a:	4413      	add	r3, r2
 800740c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b3e      	cmp	r3, #62	@ 0x3e
 8007436:	d92b      	bls.n	8007490 <USB_EPStartXfer+0x11cc>
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <USB_EPStartXfer+0x11a4>
 800745e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007462:	3b01      	subs	r3, #1
 8007464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007474:	b29b      	uxth	r3, r3
 8007476:	029b      	lsls	r3, r3, #10
 8007478:	b29b      	uxth	r3, r3
 800747a:	4313      	orrs	r3, r2
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007486:	b29a      	uxth	r2, r3
 8007488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	e069      	b.n	8007564 <USB_EPStartXfer+0x12a0>
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <USB_EPStartXfer+0x11f6>
 80074a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	e054      	b.n	8007564 <USB_EPStartXfer+0x12a0>
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <USB_EPStartXfer+0x1226>
 80074e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074e4:	3301      	adds	r3, #1
 80074e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	029b      	lsls	r3, r3, #10
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	4313      	orrs	r3, r2
 80074fe:	b29a      	uxth	r2, r3
 8007500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	e02d      	b.n	8007564 <USB_EPStartXfer+0x12a0>
 8007508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d125      	bne.n	8007564 <USB_EPStartXfer+0x12a0>
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007526:	b29b      	uxth	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800752e:	4413      	add	r3, r2
 8007530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007546:	4413      	add	r3, r2
 8007548:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800754c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007562:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8218 	beq.w	80079a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007596:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800759a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <USB_EPStartXfer+0x12ea>
 80075a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f040 81f5 	bne.w	80079a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 81ee 	bne.w	80079a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80075f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800761e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
 8007626:	e1be      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	78db      	ldrb	r3, [r3, #3]
 8007634:	2b01      	cmp	r3, #1
 8007636:	f040 81b4 	bne.w	80079a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	429a      	cmp	r2, r3
 8007654:	d917      	bls.n	8007686 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	619a      	str	r2, [r3, #24]
 8007684:	e00e      	b.n	80076a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2200      	movs	r2, #0
 80076a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 8085 	bne.w	80077c0 <USB_EPStartXfer+0x14fc>
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076da:	4413      	add	r3, r2
 80076dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	011a      	lsls	r2, r3, #4
 80076ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076f2:	4413      	add	r3, r2
 80076f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	2b3e      	cmp	r3, #62	@ 0x3e
 8007716:	d923      	bls.n	8007760 <USB_EPStartXfer+0x149c>
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <USB_EPStartXfer+0x1474>
 800772e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007732:	3b01      	subs	r3, #1
 8007734:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29a      	uxth	r2, r3
 8007740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007744:	b29b      	uxth	r3, r3
 8007746:	029b      	lsls	r3, r3, #10
 8007748:	b29b      	uxth	r3, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	b29b      	uxth	r3, r3
 800774e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007756:	b29a      	uxth	r2, r3
 8007758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e060      	b.n	8007822 <USB_EPStartXfer+0x155e>
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10c      	bne.n	8007782 <USB_EPStartXfer+0x14be>
 8007768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007778:	b29a      	uxth	r2, r3
 800777a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	e04f      	b.n	8007822 <USB_EPStartXfer+0x155e>
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <USB_EPStartXfer+0x14de>
 8007798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779c:	3301      	adds	r3, #1
 800779e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	029b      	lsls	r3, r3, #10
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	e030      	b.n	8007822 <USB_EPStartXfer+0x155e>
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d128      	bne.n	8007822 <USB_EPStartXfer+0x155e>
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077f4:	4413      	add	r3, r2
 80077f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	011a      	lsls	r2, r3, #4
 8007808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780c:	4413      	add	r3, r2
 800780e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007812:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781a:	b29a      	uxth	r2, r3
 800781c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 8085 	bne.w	800794c <USB_EPStartXfer+0x1688>
 8007842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007866:	4413      	add	r3, r2
 8007868:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	011a      	lsls	r2, r3, #4
 800787a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800787e:	4413      	add	r3, r2
 8007880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80078a2:	d923      	bls.n	80078ec <USB_EPStartXfer+0x1628>
 80078a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d104      	bne.n	80078c4 <USB_EPStartXfer+0x1600>
 80078ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078be:	3b01      	subs	r3, #1
 80078c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b29b      	uxth	r3, r3
 80078da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078e8:	801a      	strh	r2, [r3, #0]
 80078ea:	e05c      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10c      	bne.n	800790e <USB_EPStartXfer+0x164a>
 80078f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	e04b      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <USB_EPStartXfer+0x166a>
 8007924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007928:	3301      	adds	r3, #1
 800792a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800792e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e02c      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d124      	bne.n	80079a6 <USB_EPStartXfer+0x16e2>
 800795c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007960:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007972:	4413      	add	r3, r2
 8007974:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	011a      	lsls	r2, r3, #4
 8007986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800798a:	4413      	add	r3, r2
 800798c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	b29a      	uxth	r2, r3
 800799a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	e001      	b.n	80079a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e03a      	b.n	8007a1c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80079e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d020      	beq.n	8007a7a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a4e:	81bb      	strh	r3, [r7, #12]
 8007a50:	89bb      	ldrh	r3, [r7, #12]
 8007a52:	f083 0310 	eor.w	r3, r3, #16
 8007a56:	81bb      	strh	r3, [r7, #12]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	89bb      	ldrh	r3, [r7, #12]
 8007a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	8013      	strh	r3, [r2, #0]
 8007a78:	e01f      	b.n	8007aba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a90:	81fb      	strh	r3, [r7, #14]
 8007a92:	89fb      	ldrh	r3, [r7, #14]
 8007a94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a98:	81fb      	strh	r3, [r7, #14]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	441a      	add	r2, r3
 8007aa4:	89fb      	ldrh	r3, [r7, #14]
 8007aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b087      	sub	sp, #28
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	7b1b      	ldrb	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 809d 	bne.w	8007c14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d04c      	beq.n	8007b7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	823b      	strh	r3, [r7, #16]
 8007af0:	8a3b      	ldrh	r3, [r7, #16]
 8007af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01b      	beq.n	8007b32 <USB_EPClearStall+0x6c>
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b10:	81fb      	strh	r3, [r7, #14]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	441a      	add	r2, r3
 8007b1c:	89fb      	ldrh	r3, [r7, #14]
 8007b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	78db      	ldrb	r3, [r3, #3]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d06c      	beq.n	8007c14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b50:	81bb      	strh	r3, [r7, #12]
 8007b52:	89bb      	ldrh	r3, [r7, #12]
 8007b54:	f083 0320 	eor.w	r3, r3, #32
 8007b58:	81bb      	strh	r3, [r7, #12]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	441a      	add	r2, r3
 8007b64:	89bb      	ldrh	r3, [r7, #12]
 8007b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	8013      	strh	r3, [r2, #0]
 8007b7a:	e04b      	b.n	8007c14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	82fb      	strh	r3, [r7, #22]
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01b      	beq.n	8007bcc <USB_EPClearStall+0x106>
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007baa:	82bb      	strh	r3, [r7, #20]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	8abb      	ldrh	r3, [r7, #20]
 8007bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be2:	827b      	strh	r3, [r7, #18]
 8007be4:	8a7b      	ldrh	r3, [r7, #18]
 8007be6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bea:	827b      	strh	r3, [r7, #18]
 8007bec:	8a7b      	ldrh	r3, [r7, #18]
 8007bee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bf2:	827b      	strh	r3, [r7, #18]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	8a7b      	ldrh	r3, [r7, #18]
 8007c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2280      	movs	r2, #128	@ 0x80
 8007c36:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr

08007c46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr

08007c6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c80:	68fb      	ldr	r3, [r7, #12]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr

08007ca2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b08b      	sub	sp, #44	@ 0x2c
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	4611      	mov	r1, r2
 8007cae:	461a      	mov	r2, r3
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	80fb      	strh	r3, [r7, #6]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cb8:	88bb      	ldrh	r3, [r7, #4]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	005a      	lsls	r2, r3, #1
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cda:	e01e      	b.n	8007d1a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	b21a      	sxth	r2, r3
 8007cec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	b21b      	sxth	r3, r3
 8007cf4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	8a7a      	ldrh	r2, [r7, #18]
 8007cfa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	3302      	adds	r3, #2
 8007d06:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3301      	adds	r3, #1
 8007d12:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	3b01      	subs	r3, #1
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1dd      	bne.n	8007cdc <USB_WritePMA+0x3a>
  }
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	372c      	adds	r7, #44	@ 0x2c
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b08b      	sub	sp, #44	@ 0x2c
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4611      	mov	r1, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	80fb      	strh	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d42:	88bb      	ldrh	r3, [r7, #4]
 8007d44:	085b      	lsrs	r3, r3, #1
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	005a      	lsls	r2, r3, #1
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d64:	e01b      	b.n	8007d9e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	3302      	adds	r3, #2
 8007d72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	3302      	adds	r3, #2
 8007d96:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e0      	bne.n	8007d66 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007da4:	88bb      	ldrh	r3, [r7, #4]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	701a      	strb	r2, [r3, #0]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	372c      	adds	r7, #44	@ 0x2c
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr

08007dca <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007dda:	2302      	movs	r3, #2
 8007ddc:	2203      	movs	r2, #3
 8007dde:	2181      	movs	r1, #129	@ 0x81
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 fd48 	bl	8009876 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007dec:	2302      	movs	r3, #2
 8007dee:	2203      	movs	r2, #3
 8007df0:	2101      	movs	r1, #1
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fd3f 	bl	8009876 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007e00:	2018      	movs	r0, #24
 8007e02:	f001 fe4b 	bl	8009a9c <USBD_static_malloc>
 8007e06:	4602      	mov	r2, r0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d102      	bne.n	8007e1e <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
 8007e1c:	e011      	b.n	8007e42 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e24:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fe0a 	bl	8009a56 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007e58:	2181      	movs	r1, #129	@ 0x81
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fd31 	bl	80098c2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007e66:	2101      	movs	r1, #1
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fd2a 	bl	80098c2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00e      	beq.n	8007e9e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fe0f 	bl	8009ab4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d051      	beq.n	8007f7a <USBD_CUSTOM_HID_Setup+0xd2>
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	f040 80d8 	bne.w	800808c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	3b02      	subs	r3, #2
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	d841      	bhi.n	8007f6a <USBD_CUSTOM_HID_Setup+0xc2>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <USBD_CUSTOM_HID_Setup+0x44>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f23 	.word	0x08007f23
 8007ef4:	08007f6b 	.word	0x08007f6b
 8007ef8:	08007f6b 	.word	0x08007f6b
 8007efc:	08007f6b 	.word	0x08007f6b
 8007f00:	08007f6b 	.word	0x08007f6b
 8007f04:	08007f6b 	.word	0x08007f6b
 8007f08:	08007f55 	.word	0x08007f55
 8007f0c:	08007f33 	.word	0x08007f33
 8007f10:	08007f15 	.word	0x08007f15
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	885b      	ldrh	r3, [r3, #2]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	605a      	str	r2, [r3, #4]
          break;
 8007f20:	e02a      	b.n	8007f78 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	3304      	adds	r3, #4
 8007f26:	2201      	movs	r2, #1
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 f998 	bl	8009260 <USBD_CtlSendData>
          break;
 8007f30:	e022      	b.n	8007f78 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	609a      	str	r2, [r3, #8]
          break;
 8007f42:	e019      	b.n	8007f78 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	3308      	adds	r3, #8
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f987 	bl	8009260 <USBD_CtlSendData>
          break;
 8007f52:	e011      	b.n	8007f78 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2201      	movs	r2, #1
 8007f58:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007f5a:	6939      	ldr	r1, [r7, #16]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	88db      	ldrh	r3, [r3, #6]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 f9aa 	bl	80092bc <USBD_CtlPrepareRx>
          break;
 8007f68:	e006      	b.n	8007f78 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f90d 	bl	800918c <USBD_CtlError>
          ret = USBD_FAIL;
 8007f72:	2302      	movs	r3, #2
 8007f74:	75fb      	strb	r3, [r7, #23]
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e08f      	b.n	800809a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b0b      	cmp	r3, #11
 8007f80:	d87c      	bhi.n	800807c <USBD_CUSTOM_HID_Setup+0x1d4>
 8007f82:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <USBD_CUSTOM_HID_Setup+0xe0>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fb9 	.word	0x08007fb9
 8007f8c:	0800807d 	.word	0x0800807d
 8007f90:	0800807d 	.word	0x0800807d
 8007f94:	0800807d 	.word	0x0800807d
 8007f98:	0800807d 	.word	0x0800807d
 8007f9c:	0800807d 	.word	0x0800807d
 8007fa0:	08007fe1 	.word	0x08007fe1
 8007fa4:	0800807d 	.word	0x0800807d
 8007fa8:	0800807d 	.word	0x0800807d
 8007fac:	0800807d 	.word	0x0800807d
 8007fb0:	0800802f 	.word	0x0800802f
 8007fb4:	08008057 	.word	0x08008057
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d107      	bne.n	8007fd2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fc2:	f107 030e 	add.w	r3, r7, #14
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 f948 	bl	8009260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fd0:	e05b      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f8d9 	bl	800918c <USBD_CtlError>
            ret = USBD_FAIL;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8007fde:	e054      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	885b      	ldrh	r3, [r3, #2]
 8007fe4:	0a1b      	lsrs	r3, r3, #8
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	2b22      	cmp	r3, #34	@ 0x22
 8007fea:	d10b      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	88db      	ldrh	r3, [r3, #6]
 8007ff0:	2b49      	cmp	r3, #73	@ 0x49
 8007ff2:	bf28      	it	cs
 8007ff4:	2349      	movcs	r3, #73	@ 0x49
 8007ff6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	61bb      	str	r3, [r7, #24]
 8008002:	e00d      	b.n	8008020 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	885b      	ldrh	r3, [r3, #2]
 8008008:	0a1b      	lsrs	r3, r3, #8
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b21      	cmp	r3, #33	@ 0x21
 800800e:	d107      	bne.n	8008020 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008010:	4b24      	ldr	r3, [pc, #144]	@ (80080a4 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008012:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b09      	cmp	r3, #9
 800801a:	bf28      	it	cs
 800801c:	2309      	movcs	r3, #9
 800801e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008020:	8bfb      	ldrh	r3, [r7, #30]
 8008022:	461a      	mov	r2, r3
 8008024:	69b9      	ldr	r1, [r7, #24]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 f91a 	bl	8009260 <USBD_CtlSendData>
          break;
 800802c:	e02d      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008034:	2b03      	cmp	r3, #3
 8008036:	d107      	bne.n	8008048 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	330c      	adds	r3, #12
 800803c:	2201      	movs	r2, #1
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f90d 	bl	8009260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008046:	e020      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f89e 	bl	800918c <USBD_CtlError>
            ret = USBD_FAIL;
 8008050:	2302      	movs	r3, #2
 8008052:	75fb      	strb	r3, [r7, #23]
          break;
 8008054:	e019      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800805c:	2b03      	cmp	r3, #3
 800805e:	d106      	bne.n	800806e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800806c:	e00d      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f88b 	bl	800918c <USBD_CtlError>
            ret = USBD_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	75fb      	strb	r3, [r7, #23]
          break;
 800807a:	e006      	b.n	800808a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 f884 	bl	800918c <USBD_CtlError>
          ret = USBD_FAIL;
 8008084:	2302      	movs	r3, #2
 8008086:	75fb      	strb	r3, [r7, #23]
          break;
 8008088:	bf00      	nop
      }
      break;
 800808a:	e006      	b.n	800809a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 f87c 	bl	800918c <USBD_CtlError>
      ret = USBD_FAIL;
 8008094:	2302      	movs	r3, #2
 8008096:	75fb      	strb	r3, [r7, #23]
      break;
 8008098:	bf00      	nop
  }
  return ret;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200000c8 	.word	0x200000c8

080080a8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080bc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d10f      	bne.n	80080e8 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	7d1b      	ldrb	r3, [r3, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2201      	movs	r2, #1
 80080d4:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	2181      	movs	r1, #129	@ 0x81
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f001 fc97 	bl	8009a10 <USBD_LL_Transmit>
 80080e2:	e001      	b.n	80080e8 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2229      	movs	r2, #41	@ 0x29
 8008100:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008102:	4b03      	ldr	r3, [pc, #12]	@ (8008110 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000044 	.word	0x20000044

08008114 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2229      	movs	r2, #41	@ 0x29
 8008120:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008122:	4b03      	ldr	r3, [pc, #12]	@ (8008130 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000070 	.word	0x20000070

08008134 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2229      	movs	r2, #41	@ 0x29
 8008140:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008142:	4b03      	ldr	r3, [pc, #12]	@ (8008150 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	2000009c 	.word	0x2000009c

08008154 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008166:	2200      	movs	r2, #0
 8008168:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008188:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	7810      	ldrb	r0, [r2, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	7852      	ldrb	r2, [r2, #1]
 800819a:	4611      	mov	r1, r2
 800819c:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2101      	movs	r1, #1
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 fc56 	bl	8009a56 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d10c      	bne.n	80081e6 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	7810      	ldrb	r0, [r2, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	7852      	ldrb	r2, [r2, #1]
 80081dc:	4611      	mov	r1, r2
 80081de:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	220a      	movs	r2, #10
 80081fc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	200000d4 	.word	0x200000d4

08008210 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800821a:	2302      	movs	r3, #2
 800821c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr

0800823c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008250:	2302      	movs	r3, #2
 8008252:	e01a      	b.n	800828a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	79fa      	ldrb	r2, [r7, #7]
 8008280:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f001 fa8c 	bl	80097a0 <USBD_LL_Init>

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d006      	beq.n	80082b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
 80082b2:	e001      	b.n	80082b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80082b4:	2302      	movs	r3, #2
 80082b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fab7 	bl	8009840 <USBD_LL_Start>

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr

080082f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082fc:	2302      	movs	r3, #2
 80082fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	4611      	mov	r1, r2
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	78fa      	ldrb	r2, [r7, #3]
 8008344:	4611      	mov	r1, r2
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fed7 	bl	800911a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008388:	f003 031f 	and.w	r3, r3, #31
 800838c:	2b02      	cmp	r3, #2
 800838e:	d016      	beq.n	80083be <USBD_LL_SetupStage+0x6a>
 8008390:	2b02      	cmp	r3, #2
 8008392:	d81c      	bhi.n	80083ce <USBD_LL_SetupStage+0x7a>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <USBD_LL_SetupStage+0x4a>
 8008398:	2b01      	cmp	r3, #1
 800839a:	d008      	beq.n	80083ae <USBD_LL_SetupStage+0x5a>
 800839c:	e017      	b.n	80083ce <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9ca 	bl	8008740 <USBD_StdDevReq>
      break;
 80083ac:	e01a      	b.n	80083e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa2c 	bl	8008814 <USBD_StdItfReq>
      break;
 80083bc:	e012      	b.n	80083e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa6c 	bl	80088a4 <USBD_StdEPReq>
      break;
 80083cc:	e00a      	b.n	80083e4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80083d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fa8f 	bl	8009900 <USBD_LL_StallEP>
      break;
 80083e2:	bf00      	nop
  }

  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b086      	sub	sp, #24
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	460b      	mov	r3, r1
 80083f8:	607a      	str	r2, [r7, #4]
 80083fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d14b      	bne.n	800849a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008408:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008410:	2b03      	cmp	r3, #3
 8008412:	d134      	bne.n	800847e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	429a      	cmp	r2, r3
 800841e:	d919      	bls.n	8008454 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008436:	429a      	cmp	r2, r3
 8008438:	d203      	bcs.n	8008442 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800843e:	b29b      	uxth	r3, r3
 8008440:	e002      	b.n	8008448 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008446:	b29b      	uxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 ff53 	bl	80092f8 <USBD_CtlContinueRx>
 8008452:	e038      	b.n	80084c6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008466:	2b03      	cmp	r3, #3
 8008468:	d105      	bne.n	8008476 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 ff50 	bl	800931c <USBD_CtlSendStatus>
 800847c:	e023      	b.n	80084c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008484:	2b05      	cmp	r3, #5
 8008486:	d11e      	bne.n	80084c6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008490:	2100      	movs	r1, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f001 fa34 	bl	8009900 <USBD_LL_StallEP>
 8008498:	e015      	b.n	80084c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00d      	beq.n	80084c2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d108      	bne.n	80084c2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	7afa      	ldrb	r2, [r7, #11]
 80084ba:	4611      	mov	r1, r2
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	4798      	blx	r3
 80084c0:	e001      	b.n	80084c6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084c2:	2302      	movs	r3, #2
 80084c4:	e000      	b.n	80084c8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	460b      	mov	r3, r1
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d17f      	bne.n	80085e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3314      	adds	r3, #20
 80084e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d15c      	bne.n	80085ae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d915      	bls.n	800852c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	1ad2      	subs	r2, r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	b29b      	uxth	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 febd 	bl	8009298 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800851e:	2300      	movs	r3, #0
 8008520:	2200      	movs	r2, #0
 8008522:	2100      	movs	r1, #0
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f001 fa96 	bl	8009a56 <USBD_LL_PrepareReceive>
 800852a:	e04e      	b.n	80085ca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	6912      	ldr	r2, [r2, #16]
 8008534:	fbb3 f1f2 	udiv	r1, r3, r2
 8008538:	fb01 f202 	mul.w	r2, r1, r2
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d11c      	bne.n	800857c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800854a:	429a      	cmp	r2, r3
 800854c:	d316      	bcc.n	800857c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008558:	429a      	cmp	r2, r3
 800855a:	d20f      	bcs.n	800857c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fe99 	bl	8009298 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800856e:	2300      	movs	r3, #0
 8008570:	2200      	movs	r2, #0
 8008572:	2100      	movs	r1, #0
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f001 fa6e 	bl	8009a56 <USBD_LL_PrepareReceive>
 800857a:	e026      	b.n	80085ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800858e:	2b03      	cmp	r3, #3
 8008590:	d105      	bne.n	800859e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800859e:	2180      	movs	r1, #128	@ 0x80
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 f9ad 	bl	8009900 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 fecb 	bl	8009342 <USBD_CtlReceiveStatus>
 80085ac:	e00d      	b.n	80085ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d004      	beq.n	80085c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085c2:	2180      	movs	r1, #128	@ 0x80
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f001 f99b 	bl	8009900 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d11d      	bne.n	8008610 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fe81 	bl	80082dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085e2:	e015      	b.n	8008610 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00d      	beq.n	800860c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d108      	bne.n	800860c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	7afa      	ldrb	r2, [r7, #11]
 8008604:	4611      	mov	r1, r2
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	4798      	blx	r3
 800860a:	e001      	b.n	8008610 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800860c:	2302      	movs	r3, #2
 800860e:	e000      	b.n	8008612 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008622:	2340      	movs	r3, #64	@ 0x40
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f924 	bl	8009876 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2240      	movs	r2, #64	@ 0x40
 800863a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800863e:	2340      	movs	r3, #64	@ 0x40
 8008640:	2200      	movs	r2, #0
 8008642:	2180      	movs	r1, #128	@ 0x80
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 f916 	bl	8009876 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2240      	movs	r2, #64	@ 0x40
 8008654:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6852      	ldr	r2, [r2, #4]
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	4611      	mov	r1, r2
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
  }

  return USBD_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2204      	movs	r2, #4
 80086d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d105      	bne.n	8008700 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800871a:	2b03      	cmp	r3, #3
 800871c:	d10b      	bne.n	8008736 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008756:	2b40      	cmp	r3, #64	@ 0x40
 8008758:	d005      	beq.n	8008766 <USBD_StdDevReq+0x26>
 800875a:	2b40      	cmp	r3, #64	@ 0x40
 800875c:	d84f      	bhi.n	80087fe <USBD_StdDevReq+0xbe>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <USBD_StdDevReq+0x36>
 8008762:	2b20      	cmp	r3, #32
 8008764:	d14b      	bne.n	80087fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
      break;
 8008774:	e048      	b.n	8008808 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b09      	cmp	r3, #9
 800877c:	d839      	bhi.n	80087f2 <USBD_StdDevReq+0xb2>
 800877e:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <USBD_StdDevReq+0x44>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087d5 	.word	0x080087d5
 8008788:	080087e9 	.word	0x080087e9
 800878c:	080087f3 	.word	0x080087f3
 8008790:	080087df 	.word	0x080087df
 8008794:	080087f3 	.word	0x080087f3
 8008798:	080087b7 	.word	0x080087b7
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087f3 	.word	0x080087f3
 80087a4:	080087cb 	.word	0x080087cb
 80087a8:	080087c1 	.word	0x080087c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9dc 	bl	8008b6c <USBD_GetDescriptor>
          break;
 80087b4:	e022      	b.n	80087fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fb3f 	bl	8008e3c <USBD_SetAddress>
          break;
 80087be:	e01d      	b.n	80087fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fb7e 	bl	8008ec4 <USBD_SetConfig>
          break;
 80087c8:	e018      	b.n	80087fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fc07 	bl	8008fe0 <USBD_GetConfig>
          break;
 80087d2:	e013      	b.n	80087fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fc37 	bl	800904a <USBD_GetStatus>
          break;
 80087dc:	e00e      	b.n	80087fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fc65 	bl	80090b0 <USBD_SetFeature>
          break;
 80087e6:	e009      	b.n	80087fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fc74 	bl	80090d8 <USBD_ClrFeature>
          break;
 80087f0:	e004      	b.n	80087fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fcc9 	bl	800918c <USBD_CtlError>
          break;
 80087fa:	bf00      	nop
      }
      break;
 80087fc:	e004      	b.n	8008808 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fcc3 	bl	800918c <USBD_CtlError>
      break;
 8008806:	bf00      	nop
  }

  return ret;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop

08008814 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800882a:	2b40      	cmp	r3, #64	@ 0x40
 800882c:	d005      	beq.n	800883a <USBD_StdItfReq+0x26>
 800882e:	2b40      	cmp	r3, #64	@ 0x40
 8008830:	d82e      	bhi.n	8008890 <USBD_StdItfReq+0x7c>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <USBD_StdItfReq+0x26>
 8008836:	2b20      	cmp	r3, #32
 8008838:	d12a      	bne.n	8008890 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008840:	3b01      	subs	r3, #1
 8008842:	2b02      	cmp	r3, #2
 8008844:	d81d      	bhi.n	8008882 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	889b      	ldrh	r3, [r3, #4]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	d813      	bhi.n	8008878 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d110      	bne.n	800888c <USBD_StdItfReq+0x78>
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10d      	bne.n	800888c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fd53 	bl	800931c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008876:	e009      	b.n	800888c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc86 	bl	800918c <USBD_CtlError>
          break;
 8008880:	e004      	b.n	800888c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fc81 	bl	800918c <USBD_CtlError>
          break;
 800888a:	e000      	b.n	800888e <USBD_StdItfReq+0x7a>
          break;
 800888c:	bf00      	nop
      }
      break;
 800888e:	e004      	b.n	800889a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc7a 	bl	800918c <USBD_CtlError>
      break;
 8008898:	bf00      	nop
  }

  return USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	889b      	ldrh	r3, [r3, #4]
 80088b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088c0:	2b40      	cmp	r3, #64	@ 0x40
 80088c2:	d007      	beq.n	80088d4 <USBD_StdEPReq+0x30>
 80088c4:	2b40      	cmp	r3, #64	@ 0x40
 80088c6:	f200 8146 	bhi.w	8008b56 <USBD_StdEPReq+0x2b2>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <USBD_StdEPReq+0x40>
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	f040 8141 	bne.w	8008b56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
      break;
 80088e2:	e13d      	b.n	8008b60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d10a      	bne.n	8008906 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	e12d      	b.n	8008b62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d007      	beq.n	800891e <USBD_StdEPReq+0x7a>
 800890e:	2b03      	cmp	r3, #3
 8008910:	f300 811b 	bgt.w	8008b4a <USBD_StdEPReq+0x2a6>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d072      	beq.n	80089fe <USBD_StdEPReq+0x15a>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d03a      	beq.n	8008992 <USBD_StdEPReq+0xee>
 800891c:	e115      	b.n	8008b4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008924:	2b02      	cmp	r3, #2
 8008926:	d002      	beq.n	800892e <USBD_StdEPReq+0x8a>
 8008928:	2b03      	cmp	r3, #3
 800892a:	d015      	beq.n	8008958 <USBD_StdEPReq+0xb4>
 800892c:	e02b      	b.n	8008986 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00c      	beq.n	800894e <USBD_StdEPReq+0xaa>
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b80      	cmp	r3, #128	@ 0x80
 8008938:	d009      	beq.n	800894e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 ffde 	bl	8009900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008944:	2180      	movs	r1, #128	@ 0x80
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 ffda 	bl	8009900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800894c:	e020      	b.n	8008990 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fc1b 	bl	800918c <USBD_CtlError>
              break;
 8008956:	e01b      	b.n	8008990 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	885b      	ldrh	r3, [r3, #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10e      	bne.n	800897e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00b      	beq.n	800897e <USBD_StdEPReq+0xda>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	@ 0x80
 800896a:	d008      	beq.n	800897e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	88db      	ldrh	r3, [r3, #6]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 ffc1 	bl	8009900 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fccc 	bl	800931c <USBD_CtlSendStatus>

              break;
 8008984:	e004      	b.n	8008990 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fbff 	bl	800918c <USBD_CtlError>
              break;
 800898e:	bf00      	nop
          }
          break;
 8008990:	e0e0      	b.n	8008b54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008998:	2b02      	cmp	r3, #2
 800899a:	d002      	beq.n	80089a2 <USBD_StdEPReq+0xfe>
 800899c:	2b03      	cmp	r3, #3
 800899e:	d015      	beq.n	80089cc <USBD_StdEPReq+0x128>
 80089a0:	e026      	b.n	80089f0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00c      	beq.n	80089c2 <USBD_StdEPReq+0x11e>
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	2b80      	cmp	r3, #128	@ 0x80
 80089ac:	d009      	beq.n	80089c2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 ffa4 	bl	8009900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089b8:	2180      	movs	r1, #128	@ 0x80
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 ffa0 	bl	8009900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089c0:	e01c      	b.n	80089fc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fbe1 	bl	800918c <USBD_CtlError>
              break;
 80089ca:	e017      	b.n	80089fc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	885b      	ldrh	r3, [r3, #2]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d112      	bne.n	80089fa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 ffab 	bl	800993e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fc97 	bl	800931c <USBD_CtlSendStatus>
              }
              break;
 80089ee:	e004      	b.n	80089fa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fbca 	bl	800918c <USBD_CtlError>
              break;
 80089f8:	e000      	b.n	80089fc <USBD_StdEPReq+0x158>
              break;
 80089fa:	bf00      	nop
          }
          break;
 80089fc:	e0aa      	b.n	8008b54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d002      	beq.n	8008a0e <USBD_StdEPReq+0x16a>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d032      	beq.n	8008a72 <USBD_StdEPReq+0x1ce>
 8008a0c:	e097      	b.n	8008b3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <USBD_StdEPReq+0x180>
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b80      	cmp	r3, #128	@ 0x80
 8008a18:	d004      	beq.n	8008a24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fbb5 	bl	800918c <USBD_CtlError>
                break;
 8008a22:	e091      	b.n	8008b48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	da0b      	bge.n	8008a44 <USBD_StdEPReq+0x1a0>
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	3310      	adds	r3, #16
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	4413      	add	r3, r2
 8008a40:	3304      	adds	r3, #4
 8008a42:	e00b      	b.n	8008a5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4413      	add	r3, r2
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2202      	movs	r2, #2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fbf8 	bl	8009260 <USBD_CtlSendData>
              break;
 8008a70:	e06a      	b.n	8008b48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	da11      	bge.n	8008a9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d117      	bne.n	8008ac4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fb78 	bl	800918c <USBD_CtlError>
                  break;
 8008a9c:	e054      	b.n	8008b48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d104      	bne.n	8008ac4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fb65 	bl	800918c <USBD_CtlError>
                  break;
 8008ac2:	e041      	b.n	8008b48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	da0b      	bge.n	8008ae4 <USBD_StdEPReq+0x240>
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	3310      	adds	r3, #16
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	4413      	add	r3, r2
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	e00b      	b.n	8008afc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	3304      	adds	r3, #4
 8008afc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <USBD_StdEPReq+0x266>
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b80      	cmp	r3, #128	@ 0x80
 8008b08:	d103      	bne.n	8008b12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e00e      	b.n	8008b30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 ff30 	bl	800997c <USBD_LL_IsStallEP>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e002      	b.n	8008b30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2202      	movs	r2, #2
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb92 	bl	8009260 <USBD_CtlSendData>
              break;
 8008b3c:	e004      	b.n	8008b48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fb23 	bl	800918c <USBD_CtlError>
              break;
 8008b46:	bf00      	nop
          }
          break;
 8008b48:	e004      	b.n	8008b54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fb1d 	bl	800918c <USBD_CtlError>
          break;
 8008b52:	bf00      	nop
      }
      break;
 8008b54:	e004      	b.n	8008b60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fb17 	bl	800918c <USBD_CtlError>
      break;
 8008b5e:	bf00      	nop
  }

  return ret;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	0a1b      	lsrs	r3, r3, #8
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	2b06      	cmp	r3, #6
 8008b8e:	f200 8128 	bhi.w	8008de2 <USBD_GetDescriptor+0x276>
 8008b92:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <USBD_GetDescriptor+0x2c>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bcd 	.word	0x08008bcd
 8008ba0:	08008c0d 	.word	0x08008c0d
 8008ba4:	08008de3 	.word	0x08008de3
 8008ba8:	08008de3 	.word	0x08008de3
 8008bac:	08008d83 	.word	0x08008d83
 8008bb0:	08008daf 	.word	0x08008daf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	7c12      	ldrb	r2, [r2, #16]
 8008bc0:	f107 0108 	add.w	r1, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
      break;
 8008bca:	e112      	b.n	8008df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7c1b      	ldrb	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10d      	bne.n	8008bf0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bdc:	f107 0208 	add.w	r2, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	2202      	movs	r2, #2
 8008bec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bee:	e100      	b.n	8008df2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	f107 0208 	add.w	r2, r7, #8
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4798      	blx	r3
 8008c00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3301      	adds	r3, #1
 8008c06:	2202      	movs	r2, #2
 8008c08:	701a      	strb	r2, [r3, #0]
      break;
 8008c0a:	e0f2      	b.n	8008df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	885b      	ldrh	r3, [r3, #2]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	f200 80ac 	bhi.w	8008d70 <USBD_GetDescriptor+0x204>
 8008c18:	a201      	add	r2, pc, #4	@ (adr r2, 8008c20 <USBD_GetDescriptor+0xb4>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c6d 	.word	0x08008c6d
 8008c28:	08008ca1 	.word	0x08008ca1
 8008c2c:	08008cd5 	.word	0x08008cd5
 8008c30:	08008d09 	.word	0x08008d09
 8008c34:	08008d3d 	.word	0x08008d3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	7c12      	ldrb	r2, [r2, #16]
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5a:	e091      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa94 	bl	800918c <USBD_CtlError>
            err++;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	3301      	adds	r3, #1
 8008c68:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6a:	e089      	b.n	8008d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7c12      	ldrb	r2, [r2, #16]
 8008c84:	f107 0108 	add.w	r1, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8e:	e077      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa7a 	bl	800918c <USBD_CtlError>
            err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9e:	e06f      	b.n	8008d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc2:	e05d      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa60 	bl	800918c <USBD_CtlError>
            err++;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd2:	e055      	b.n	8008d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	7c12      	ldrb	r2, [r2, #16]
 8008cec:	f107 0108 	add.w	r1, r7, #8
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf6:	e043      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa46 	bl	800918c <USBD_CtlError>
            err++;
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	3301      	adds	r3, #1
 8008d04:	72fb      	strb	r3, [r7, #11]
          break;
 8008d06:	e03b      	b.n	8008d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7c12      	ldrb	r2, [r2, #16]
 8008d20:	f107 0108 	add.w	r1, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2a:	e029      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa2c 	bl	800918c <USBD_CtlError>
            err++;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	3301      	adds	r3, #1
 8008d38:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3a:	e021      	b.n	8008d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7c12      	ldrb	r2, [r2, #16]
 8008d54:	f107 0108 	add.w	r1, r7, #8
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5e:	e00f      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa12 	bl	800918c <USBD_CtlError>
            err++;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6e:	e007      	b.n	8008d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa0a 	bl	800918c <USBD_CtlError>
          err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d7e:	e038      	b.n	8008df2 <USBD_GetDescriptor+0x286>
 8008d80:	e037      	b.n	8008df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7c1b      	ldrb	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d92:	f107 0208 	add.w	r2, r7, #8
 8008d96:	4610      	mov	r0, r2
 8008d98:	4798      	blx	r3
 8008d9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d9c:	e029      	b.n	8008df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9f3 	bl	800918c <USBD_CtlError>
        err++;
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	3301      	adds	r3, #1
 8008daa:	72fb      	strb	r3, [r7, #11]
      break;
 8008dac:	e021      	b.n	8008df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7c1b      	ldrb	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10d      	bne.n	8008dd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	f107 0208 	add.w	r2, r7, #8
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4798      	blx	r3
 8008dc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	2207      	movs	r2, #7
 8008dce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dd0:	e00f      	b.n	8008df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9d9 	bl	800918c <USBD_CtlError>
        err++;
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	72fb      	strb	r3, [r7, #11]
      break;
 8008de0:	e007      	b.n	8008df2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f9d1 	bl	800918c <USBD_CtlError>
      err++;
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	3301      	adds	r3, #1
 8008dee:	72fb      	strb	r3, [r7, #11]
      break;
 8008df0:	bf00      	nop
  }

  if (err != 0U)
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11c      	bne.n	8008e32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008df8:	893b      	ldrh	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d011      	beq.n	8008e22 <USBD_GetDescriptor+0x2b6>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00d      	beq.n	8008e22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88da      	ldrh	r2, [r3, #6]
 8008e0a:	893b      	ldrh	r3, [r7, #8]
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	bf28      	it	cs
 8008e10:	4613      	movcs	r3, r2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e16:	893b      	ldrh	r3, [r7, #8]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fa1f 	bl	8009260 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	88db      	ldrh	r3, [r3, #6]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa76 	bl	800931c <USBD_CtlSendStatus>
 8008e30:	e000      	b.n	8008e34 <USBD_GetDescriptor+0x2c8>
    return;
 8008e32:	bf00      	nop
    }
  }
}
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop

08008e3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	889b      	ldrh	r3, [r3, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d130      	bne.n	8008eb0 <USBD_SetAddress+0x74>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	88db      	ldrh	r3, [r3, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d12c      	bne.n	8008eb0 <USBD_SetAddress+0x74>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e5c:	d828      	bhi.n	8008eb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d104      	bne.n	8008e7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f988 	bl	800918c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7c:	e01d      	b.n	8008eba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7bfa      	ldrb	r2, [r7, #15]
 8008e82:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fda1 	bl	80099d2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa43 	bl	800931c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea4:	e009      	b.n	8008eba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eae:	e004      	b.n	8008eba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f96a 	bl	800918c <USBD_CtlError>
  }
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	885b      	ldrh	r3, [r3, #2]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	4b41      	ldr	r3, [pc, #260]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008ed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ed8:	4b40      	ldr	r3, [pc, #256]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d904      	bls.n	8008eea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f952 	bl	800918c <USBD_CtlError>
 8008ee8:	e075      	b.n	8008fd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d002      	beq.n	8008efa <USBD_SetConfig+0x36>
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d023      	beq.n	8008f40 <USBD_SetConfig+0x7c>
 8008ef8:	e062      	b.n	8008fc0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008efa:	4b38      	ldr	r3, [pc, #224]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01a      	beq.n	8008f38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f02:	4b36      	ldr	r3, [pc, #216]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2203      	movs	r2, #3
 8008f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f14:	4b31      	ldr	r3, [pc, #196]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff f9e8 	bl	80082f0 <USBD_SetClassConfig>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d104      	bne.n	8008f30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f92f 	bl	800918c <USBD_CtlError>
            return;
 8008f2e:	e052      	b.n	8008fd6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f9f3 	bl	800931c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f36:	e04e      	b.n	8008fd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f9ef 	bl	800931c <USBD_CtlSendStatus>
        break;
 8008f3e:	e04a      	b.n	8008fd6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f40:	4b26      	ldr	r3, [pc, #152]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d112      	bne.n	8008f6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008f50:	4b22      	ldr	r3, [pc, #136]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f5a:	4b20      	ldr	r3, [pc, #128]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff f9e4 	bl	800832e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f9d8 	bl	800931c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f6c:	e033      	b.n	8008fd6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d01d      	beq.n	8008fb8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff f9d2 	bl	800832e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f8a:	4b14      	ldr	r3, [pc, #80]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f94:	4b11      	ldr	r3, [pc, #68]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff f9a8 	bl	80082f0 <USBD_SetClassConfig>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d104      	bne.n	8008fb0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f8ef 	bl	800918c <USBD_CtlError>
            return;
 8008fae:	e012      	b.n	8008fd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f9b3 	bl	800931c <USBD_CtlSendStatus>
        break;
 8008fb6:	e00e      	b.n	8008fd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f9af 	bl	800931c <USBD_CtlSendStatus>
        break;
 8008fbe:	e00a      	b.n	8008fd6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f8e2 	bl	800918c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008fc8:	4b04      	ldr	r3, [pc, #16]	@ (8008fdc <USBD_SetConfig+0x118>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff f9ad 	bl	800832e <USBD_ClrClassConfig>
        break;
 8008fd4:	bf00      	nop
    }
  }
}
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000210 	.word	0x20000210

08008fe0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d004      	beq.n	8008ffc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f8c9 	bl	800918c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ffa:	e022      	b.n	8009042 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009002:	2b02      	cmp	r3, #2
 8009004:	dc02      	bgt.n	800900c <USBD_GetConfig+0x2c>
 8009006:	2b00      	cmp	r3, #0
 8009008:	dc03      	bgt.n	8009012 <USBD_GetConfig+0x32>
 800900a:	e015      	b.n	8009038 <USBD_GetConfig+0x58>
 800900c:	2b03      	cmp	r3, #3
 800900e:	d00b      	beq.n	8009028 <USBD_GetConfig+0x48>
 8009010:	e012      	b.n	8009038 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3308      	adds	r3, #8
 800901c:	2201      	movs	r2, #1
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f91d 	bl	8009260 <USBD_CtlSendData>
        break;
 8009026:	e00c      	b.n	8009042 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3304      	adds	r3, #4
 800902c:	2201      	movs	r2, #1
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f915 	bl	8009260 <USBD_CtlSendData>
        break;
 8009036:	e004      	b.n	8009042 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f8a6 	bl	800918c <USBD_CtlError>
        break;
 8009040:	bf00      	nop
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800905a:	3b01      	subs	r3, #1
 800905c:	2b02      	cmp	r3, #2
 800905e:	d81e      	bhi.n	800909e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	88db      	ldrh	r3, [r3, #6]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d004      	beq.n	8009072 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f88e 	bl	800918c <USBD_CtlError>
        break;
 8009070:	e01a      	b.n	80090a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f043 0202 	orr.w	r2, r3, #2
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	330c      	adds	r3, #12
 8009092:	2202      	movs	r2, #2
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f8e2 	bl	8009260 <USBD_CtlSendData>
      break;
 800909c:	e004      	b.n	80090a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f873 	bl	800918c <USBD_CtlError>
      break;
 80090a6:	bf00      	nop
  }
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d106      	bne.n	80090d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f926 	bl	800931c <USBD_CtlSendStatus>
  }
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e8:	3b01      	subs	r3, #1
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d80b      	bhi.n	8009106 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d10c      	bne.n	8009110 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f90c 	bl	800931c <USBD_CtlSendStatus>
      }
      break;
 8009104:	e004      	b.n	8009110 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f83f 	bl	800918c <USBD_CtlError>
      break;
 800910e:	e000      	b.n	8009112 <USBD_ClrFeature+0x3a>
      break;
 8009110:	bf00      	nop
  }
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	785a      	ldrb	r2, [r3, #1]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	3302      	adds	r3, #2
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	3303      	adds	r3, #3
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	021b      	lsls	r3, r3, #8
 8009144:	b29b      	uxth	r3, r3
 8009146:	4413      	add	r3, r2
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	3304      	adds	r3, #4
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	3305      	adds	r3, #5
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	b29b      	uxth	r3, r3
 8009160:	4413      	add	r3, r2
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	3306      	adds	r3, #6
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	3307      	adds	r3, #7
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	b29b      	uxth	r3, r3
 800917a:	4413      	add	r3, r2
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	80da      	strh	r2, [r3, #6]

}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr

0800918c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009196:	2180      	movs	r1, #128	@ 0x80
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fbb1 	bl	8009900 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800919e:	2100      	movs	r1, #0
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fbad 	bl	8009900 <USBD_LL_StallEP>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d032      	beq.n	800922a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f834 	bl	8009232 <USBD_GetLen>
 80091ca:	4603      	mov	r3, r0
 80091cc:	3301      	adds	r3, #1
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	75fa      	strb	r2, [r7, #23]
 80091de:	461a      	mov	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4413      	add	r3, r2
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	7812      	ldrb	r2, [r2, #0]
 80091e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	75fa      	strb	r2, [r7, #23]
 80091f0:	461a      	mov	r2, r3
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	2203      	movs	r2, #3
 80091f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091fa:	e012      	b.n	8009222 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	60fa      	str	r2, [r7, #12]
 8009202:	7dfa      	ldrb	r2, [r7, #23]
 8009204:	1c51      	adds	r1, r2, #1
 8009206:	75f9      	strb	r1, [r7, #23]
 8009208:	4611      	mov	r1, r2
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	440a      	add	r2, r1
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	75fa      	strb	r2, [r7, #23]
 8009218:	461a      	mov	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e8      	bne.n	80091fc <USBD_GetString+0x4e>
    }
  }
}
 800922a:	bf00      	nop
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800923e:	e005      	b.n	800924c <USBD_GetLen+0x1a>
  {
    len++;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	3301      	adds	r3, #1
 8009244:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3301      	adds	r3, #1
 800924a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1f5      	bne.n	8009240 <USBD_GetLen+0xe>
  }

  return len;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4613      	mov	r3, r2
 800926c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2202      	movs	r2, #2
 8009272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800927c:	88fa      	ldrh	r2, [r7, #6]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	2100      	movs	r1, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fbc1 	bl	8009a10 <USBD_LL_Transmit>

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092a6:	88fb      	ldrh	r3, [r7, #6]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	2100      	movs	r1, #0
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 fbaf 	bl	8009a10 <USBD_LL_Transmit>

  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4613      	mov	r3, r2
 80092c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2203      	movs	r2, #3
 80092ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fbb4 	bl	8009a56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	2100      	movs	r1, #0
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fba2 	bl	8009a56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2204      	movs	r2, #4
 8009328:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fb6c 	bl	8009a10 <USBD_LL_Transmit>

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2205      	movs	r2, #5
 800934e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009352:	2300      	movs	r3, #0
 8009354:	2200      	movs	r2, #0
 8009356:	2100      	movs	r1, #0
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fb7c 	bl	8009a56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800936c:	2200      	movs	r2, #0
 800936e:	4912      	ldr	r1, [pc, #72]	@ (80093b8 <MX_USB_DEVICE_Init+0x50>)
 8009370:	4812      	ldr	r0, [pc, #72]	@ (80093bc <MX_USB_DEVICE_Init+0x54>)
 8009372:	f7fe ff63 	bl	800823c <USBD_Init>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800937c:	f7f8 fba2 	bl	8001ac4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009380:	490f      	ldr	r1, [pc, #60]	@ (80093c0 <MX_USB_DEVICE_Init+0x58>)
 8009382:	480e      	ldr	r0, [pc, #56]	@ (80093bc <MX_USB_DEVICE_Init+0x54>)
 8009384:	f7fe ff85 	bl	8008292 <USBD_RegisterClass>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800938e:	f7f8 fb99 	bl	8001ac4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009392:	490c      	ldr	r1, [pc, #48]	@ (80093c4 <MX_USB_DEVICE_Init+0x5c>)
 8009394:	4809      	ldr	r0, [pc, #36]	@ (80093bc <MX_USB_DEVICE_Init+0x54>)
 8009396:	f7fe ff3b 	bl	8008210 <USBD_CUSTOM_HID_RegisterInterface>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093a0:	f7f8 fb90 	bl	8001ac4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093a4:	4805      	ldr	r0, [pc, #20]	@ (80093bc <MX_USB_DEVICE_Init+0x54>)
 80093a6:	f7fe ff8d 	bl	80082c4 <USBD_Start>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093b0:	f7f8 fb88 	bl	8001ac4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093b4:	bf00      	nop
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2000013c 	.word	0x2000013c
 80093bc:	20000214 	.word	0x20000214
 80093c0:	2000000c 	.word	0x2000000c
 80093c4:	2000012c 	.word	0x2000012c

080093c8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80093d6:	b480      	push	{r7}
 80093d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80093da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093dc:	4618      	mov	r0, r3
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr

080093e4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	460a      	mov	r2, r1
 80093ee:	71fb      	strb	r3, [r7, #7]
 80093f0:	4613      	mov	r3, r2
 80093f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80093f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2212      	movs	r2, #18
 8009410:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009412:	4b03      	ldr	r3, [pc, #12]	@ (8009420 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	bc80      	pop	{r7}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20000158 	.word	0x20000158

08009424 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2204      	movs	r2, #4
 8009434:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009436:	4b03      	ldr	r3, [pc, #12]	@ (8009444 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	2000016c 	.word	0x2000016c

08009448 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	6039      	str	r1, [r7, #0]
 8009452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d105      	bne.n	8009466 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4907      	ldr	r1, [pc, #28]	@ (800947c <USBD_FS_ProductStrDescriptor+0x34>)
 800945e:	4808      	ldr	r0, [pc, #32]	@ (8009480 <USBD_FS_ProductStrDescriptor+0x38>)
 8009460:	f7ff fea5 	bl	80091ae <USBD_GetString>
 8009464:	e004      	b.n	8009470 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	4904      	ldr	r1, [pc, #16]	@ (800947c <USBD_FS_ProductStrDescriptor+0x34>)
 800946a:	4805      	ldr	r0, [pc, #20]	@ (8009480 <USBD_FS_ProductStrDescriptor+0x38>)
 800946c:	f7ff fe9f 	bl	80091ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009470:	4b02      	ldr	r3, [pc, #8]	@ (800947c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200004d8 	.word	0x200004d8
 8009480:	08009ba4 	.word	0x08009ba4

08009484 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	6039      	str	r1, [r7, #0]
 800948e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	4904      	ldr	r1, [pc, #16]	@ (80094a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009494:	4804      	ldr	r0, [pc, #16]	@ (80094a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009496:	f7ff fe8a 	bl	80091ae <USBD_GetString>
  return USBD_StrDesc;
 800949a:	4b02      	ldr	r3, [pc, #8]	@ (80094a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	200004d8 	.word	0x200004d8
 80094a8:	08009bc4 	.word	0x08009bc4

080094ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	6039      	str	r1, [r7, #0]
 80094b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	221a      	movs	r2, #26
 80094bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094be:	f000 f843 	bl	8009548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094c2:	4b02      	ldr	r3, [pc, #8]	@ (80094cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000170 	.word	0x20000170

080094d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094dc:	79fb      	ldrb	r3, [r7, #7]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	4907      	ldr	r1, [pc, #28]	@ (8009504 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094e6:	4808      	ldr	r0, [pc, #32]	@ (8009508 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094e8:	f7ff fe61 	bl	80091ae <USBD_GetString>
 80094ec:	e004      	b.n	80094f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	4904      	ldr	r1, [pc, #16]	@ (8009504 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094f2:	4805      	ldr	r0, [pc, #20]	@ (8009508 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094f4:	f7ff fe5b 	bl	80091ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80094f8:	4b02      	ldr	r3, [pc, #8]	@ (8009504 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	200004d8 	.word	0x200004d8
 8009508:	08009bd8 	.word	0x08009bd8

0800950c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	6039      	str	r1, [r7, #0]
 8009516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4907      	ldr	r1, [pc, #28]	@ (8009540 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009522:	4808      	ldr	r0, [pc, #32]	@ (8009544 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009524:	f7ff fe43 	bl	80091ae <USBD_GetString>
 8009528:	e004      	b.n	8009534 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	4904      	ldr	r1, [pc, #16]	@ (8009540 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800952e:	4805      	ldr	r0, [pc, #20]	@ (8009544 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009530:	f7ff fe3d 	bl	80091ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009534:	4b02      	ldr	r3, [pc, #8]	@ (8009540 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	200004d8 	.word	0x200004d8
 8009544:	08009bec 	.word	0x08009bec

08009548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800954e:	4b0f      	ldr	r3, [pc, #60]	@ (800958c <Get_SerialNum+0x44>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009554:	4b0e      	ldr	r3, [pc, #56]	@ (8009590 <Get_SerialNum+0x48>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800955a:	4b0e      	ldr	r3, [pc, #56]	@ (8009594 <Get_SerialNum+0x4c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4413      	add	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800956e:	2208      	movs	r2, #8
 8009570:	4909      	ldr	r1, [pc, #36]	@ (8009598 <Get_SerialNum+0x50>)
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f814 	bl	80095a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009578:	2204      	movs	r2, #4
 800957a:	4908      	ldr	r1, [pc, #32]	@ (800959c <Get_SerialNum+0x54>)
 800957c:	68b8      	ldr	r0, [r7, #8]
 800957e:	f000 f80f 	bl	80095a0 <IntToUnicode>
  }
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	1ffff7e8 	.word	0x1ffff7e8
 8009590:	1ffff7ec 	.word	0x1ffff7ec
 8009594:	1ffff7f0 	.word	0x1ffff7f0
 8009598:	20000172 	.word	0x20000172
 800959c:	20000182 	.word	0x20000182

080095a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	75fb      	strb	r3, [r7, #23]
 80095b6:	e027      	b.n	8009608 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	0f1b      	lsrs	r3, r3, #28
 80095bc:	2b09      	cmp	r3, #9
 80095be:	d80b      	bhi.n	80095d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	0f1b      	lsrs	r3, r3, #28
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4619      	mov	r1, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	440b      	add	r3, r1
 80095d0:	3230      	adds	r2, #48	@ 0x30
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	e00a      	b.n	80095ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	0f1b      	lsrs	r3, r3, #28
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	4619      	mov	r1, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	440b      	add	r3, r1
 80095e8:	3237      	adds	r2, #55	@ 0x37
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	3301      	adds	r3, #1
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	3301      	adds	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
 8009608:	7dfa      	ldrb	r2, [r7, #23]
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	429a      	cmp	r2, r3
 800960e:	d3d3      	bcc.n	80095b8 <IntToUnicode+0x18>
  }
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a0d      	ldr	r2, [pc, #52]	@ (8009660 <HAL_PCD_MspInit+0x44>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d113      	bne.n	8009656 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800962e:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <HAL_PCD_MspInit+0x48>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	4a0c      	ldr	r2, [pc, #48]	@ (8009664 <HAL_PCD_MspInit+0x48>)
 8009634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009638:	61d3      	str	r3, [r2, #28]
 800963a:	4b0a      	ldr	r3, [pc, #40]	@ (8009664 <HAL_PCD_MspInit+0x48>)
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	2014      	movs	r0, #20
 800964c:	f7f8 fc0d 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009650:	2014      	movs	r0, #20
 8009652:	f7f8 fc26 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40005c00 	.word	0x40005c00
 8009664:	40021000 	.word	0x40021000

08009668 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f7fe fe68 	bl	8008354 <USBD_LL_SetupStage>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	6879      	ldr	r1, [r7, #4]
 80096a2:	4613      	mov	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	440b      	add	r3, r1
 80096ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7fe fe9a 	bl	80083ee <USBD_LL_DataOutStage>
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	6879      	ldr	r1, [r7, #4]
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	440b      	add	r3, r1
 80096e2:	3324      	adds	r3, #36	@ 0x24
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	4619      	mov	r1, r3
 80096ea:	f7fe fef1 	bl	80084d0 <USBD_LL_DataInStage>
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009704:	4618      	mov	r0, r3
 8009706:	f7ff f801 	bl	800870c <USBD_LL_SOF>
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800971a:	2301      	movs	r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	799b      	ldrb	r3, [r3, #6]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d001      	beq.n	800972a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009726:	f7f8 f9cd 	bl	8001ac4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009730:	7bfa      	ldrb	r2, [r7, #15]
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe ffb1 	bl	800869c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe ff6a 	bl	800861a <USBD_LL_Reset>
}
 8009746:	bf00      	nop
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe ffab 	bl	80086ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7a9b      	ldrb	r3, [r3, #10]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800976c:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <HAL_PCD_SuspendCallback+0x30>)
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	4a03      	ldr	r2, [pc, #12]	@ (8009780 <HAL_PCD_SuspendCallback+0x30>)
 8009772:	f043 0306 	orr.w	r3, r3, #6
 8009776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	e000ed00 	.word	0xe000ed00

08009784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe ffa5 	bl	80086e2 <USBD_LL_Resume>
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80097a8:	4a23      	ldr	r2, [pc, #140]	@ (8009838 <USBD_LL_Init+0x98>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a21      	ldr	r2, [pc, #132]	@ (8009838 <USBD_LL_Init+0x98>)
 80097b4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80097b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009838 <USBD_LL_Init+0x98>)
 80097ba:	4a20      	ldr	r2, [pc, #128]	@ (800983c <USBD_LL_Init+0x9c>)
 80097bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097be:	4b1e      	ldr	r3, [pc, #120]	@ (8009838 <USBD_LL_Init+0x98>)
 80097c0:	2208      	movs	r2, #8
 80097c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009838 <USBD_LL_Init+0x98>)
 80097c6:	2202      	movs	r2, #2
 80097c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009838 <USBD_LL_Init+0x98>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097d0:	4b19      	ldr	r3, [pc, #100]	@ (8009838 <USBD_LL_Init+0x98>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097d6:	4b18      	ldr	r3, [pc, #96]	@ (8009838 <USBD_LL_Init+0x98>)
 80097d8:	2200      	movs	r2, #0
 80097da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097dc:	4816      	ldr	r0, [pc, #88]	@ (8009838 <USBD_LL_Init+0x98>)
 80097de:	f7f9 fd64 	bl	80032aa <HAL_PCD_Init>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80097e8:	f7f8 f96c 	bl	8001ac4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80097f2:	2318      	movs	r3, #24
 80097f4:	2200      	movs	r2, #0
 80097f6:	2100      	movs	r1, #0
 80097f8:	f7fb fa5e 	bl	8004cb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009802:	2358      	movs	r3, #88	@ 0x58
 8009804:	2200      	movs	r2, #0
 8009806:	2180      	movs	r1, #128	@ 0x80
 8009808:	f7fb fa56 	bl	8004cb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009812:	2398      	movs	r3, #152	@ 0x98
 8009814:	2200      	movs	r2, #0
 8009816:	2181      	movs	r1, #129	@ 0x81
 8009818:	f7fb fa4e 	bl	8004cb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009822:	23d8      	movs	r3, #216	@ 0xd8
 8009824:	2200      	movs	r2, #0
 8009826:	2101      	movs	r1, #1
 8009828:	f7fb fa46 	bl	8004cb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	200006d8 	.word	0x200006d8
 800983c:	40005c00 	.word	0x40005c00

08009840 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009856:	4618      	mov	r0, r3
 8009858:	f7f9 fe1d 	bl	8003496 <HAL_PCD_Start>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f93a 	bl	8009adc <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	461a      	mov	r2, r3
 8009884:	4603      	mov	r3, r0
 8009886:	70fb      	strb	r3, [r7, #3]
 8009888:	460b      	mov	r3, r1
 800988a:	70bb      	strb	r3, [r7, #2]
 800988c:	4613      	mov	r3, r2
 800988e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800989e:	78bb      	ldrb	r3, [r7, #2]
 80098a0:	883a      	ldrh	r2, [r7, #0]
 80098a2:	78f9      	ldrb	r1, [r7, #3]
 80098a4:	f7f9 ff71 	bl	800378a <HAL_PCD_EP_Open>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f914 	bl	8009adc <USBD_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098dc:	78fa      	ldrb	r2, [r7, #3]
 80098de:	4611      	mov	r1, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f9 ffaf 	bl	8003844 <HAL_PCD_EP_Close>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 f8f5 	bl	8009adc <USBD_Get_USB_Status>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f7fa f840 	bl	80039a4 <HAL_PCD_EP_SetStall>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f8d6 	bl	8009adc <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7fa f881 	bl	8003a64 <HAL_PCD_EP_ClrStall>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f8b7 	bl	8009adc <USBD_Get_USB_Status>
 800996e:	4603      	mov	r3, r0
 8009970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009972:	7bbb      	ldrb	r3, [r7, #14]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800998e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009994:	2b00      	cmp	r3, #0
 8009996:	da0b      	bge.n	80099b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	4613      	mov	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	440b      	add	r3, r1
 80099aa:	3312      	adds	r3, #18
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	e00b      	b.n	80099c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099b6:	68f9      	ldr	r1, [r7, #12]
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80099c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bc80      	pop	{r7}
 80099d0:	4770      	bx	lr

080099d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7f9 fea6 	bl	8003742 <HAL_PCD_SetAddress>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f86d 	bl	8009adc <USBD_Get_USB_Status>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	72fb      	strb	r3, [r7, #11]
 8009a20:	4613      	mov	r3, r2
 8009a22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	7af9      	ldrb	r1, [r7, #11]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	f7f9 ff7d 	bl	8003936 <HAL_PCD_EP_Transmit>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f84a 	bl	8009adc <USBD_Get_USB_Status>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	461a      	mov	r2, r3
 8009a62:	460b      	mov	r3, r1
 8009a64:	72fb      	strb	r3, [r7, #11]
 8009a66:	4613      	mov	r3, r2
 8009a68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a78:	893b      	ldrh	r3, [r7, #8]
 8009a7a:	7af9      	ldrb	r1, [r7, #11]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	f7f9 ff29 	bl	80038d4 <HAL_PCD_EP_Receive>
 8009a82:	4603      	mov	r3, r0
 8009a84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f827 	bl	8009adc <USBD_Get_USB_Status>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a92:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009aa4:	4b02      	ldr	r3, [pc, #8]	@ (8009ab0 <USBD_static_malloc+0x14>)
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc80      	pop	{r7}
 8009aae:	4770      	bx	lr
 8009ab0:	200009b0 	.word	0x200009b0

08009ab4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]

}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bc80      	pop	{r7}
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr

08009adc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aea:	79fb      	ldrb	r3, [r7, #7]
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d817      	bhi.n	8009b20 <USBD_Get_USB_Status+0x44>
 8009af0:	a201      	add	r2, pc, #4	@ (adr r2, 8009af8 <USBD_Get_USB_Status+0x1c>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b09 	.word	0x08009b09
 8009afc:	08009b0f 	.word	0x08009b0f
 8009b00:	08009b15 	.word	0x08009b15
 8009b04:	08009b1b 	.word	0x08009b1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0c:	e00b      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b0e:	2302      	movs	r3, #2
 8009b10:	73fb      	strb	r3, [r7, #15]
    break;
 8009b12:	e008      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b14:	2301      	movs	r3, #1
 8009b16:	73fb      	strb	r3, [r7, #15]
    break;
 8009b18:	e005      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1e:	e002      	b.n	8009b26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b20:	2302      	movs	r3, #2
 8009b22:	73fb      	strb	r3, [r7, #15]
    break;
 8009b24:	bf00      	nop
  }
  return usb_status;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc80      	pop	{r7}
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop

08009b34 <memset>:
 8009b34:	4603      	mov	r3, r0
 8009b36:	4402      	add	r2, r0
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d100      	bne.n	8009b3e <memset+0xa>
 8009b3c:	4770      	bx	lr
 8009b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b42:	e7f9      	b.n	8009b38 <memset+0x4>

08009b44 <__libc_init_array>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	2600      	movs	r6, #0
 8009b48:	4d0c      	ldr	r5, [pc, #48]	@ (8009b7c <__libc_init_array+0x38>)
 8009b4a:	4c0d      	ldr	r4, [pc, #52]	@ (8009b80 <__libc_init_array+0x3c>)
 8009b4c:	1b64      	subs	r4, r4, r5
 8009b4e:	10a4      	asrs	r4, r4, #2
 8009b50:	42a6      	cmp	r6, r4
 8009b52:	d109      	bne.n	8009b68 <__libc_init_array+0x24>
 8009b54:	f000 f81a 	bl	8009b8c <_init>
 8009b58:	2600      	movs	r6, #0
 8009b5a:	4d0a      	ldr	r5, [pc, #40]	@ (8009b84 <__libc_init_array+0x40>)
 8009b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8009b88 <__libc_init_array+0x44>)
 8009b5e:	1b64      	subs	r4, r4, r5
 8009b60:	10a4      	asrs	r4, r4, #2
 8009b62:	42a6      	cmp	r6, r4
 8009b64:	d105      	bne.n	8009b72 <__libc_init_array+0x2e>
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6c:	4798      	blx	r3
 8009b6e:	3601      	adds	r6, #1
 8009b70:	e7ee      	b.n	8009b50 <__libc_init_array+0xc>
 8009b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b76:	4798      	blx	r3
 8009b78:	3601      	adds	r6, #1
 8009b7a:	e7f2      	b.n	8009b62 <__libc_init_array+0x1e>
 8009b7c:	08009c48 	.word	0x08009c48
 8009b80:	08009c48 	.word	0x08009c48
 8009b84:	08009c48 	.word	0x08009c48
 8009b88:	08009c4c 	.word	0x08009c4c

08009b8c <_init>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr

08009b98 <_fini>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	bf00      	nop
 8009b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9e:	bc08      	pop	{r3}
 8009ba0:	469e      	mov	lr, r3
 8009ba2:	4770      	bx	lr
