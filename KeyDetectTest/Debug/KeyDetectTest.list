
KeyDetectTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000698c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08006a9c  08006a9c  00007a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc0  08006dc0  00008b28  2**0
                  CONTENTS
  4 .ARM          00000000  08006dc0  08006dc0  00008b28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dc0  08006dc0  00008b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b28  20000000  08006dc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d8  20000b28  080078f0  00008b28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f00  080078f0  00008f00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008b28  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170dd  00000000  00000000  00008b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e9  00000000  00000000  0001fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00023418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001060  00000000  00000000  00024948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a54f  00000000  00000000  000259a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190c4  00000000  00000000  0003fef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095208  00000000  00000000  00058fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee1c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b64  00000000  00000000  000ee208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f3d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000b28 	.word	0x20000b28
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a84 	.word	0x08006a84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000b2c 	.word	0x20000b2c
 800014c:	08006a84 	.word	0x08006a84

08000150 <OLED_WriteCommand>:
uint8_t dataBuf1[8][129]={0};
uint8_t dataBuf2[8][129]={0};
uint8_t CommandBuffer[2]={0x00};

void OLED_WriteCommand(uint8_t cmd)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af02      	add	r7, sp, #8
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	CommandBuffer[1]=cmd;
 800015a:	4a08      	ldr	r2, [pc, #32]	@ (800017c <OLED_WriteCommand+0x2c>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, CommandBuffer, 2, HAL_MAX_DELAY);
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	9300      	str	r3, [sp, #0]
 8000166:	2302      	movs	r3, #2
 8000168:	4a04      	ldr	r2, [pc, #16]	@ (800017c <OLED_WriteCommand+0x2c>)
 800016a:	2178      	movs	r1, #120	@ 0x78
 800016c:	4804      	ldr	r0, [pc, #16]	@ (8000180 <OLED_WriteCommand+0x30>)
 800016e:	f001 fdcb 	bl	8001d08 <HAL_I2C_Master_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20001b54 	.word	0x20001b54
 8000180:	20001ba4 	.word	0x20001ba4

08000184 <OLED_SetCursor>:
	sendBuffer[1]=dat;
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
}

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	460a      	mov	r2, r1
 800018e:	71fb      	strb	r3, [r7, #7]
 8000190:	4613      	mov	r3, r2
 8000192:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800019a:	b2db      	uxtb	r3, r3
 800019c:	4618      	mov	r0, r3
 800019e:	f7ff ffd7 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80001a2:	79bb      	ldrb	r3, [r7, #6]
 80001a4:	091b      	lsrs	r3, r3, #4
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	f043 0310 	orr.w	r3, r3, #16
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	4618      	mov	r0, r3
 80001b0:	f7ff ffce 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001b4:	79bb      	ldrb	r3, [r7, #6]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	4618      	mov	r0, r3
 80001be:	f7ff ffc7 	bl	8000150 <OLED_WriteCommand>
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
	...

080001cc <OLED_init>:

void OLED_init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af02      	add	r7, sp, #8
	HAL_Delay(100);
 80001d2:	2064      	movs	r0, #100	@ 0x64
 80001d4:	f001 f9b4 	bl	8001540 <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 80001d8:	20ae      	movs	r0, #174	@ 0xae
 80001da:	f7ff ffb9 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80001de:	20d5      	movs	r0, #213	@ 0xd5
 80001e0:	f7ff ffb6 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 80001e4:	2080      	movs	r0, #128	@ 0x80
 80001e6:	f7ff ffb3 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 80001ea:	20a8      	movs	r0, #168	@ 0xa8
 80001ec:	f7ff ffb0 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 80001f0:	203f      	movs	r0, #63	@ 0x3f
 80001f2:	f7ff ffad 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 80001f6:	20d3      	movs	r0, #211	@ 0xd3
 80001f8:	f7ff ffaa 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 80001fc:	2000      	movs	r0, #0
 80001fe:	f7ff ffa7 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 8000202:	2040      	movs	r0, #64	@ 0x40
 8000204:	f7ff ffa4 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000208:	20a1      	movs	r0, #161	@ 0xa1
 800020a:	f7ff ffa1 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800020e:	20c8      	movs	r0, #200	@ 0xc8
 8000210:	f7ff ff9e 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000214:	20da      	movs	r0, #218	@ 0xda
 8000216:	f7ff ff9b 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800021a:	2012      	movs	r0, #18
 800021c:	f7ff ff98 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 8000220:	2081      	movs	r0, #129	@ 0x81
 8000222:	f7ff ff95 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8000226:	20cf      	movs	r0, #207	@ 0xcf
 8000228:	f7ff ff92 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800022c:	20d9      	movs	r0, #217	@ 0xd9
 800022e:	f7ff ff8f 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000232:	20f1      	movs	r0, #241	@ 0xf1
 8000234:	f7ff ff8c 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000238:	20db      	movs	r0, #219	@ 0xdb
 800023a:	f7ff ff89 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800023e:	2030      	movs	r0, #48	@ 0x30
 8000240:	f7ff ff86 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000244:	20a4      	movs	r0, #164	@ 0xa4
 8000246:	f7ff ff83 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 800024a:	20a6      	movs	r0, #166	@ 0xa6
 800024c:	f7ff ff80 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000250:	208d      	movs	r0, #141	@ 0x8d
 8000252:	f7ff ff7d 	bl	8000150 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000256:	2014      	movs	r0, #20
 8000258:	f7ff ff7a 	bl	8000150 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800025c:	20af      	movs	r0, #175	@ 0xaf
 800025e:	f7ff ff77 	bl	8000150 <OLED_WriteCommand>
	for (uint8_t i = 0; i < 8; ++i)
 8000262:	2300      	movs	r3, #0
 8000264:	71fb      	strb	r3, [r7, #7]
 8000266:	e012      	b.n	800028e <OLED_init+0xc2>
	{
		dataBuf1[i][0]=0x40;
 8000268:	79fa      	ldrb	r2, [r7, #7]
 800026a:	4923      	ldr	r1, [pc, #140]	@ (80002f8 <OLED_init+0x12c>)
 800026c:	4613      	mov	r3, r2
 800026e:	01db      	lsls	r3, r3, #7
 8000270:	4413      	add	r3, r2
 8000272:	440b      	add	r3, r1
 8000274:	2240      	movs	r2, #64	@ 0x40
 8000276:	701a      	strb	r2, [r3, #0]
		dataBuf2[i][0]=0x40;
 8000278:	79fa      	ldrb	r2, [r7, #7]
 800027a:	4920      	ldr	r1, [pc, #128]	@ (80002fc <OLED_init+0x130>)
 800027c:	4613      	mov	r3, r2
 800027e:	01db      	lsls	r3, r3, #7
 8000280:	4413      	add	r3, r2
 8000282:	440b      	add	r3, r1
 8000284:	2240      	movs	r2, #64	@ 0x40
 8000286:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; ++i)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	3301      	adds	r3, #1
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d9e9      	bls.n	8000268 <OLED_init+0x9c>
	}
	OLED_chear();
 8000294:	f000 f838 	bl	8000308 <OLED_chear>
	for (uint8_t i = 0; i < 8; ++i)
 8000298:	2300      	movs	r3, #0
 800029a:	71bb      	strb	r3, [r7, #6]
 800029c:	e024      	b.n	80002e8 <OLED_init+0x11c>
	{
		OLED_SetCursor(i, 0);
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff6e 	bl	8000184 <OLED_SetCursor>
		memcpy( (&dataBuf1[i][0])+1, DisplayBuf1[i], 128);
 80002a8:	79ba      	ldrb	r2, [r7, #6]
 80002aa:	4613      	mov	r3, r2
 80002ac:	01db      	lsls	r3, r3, #7
 80002ae:	4413      	add	r3, r2
 80002b0:	4a11      	ldr	r2, [pc, #68]	@ (80002f8 <OLED_init+0x12c>)
 80002b2:	4413      	add	r3, r2
 80002b4:	1c58      	adds	r0, r3, #1
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	01db      	lsls	r3, r3, #7
 80002ba:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <OLED_init+0x134>)
 80002bc:	4413      	add	r3, r2
 80002be:	2280      	movs	r2, #128	@ 0x80
 80002c0:	4619      	mov	r1, r3
 80002c2:	f006 fb7d 	bl	80069c0 <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, &dataBuf1[i][0], 129, HAL_MAX_DELAY);
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	4613      	mov	r3, r2
 80002ca:	01db      	lsls	r3, r3, #7
 80002cc:	4413      	add	r3, r2
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <OLED_init+0x12c>)
 80002d0:	441a      	add	r2, r3
 80002d2:	f04f 33ff 	mov.w	r3, #4294967295
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2381      	movs	r3, #129	@ 0x81
 80002da:	2178      	movs	r1, #120	@ 0x78
 80002dc:	4809      	ldr	r0, [pc, #36]	@ (8000304 <OLED_init+0x138>)
 80002de:	f001 fd13 	bl	8001d08 <HAL_I2C_Master_Transmit>
	for (uint8_t i = 0; i < 8; ++i)
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	3301      	adds	r3, #1
 80002e6:	71bb      	strb	r3, [r7, #6]
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	2b07      	cmp	r3, #7
 80002ec:	d9d7      	bls.n	800029e <OLED_init+0xd2>
	}
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20001344 	.word	0x20001344
 80002fc:	2000174c 	.word	0x2000174c
 8000300:	20000b44 	.word	0x20000b44
 8000304:	20001ba4 	.word	0x20001ba4

08000308 <OLED_chear>:

void OLED_chear(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	e013      	b.n	800033c <OLED_chear+0x34>
	{
//		OLED_SetCursor(i, 0);
		for (int j = 0; j < 128; ++j)
 8000314:	2300      	movs	r3, #0
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	e00a      	b.n	8000330 <OLED_chear+0x28>
		{
//			OLED_WriteData(0x00);
			DisplayBuf1[i][j] = 0x00;
 800031a:	4a0d      	ldr	r2, [pc, #52]	@ (8000350 <OLED_chear+0x48>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	01db      	lsls	r3, r3, #7
 8000320:	441a      	add	r2, r3
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	4413      	add	r3, r2
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; ++j)
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2b7f      	cmp	r3, #127	@ 0x7f
 8000334:	ddf1      	ble.n	800031a <OLED_chear+0x12>
	for (int i = 0; i < 8; ++i)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b07      	cmp	r3, #7
 8000340:	dde8      	ble.n	8000314 <OLED_chear+0xc>
		}
	}
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000b44 	.word	0x20000b44

08000354 <OLED_updata>:

void OLED_updata()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 8; ++i)
 800035a:	2300      	movs	r3, #0
 800035c:	71fb      	strb	r3, [r7, #7]
 800035e:	e020      	b.n	80003a2 <OLED_updata+0x4e>
	{
		memcpy( (&dataBuf1[i][0])+1, DisplayBuf1[i], 128);
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	4613      	mov	r3, r2
 8000364:	01db      	lsls	r3, r3, #7
 8000366:	4413      	add	r3, r2
 8000368:	4a2f      	ldr	r2, [pc, #188]	@ (8000428 <OLED_updata+0xd4>)
 800036a:	4413      	add	r3, r2
 800036c:	1c58      	adds	r0, r3, #1
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	01db      	lsls	r3, r3, #7
 8000372:	4a2e      	ldr	r2, [pc, #184]	@ (800042c <OLED_updata+0xd8>)
 8000374:	4413      	add	r3, r2
 8000376:	2280      	movs	r2, #128	@ 0x80
 8000378:	4619      	mov	r1, r3
 800037a:	f006 fb21 	bl	80069c0 <memcpy>
		memcpy( (&dataBuf2[i][0])+1, DisplayBuf2[i], 128);
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	01db      	lsls	r3, r3, #7
 8000384:	4413      	add	r3, r2
 8000386:	4a2a      	ldr	r2, [pc, #168]	@ (8000430 <OLED_updata+0xdc>)
 8000388:	4413      	add	r3, r2
 800038a:	1c58      	adds	r0, r3, #1
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	01db      	lsls	r3, r3, #7
 8000390:	4a28      	ldr	r2, [pc, #160]	@ (8000434 <OLED_updata+0xe0>)
 8000392:	4413      	add	r3, r2
 8000394:	2280      	movs	r2, #128	@ 0x80
 8000396:	4619      	mov	r1, r3
 8000398:	f006 fb12 	bl	80069c0 <memcpy>
	for (uint8_t i = 0; i < 8; ++i)
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	3301      	adds	r3, #1
 80003a0:	71fb      	strb	r3, [r7, #7]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b07      	cmp	r3, #7
 80003a6:	d9db      	bls.n	8000360 <OLED_updata+0xc>
	}
	for (uint8_t i = 0; i < 8; ++i)
 80003a8:	2300      	movs	r3, #0
 80003aa:	71bb      	strb	r3, [r7, #6]
 80003ac:	e034      	b.n	8000418 <OLED_updata+0xc4>
	{
		if(memcmp(&dataBuf1[i][0],&dataBuf2[i][0],129) != 0)
 80003ae:	79ba      	ldrb	r2, [r7, #6]
 80003b0:	4613      	mov	r3, r2
 80003b2:	01db      	lsls	r3, r3, #7
 80003b4:	4413      	add	r3, r2
 80003b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000428 <OLED_updata+0xd4>)
 80003b8:	1898      	adds	r0, r3, r2
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	4613      	mov	r3, r2
 80003be:	01db      	lsls	r3, r3, #7
 80003c0:	4413      	add	r3, r2
 80003c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <OLED_updata+0xdc>)
 80003c4:	4413      	add	r3, r2
 80003c6:	2281      	movs	r2, #129	@ 0x81
 80003c8:	4619      	mov	r1, r3
 80003ca:	f006 fa65 	bl	8006898 <memcmp>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d01e      	beq.n	8000412 <OLED_updata+0xbe>
		{
			OLED_SetCursor(i, 0);
 80003d4:	79bb      	ldrb	r3, [r7, #6]
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff fed3 	bl	8000184 <OLED_SetCursor>
			HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, &dataBuf1[i][0], 129, HAL_MAX_DELAY);
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	4613      	mov	r3, r2
 80003e2:	01db      	lsls	r3, r3, #7
 80003e4:	4413      	add	r3, r2
 80003e6:	4a10      	ldr	r2, [pc, #64]	@ (8000428 <OLED_updata+0xd4>)
 80003e8:	441a      	add	r2, r3
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2381      	movs	r3, #129	@ 0x81
 80003f2:	2178      	movs	r1, #120	@ 0x78
 80003f4:	4810      	ldr	r0, [pc, #64]	@ (8000438 <OLED_updata+0xe4>)
 80003f6:	f001 fc87 	bl	8001d08 <HAL_I2C_Master_Transmit>
			memcpy(DisplayBuf2[i], DisplayBuf1[i], 128);
 80003fa:	79bb      	ldrb	r3, [r7, #6]
 80003fc:	01db      	lsls	r3, r3, #7
 80003fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <OLED_updata+0xe0>)
 8000400:	1898      	adds	r0, r3, r2
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	01db      	lsls	r3, r3, #7
 8000406:	4a09      	ldr	r2, [pc, #36]	@ (800042c <OLED_updata+0xd8>)
 8000408:	4413      	add	r3, r2
 800040a:	2280      	movs	r2, #128	@ 0x80
 800040c:	4619      	mov	r1, r3
 800040e:	f006 fad7 	bl	80069c0 <memcpy>
	for (uint8_t i = 0; i < 8; ++i)
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	71bb      	strb	r3, [r7, #6]
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	2b07      	cmp	r3, #7
 800041c:	d9c7      	bls.n	80003ae <OLED_updata+0x5a>
		}
	}
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20001344 	.word	0x20001344
 800042c:	20000b44 	.word	0x20000b44
 8000430:	2000174c 	.word	0x2000174c
 8000434:	20000f44 	.word	0x20000f44
 8000438:	20001ba4 	.word	0x20001ba4

0800043c <OLED_showChar>:
		--Y;
	}
}

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b085      	sub	sp, #20
 8000440:	af02      	add	r7, sp, #8
 8000442:	4604      	mov	r4, r0
 8000444:	4608      	mov	r0, r1
 8000446:	4611      	mov	r1, r2
 8000448:	461a      	mov	r2, r3
 800044a:	4623      	mov	r3, r4
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	4603      	mov	r3, r0
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	460b      	mov	r3, r1
 8000454:	717b      	strb	r3, [r7, #5]
 8000456:	4613      	mov	r3, r2
 8000458:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 800045a:	79ba      	ldrb	r2, [r7, #6]
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe8f 	bl	8000184 <OLED_SetCursor>
	if (fontSize == 8)
 8000466:	793b      	ldrb	r3, [r7, #4]
 8000468:	2b08      	cmp	r3, #8
 800046a:	d10c      	bne.n	8000486 <OLED_showChar+0x4a>
	{
		OLED_showImage(Page, X, 8, 2, EN8_16[ a - ' ' ]);
 800046c:	797b      	ldrb	r3, [r7, #5]
 800046e:	3b20      	subs	r3, #32
 8000470:	011b      	lsls	r3, r3, #4
 8000472:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <OLED_showChar+0x78>)
 8000474:	4413      	add	r3, r2
 8000476:	79b9      	ldrb	r1, [r7, #6]
 8000478:	79f8      	ldrb	r0, [r7, #7]
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2302      	movs	r3, #2
 800047e:	2208      	movs	r2, #8
 8000480:	f000 f84a 	bl	8000518 <OLED_showImage>
	}
	else if (fontSize == 6)
	{
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
	}
}
 8000484:	e012      	b.n	80004ac <OLED_showChar+0x70>
	else if (fontSize == 6)
 8000486:	793b      	ldrb	r3, [r7, #4]
 8000488:	2b06      	cmp	r3, #6
 800048a:	d10f      	bne.n	80004ac <OLED_showChar+0x70>
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
 800048c:	797b      	ldrb	r3, [r7, #5]
 800048e:	f1a3 0220 	sub.w	r2, r3, #32
 8000492:	4613      	mov	r3, r2
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	4413      	add	r3, r2
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <OLED_showChar+0x7c>)
 800049c:	4413      	add	r3, r2
 800049e:	79b9      	ldrb	r1, [r7, #6]
 80004a0:	79f8      	ldrb	r0, [r7, #7]
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2301      	movs	r3, #1
 80004a6:	2206      	movs	r2, #6
 80004a8:	f000 f836 	bl	8000518 <OLED_showImage>
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd90      	pop	{r4, r7, pc}
 80004b4:	2000029c 	.word	0x2000029c
 80004b8:	2000088c 	.word	0x2000088c

080004bc <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	603a      	str	r2, [r7, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
 80004ce:	4613      	mov	r3, r2
 80004d0:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	e013      	b.n	8000500 <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	797a      	ldrb	r2, [r7, #5]
 80004de:	fb02 f303 	mul.w	r3, r2, r3
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	4413      	add	r3, r2
 80004e8:	b2d9      	uxtb	r1, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	797b      	ldrb	r3, [r7, #5]
 80004f4:	79f8      	ldrb	r0, [r7, #7]
 80004f6:	f7ff ffa1 	bl	800043c <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1e5      	bne.n	80004d8 <OLED_showString+0x1c>
	}
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <OLED_showImage>:

void OLED_showImage(uint8_t Page, uint8_t X, uint8_t Width, uint8_t Height,uint8_t *Image)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4604      	mov	r4, r0
 8000520:	4608      	mov	r0, r1
 8000522:	4611      	mov	r1, r2
 8000524:	461a      	mov	r2, r3
 8000526:	4623      	mov	r3, r4
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	4603      	mov	r3, r0
 800052c:	71bb      	strb	r3, [r7, #6]
 800052e:	460b      	mov	r3, r1
 8000530:	717b      	strb	r3, [r7, #5]
 8000532:	4613      	mov	r3, r2
 8000534:	713b      	strb	r3, [r7, #4]
	for (int j = 0; j < Height; ++j)
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e022      	b.n	8000582 <OLED_showImage+0x6a>
	{
//		OLED_SetCursor( Page+j , X);
		for (int i = 0; i < Width; ++i)
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	e018      	b.n	8000574 <OLED_showImage+0x5c>
		{
//			OLED_WriteData(Image[Width*j+i]);
			DisplayBuf1[Page+j][X+i] = Image[Width*j+i];
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	fb03 f202 	mul.w	r2, r3, r2
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4413      	add	r3, r2
 800054e:	461a      	mov	r2, r3
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	1899      	adds	r1, r3, r2
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	441a      	add	r2, r3
 800055a:	79b8      	ldrb	r0, [r7, #6]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	4403      	add	r3, r0
 8000560:	7808      	ldrb	r0, [r1, #0]
 8000562:	490d      	ldr	r1, [pc, #52]	@ (8000598 <OLED_showImage+0x80>)
 8000564:	01d2      	lsls	r2, r2, #7
 8000566:	440a      	add	r2, r1
 8000568:	4413      	add	r3, r2
 800056a:	4602      	mov	r2, r0
 800056c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < Width; ++i)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	3301      	adds	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	797b      	ldrb	r3, [r7, #5]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbe2      	blt.n	8000542 <OLED_showImage+0x2a>
	for (int j = 0; j < Height; ++j)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	793b      	ldrb	r3, [r7, #4]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbd8      	blt.n	800053c <OLED_showImage+0x24>
		}
	}
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bc90      	pop	{r4, r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000b44 	.word	0x20000b44

0800059c <OLED_showChinese>:

void OLED_showChinese(uint8_t Page, uint8_t X, char *Chinese)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	603a      	str	r2, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	460b      	mov	r3, r1
 80005aa:	71bb      	strb	r3, [r7, #6]
	uint8_t perchinese[3];
	uint8_t pointAllChinese = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	75fb      	strb	r3, [r7, #23]
	uint8_t stopseek[3]={0xff,0xff,0xff};
 80005b0:	4a42      	ldr	r2, [pc, #264]	@ (80006bc <OLED_showChinese+0x120>)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	4611      	mov	r1, r2
 80005ba:	8019      	strh	r1, [r3, #0]
 80005bc:	3302      	adds	r3, #2
 80005be:	0c12      	lsrs	r2, r2, #16
 80005c0:	701a      	strb	r2, [r3, #0]
	uint8_t seek = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	75bb      	strb	r3, [r7, #22]
	uint8_t locateX = X;
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	757b      	strb	r3, [r7, #21]
	while (1)
	{
		seek = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i=0;i<3 && Chinese[i]!='\0';i++)//utf8的编码下，一个汉字占用3字节，这个循环取出字符串中的一个汉字的utf8编码
 80005ce:	2300      	movs	r3, #0
 80005d0:	753b      	strb	r3, [r7, #20]
 80005d2:	e00e      	b.n	80005f2 <OLED_showChinese+0x56>
		{
			perchinese[i] = Chinese[pointAllChinese];
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	441a      	add	r2, r3
 80005da:	7d3b      	ldrb	r3, [r7, #20]
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	3318      	adds	r3, #24
 80005e0:	443b      	add	r3, r7
 80005e2:	f803 2c08 	strb.w	r2, [r3, #-8]
			pointAllChinese++;
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	3301      	adds	r3, #1
 80005ea:	75fb      	strb	r3, [r7, #23]
		for(uint8_t i=0;i<3 && Chinese[i]!='\0';i++)//utf8的编码下，一个汉字占用3字节，这个循环取出字符串中的一个汉字的utf8编码
 80005ec:	7d3b      	ldrb	r3, [r7, #20]
 80005ee:	3301      	adds	r3, #1
 80005f0:	753b      	strb	r3, [r7, #20]
 80005f2:	7d3b      	ldrb	r3, [r7, #20]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d81a      	bhi.n	800062e <OLED_showChinese+0x92>
 80005f8:	7d3b      	ldrb	r3, [r7, #20]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1e7      	bne.n	80005d4 <OLED_showChinese+0x38>
		}
		for (; memcmp(stopseek,cn16_16[seek].ch_utf8,3) != 0 /*字库中最后一个字是stopseek，代表没有找到，此时跳出循环*/; ++seek)
 8000604:	e013      	b.n	800062e <OLED_showChinese+0x92>
		{
			if( memcmp(perchinese, cn16_16[seek].ch_utf8 ,3) == 0 )//将取出的3字节与字库中的字对比
 8000606:	7dba      	ldrb	r2, [r7, #22]
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	00da      	lsls	r2, r3, #3
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <OLED_showChinese+0x124>)
 8000614:	18d1      	adds	r1, r2, r3
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2203      	movs	r2, #3
 800061c:	4618      	mov	r0, r3
 800061e:	f006 f93b 	bl	8006898 <memcmp>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d014      	beq.n	8000652 <OLED_showChinese+0xb6>
		for (; memcmp(stopseek,cn16_16[seek].ch_utf8,3) != 0 /*字库中最后一个字是stopseek，代表没有找到，此时跳出循环*/; ++seek)
 8000628:	7dbb      	ldrb	r3, [r7, #22]
 800062a:	3301      	adds	r3, #1
 800062c:	75bb      	strb	r3, [r7, #22]
 800062e:	7dba      	ldrb	r2, [r7, #22]
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	00da      	lsls	r2, r3, #3
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <OLED_showChinese+0x124>)
 800063c:	18d1      	adds	r1, r2, r3
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2203      	movs	r2, #3
 8000644:	4618      	mov	r0, r3
 8000646:	f006 f927 	bl	8006898 <memcmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1da      	bne.n	8000606 <OLED_showChinese+0x6a>
 8000650:	e000      	b.n	8000654 <OLED_showChinese+0xb8>
			{
				break;
 8000652:	bf00      	nop
			}
		}
		OLED_showImage(Page, locateX, 16, 1, cn16_16[seek].ch_dt1);//显示汉字第一部分
 8000654:	7dba      	ldrb	r2, [r7, #22]
 8000656:	4613      	mov	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4413      	add	r3, r2
 800065c:	00da      	lsls	r2, r3, #3
 800065e:	1ad2      	subs	r2, r2, r3
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <OLED_showChinese+0x124>)
 8000662:	4413      	add	r3, r2
 8000664:	3303      	adds	r3, #3
 8000666:	7d79      	ldrb	r1, [r7, #21]
 8000668:	79f8      	ldrb	r0, [r7, #7]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	2210      	movs	r2, #16
 8000670:	f7ff ff52 	bl	8000518 <OLED_showImage>
		OLED_showImage(Page+1, locateX, 16, 1, cn16_16[seek].ch_dt2);//显示汉字第二部分
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	3301      	adds	r3, #1
 8000678:	b2d8      	uxtb	r0, r3
 800067a:	7dba      	ldrb	r2, [r7, #22]
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	00da      	lsls	r2, r3, #3
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	f102 0310 	add.w	r3, r2, #16
 800068a:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <OLED_showChinese+0x124>)
 800068c:	4413      	add	r3, r2
 800068e:	3303      	adds	r3, #3
 8000690:	7d79      	ldrb	r1, [r7, #21]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2301      	movs	r3, #1
 8000696:	2210      	movs	r2, #16
 8000698:	f7ff ff3e 	bl	8000518 <OLED_showImage>
		locateX += 16;
 800069c:	7d7b      	ldrb	r3, [r7, #21]
 800069e:	3310      	adds	r3, #16
 80006a0:	757b      	strb	r3, [r7, #21]
		if(Chinese[pointAllChinese]==0x00){break;}
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d000      	beq.n	80006b0 <OLED_showChinese+0x114>
		seek = 0;
 80006ae:	e78c      	b.n	80005ca <OLED_showChinese+0x2e>
		if(Chinese[pointAllChinese]==0x00){break;}
 80006b0:	bf00      	nop
	}
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08006a9c 	.word	0x08006a9c
 80006c0:	20000000 	.word	0x20000000

080006c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of HoldDetectBinarySem */
  HoldDetectBinarySemHandle = osSemaphoreNew(1, 0, &HoldDetectBinarySem_attributes);
 80006c8:	4a2c      	ldr	r2, [pc, #176]	@ (800077c <MX_FREERTOS_Init+0xb8>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	2001      	movs	r0, #1
 80006ce:	f002 fe16 	bl	80032fe <osSemaphoreNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000780 <MX_FREERTOS_Init+0xbc>)
 80006d6:	6013      	str	r3, [r2, #0]

  /* creation of DbclickStartBinarySem */
  DbclickStartBinarySemHandle = osSemaphoreNew(1, 0, &DbclickStartBinarySem_attributes);
 80006d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <MX_FREERTOS_Init+0xc0>)
 80006da:	2100      	movs	r1, #0
 80006dc:	2001      	movs	r0, #1
 80006de:	f002 fe0e 	bl	80032fe <osSemaphoreNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a28      	ldr	r2, [pc, #160]	@ (8000788 <MX_FREERTOS_Init+0xc4>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* creation of WaitDbclickBinarySem */
  WaitDbclickBinarySemHandle = osSemaphoreNew(1, 0, &WaitDbclickBinarySem_attributes);
 80006e8:	4a28      	ldr	r2, [pc, #160]	@ (800078c <MX_FREERTOS_Init+0xc8>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	2001      	movs	r0, #1
 80006ee:	f002 fe06 	bl	80032fe <osSemaphoreNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a26      	ldr	r2, [pc, #152]	@ (8000790 <MX_FREERTOS_Init+0xcc>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of KeyStateQueue */
  KeyStateQueueHandle = osMessageQueueNew (16, sizeof(Key), &KeyStateQueue_attributes);
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <MX_FREERTOS_Init+0xd0>)
 80006fa:	2106      	movs	r1, #6
 80006fc:	2010      	movs	r0, #16
 80006fe:	f002 ff1d 	bl	800353c <osMessageQueueNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <MX_FREERTOS_Init+0xd4>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of DisplayInfoQueue */
  DisplayInfoQueueHandle = osMessageQueueNew (16, sizeof(DisplayInfo), &DisplayInfoQueue_attributes);
 8000708:	4a24      	ldr	r2, [pc, #144]	@ (800079c <MX_FREERTOS_Init+0xd8>)
 800070a:	210c      	movs	r1, #12
 800070c:	2010      	movs	r0, #16
 800070e:	f002 ff15 	bl	800353c <osMessageQueueNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <MX_FREERTOS_Init+0xdc>)
 8000716:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <MX_FREERTOS_Init+0xe0>)
 800071a:	2100      	movs	r1, #0
 800071c:	4822      	ldr	r0, [pc, #136]	@ (80007a8 <MX_FREERTOS_Init+0xe4>)
 800071e:	f002 fd41 	bl	80031a4 <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <MX_FREERTOS_Init+0xe8>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of KeyClickTask */
  KeyClickTaskHandle = osThreadNew(StartKeyClickTask, NULL, &KeyClickTask_attributes);
 8000728:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <MX_FREERTOS_Init+0xec>)
 800072a:	2100      	movs	r1, #0
 800072c:	4821      	ldr	r0, [pc, #132]	@ (80007b4 <MX_FREERTOS_Init+0xf0>)
 800072e:	f002 fd39 	bl	80031a4 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <MX_FREERTOS_Init+0xf4>)
 8000736:	6013      	str	r3, [r2, #0]

  /* creation of KeyDbclickTask */
  KeyDbclickTaskHandle = osThreadNew(StartKeyDbclickTask, NULL, &KeyDbclickTask_attributes);
 8000738:	4a20      	ldr	r2, [pc, #128]	@ (80007bc <MX_FREERTOS_Init+0xf8>)
 800073a:	2100      	movs	r1, #0
 800073c:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <MX_FREERTOS_Init+0xfc>)
 800073e:	f002 fd31 	bl	80031a4 <osThreadNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <MX_FREERTOS_Init+0x100>)
 8000746:	6013      	str	r3, [r2, #0]

  /* creation of KeyHoldTask */
  KeyHoldTaskHandle = osThreadNew(StartKeyHoldTask, NULL, &KeyHoldTask_attributes);
 8000748:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <MX_FREERTOS_Init+0x104>)
 800074a:	2100      	movs	r1, #0
 800074c:	481f      	ldr	r0, [pc, #124]	@ (80007cc <MX_FREERTOS_Init+0x108>)
 800074e:	f002 fd29 	bl	80031a4 <osThreadNew>
 8000752:	4603      	mov	r3, r0
 8000754:	4a1e      	ldr	r2, [pc, #120]	@ (80007d0 <MX_FREERTOS_Init+0x10c>)
 8000756:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8000758:	4a1e      	ldr	r2, [pc, #120]	@ (80007d4 <MX_FREERTOS_Init+0x110>)
 800075a:	2100      	movs	r1, #0
 800075c:	481e      	ldr	r0, [pc, #120]	@ (80007d8 <MX_FREERTOS_Init+0x114>)
 800075e:	f002 fd21 	bl	80031a4 <osThreadNew>
 8000762:	4603      	mov	r3, r0
 8000764:	4a1d      	ldr	r2, [pc, #116]	@ (80007dc <MX_FREERTOS_Init+0x118>)
 8000766:	6013      	str	r3, [r2, #0]

  /* creation of CopeKeyStateTas */
  CopeKeyStateTasHandle = osThreadNew(StartCopeKeyStateTask, NULL, &CopeKeyStateTas_attributes);
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <MX_FREERTOS_Init+0x11c>)
 800076a:	2100      	movs	r1, #0
 800076c:	481d      	ldr	r0, [pc, #116]	@ (80007e4 <MX_FREERTOS_Init+0x120>)
 800076e:	f002 fd19 	bl	80031a4 <osThreadNew>
 8000772:	4603      	mov	r3, r0
 8000774:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_FREERTOS_Init+0x124>)
 8000776:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08006d64 	.word	0x08006d64
 8000780:	20001b98 	.word	0x20001b98
 8000784:	08006d74 	.word	0x08006d74
 8000788:	20001b9c 	.word	0x20001b9c
 800078c:	08006d84 	.word	0x08006d84
 8000790:	20001ba0 	.word	0x20001ba0
 8000794:	08006d34 	.word	0x08006d34
 8000798:	20001b90 	.word	0x20001b90
 800079c:	08006d4c 	.word	0x08006d4c
 80007a0:	20001b94 	.word	0x20001b94
 80007a4:	08006c5c 	.word	0x08006c5c
 80007a8:	080007ed 	.word	0x080007ed
 80007ac:	20001b78 	.word	0x20001b78
 80007b0:	08006c80 	.word	0x08006c80
 80007b4:	080007fd 	.word	0x080007fd
 80007b8:	20001b7c 	.word	0x20001b7c
 80007bc:	08006ca4 	.word	0x08006ca4
 80007c0:	08000949 	.word	0x08000949
 80007c4:	20001b80 	.word	0x20001b80
 80007c8:	08006cc8 	.word	0x08006cc8
 80007cc:	08000ae5 	.word	0x08000ae5
 80007d0:	20001b84 	.word	0x20001b84
 80007d4:	08006cec 	.word	0x08006cec
 80007d8:	08000c61 	.word	0x08000c61
 80007dc:	20001b88 	.word	0x20001b88
 80007e0:	08006d10 	.word	0x08006d10
 80007e4:	08000ca9 	.word	0x08000ca9
 80007e8:	20001b8c 	.word	0x20001b8c

080007ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f002 fd67 	bl	80032c8 <osDelay>
 80007fa:	e7fb      	b.n	80007f4 <StartDefaultTask+0x8>

080007fc <StartKeyClickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyClickTask */
void StartKeyClickTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyClickTask */
	uint8_t KeyStateLastTime=0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
	uint8_t KeyStateRealTime=0;
 8000808:	2300      	movs	r3, #0
 800080a:	73bb      	strb	r3, [r7, #14]
	uint8_t keyTrigState=0;
 800080c:	2300      	movs	r3, #0
 800080e:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {
	  KeyStateRealTime=0;
 8000810:	2300      	movs	r3, #0
 8000812:	73bb      	strb	r3, [r7, #14]
	  if(HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X01;}
 8000814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000818:	4844      	ldr	r0, [pc, #272]	@ (800092c <StartKeyClickTask+0x130>)
 800081a:	f001 f919 	bl	8001a50 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d103      	bne.n	800082c <StartKeyClickTask+0x30>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	73bb      	strb	r3, [r7, #14]
	  if(HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X02;}
 800082c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000830:	483e      	ldr	r0, [pc, #248]	@ (800092c <StartKeyClickTask+0x130>)
 8000832:	f001 f90d 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <StartKeyClickTask+0x48>
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	73bb      	strb	r3, [r7, #14]
	  if(HAL_GPIO_ReadPin(Key3_GPIO_Port, Key3_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X04;}
 8000844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000848:	4839      	ldr	r0, [pc, #228]	@ (8000930 <StartKeyClickTask+0x134>)
 800084a:	f001 f901 	bl	8001a50 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d103      	bne.n	800085c <StartKeyClickTask+0x60>
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	73bb      	strb	r3, [r7, #14]
	  if(HAL_GPIO_ReadPin(Key4_GPIO_Port, Key4_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X08;}
 800085c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000860:	4833      	ldr	r0, [pc, #204]	@ (8000930 <StartKeyClickTask+0x134>)
 8000862:	f001 f8f5 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d103      	bne.n	8000874 <StartKeyClickTask+0x78>
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	73bb      	strb	r3, [r7, #14]

	  if(KeyStateRealTime!=KeyStateLastTime)
 8000874:	7bba      	ldrb	r2, [r7, #14]
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	429a      	cmp	r2, r3
 800087a:	d026      	beq.n	80008ca <StartKeyClickTask+0xce>
	  {
		  for (int i = 0; i < 4; ++i)
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	e020      	b.n	80008c4 <StartKeyClickTask+0xc8>
		  {
			  if((KeyStateRealTime&(0x01<<i))==0 && (KeyStateLastTime&(0x01<<i))==(0x01<<i))
 8000882:	7bba      	ldrb	r2, [r7, #14]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	fa42 f303 	asr.w	r3, r2, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d115      	bne.n	80008be <StartKeyClickTask+0xc2>
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	2101      	movs	r1, #1
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	401a      	ands	r2, r3
 800089e:	2101      	movs	r1, #1
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d109      	bne.n	80008be <StartKeyClickTask+0xc2>
			  {
				  keyTrigState|=(0x01<<i);
 80008aa:	2201      	movs	r2, #1
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	737b      	strb	r3, [r7, #13]
		  for (int i = 0; i < 4; ++i)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	dddb      	ble.n	8000882 <StartKeyClickTask+0x86>
			  }
		  }
	  }

	if (keyTrigState!=0)
 80008ca:	7b7b      	ldrb	r3, [r7, #13]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d026      	beq.n	800091e <StartKeyClickTask+0x122>
	{

		if((keyTrigState&0x01)==0x01)
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <StartKeyClickTask+0xe4>
		{
			k1.ClickFlag=1;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <StartKeyClickTask+0x138>)
 80008dc:	2201      	movs	r2, #1
 80008de:	705a      	strb	r2, [r3, #1]
		}
		if((keyTrigState&0x02)==0x02)
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <StartKeyClickTask+0xf4>
		{
			k2.ClickFlag=1;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <StartKeyClickTask+0x13c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	705a      	strb	r2, [r3, #1]
		}
		if((keyTrigState&0x04)==0x04)
 80008f0:	7b7b      	ldrb	r3, [r7, #13]
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <StartKeyClickTask+0x104>
		{
			k3.ClickFlag=1;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <StartKeyClickTask+0x140>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	705a      	strb	r2, [r3, #1]
		}
		if((keyTrigState&0x08)==0x08)
 8000900:	7b7b      	ldrb	r3, [r7, #13]
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <StartKeyClickTask+0x114>
		{
			k4.ClickFlag=1;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <StartKeyClickTask+0x144>)
 800090c:	2201      	movs	r2, #1
 800090e:	705a      	strb	r2, [r3, #1]
		}
		keyTrigState=0;
 8000910:	2300      	movs	r3, #0
 8000912:	737b      	strb	r3, [r7, #13]
		osSemaphoreRelease(DbclickStartBinarySemHandle);
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <StartKeyClickTask+0x148>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fdcb 	bl	80034b4 <osSemaphoreRelease>
	}
	  osDelay(20);
 800091e:	2014      	movs	r0, #20
 8000920:	f002 fcd2 	bl	80032c8 <osDelay>

	  KeyStateLastTime=KeyStateRealTime;
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	73fb      	strb	r3, [r7, #15]
	  KeyStateRealTime=0;
 8000928:	e772      	b.n	8000810 <StartKeyClickTask+0x14>
 800092a:	bf00      	nop
 800092c:	40010c00 	.word	0x40010c00
 8000930:	40010800 	.word	0x40010800
 8000934:	20001b58 	.word	0x20001b58
 8000938:	20001b60 	.word	0x20001b60
 800093c:	20001b68 	.word	0x20001b68
 8000940:	20001b70 	.word	0x20001b70
 8000944:	20001b9c 	.word	0x20001b9c

08000948 <StartKeyDbclickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyDbclickTask */
void StartKeyDbclickTask(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyDbclickTask */
	uint8_t KeyStateLastTime=0;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
	uint8_t KeyStateRealTime=0;
 8000954:	2300      	movs	r3, #0
 8000956:	73bb      	strb	r3, [r7, #14]
	uint8_t keyTrigState=0;
 8000958:	2300      	movs	r3, #0
 800095a:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(DbclickStartBinarySemHandle, osWaitForever);
 800095c:	4b59      	ldr	r3, [pc, #356]	@ (8000ac4 <StartKeyDbclickTask+0x17c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fd53 	bl	8003410 <osSemaphoreAcquire>
		for(uint8_t i=0; i<30; ++i)
 800096a:	2300      	movs	r3, #0
 800096c:	733b      	strb	r3, [r7, #12]
 800096e:	e0a3      	b.n	8000ab8 <StartKeyDbclickTask+0x170>
		{

			KeyStateRealTime=0;
 8000970:	2300      	movs	r3, #0
 8000972:	73bb      	strb	r3, [r7, #14]
			if(HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin)==KEY_TRIG_STATE && k1.ClickFlag==1){KeyStateRealTime|=0X01;}
 8000974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000978:	4853      	ldr	r0, [pc, #332]	@ (8000ac8 <StartKeyDbclickTask+0x180>)
 800097a:	f001 f869 	bl	8001a50 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d107      	bne.n	8000994 <StartKeyDbclickTask+0x4c>
 8000984:	4b51      	ldr	r3, [pc, #324]	@ (8000acc <StartKeyDbclickTask+0x184>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d103      	bne.n	8000994 <StartKeyDbclickTask+0x4c>
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	73bb      	strb	r3, [r7, #14]
			if(HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin)==KEY_TRIG_STATE && k2.ClickFlag==1){KeyStateRealTime|=0X02;}
 8000994:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000998:	484b      	ldr	r0, [pc, #300]	@ (8000ac8 <StartKeyDbclickTask+0x180>)
 800099a:	f001 f859 	bl	8001a50 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d107      	bne.n	80009b4 <StartKeyDbclickTask+0x6c>
 80009a4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad0 <StartKeyDbclickTask+0x188>)
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d103      	bne.n	80009b4 <StartKeyDbclickTask+0x6c>
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	73bb      	strb	r3, [r7, #14]
			if(HAL_GPIO_ReadPin(Key3_GPIO_Port, Key3_Pin)==KEY_TRIG_STATE && k3.ClickFlag==1){KeyStateRealTime|=0X04;}
 80009b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009b8:	4846      	ldr	r0, [pc, #280]	@ (8000ad4 <StartKeyDbclickTask+0x18c>)
 80009ba:	f001 f849 	bl	8001a50 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d107      	bne.n	80009d4 <StartKeyDbclickTask+0x8c>
 80009c4:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <StartKeyDbclickTask+0x190>)
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <StartKeyDbclickTask+0x8c>
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	73bb      	strb	r3, [r7, #14]
			if(HAL_GPIO_ReadPin(Key4_GPIO_Port, Key4_Pin)==KEY_TRIG_STATE && k4.ClickFlag==1){KeyStateRealTime|=0X08;}
 80009d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d8:	483e      	ldr	r0, [pc, #248]	@ (8000ad4 <StartKeyDbclickTask+0x18c>)
 80009da:	f001 f839 	bl	8001a50 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d107      	bne.n	80009f4 <StartKeyDbclickTask+0xac>
 80009e4:	4b3d      	ldr	r3, [pc, #244]	@ (8000adc <StartKeyDbclickTask+0x194>)
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d103      	bne.n	80009f4 <StartKeyDbclickTask+0xac>
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	73bb      	strb	r3, [r7, #14]

			if(KeyStateRealTime!=KeyStateLastTime)
 80009f4:	7bba      	ldrb	r2, [r7, #14]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d026      	beq.n	8000a4a <StartKeyDbclickTask+0x102>
			{

				for (int i = 0; i < 4; ++i)
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	e020      	b.n	8000a44 <StartKeyDbclickTask+0xfc>
				{
					if((KeyStateRealTime&(0x01<<i))==0 && (KeyStateLastTime&(0x01<<i))==(0x01<<i))
 8000a02:	7bba      	ldrb	r2, [r7, #14]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	fa42 f303 	asr.w	r3, r2, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d115      	bne.n	8000a3e <StartKeyDbclickTask+0xf6>
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	2101      	movs	r1, #1
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	2101      	movs	r1, #1
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d109      	bne.n	8000a3e <StartKeyDbclickTask+0xf6>
					{
						keyTrigState|=(0x01<<i);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	737b      	strb	r3, [r7, #13]
				for (int i = 0; i < 4; ++i)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	dddb      	ble.n	8000a02 <StartKeyDbclickTask+0xba>
					}
				}
			}

			if (keyTrigState!=0)
 8000a4a:	7b7b      	ldrb	r3, [r7, #13]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d02b      	beq.n	8000aa8 <StartKeyDbclickTask+0x160>
			{
				if((keyTrigState&0x01)==0x01)
 8000a50:	7b7b      	ldrb	r3, [r7, #13]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <StartKeyDbclickTask+0x118>
				{
					k1.DbclickFlag=1;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <StartKeyDbclickTask+0x184>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	709a      	strb	r2, [r3, #2]
				}
				if((keyTrigState&0x02)==0x02)
 8000a60:	7b7b      	ldrb	r3, [r7, #13]
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <StartKeyDbclickTask+0x128>
				{
					k2.DbclickFlag=1;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <StartKeyDbclickTask+0x188>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	709a      	strb	r2, [r3, #2]
				}
				if((keyTrigState&0x04)==0x04)
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <StartKeyDbclickTask+0x138>
				{
					k3.DbclickFlag=1;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <StartKeyDbclickTask+0x190>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	709a      	strb	r2, [r3, #2]
				}
				if((keyTrigState&0x08)==0x08)
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <StartKeyDbclickTask+0x148>
				{
					k4.DbclickFlag=1;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <StartKeyDbclickTask+0x194>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	709a      	strb	r2, [r3, #2]
				}
				keyTrigState=0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	737b      	strb	r3, [r7, #13]
				osSemaphoreRelease(DbclickStartBinarySemHandle);
 8000a94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <StartKeyDbclickTask+0x17c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fd0b 	bl	80034b4 <osSemaphoreRelease>
				osSemaphoreRelease(WaitDbclickBinarySemHandle);
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <StartKeyDbclickTask+0x198>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 fd06 	bl	80034b4 <osSemaphoreRelease>
//				break;
			}
			KeyStateLastTime=KeyStateRealTime;
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	73fb      	strb	r3, [r7, #15]
			osDelay(20);
 8000aac:	2014      	movs	r0, #20
 8000aae:	f002 fc0b 	bl	80032c8 <osDelay>
		for(uint8_t i=0; i<30; ++i)
 8000ab2:	7b3b      	ldrb	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	733b      	strb	r3, [r7, #12]
 8000ab8:	7b3b      	ldrb	r3, [r7, #12]
 8000aba:	2b1d      	cmp	r3, #29
 8000abc:	f67f af58 	bls.w	8000970 <StartKeyDbclickTask+0x28>
		osSemaphoreAcquire(DbclickStartBinarySemHandle, osWaitForever);
 8000ac0:	e74c      	b.n	800095c <StartKeyDbclickTask+0x14>
 8000ac2:	bf00      	nop
 8000ac4:	20001b9c 	.word	0x20001b9c
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	20001b58 	.word	0x20001b58
 8000ad0:	20001b60 	.word	0x20001b60
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	20001b68 	.word	0x20001b68
 8000adc:	20001b70 	.word	0x20001b70
 8000ae0:	20001ba0 	.word	0x20001ba0

08000ae4 <StartKeyHoldTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyHoldTask */
void StartKeyHoldTask(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyHoldTask */
	uint8_t i;
  /* Infinite loop */
	for(;;)
	{
		for(i=0; i<10; ++i)
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e03d      	b.n	8000b6e <StartKeyHoldTask+0x8a>
		{
			if(HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin)==KEY_TRIG_STATE){k1.HoldCount++;}
 8000af2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af6:	4853      	ldr	r0, [pc, #332]	@ (8000c44 <StartKeyHoldTask+0x160>)
 8000af8:	f000 ffaa 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d105      	bne.n	8000b0e <StartKeyHoldTask+0x2a>
 8000b02:	4b51      	ldr	r3, [pc, #324]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000b0c:	715a      	strb	r2, [r3, #5]
			if(HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin)==KEY_TRIG_STATE){k2.HoldCount++;}
 8000b0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b12:	484c      	ldr	r0, [pc, #304]	@ (8000c44 <StartKeyHoldTask+0x160>)
 8000b14:	f000 ff9c 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d105      	bne.n	8000b2a <StartKeyHoldTask+0x46>
 8000b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000b20:	795b      	ldrb	r3, [r3, #5]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b49      	ldr	r3, [pc, #292]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000b28:	715a      	strb	r2, [r3, #5]
			if(HAL_GPIO_ReadPin(Key3_GPIO_Port, Key3_Pin)==KEY_TRIG_STATE){k3.HoldCount++;}
 8000b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b2e:	4848      	ldr	r0, [pc, #288]	@ (8000c50 <StartKeyHoldTask+0x16c>)
 8000b30:	f000 ff8e 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d105      	bne.n	8000b46 <StartKeyHoldTask+0x62>
 8000b3a:	4b46      	ldr	r3, [pc, #280]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000b3c:	795b      	ldrb	r3, [r3, #5]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b44      	ldr	r3, [pc, #272]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000b44:	715a      	strb	r2, [r3, #5]
			if(HAL_GPIO_ReadPin(Key4_GPIO_Port, Key4_Pin)==KEY_TRIG_STATE){k4.HoldCount++;}
 8000b46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b4a:	4841      	ldr	r0, [pc, #260]	@ (8000c50 <StartKeyHoldTask+0x16c>)
 8000b4c:	f000 ff80 	bl	8001a50 <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d105      	bne.n	8000b62 <StartKeyHoldTask+0x7e>
 8000b56:	4b40      	ldr	r3, [pc, #256]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000b58:	795b      	ldrb	r3, [r3, #5]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000b60:	715a      	strb	r2, [r3, #5]

			osDelay(100);
 8000b62:	2064      	movs	r0, #100	@ 0x64
 8000b64:	f002 fbb0 	bl	80032c8 <osDelay>
		for(i=0; i<10; ++i)
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b09      	cmp	r3, #9
 8000b72:	d9be      	bls.n	8000af2 <StartKeyHoldTask+0xe>
		}
		if(k1.HoldCount>=8){k1.HoldFlag=1;k1.IgnoreClickFlag=1;osSemaphoreRelease(HoldDetectBinarySemHandle);}
 8000b74:	4b34      	ldr	r3, [pc, #208]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	2b07      	cmp	r3, #7
 8000b7a:	d90a      	bls.n	8000b92 <StartKeyHoldTask+0xae>
 8000b7c:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	70da      	strb	r2, [r3, #3]
 8000b82:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	711a      	strb	r2, [r3, #4]
 8000b88:	4b34      	ldr	r3, [pc, #208]	@ (8000c5c <StartKeyHoldTask+0x178>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 fc91 	bl	80034b4 <osSemaphoreRelease>
		if(k2.HoldCount>=8){k2.HoldFlag=1;k2.IgnoreClickFlag=1;osSemaphoreRelease(HoldDetectBinarySemHandle);}
 8000b92:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000b94:	795b      	ldrb	r3, [r3, #5]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d90a      	bls.n	8000bb0 <StartKeyHoldTask+0xcc>
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	70da      	strb	r2, [r3, #3]
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	711a      	strb	r2, [r3, #4]
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <StartKeyHoldTask+0x178>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fc82 	bl	80034b4 <osSemaphoreRelease>
		if(k3.HoldCount>=8){k3.HoldFlag=1;k3.IgnoreClickFlag=1;osSemaphoreRelease(HoldDetectBinarySemHandle);}
 8000bb0:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d90a      	bls.n	8000bce <StartKeyHoldTask+0xea>
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	70da      	strb	r2, [r3, #3]
 8000bbe:	4b25      	ldr	r3, [pc, #148]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	711a      	strb	r2, [r3, #4]
 8000bc4:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <StartKeyHoldTask+0x178>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fc73 	bl	80034b4 <osSemaphoreRelease>
		if(k4.HoldCount>=8){k4.HoldFlag=1;k4.IgnoreClickFlag=1;osSemaphoreRelease(HoldDetectBinarySemHandle);}
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000bd0:	795b      	ldrb	r3, [r3, #5]
 8000bd2:	2b07      	cmp	r3, #7
 8000bd4:	d90a      	bls.n	8000bec <StartKeyHoldTask+0x108>
 8000bd6:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	70da      	strb	r2, [r3, #3]
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	711a      	strb	r2, [r3, #4]
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <StartKeyHoldTask+0x178>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fc64 	bl	80034b4 <osSemaphoreRelease>
		if(k1.HoldCount<=7){k1.IgnoreClickFlag=0;}
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	d802      	bhi.n	8000bfa <StartKeyHoldTask+0x116>
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	711a      	strb	r2, [r3, #4]
		if(k2.HoldCount<=7){k2.IgnoreClickFlag=0;}
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000bfc:	795b      	ldrb	r3, [r3, #5]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d802      	bhi.n	8000c08 <StartKeyHoldTask+0x124>
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	711a      	strb	r2, [r3, #4]
		if(k3.HoldCount<=7){k3.IgnoreClickFlag=0;}
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000c0a:	795b      	ldrb	r3, [r3, #5]
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	d802      	bhi.n	8000c16 <StartKeyHoldTask+0x132>
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	711a      	strb	r2, [r3, #4]
		if(k4.HoldCount<=7){k4.IgnoreClickFlag=0;}
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000c18:	795b      	ldrb	r3, [r3, #5]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d802      	bhi.n	8000c24 <StartKeyHoldTask+0x140>
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	711a      	strb	r2, [r3, #4]
		k1.HoldCount=k2.HoldCount=k3.HoldCount=k4.HoldCount=0;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	715a      	strb	r2, [r3, #5]
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <StartKeyHoldTask+0x174>)
 8000c2c:	795a      	ldrb	r2, [r3, #5]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000c30:	715a      	strb	r2, [r3, #5]
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <StartKeyHoldTask+0x170>)
 8000c34:	795a      	ldrb	r2, [r3, #5]
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000c38:	715a      	strb	r2, [r3, #5]
 8000c3a:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <StartKeyHoldTask+0x168>)
 8000c3c:	795a      	ldrb	r2, [r3, #5]
 8000c3e:	4b02      	ldr	r3, [pc, #8]	@ (8000c48 <StartKeyHoldTask+0x164>)
 8000c40:	715a      	strb	r2, [r3, #5]
		for(i=0; i<10; ++i)
 8000c42:	e753      	b.n	8000aec <StartKeyHoldTask+0x8>
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	20001b58 	.word	0x20001b58
 8000c4c:	20001b60 	.word	0x20001b60
 8000c50:	40010800 	.word	0x40010800
 8000c54:	20001b68 	.word	0x20001b68
 8000c58:	20001b70 	.word	0x20001b70
 8000c5c:	20001b98 	.word	0x20001b98

08000c60 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	DisplayInfo ReceivedInfo;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet (DisplayInfoQueueHandle, &ReceivedInfo, NULL, osWaitForever);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <StartDisplayTask+0x44>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	f107 010c 	add.w	r1, r7, #12
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2200      	movs	r2, #0
 8000c76:	f002 fd35 	bl	80036e4 <osMessageQueueGet>
	  if(ReceivedInfo.language==zh)
 8000c7a:	7b3b      	ldrb	r3, [r7, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <StartDisplayTask+0x2c>
	  {OLED_showChinese(ReceivedInfo.Page, ReceivedInfo.X, ReceivedInfo.String);}
 8000c80:	7b7b      	ldrb	r3, [r7, #13]
 8000c82:	7bb9      	ldrb	r1, [r7, #14]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc88 	bl	800059c <OLED_showChinese>
	  if(ReceivedInfo.language==en)
 8000c8c:	7b3b      	ldrb	r3, [r7, #12]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d105      	bne.n	8000c9e <StartDisplayTask+0x3e>
	  {OLED_showString(ReceivedInfo.Page, ReceivedInfo.X, ReceivedInfo.String, ReceivedInfo.fontSize);}
 8000c92:	7b78      	ldrb	r0, [r7, #13]
 8000c94:	7bb9      	ldrb	r1, [r7, #14]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	7d3b      	ldrb	r3, [r7, #20]
 8000c9a:	f7ff fc0f 	bl	80004bc <OLED_showString>
	  OLED_updata();
 8000c9e:	f7ff fb59 	bl	8000354 <OLED_updata>
	  osMessageQueueGet (DisplayInfoQueueHandle, &ReceivedInfo, NULL, osWaitForever);
 8000ca2:	e7e1      	b.n	8000c68 <StartDisplayTask+0x8>
 8000ca4:	20001b94 	.word	0x20001b94

08000ca8 <StartCopeKeyStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCopeKeyStateTask */
void StartCopeKeyStateTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	osStatus_t state;

  /* Infinite loop */
  for(;;)
  {
	  state=osSemaphoreAcquire(HoldDetectBinarySemHandle, 0);
 8000cb0:	4bb1      	ldr	r3, [pc, #708]	@ (8000f78 <StartCopeKeyStateTask+0x2d0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fbaa 	bl	8003410 <osSemaphoreAcquire>
 8000cbc:	6178      	str	r0, [r7, #20]
	  if(state==osOK)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d167      	bne.n	8000d94 <StartCopeKeyStateTask+0xec>
	  {
		  if(k1.HoldFlag==1)
 8000cc4:	4bad      	ldr	r3, [pc, #692]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000cc6:	78db      	ldrb	r3, [r3, #3]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d115      	bne.n	8000cf8 <StartCopeKeyStateTask+0x50>
		  {
			  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键一长按";InfoOfKey.fontSize=8;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	723b      	strb	r3, [r7, #8]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	727b      	strb	r3, [r7, #9]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	72bb      	strb	r3, [r7, #10]
 8000cd8:	4ba9      	ldr	r3, [pc, #676]	@ (8000f80 <StartCopeKeyStateTask+0x2d8>)
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	2308      	movs	r3, #8
 8000cde:	743b      	strb	r3, [r7, #16]
			  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000ce0:	4ba8      	ldr	r3, [pc, #672]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	f107 0108 	add.w	r1, r7, #8
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	2200      	movs	r2, #0
 8000cee:	f002 fc99 	bl	8003624 <osMessageQueuePut>
			  k1.HoldFlag=0;
 8000cf2:	4ba2      	ldr	r3, [pc, #648]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	70da      	strb	r2, [r3, #3]
		  }
		  if(k2.HoldFlag==1)
 8000cf8:	4ba3      	ldr	r3, [pc, #652]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000cfa:	78db      	ldrb	r3, [r3, #3]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d115      	bne.n	8000d2c <StartCopeKeyStateTask+0x84>
		  {
			  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键二长按";InfoOfKey.fontSize=8;
 8000d00:	2300      	movs	r3, #0
 8000d02:	723b      	strb	r3, [r7, #8]
 8000d04:	2300      	movs	r3, #0
 8000d06:	727b      	strb	r3, [r7, #9]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	72bb      	strb	r3, [r7, #10]
 8000d0c:	4b9f      	ldr	r3, [pc, #636]	@ (8000f8c <StartCopeKeyStateTask+0x2e4>)
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	2308      	movs	r3, #8
 8000d12:	743b      	strb	r3, [r7, #16]
			  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000d14:	4b9b      	ldr	r3, [pc, #620]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f107 0108 	add.w	r1, r7, #8
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2200      	movs	r2, #0
 8000d22:	f002 fc7f 	bl	8003624 <osMessageQueuePut>
			  k2.HoldFlag=0;
 8000d26:	4b98      	ldr	r3, [pc, #608]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	70da      	strb	r2, [r3, #3]
		  }
		  if(k3.HoldFlag==1)
 8000d2c:	4b98      	ldr	r3, [pc, #608]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000d2e:	78db      	ldrb	r3, [r3, #3]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d115      	bne.n	8000d60 <StartCopeKeyStateTask+0xb8>
		  {
			  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键三长按";InfoOfKey.fontSize=8;
 8000d34:	2300      	movs	r3, #0
 8000d36:	723b      	strb	r3, [r7, #8]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	727b      	strb	r3, [r7, #9]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	72bb      	strb	r3, [r7, #10]
 8000d40:	4b94      	ldr	r3, [pc, #592]	@ (8000f94 <StartCopeKeyStateTask+0x2ec>)
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	2308      	movs	r3, #8
 8000d46:	743b      	strb	r3, [r7, #16]
			  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000d48:	4b8e      	ldr	r3, [pc, #568]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f107 0108 	add.w	r1, r7, #8
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	2200      	movs	r2, #0
 8000d56:	f002 fc65 	bl	8003624 <osMessageQueuePut>
			  k3.HoldFlag=0;
 8000d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	70da      	strb	r2, [r3, #3]
		  }
		  if(k4.HoldFlag==1)
 8000d60:	4b8d      	ldr	r3, [pc, #564]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000d62:	78db      	ldrb	r3, [r3, #3]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d115      	bne.n	8000d94 <StartCopeKeyStateTask+0xec>
		  {
			  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键四长按";InfoOfKey.fontSize=8;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	723b      	strb	r3, [r7, #8]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	727b      	strb	r3, [r7, #9]
 8000d70:	2300      	movs	r3, #0
 8000d72:	72bb      	strb	r3, [r7, #10]
 8000d74:	4b89      	ldr	r3, [pc, #548]	@ (8000f9c <StartCopeKeyStateTask+0x2f4>)
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	2308      	movs	r3, #8
 8000d7a:	743b      	strb	r3, [r7, #16]
			  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000d7c:	4b81      	ldr	r3, [pc, #516]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	f107 0108 	add.w	r1, r7, #8
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f002 fc4b 	bl	8003624 <osMessageQueuePut>
			  k4.HoldFlag=0;
 8000d8e:	4b82      	ldr	r3, [pc, #520]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	70da      	strb	r2, [r3, #3]
		  }
	  }
	  state=osSemaphoreAcquire(DbclickStartBinarySemHandle, 0);
 8000d94:	4b82      	ldr	r3, [pc, #520]	@ (8000fa0 <StartCopeKeyStateTask+0x2f8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fb38 	bl	8003410 <osSemaphoreAcquire>
 8000da0:	6178      	str	r0, [r7, #20]
//	  if(state==osOK)
	  {
		  state=osSemaphoreAcquire(WaitDbclickBinarySemHandle, 600);//双击超时时长
 8000da2:	4b80      	ldr	r3, [pc, #512]	@ (8000fa4 <StartCopeKeyStateTask+0x2fc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fb30 	bl	8003410 <osSemaphoreAcquire>
 8000db0:	6178      	str	r0, [r7, #20]
		  if(state==osErrorTimeout)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f113 0f02 	cmn.w	r3, #2
 8000db8:	f040 80a3 	bne.w	8000f02 <StartCopeKeyStateTask+0x25a>
		  {
			  k1.DbclickFlag=k2.DbclickFlag=k3.DbclickFlag=k4.DbclickFlag=0;
 8000dbc:	4b76      	ldr	r3, [pc, #472]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	709a      	strb	r2, [r3, #2]
 8000dc2:	4b75      	ldr	r3, [pc, #468]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000dc4:	789a      	ldrb	r2, [r3, #2]
 8000dc6:	4b72      	ldr	r3, [pc, #456]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000dc8:	709a      	strb	r2, [r3, #2]
 8000dca:	4b71      	ldr	r3, [pc, #452]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000dcc:	789a      	ldrb	r2, [r3, #2]
 8000dce:	4b6e      	ldr	r3, [pc, #440]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000dd0:	709a      	strb	r2, [r3, #2]
 8000dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000dd4:	789a      	ldrb	r2, [r3, #2]
 8000dd6:	4b69      	ldr	r3, [pc, #420]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000dd8:	709a      	strb	r2, [r3, #2]
			  if(k1.ClickFlag==1 && k1.IgnoreClickFlag==0)
 8000dda:	4b68      	ldr	r3, [pc, #416]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d119      	bne.n	8000e16 <StartCopeKeyStateTask+0x16e>
 8000de2:	4b66      	ldr	r3, [pc, #408]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d115      	bne.n	8000e16 <StartCopeKeyStateTask+0x16e>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键一单击";InfoOfKey.fontSize=8;
 8000dea:	2300      	movs	r3, #0
 8000dec:	723b      	strb	r3, [r7, #8]
 8000dee:	2300      	movs	r3, #0
 8000df0:	727b      	strb	r3, [r7, #9]
 8000df2:	2300      	movs	r3, #0
 8000df4:	72bb      	strb	r3, [r7, #10]
 8000df6:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa8 <StartCopeKeyStateTask+0x300>)
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000dfe:	4b61      	ldr	r3, [pc, #388]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f107 0108 	add.w	r1, r7, #8
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f002 fc0a 	bl	8003624 <osMessageQueuePut>
				  k1.ClickFlag=0;
 8000e10:	4b5a      	ldr	r3, [pc, #360]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	705a      	strb	r2, [r3, #1]
			  }
			  if(k1.IgnoreClickFlag==1){k1.ClickFlag=0;}
 8000e16:	4b59      	ldr	r3, [pc, #356]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000e18:	791b      	ldrb	r3, [r3, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <StartCopeKeyStateTask+0x17c>
 8000e1e:	4b57      	ldr	r3, [pc, #348]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	705a      	strb	r2, [r3, #1]

			  if(k2.ClickFlag==1 && k2.IgnoreClickFlag==0)
 8000e24:	4b58      	ldr	r3, [pc, #352]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d119      	bne.n	8000e60 <StartCopeKeyStateTask+0x1b8>
 8000e2c:	4b56      	ldr	r3, [pc, #344]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d115      	bne.n	8000e60 <StartCopeKeyStateTask+0x1b8>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键二单击";InfoOfKey.fontSize=8;
 8000e34:	2300      	movs	r3, #0
 8000e36:	723b      	strb	r3, [r7, #8]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	727b      	strb	r3, [r7, #9]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	72bb      	strb	r3, [r7, #10]
 8000e40:	4b5a      	ldr	r3, [pc, #360]	@ (8000fac <StartCopeKeyStateTask+0x304>)
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	2308      	movs	r3, #8
 8000e46:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000e48:	4b4e      	ldr	r3, [pc, #312]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	f107 0108 	add.w	r1, r7, #8
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	2200      	movs	r2, #0
 8000e56:	f002 fbe5 	bl	8003624 <osMessageQueuePut>
				  k2.ClickFlag=0;
 8000e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	705a      	strb	r2, [r3, #1]
			  }
			  if(k2.IgnoreClickFlag==1){k2.ClickFlag=0;}
 8000e60:	4b49      	ldr	r3, [pc, #292]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d102      	bne.n	8000e6e <StartCopeKeyStateTask+0x1c6>
 8000e68:	4b47      	ldr	r3, [pc, #284]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	705a      	strb	r2, [r3, #1]

			  if(k3.ClickFlag==1 && k3.IgnoreClickFlag==0)
 8000e6e:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d119      	bne.n	8000eaa <StartCopeKeyStateTask+0x202>
 8000e76:	4b46      	ldr	r3, [pc, #280]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d115      	bne.n	8000eaa <StartCopeKeyStateTask+0x202>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键三单击";InfoOfKey.fontSize=8;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	723b      	strb	r3, [r7, #8]
 8000e82:	2300      	movs	r3, #0
 8000e84:	727b      	strb	r3, [r7, #9]
 8000e86:	2300      	movs	r3, #0
 8000e88:	72bb      	strb	r3, [r7, #10]
 8000e8a:	4b49      	ldr	r3, [pc, #292]	@ (8000fb0 <StartCopeKeyStateTask+0x308>)
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	2308      	movs	r3, #8
 8000e90:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000e92:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	f107 0108 	add.w	r1, r7, #8
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f002 fbc0 	bl	8003624 <osMessageQueuePut>
				  k3.ClickFlag=0;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	705a      	strb	r2, [r3, #1]
			  }
			  if(k3.IgnoreClickFlag==1){k3.ClickFlag=0;}
 8000eaa:	4b39      	ldr	r3, [pc, #228]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000eac:	791b      	ldrb	r3, [r3, #4]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d102      	bne.n	8000eb8 <StartCopeKeyStateTask+0x210>
 8000eb2:	4b37      	ldr	r3, [pc, #220]	@ (8000f90 <StartCopeKeyStateTask+0x2e8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]

			  if(k4.ClickFlag==1 && k4.IgnoreClickFlag==0)
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000eba:	785b      	ldrb	r3, [r3, #1]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d119      	bne.n	8000ef4 <StartCopeKeyStateTask+0x24c>
 8000ec0:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d115      	bne.n	8000ef4 <StartCopeKeyStateTask+0x24c>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键四单击";InfoOfKey.fontSize=8;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	723b      	strb	r3, [r7, #8]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	727b      	strb	r3, [r7, #9]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	72bb      	strb	r3, [r7, #10]
 8000ed4:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <StartCopeKeyStateTask+0x30c>)
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	2308      	movs	r3, #8
 8000eda:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f107 0108 	add.w	r1, r7, #8
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f002 fb9b 	bl	8003624 <osMessageQueuePut>
				  k4.ClickFlag=0;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	705a      	strb	r2, [r3, #1]
			  }
			  if(k4.IgnoreClickFlag==1){k4.ClickFlag=0;}
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d102      	bne.n	8000f02 <StartCopeKeyStateTask+0x25a>
 8000efc:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <StartCopeKeyStateTask+0x2f0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	705a      	strb	r2, [r3, #1]
		  }
//		  if(state==osOK)
		  {
			  if(k1.DbclickFlag==1)
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d118      	bne.n	8000f3c <StartCopeKeyStateTask+0x294>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键一双击";InfoOfKey.fontSize=8;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	723b      	strb	r3, [r7, #8]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	727b      	strb	r3, [r7, #9]
 8000f12:	2300      	movs	r3, #0
 8000f14:	72bb      	strb	r3, [r7, #10]
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <StartCopeKeyStateTask+0x310>)
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f002 fb7a 	bl	8003624 <osMessageQueuePut>
				  k1.ClickFlag=0;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	705a      	strb	r2, [r3, #1]
				  k1.DbclickFlag=0;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <StartCopeKeyStateTask+0x2d4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	709a      	strb	r2, [r3, #2]
			  }
			  if(k2.DbclickFlag==1)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d13d      	bne.n	8000fc0 <StartCopeKeyStateTask+0x318>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键二双击";InfoOfKey.fontSize=8;
 8000f44:	2300      	movs	r3, #0
 8000f46:	723b      	strb	r3, [r7, #8]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	727b      	strb	r3, [r7, #9]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	72bb      	strb	r3, [r7, #10]
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <StartCopeKeyStateTask+0x314>)
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	2308      	movs	r3, #8
 8000f56:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <StartCopeKeyStateTask+0x2dc>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f107 0108 	add.w	r1, r7, #8
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	2200      	movs	r2, #0
 8000f66:	f002 fb5d 	bl	8003624 <osMessageQueuePut>
				  k2.ClickFlag=0;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	705a      	strb	r2, [r3, #1]
				  k2.DbclickFlag=0;
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <StartCopeKeyStateTask+0x2e0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	709a      	strb	r2, [r3, #2]
 8000f76:	e023      	b.n	8000fc0 <StartCopeKeyStateTask+0x318>
 8000f78:	20001b98 	.word	0x20001b98
 8000f7c:	20001b58 	.word	0x20001b58
 8000f80:	08006b74 	.word	0x08006b74
 8000f84:	20001b94 	.word	0x20001b94
 8000f88:	20001b60 	.word	0x20001b60
 8000f8c:	08006b84 	.word	0x08006b84
 8000f90:	20001b68 	.word	0x20001b68
 8000f94:	08006b94 	.word	0x08006b94
 8000f98:	20001b70 	.word	0x20001b70
 8000f9c:	08006ba4 	.word	0x08006ba4
 8000fa0:	20001b9c 	.word	0x20001b9c
 8000fa4:	20001ba0 	.word	0x20001ba0
 8000fa8:	08006bb4 	.word	0x08006bb4
 8000fac:	08006bc4 	.word	0x08006bc4
 8000fb0:	08006bd4 	.word	0x08006bd4
 8000fb4:	08006be4 	.word	0x08006be4
 8000fb8:	08006bf4 	.word	0x08006bf4
 8000fbc:	08006c04 	.word	0x08006c04
			  }
			  if(k3.DbclickFlag==1)
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <StartCopeKeyStateTask+0x390>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d118      	bne.n	8000ffa <StartCopeKeyStateTask+0x352>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键三双击";InfoOfKey.fontSize=8;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	723b      	strb	r3, [r7, #8]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	727b      	strb	r3, [r7, #9]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	72bb      	strb	r3, [r7, #10]
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <StartCopeKeyStateTask+0x394>)
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	2308      	movs	r3, #8
 8000fda:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <StartCopeKeyStateTask+0x398>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 0108 	add.w	r1, r7, #8
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f002 fb1b 	bl	8003624 <osMessageQueuePut>
				  k3.ClickFlag=0;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <StartCopeKeyStateTask+0x390>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	705a      	strb	r2, [r3, #1]
				  k3.DbclickFlag=0;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <StartCopeKeyStateTask+0x390>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	709a      	strb	r2, [r3, #2]
			  }
			  if(k4.DbclickFlag==1)
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <StartCopeKeyStateTask+0x39c>)
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	f47f ae56 	bne.w	8000cb0 <StartCopeKeyStateTask+0x8>
			  {
				  InfoOfKey.language=zh;InfoOfKey.Page=0;InfoOfKey.X=0;InfoOfKey.String="键四双击";InfoOfKey.fontSize=8;
 8001004:	2300      	movs	r3, #0
 8001006:	723b      	strb	r3, [r7, #8]
 8001008:	2300      	movs	r3, #0
 800100a:	727b      	strb	r3, [r7, #9]
 800100c:	2300      	movs	r3, #0
 800100e:	72bb      	strb	r3, [r7, #10]
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <StartCopeKeyStateTask+0x3a0>)
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	2308      	movs	r3, #8
 8001016:	743b      	strb	r3, [r7, #16]
				  osMessageQueuePut (DisplayInfoQueueHandle, &InfoOfKey, 0, osWaitForever);
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <StartCopeKeyStateTask+0x398>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	f107 0108 	add.w	r1, r7, #8
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2200      	movs	r2, #0
 8001026:	f002 fafd 	bl	8003624 <osMessageQueuePut>
				  k4.ClickFlag=0;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <StartCopeKeyStateTask+0x39c>)
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
				  k4.DbclickFlag=0;
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <StartCopeKeyStateTask+0x39c>)
 8001032:	2200      	movs	r2, #0
 8001034:	709a      	strb	r2, [r3, #2]
	  state=osSemaphoreAcquire(HoldDetectBinarySemHandle, 0);
 8001036:	e63b      	b.n	8000cb0 <StartCopeKeyStateTask+0x8>
 8001038:	20001b68 	.word	0x20001b68
 800103c:	08006c14 	.word	0x08006c14
 8001040:	20001b94 	.word	0x20001b94
 8001044:	20001b70 	.word	0x20001b70
 8001048:	08006c24 	.word	0x08006c24

0800104c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_GPIO_Init+0x98>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <MX_GPIO_Init+0x98>)
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_GPIO_Init+0x98>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_GPIO_Init+0x98>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <MX_GPIO_Init+0x98>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_GPIO_Init+0x98>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_GPIO_Init+0x98>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <MX_GPIO_Init+0x98>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_GPIO_Init+0x98>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Key1_Pin Key2_Pin */
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;
 80010a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	480a      	ldr	r0, [pc, #40]	@ (80010e8 <MX_GPIO_Init+0x9c>)
 80010be:	f000 fb43 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key3_Pin Key4_Pin */
  GPIO_InitStruct.Pin = Key3_Pin|Key4_Pin;
 80010c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_GPIO_Init+0xa0>)
 80010d8:	f000 fb36 	bl	8001748 <HAL_GPIO_Init>

}
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40010800 	.word	0x40010800

080010f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_I2C1_Init+0x50>)
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <MX_I2C1_Init+0x54>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_I2C1_Init+0x50>)
 80010fc:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x58>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_I2C1_Init+0x50>)
 800110e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <MX_I2C1_Init+0x50>)
 800112e:	f000 fca7 	bl	8001a80 <HAL_I2C_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001138:	f000 f8c4 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20001ba4 	.word	0x20001ba4
 8001144:	40005400 	.word	0x40005400
 8001148:	000186a0 	.word	0x000186a0

0800114c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_I2C_MspInit+0x90>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d132      	bne.n	80011d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_I2C_MspInit+0x94>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <HAL_I2C_MspInit+0x94>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_I2C_MspInit+0x94>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001184:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118a:	2312      	movs	r3, #18
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <HAL_I2C_MspInit+0x98>)
 800119a:	f000 fad5 	bl	8001748 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_I2C_MspInit+0x9c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <HAL_I2C_MspInit+0x9c>)
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_I2C_MspInit+0x94>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_I2C_MspInit+0x94>)
 80011c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_I2C_MspInit+0x94>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40010000 	.word	0x40010000

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f000 f974 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f818 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f7ff ff28 	bl	800104c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011fc:	f7ff ff78 	bl	80010f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 8001200:	f7fe ffe4 	bl	80001cc <OLED_init>
  OLED_showChinese(0, 0, "你好世界");
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <main+0x38>)
 8001206:	2100      	movs	r1, #0
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff f9c7 	bl	800059c <OLED_showChinese>
  OLED_updata();
 800120e:	f7ff f8a1 	bl	8000354 <OLED_updata>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001212:	f001 ff7f 	bl	8003114 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001216:	f7ff fa55 	bl	80006c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800121a:	f001 ff9d 	bl	8003158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <main+0x32>
 8001222:	bf00      	nop
 8001224:	08006c34 	.word	0x08006c34

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	@ 0x40
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2228      	movs	r2, #40	@ 0x28
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fb3e 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2310      	movs	r3, #16
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f8aa 	bl	80023b8 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800126a:	f000 f82b 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fb18 	bl	80028bc <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001292:	f000 f817 	bl	80012c4 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	@ 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f000 f929 	bl	8001508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40000800 	.word	0x40000800

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <Error_Handler+0x8>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <HAL_MspInit+0x68>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a17      	ldr	r2, [pc, #92]	@ (8001338 <HAL_MspInit+0x68>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_MspInit+0x68>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_MspInit+0x68>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_MspInit+0x68>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_MspInit+0x68>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	210f      	movs	r1, #15
 800130a:	f06f 0001 	mvn.w	r0, #1
 800130e:	f000 f9f0 	bl	80016f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_MspInit+0x6c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_MspInit+0x6c>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000

08001340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <HAL_InitTick+0xe8>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a33      	ldr	r2, [pc, #204]	@ (8001428 <HAL_InitTick+0xe8>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <HAL_InitTick+0xe8>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136e:	f107 0210 	add.w	r2, r7, #16
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fbfb 	bl	8002b74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001388:	f001 fbe0 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 800138c:	6378      	str	r0, [r7, #52]	@ 0x34
 800138e:	e004      	b.n	800139a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001390:	f001 fbdc 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8001394:	4603      	mov	r3, r0
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800139a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139c:	4a23      	ldr	r2, [pc, #140]	@ (800142c <HAL_InitTick+0xec>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	3b01      	subs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <HAL_InitTick+0xf0>)
 80013aa:	4a22      	ldr	r2, [pc, #136]	@ (8001434 <HAL_InitTick+0xf4>)
 80013ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_InitTick+0xf0>)
 80013b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80013b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001430 <HAL_InitTick+0xf0>)
 80013b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <HAL_InitTick+0xf0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_InitTick+0xf0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_InitTick+0xf0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80013ce:	4818      	ldr	r0, [pc, #96]	@ (8001430 <HAL_InitTick+0xf0>)
 80013d0:	f001 fc1e 	bl	8002c10 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d11b      	bne.n	800141a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80013e2:	4813      	ldr	r0, [pc, #76]	@ (8001430 <HAL_InitTick+0xf0>)
 80013e4:	f001 fc6c 	bl	8002cc0 <HAL_TIM_Base_Start_IT>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d111      	bne.n	800141a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013f6:	201e      	movs	r0, #30
 80013f8:	f000 f997 	bl	800172a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d808      	bhi.n	8001414 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001402:	2200      	movs	r2, #0
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	201e      	movs	r0, #30
 8001408:	f000 f973 	bl	80016f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_InitTick+0xf8>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e002      	b.n	800141a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800141a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800141e:	4618      	mov	r0, r3
 8001420:	3738      	adds	r7, #56	@ 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	431bde83 	.word	0x431bde83
 8001430:	20001bf8 	.word	0x20001bf8
 8001434:	40000800 	.word	0x40000800
 8001438:	20000acc 	.word	0x20000acc

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <TIM4_IRQHandler+0x10>)
 8001476:	f001 fc75 	bl	8002d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001bf8 	.word	0x20001bf8

08001484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001490:	f7ff fff8 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001496:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001498:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014ac:	4c09      	ldr	r4, [pc, #36]	@ (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ba:	f005 fa5b 	bl	8006974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014be:	f7ff fe95 	bl	80011ec <main>
  bx lr
 80014c2:	4770      	bx	lr
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000b28 	.word	0x20000b28
  ldr r2, =_sidata
 80014cc:	08006dc8 	.word	0x08006dc8
  ldr r2, =_sbss
 80014d0:	20000b28 	.word	0x20000b28
  ldr r4, =_ebss
 80014d4:	20003f00 	.word	0x20003f00

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_Init+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_Init+0x28>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f8f5 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	200f      	movs	r0, #15
 80014f4:	f7ff ff24 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff feea 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	@ (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000ad0 	.word	0x20000ad0
 8001528:	20001c40 	.word	0x20001c40

0800152c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	@ (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20001c40 	.word	0x20001c40

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fff0 	bl	800152c <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffe0 	bl	800152c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000ad0 	.word	0x20000ad0

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4906      	ldr	r1, [pc, #24]	@ (8001620 <__NVIC_EnableIRQ+0x34>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff4f 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff64 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ffb2 	bl	8001678 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff81 	bl	8001624 <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff57 	bl	80015ec <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b08b      	sub	sp, #44	@ 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	e169      	b.n	8001a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800175c:	2201      	movs	r2, #1
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8158 	bne.w	8001a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4a9a      	ldr	r2, [pc, #616]	@ (80019e8 <HAL_GPIO_Init+0x2a0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d05e      	beq.n	8001842 <HAL_GPIO_Init+0xfa>
 8001784:	4a98      	ldr	r2, [pc, #608]	@ (80019e8 <HAL_GPIO_Init+0x2a0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d875      	bhi.n	8001876 <HAL_GPIO_Init+0x12e>
 800178a:	4a98      	ldr	r2, [pc, #608]	@ (80019ec <HAL_GPIO_Init+0x2a4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d058      	beq.n	8001842 <HAL_GPIO_Init+0xfa>
 8001790:	4a96      	ldr	r2, [pc, #600]	@ (80019ec <HAL_GPIO_Init+0x2a4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d86f      	bhi.n	8001876 <HAL_GPIO_Init+0x12e>
 8001796:	4a96      	ldr	r2, [pc, #600]	@ (80019f0 <HAL_GPIO_Init+0x2a8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d052      	beq.n	8001842 <HAL_GPIO_Init+0xfa>
 800179c:	4a94      	ldr	r2, [pc, #592]	@ (80019f0 <HAL_GPIO_Init+0x2a8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d869      	bhi.n	8001876 <HAL_GPIO_Init+0x12e>
 80017a2:	4a94      	ldr	r2, [pc, #592]	@ (80019f4 <HAL_GPIO_Init+0x2ac>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d04c      	beq.n	8001842 <HAL_GPIO_Init+0xfa>
 80017a8:	4a92      	ldr	r2, [pc, #584]	@ (80019f4 <HAL_GPIO_Init+0x2ac>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d863      	bhi.n	8001876 <HAL_GPIO_Init+0x12e>
 80017ae:	4a92      	ldr	r2, [pc, #584]	@ (80019f8 <HAL_GPIO_Init+0x2b0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d046      	beq.n	8001842 <HAL_GPIO_Init+0xfa>
 80017b4:	4a90      	ldr	r2, [pc, #576]	@ (80019f8 <HAL_GPIO_Init+0x2b0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d85d      	bhi.n	8001876 <HAL_GPIO_Init+0x12e>
 80017ba:	2b12      	cmp	r3, #18
 80017bc:	d82a      	bhi.n	8001814 <HAL_GPIO_Init+0xcc>
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d859      	bhi.n	8001876 <HAL_GPIO_Init+0x12e>
 80017c2:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <HAL_GPIO_Init+0x80>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	08001843 	.word	0x08001843
 80017cc:	0800181d 	.word	0x0800181d
 80017d0:	0800182f 	.word	0x0800182f
 80017d4:	08001871 	.word	0x08001871
 80017d8:	08001877 	.word	0x08001877
 80017dc:	08001877 	.word	0x08001877
 80017e0:	08001877 	.word	0x08001877
 80017e4:	08001877 	.word	0x08001877
 80017e8:	08001877 	.word	0x08001877
 80017ec:	08001877 	.word	0x08001877
 80017f0:	08001877 	.word	0x08001877
 80017f4:	08001877 	.word	0x08001877
 80017f8:	08001877 	.word	0x08001877
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001877 	.word	0x08001877
 8001804:	08001877 	.word	0x08001877
 8001808:	08001877 	.word	0x08001877
 800180c:	08001825 	.word	0x08001825
 8001810:	08001839 	.word	0x08001839
 8001814:	4a79      	ldr	r2, [pc, #484]	@ (80019fc <HAL_GPIO_Init+0x2b4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800181a:	e02c      	b.n	8001876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e029      	b.n	8001878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	3304      	adds	r3, #4
 800182a:	623b      	str	r3, [r7, #32]
          break;
 800182c:	e024      	b.n	8001878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	3308      	adds	r3, #8
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e01f      	b.n	8001878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	330c      	adds	r3, #12
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e01a      	b.n	8001878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800184a:	2304      	movs	r3, #4
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e013      	b.n	8001878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001858:	2308      	movs	r3, #8
 800185a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	611a      	str	r2, [r3, #16]
          break;
 8001862:	e009      	b.n	8001878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001864:	2308      	movs	r3, #8
 8001866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	615a      	str	r2, [r3, #20]
          break;
 800186e:	e003      	b.n	8001878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x130>
          break;
 8001876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2bff      	cmp	r3, #255	@ 0xff
 800187c:	d801      	bhi.n	8001882 <HAL_GPIO_Init+0x13a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	e001      	b.n	8001886 <HAL_GPIO_Init+0x13e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3304      	adds	r3, #4
 8001886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2bff      	cmp	r3, #255	@ 0xff
 800188c:	d802      	bhi.n	8001894 <HAL_GPIO_Init+0x14c>
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x152>
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	3b08      	subs	r3, #8
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	210f      	movs	r1, #15
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	401a      	ands	r2, r3
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80b1 	beq.w	8001a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a00 <HAL_GPIO_Init+0x2b8>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a00 <HAL_GPIO_Init+0x2b8>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <HAL_GPIO_Init+0x2b8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018e0:	4a48      	ldr	r2, [pc, #288]	@ (8001a04 <HAL_GPIO_Init+0x2bc>)
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a40      	ldr	r2, [pc, #256]	@ (8001a08 <HAL_GPIO_Init+0x2c0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d013      	beq.n	8001934 <HAL_GPIO_Init+0x1ec>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a0c <HAL_GPIO_Init+0x2c4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00d      	beq.n	8001930 <HAL_GPIO_Init+0x1e8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3e      	ldr	r2, [pc, #248]	@ (8001a10 <HAL_GPIO_Init+0x2c8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d007      	beq.n	800192c <HAL_GPIO_Init+0x1e4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a14 <HAL_GPIO_Init+0x2cc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_GPIO_Init+0x1e0>
 8001924:	2303      	movs	r3, #3
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001928:	2304      	movs	r3, #4
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x1ee>
 8001934:	2300      	movs	r3, #0
 8001936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001946:	492f      	ldr	r1, [pc, #188]	@ (8001a04 <HAL_GPIO_Init+0x2bc>)
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001960:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	492c      	ldr	r1, [pc, #176]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800196e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	4928      	ldr	r1, [pc, #160]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 8001978:	4013      	ands	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4922      	ldr	r1, [pc, #136]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	491e      	ldr	r1, [pc, #120]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4918      	ldr	r1, [pc, #96]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4914      	ldr	r1, [pc, #80]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d021      	beq.n	8001a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	490e      	ldr	r1, [pc, #56]	@ (8001a18 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e021      	b.n	8001a2a <HAL_GPIO_Init+0x2e2>
 80019e6:	bf00      	nop
 80019e8:	10320000 	.word	0x10320000
 80019ec:	10310000 	.word	0x10310000
 80019f0:	10220000 	.word	0x10220000
 80019f4:	10210000 	.word	0x10210000
 80019f8:	10120000 	.word	0x10120000
 80019fc:	10110000 	.word	0x10110000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	40010c00 	.word	0x40010c00
 8001a10:	40011000 	.word	0x40011000
 8001a14:	40011400 	.word	0x40011400
 8001a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	4909      	ldr	r1, [pc, #36]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f ae8e 	bne.w	800175c <HAL_GPIO_Init+0x14>
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	372c      	adds	r7, #44	@ 0x2c
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e12b      	b.n	8001cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fb50 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae4:	f001 f832 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a81      	ldr	r2, [pc, #516]	@ (8001cf4 <HAL_I2C_Init+0x274>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d807      	bhi.n	8001b04 <HAL_I2C_Init+0x84>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a80      	ldr	r2, [pc, #512]	@ (8001cf8 <HAL_I2C_Init+0x278>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	bf94      	ite	ls
 8001afc:	2301      	movls	r3, #1
 8001afe:	2300      	movhi	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e006      	b.n	8001b12 <HAL_I2C_Init+0x92>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a7d      	ldr	r2, [pc, #500]	@ (8001cfc <HAL_I2C_Init+0x27c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0e7      	b.n	8001cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a78      	ldr	r2, [pc, #480]	@ (8001d00 <HAL_I2C_Init+0x280>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf4 <HAL_I2C_Init+0x274>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d802      	bhi.n	8001b54 <HAL_I2C_Init+0xd4>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	e009      	b.n	8001b68 <HAL_I2C_Init+0xe8>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a69      	ldr	r2, [pc, #420]	@ (8001d04 <HAL_I2C_Init+0x284>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	495c      	ldr	r1, [pc, #368]	@ (8001cf4 <HAL_I2C_Init+0x274>)
 8001b84:	428b      	cmp	r3, r1
 8001b86:	d819      	bhi.n	8001bbc <HAL_I2C_Init+0x13c>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e59      	subs	r1, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b96:	1c59      	adds	r1, r3, #1
 8001b98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_I2C_Init+0x138>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e59      	subs	r1, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb6:	e051      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	e04f      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_I2C_Init+0x168>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e012      	b.n	8001c0e <HAL_I2C_Init+0x18e>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1e58      	subs	r0, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	0099      	lsls	r1, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Init+0x196>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e022      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10e      	bne.n	8001c3c <HAL_I2C_Init+0x1bc>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e58      	subs	r0, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	440b      	add	r3, r1
 8001c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1e58      	subs	r0, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	0099      	lsls	r1, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	6809      	ldr	r1, [r1, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6911      	ldr	r1, [r2, #16]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	000186a0 	.word	0x000186a0
 8001cf8:	001e847f 	.word	0x001e847f
 8001cfc:	003d08ff 	.word	0x003d08ff
 8001d00:	431bde83 	.word	0x431bde83
 8001d04:	10624dd3 	.word	0x10624dd3

08001d08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	817b      	strh	r3, [r7, #10]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff fc06 	bl	800152c <HAL_GetTick>
 8001d20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	f040 80e0 	bne.w	8001ef0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2319      	movs	r3, #25
 8001d36:	2201      	movs	r2, #1
 8001d38:	4970      	ldr	r1, [pc, #448]	@ (8001efc <HAL_I2C_Master_Transmit+0x1f4>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f964 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	e0d3      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_I2C_Master_Transmit+0x50>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0cc      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d007      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2221      	movs	r2, #33	@ 0x21
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	893a      	ldrh	r2, [r7, #8]
 8001dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a50      	ldr	r2, [pc, #320]	@ (8001f00 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc0:	8979      	ldrh	r1, [r7, #10]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f89c 	bl	8001f04 <I2C_MasterRequestWrite>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e08d      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dec:	e066      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	6a39      	ldr	r1, [r7, #32]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fa22 	bl	800223c <I2C_WaitOnTXEFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00d      	beq.n	8001e1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d107      	bne.n	8001e16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e06b      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11b      	bne.n	8001e90 <HAL_I2C_Master_Transmit+0x188>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d017      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	6a39      	ldr	r1, [r7, #32]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 fa19 	bl	80022cc <I2C_WaitOnBTFFlagUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00d      	beq.n	8001ebc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d107      	bne.n	8001eb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e01a      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d194      	bne.n	8001dee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	00100002 	.word	0x00100002
 8001f00:	ffff0000 	.word	0xffff0000

08001f04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d006      	beq.n	8001f2e <I2C_MasterRequestWrite+0x2a>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d003      	beq.n	8001f2e <I2C_MasterRequestWrite+0x2a>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f2c:	d108      	bne.n	8001f40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00b      	b.n	8001f58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	2b12      	cmp	r3, #18
 8001f46:	d107      	bne.n	8001f58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f84f 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f7e:	d103      	bne.n	8001f88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e035      	b.n	8001ff8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f94:	d108      	bne.n	8001fa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fa4:	611a      	str	r2, [r3, #16]
 8001fa6:	e01b      	b.n	8001fe0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	11db      	asrs	r3, r3, #7
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f003 0306 	and.w	r3, r3, #6
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f063 030f 	orn	r3, r3, #15
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	490e      	ldr	r1, [pc, #56]	@ (8002000 <I2C_MasterRequestWrite+0xfc>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f898 	bl	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e010      	b.n	8001ff8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fd6:	897b      	ldrh	r3, [r7, #10]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4907      	ldr	r1, [pc, #28]	@ (8002004 <I2C_MasterRequestWrite+0x100>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f888 	bl	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	00010008 	.word	0x00010008
 8002004:	00010002 	.word	0x00010002

08002008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002018:	e048      	b.n	80020ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d044      	beq.n	80020ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	f7ff fa83 	bl	800152c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d302      	bcc.n	8002038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d139      	bne.n	80020ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10d      	bne.n	800205e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	43da      	mvns	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4013      	ands	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	e00c      	b.n	8002078 <I2C_WaitOnFlagUntilTimeout+0x70>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	43da      	mvns	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4013      	ands	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	429a      	cmp	r2, r3
 800207c:	d116      	bne.n	80020ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e023      	b.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10d      	bne.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	e00c      	b.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	43da      	mvns	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4013      	ands	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d093      	beq.n	800201a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210a:	e071      	b.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211a:	d123      	bne.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e067      	b.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d041      	beq.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216c:	f7ff f9de 	bl	800152c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d302      	bcc.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d136      	bne.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10c      	bne.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4013      	ands	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e00b      	b.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d016      	beq.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e021      	b.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0c1b      	lsrs	r3, r3, #16
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10c      	bne.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e00b      	b.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f af6d 	bne.w	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002248:	e034      	b.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f886 	bl	800235c <I2C_IsAcknowledgeFailed>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e034      	b.n	80022c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d028      	beq.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff f963 	bl	800152c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d11d      	bne.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	2b80      	cmp	r3, #128	@ 0x80
 8002284:	d016      	beq.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e007      	b.n	80022c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022be:	2b80      	cmp	r3, #128	@ 0x80
 80022c0:	d1c3      	bne.n	800224a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022d8:	e034      	b.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f83e 	bl	800235c <I2C_IsAcknowledgeFailed>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e034      	b.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d028      	beq.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7ff f91b 	bl	800152c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11d      	bne.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d016      	beq.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e007      	b.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d1c3      	bne.n	80022da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002372:	d11b      	bne.n	80023ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800237c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f043 0204 	orr.w	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e272      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d8:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00c      	beq.n	80023fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
 80023f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d10b      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	4b89      	ldr	r3, [pc, #548]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d168      	bne.n	80024e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e24c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x76>
 8002420:	4b80      	ldr	r3, [pc, #512]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a7f      	ldr	r2, [pc, #508]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e02e      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b7b      	ldr	r3, [pc, #492]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7a      	ldr	r2, [pc, #488]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b78      	ldr	r3, [pc, #480]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0xbc>
 800245a:	4b72      	ldr	r3, [pc, #456]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a71      	ldr	r2, [pc, #452]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002474:	4b6b      	ldr	r3, [pc, #428]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6a      	ldr	r2, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b68      	ldr	r3, [pc, #416]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a67      	ldr	r2, [pc, #412]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff f84a 	bl	800152c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff f846 	bl	800152c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e200      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xe4>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff f836 	bl	800152c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff f832 	bl	800152c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1ec      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x10c>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024fe:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
 800250a:	4b46      	ldr	r3, [pc, #280]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1c0      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4939      	ldr	r1, [pc, #228]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <HAL_RCC_OscConfig+0x270>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe ffeb 	bl	800152c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe ffe7 	bl	800152c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1a1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4927      	ldr	r1, [pc, #156]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_RCC_OscConfig+0x270>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe ffca 	bl	800152c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe ffc6 	bl	800152c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e180      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03a      	beq.n	800263c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7fe ffaa 	bl	800152c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe ffa6 	bl	800152c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e160      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 faea 	bl	8002bd4 <RCC_Delay>
 8002600:	e01c      	b.n	800263c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7fe ff90 	bl	800152c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe ff8c 	bl	800152c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d908      	bls.n	8002630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e146      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	42420000 	.word	0x42420000
 800262c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b92      	ldr	r3, [pc, #584]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e9      	bne.n	8002610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a6 	beq.w	8002796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b8b      	ldr	r3, [pc, #556]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a87      	ldr	r2, [pc, #540]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b82      	ldr	r3, [pc, #520]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b7f      	ldr	r3, [pc, #508]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7e      	ldr	r2, [pc, #504]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7fe ff4d 	bl	800152c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fe ff49 	bl	800152c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	@ 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e103      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x312>
 80026bc:	4b6f      	ldr	r3, [pc, #444]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	e02d      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x334>
 80026d2:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a69      	ldr	r2, [pc, #420]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4b67      	ldr	r3, [pc, #412]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a66      	ldr	r2, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	e01c      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x356>
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a60      	ldr	r2, [pc, #384]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	4b5e      	ldr	r3, [pc, #376]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a5d      	ldr	r2, [pc, #372]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a5a      	ldr	r2, [pc, #360]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b58      	ldr	r3, [pc, #352]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a57      	ldr	r2, [pc, #348]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fefd 	bl	800152c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fef9 	bl	800152c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0b1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <HAL_RCC_OscConfig+0x37e>
 8002758:	e014      	b.n	8002784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe fee7 	bl	800152c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fee3 	bl	800152c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	4b40      	ldr	r3, [pc, #256]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a3b      	ldr	r2, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a0:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d061      	beq.n	8002870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d146      	bne.n	8002842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe feb7 	bl	800152c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe feb3 	bl	800152c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e06d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4921      	ldr	r1, [pc, #132]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a19      	ldr	r1, [r3, #32]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	430b      	orrs	r3, r1
 800280e:	491b      	ldr	r1, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fe87 	bl	800152c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe fe83 	bl	800152c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x46a>
 8002840:	e035      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fe70 	bl	800152c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fe6c 	bl	800152c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e026      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x498>
 800286e:	e01e      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e019      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_RCC_OscConfig+0x500>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fdbe 	bl	800152c <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fdba 	bl	800152c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fc68 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08006d94 	.word	0x08006d94
 8002a88:	20000ac8 	.word	0x20000ac8
 8002a8c:	20000acc 	.word	0x20000acc

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8002abe:	e027      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac2:	613b      	str	r3, [r7, #16]
      break;
 8002ac4:	e027      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ade:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0c5b      	lsrs	r3, r3, #17
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af2:	fb03 f202 	mul.w	r2, r3, r2
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e004      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	613b      	str	r3, [r7, #16]
      break;
 8002b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b16:	693b      	ldr	r3, [r7, #16]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	08006dac 	.word	0x08006dac
 8002b30:	08006dbc 	.word	0x08006dbc
 8002b34:	003d0900 	.word	0x003d0900

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b02      	ldr	r3, [pc, #8]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000ac8 	.word	0x20000ac8

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b50:	f7ff fff2 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08006da4 	.word	0x08006da4

08002b74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	220f      	movs	r2, #15
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_RCC_GetClockConfig+0x58>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b90:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <HAL_RCC_GetClockConfig+0x58>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_GetClockConfig+0x58>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <HAL_RCC_GetClockConfig+0x58>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0207 	and.w	r2, r3, #7
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40022000 	.word	0x40022000

08002bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <RCC_Delay+0x34>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <RCC_Delay+0x38>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0a5b      	lsrs	r3, r3, #9
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf0:	bf00      	nop
  }
  while (Delay --);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	60fa      	str	r2, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f9      	bne.n	8002bf0 <RCC_Delay+0x1c>
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000ac8 	.word	0x20000ac8
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e041      	b.n	8002ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f839 	bl	8002cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 f99c 	bl	8002f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e03a      	b.n	8002d4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	@ (8002d58 <HAL_TIM_Base_Start_IT+0x98>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x58>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d02:	d009      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x58>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x58>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a13      	ldr	r2, [pc, #76]	@ (8002d60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d111      	bne.n	8002d3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d010      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	e007      	b.n	8002d4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800

08002d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0202 	mvn.w	r2, #2
 8002d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8d1 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8c4 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8d3 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d020      	beq.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0204 	mvn.w	r2, #4
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8ab 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f89e 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f8ad 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01b      	beq.n	8002e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0208 	mvn.w	r2, #8
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2204      	movs	r2, #4
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f885 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f878 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f887 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d020      	beq.n	8002eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01b      	beq.n	8002eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0210 	mvn.w	r2, #16
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2208      	movs	r2, #8
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f85f 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f852 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f861 	bl	8002f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0201 	mvn.w	r2, #1
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe f9e8 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8c3 	bl	800307a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f831 	bl	8002f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0220 	mvn.w	r2, #32
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f896 	bl	8003068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800305c <TIM_Base_SetConfig+0xd0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x30>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x30>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2c      	ldr	r2, [pc, #176]	@ (8003060 <TIM_Base_SetConfig+0xd4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <TIM_Base_SetConfig+0xd8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d108      	bne.n	8002fce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <TIM_Base_SetConfig+0xd0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x62>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <TIM_Base_SetConfig+0xd4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <TIM_Base_SetConfig+0xd8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <TIM_Base_SetConfig+0xd0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d103      	bne.n	8003034 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
  }
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800

08003068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <__NVIC_SetPriority>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	@ (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <SysTick_Handler+0x1c>)
 80030e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80030e8:	f002 faba 	bl	8005660 <xTaskGetSchedulerState>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80030f2:	f003 f961 	bl	80063b8 <xPortSysTickHandler>
  }
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003104:	2100      	movs	r1, #0
 8003106:	f06f 0004 	mvn.w	r0, #4
 800310a:	f7ff ffbf 	bl	800308c <__NVIC_SetPriority>
#endif
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800311a:	f3ef 8305 	mrs	r3, IPSR
 800311e:	603b      	str	r3, [r7, #0]
  return(result);
 8003120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003126:	f06f 0305 	mvn.w	r3, #5
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	e00c      	b.n	8003148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <osKernelInitialize+0x40>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <osKernelInitialize+0x40>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	e002      	b.n	8003148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	20001c44 	.word	0x20001c44

08003158 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800315e:	f3ef 8305 	mrs	r3, IPSR
 8003162:	603b      	str	r3, [r7, #0]
  return(result);
 8003164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <osKernelStart+0x1a>
    stat = osErrorISR;
 800316a:	f06f 0305 	mvn.w	r3, #5
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	e010      	b.n	8003194 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <osKernelStart+0x48>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d109      	bne.n	800318e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800317a:	f7ff ffc1 	bl	8003100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <osKernelStart+0x48>)
 8003180:	2202      	movs	r2, #2
 8003182:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003184:	f001 fe0c 	bl	8004da0 <vTaskStartScheduler>
      stat = osOK;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e002      	b.n	8003194 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003194:	687b      	ldr	r3, [r7, #4]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20001c44 	.word	0x20001c44

080031a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	@ 0x38
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b4:	f3ef 8305 	mrs	r3, IPSR
 80031b8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d17e      	bne.n	80032be <osThreadNew+0x11a>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d07b      	beq.n	80032be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80031ca:	2318      	movs	r3, #24
 80031cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d045      	beq.n	800326a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <osThreadNew+0x48>
        name = attr->name;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <osThreadNew+0x6e>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b38      	cmp	r3, #56	@ 0x38
 8003204:	d805      	bhi.n	8003212 <osThreadNew+0x6e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <osThreadNew+0x72>
        return (NULL);
 8003212:	2300      	movs	r3, #0
 8003214:	e054      	b.n	80032c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <osThreadNew+0xa8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2ba7      	cmp	r3, #167	@ 0xa7
 8003234:	d90a      	bls.n	800324c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <osThreadNew+0xa8>
        mem = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e010      	b.n	800326e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10c      	bne.n	800326e <osThreadNew+0xca>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d108      	bne.n	800326e <osThreadNew+0xca>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <osThreadNew+0xca>
          mem = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e001      	b.n	800326e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d110      	bne.n	8003296 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800327c:	9202      	str	r2, [sp, #8]
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a3a      	ldr	r2, [r7, #32]
 8003288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f001 fb94 	bl	80049b8 <xTaskCreateStatic>
 8003290:	4603      	mov	r3, r0
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	e013      	b.n	80032be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f107 0310 	add.w	r3, r7, #16
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f001 fbe2 	bl	8004a78 <xTaskCreate>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <osThreadNew+0x11a>
            hTask = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032be:	693b      	ldr	r3, [r7, #16]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3728      	adds	r7, #40	@ 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d0:	f3ef 8305 	mrs	r3, IPSR
 80032d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80032d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <osDelay+0x1c>
    stat = osErrorISR;
 80032dc:	f06f 0305 	mvn.w	r3, #5
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e007      	b.n	80032f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f001 fd20 	bl	8004d34 <vTaskDelay>
    }
  }

  return (stat);
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80032fe:	b580      	push	{r7, lr}
 8003300:	b08a      	sub	sp, #40	@ 0x28
 8003302:	af02      	add	r7, sp, #8
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800330e:	f3ef 8305 	mrs	r3, IPSR
 8003312:	613b      	str	r3, [r7, #16]
  return(result);
 8003314:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003316:	2b00      	cmp	r3, #0
 8003318:	d175      	bne.n	8003406 <osSemaphoreNew+0x108>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d072      	beq.n	8003406 <osSemaphoreNew+0x108>
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d86e      	bhi.n	8003406 <osSemaphoreNew+0x108>
    mem = -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <osSemaphoreNew+0x4c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b4f      	cmp	r3, #79	@ 0x4f
 8003342:	d902      	bls.n	800334a <osSemaphoreNew+0x4c>
        mem = 1;
 8003344:	2301      	movs	r3, #1
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e00c      	b.n	8003364 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <osSemaphoreNew+0x66>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <osSemaphoreNew+0x66>
          mem = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e001      	b.n	8003364 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d04c      	beq.n	8003406 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d128      	bne.n	80033c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10a      	bne.n	800338e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2203      	movs	r2, #3
 800337e:	9200      	str	r2, [sp, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	2001      	movs	r0, #1
 8003386:	f000 fb57 	bl	8003a38 <xQueueGenericCreateStatic>
 800338a:	61f8      	str	r0, [r7, #28]
 800338c:	e005      	b.n	800339a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800338e:	2203      	movs	r2, #3
 8003390:	2100      	movs	r1, #0
 8003392:	2001      	movs	r0, #1
 8003394:	f000 fbcd 	bl	8003b32 <xQueueGenericCreate>
 8003398:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d022      	beq.n	80033e6 <osSemaphoreNew+0xe8>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01f      	beq.n	80033e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80033a6:	2300      	movs	r3, #0
 80033a8:	2200      	movs	r2, #0
 80033aa:	2100      	movs	r1, #0
 80033ac:	69f8      	ldr	r0, [r7, #28]
 80033ae:	f000 fc8d 	bl	8003ccc <xQueueGenericSend>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d016      	beq.n	80033e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80033b8:	69f8      	ldr	r0, [r7, #28]
 80033ba:	f001 f92b 	bl	8004614 <vQueueDelete>
            hSemaphore = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e010      	b.n	80033e6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d108      	bne.n	80033dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fc0b 	bl	8003bee <xQueueCreateCountingSemaphoreStatic>
 80033d8:	61f8      	str	r0, [r7, #28]
 80033da:	e004      	b.n	80033e6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fc3e 	bl	8003c60 <xQueueCreateCountingSemaphore>
 80033e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <osSemaphoreNew+0xfc>
          name = attr->name;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e001      	b.n	80033fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	69f8      	ldr	r0, [r7, #28]
 8003402:	f001 fa53 	bl	80048ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003406:	69fb      	ldr	r3, [r7, #28]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003428:	f06f 0303 	mvn.w	r3, #3
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e039      	b.n	80034a4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003430:	f3ef 8305 	mrs	r3, IPSR
 8003434:	60fb      	str	r3, [r7, #12]
  return(result);
 8003436:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003438:	2b00      	cmp	r3, #0
 800343a:	d022      	beq.n	8003482 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003442:	f06f 0303 	mvn.w	r3, #3
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e02c      	b.n	80034a4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	461a      	mov	r2, r3
 8003454:	2100      	movs	r1, #0
 8003456:	6938      	ldr	r0, [r7, #16]
 8003458:	f001 f85a 	bl	8004510 <xQueueReceiveFromISR>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d003      	beq.n	800346a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003462:	f06f 0302 	mvn.w	r3, #2
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e01c      	b.n	80034a4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d019      	beq.n	80034a4 <osSemaphoreAcquire+0x94>
 8003470:	4b0f      	ldr	r3, [pc, #60]	@ (80034b0 <osSemaphoreAcquire+0xa0>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	e010      	b.n	80034a4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003482:	6839      	ldr	r1, [r7, #0]
 8003484:	6938      	ldr	r0, [r7, #16]
 8003486:	f000 ff33 	bl	80042f0 <xQueueSemaphoreTake>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d009      	beq.n	80034a4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003496:	f06f 0301 	mvn.w	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e002      	b.n	80034a4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800349e:	f06f 0302 	mvn.w	r3, #2
 80034a2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80034a4:	697b      	ldr	r3, [r7, #20]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80034ca:	f06f 0303 	mvn.w	r3, #3
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e02c      	b.n	800352c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d2:	f3ef 8305 	mrs	r3, IPSR
 80034d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01a      	beq.n	8003514 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	4619      	mov	r1, r3
 80034e8:	6938      	ldr	r0, [r7, #16]
 80034ea:	f000 fd8f 	bl	800400c <xQueueGiveFromISR>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d003      	beq.n	80034fc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80034f4:	f06f 0302 	mvn.w	r3, #2
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e017      	b.n	800352c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d014      	beq.n	800352c <osSemaphoreRelease+0x78>
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <osSemaphoreRelease+0x84>)
 8003504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	e00b      	b.n	800352c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003514:	2300      	movs	r3, #0
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	6938      	ldr	r0, [r7, #16]
 800351c:	f000 fbd6 	bl	8003ccc <xQueueGenericSend>
 8003520:	4603      	mov	r3, r0
 8003522:	2b01      	cmp	r3, #1
 8003524:	d002      	beq.n	800352c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003526:	f06f 0302 	mvn.w	r3, #2
 800352a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800352c:	697b      	ldr	r3, [r7, #20]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	@ 0x28
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800354c:	f3ef 8305 	mrs	r3, IPSR
 8003550:	613b      	str	r3, [r7, #16]
  return(result);
 8003552:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003554:	2b00      	cmp	r3, #0
 8003556:	d15f      	bne.n	8003618 <osMessageQueueNew+0xdc>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d05c      	beq.n	8003618 <osMessageQueueNew+0xdc>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d059      	beq.n	8003618 <osMessageQueueNew+0xdc>
    mem = -1;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d029      	beq.n	80035c4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d012      	beq.n	800359e <osMessageQueueNew+0x62>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b4f      	cmp	r3, #79	@ 0x4f
 800357e:	d90e      	bls.n	800359e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	429a      	cmp	r2, r3
 8003596:	d302      	bcc.n	800359e <osMessageQueueNew+0x62>
        mem = 1;
 8003598:	2301      	movs	r3, #1
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e014      	b.n	80035c8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d110      	bne.n	80035c8 <osMessageQueueNew+0x8c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <osMessageQueueNew+0x8c>
          mem = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e001      	b.n	80035c8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10b      	bne.n	80035e6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2100      	movs	r1, #0
 80035d8:	9100      	str	r1, [sp, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fa2b 	bl	8003a38 <xQueueGenericCreateStatic>
 80035e2:	61f8      	str	r0, [r7, #28]
 80035e4:	e008      	b.n	80035f8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80035ec:	2200      	movs	r2, #0
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fa9e 	bl	8003b32 <xQueueGenericCreate>
 80035f6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <osMessageQueueNew+0xd0>
        name = attr->name;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e001      	b.n	8003610 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003610:	6979      	ldr	r1, [r7, #20]
 8003612:	69f8      	ldr	r0, [r7, #28]
 8003614:	f001 f94a 	bl	80048ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003618:	69fb      	ldr	r3, [r7, #28]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800363c:	f3ef 8305 	mrs	r3, IPSR
 8003640:	617b      	str	r3, [r7, #20]
  return(result);
 8003642:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003644:	2b00      	cmp	r3, #0
 8003646:	d028      	beq.n	800369a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <osMessageQueuePut+0x36>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <osMessageQueuePut+0x36>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800365a:	f06f 0303 	mvn.w	r3, #3
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e038      	b.n	80036d4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003666:	f107 0210 	add.w	r2, r7, #16
 800366a:	2300      	movs	r3, #0
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	69b8      	ldr	r0, [r7, #24]
 8003670:	f000 fc2e 	bl	8003ed0 <xQueueGenericSendFromISR>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d003      	beq.n	8003682 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800367a:	f06f 0302 	mvn.w	r3, #2
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e028      	b.n	80036d4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d025      	beq.n	80036d4 <osMessageQueuePut+0xb0>
 8003688:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <osMessageQueuePut+0xbc>)
 800368a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	e01c      	b.n	80036d4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <osMessageQueuePut+0x82>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80036a6:	f06f 0303 	mvn.w	r3, #3
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e012      	b.n	80036d4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	69b8      	ldr	r0, [r7, #24]
 80036b6:	f000 fb09 	bl	8003ccc <xQueueGenericSend>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d009      	beq.n	80036d4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80036c6:	f06f 0301 	mvn.w	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e002      	b.n	80036d4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80036ce:	f06f 0302 	mvn.w	r3, #2
 80036d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80036d4:	69fb      	ldr	r3, [r7, #28]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	e000ed04 	.word	0xe000ed04

080036e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fa:	f3ef 8305 	mrs	r3, IPSR
 80036fe:	617b      	str	r3, [r7, #20]
  return(result);
 8003700:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <osMessageQueueGet+0x34>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <osMessageQueueGet+0x34>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003718:	f06f 0303 	mvn.w	r3, #3
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e037      	b.n	8003790 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003724:	f107 0310 	add.w	r3, r7, #16
 8003728:	461a      	mov	r2, r3
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	69b8      	ldr	r0, [r7, #24]
 800372e:	f000 feef 	bl	8004510 <xQueueReceiveFromISR>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d003      	beq.n	8003740 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003738:	f06f 0302 	mvn.w	r3, #2
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	e027      	b.n	8003790 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d024      	beq.n	8003790 <osMessageQueueGet+0xac>
 8003746:	4b15      	ldr	r3, [pc, #84]	@ (800379c <osMessageQueueGet+0xb8>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	e01b      	b.n	8003790 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <osMessageQueueGet+0x80>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003764:	f06f 0303 	mvn.w	r3, #3
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e011      	b.n	8003790 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	69b8      	ldr	r0, [r7, #24]
 8003772:	f000 fcdb 	bl	800412c <xQueueReceive>
 8003776:	4603      	mov	r3, r0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d009      	beq.n	8003790 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003782:	f06f 0301 	mvn.w	r3, #1
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e002      	b.n	8003790 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800378a:	f06f 0302 	mvn.w	r3, #2
 800378e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003790:	69fb      	ldr	r3, [r7, #28]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a06      	ldr	r2, [pc, #24]	@ (80037c8 <vApplicationGetIdleTaskMemory+0x28>)
 80037b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <vApplicationGetIdleTaskMemory+0x2c>)
 80037b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2280      	movs	r2, #128	@ 0x80
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20001c48 	.word	0x20001c48
 80037cc:	20001cf0 	.word	0x20001cf0

080037d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <vApplicationGetTimerTaskMemory+0x2c>)
 80037e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4a06      	ldr	r2, [pc, #24]	@ (8003800 <vApplicationGetTimerTaskMemory+0x30>)
 80037e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20001ef0 	.word	0x20001ef0
 8003800:	20001f98 	.word	0x20001f98

08003804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f103 0208 	add.w	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f103 0208 	add.w	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0208 	add.w	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d103      	bne.n	80038c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e00c      	b.n	80038da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3308      	adds	r3, #8
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e002      	b.n	80038ce <vListInsert+0x2e>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d2f6      	bcs.n	80038c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6892      	ldr	r2, [r2, #8]
 8003926:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6852      	ldr	r2, [r2, #4]
 8003930:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	d103      	bne.n	8003944 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	1e5a      	subs	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
	...

08003964 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003990:	f002 fc94 	bl	80062bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	68f9      	ldr	r1, [r7, #12]
 800399e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	441a      	add	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	3b01      	subs	r3, #1
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	22ff      	movs	r2, #255	@ 0xff
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	22ff      	movs	r2, #255	@ 0xff
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d114      	bne.n	8003a10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01a      	beq.n	8003a24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3310      	adds	r3, #16
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 fc6e 	bl	80052d4 <xTaskRemoveFromEventList>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d012      	beq.n	8003a24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <xQueueGenericReset+0xd0>)
 8003a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	e009      	b.n	8003a24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3310      	adds	r3, #16
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fef5 	bl	8003804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3324      	adds	r3, #36	@ 0x24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fef0 	bl	8003804 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a24:	f002 fc7a 	bl	800631c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a28:	2301      	movs	r3, #1
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08e      	sub	sp, #56	@ 0x38
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	e7fd      	b.n	8003a7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <xQueueGenericCreateStatic+0x56>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <xQueueGenericCreateStatic+0x5a>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericCreateStatic+0x5c>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	623b      	str	r3, [r7, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <xQueueGenericCreateStatic+0x84>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <xQueueGenericCreateStatic+0x88>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <xQueueGenericCreateStatic+0x8a>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	61fb      	str	r3, [r7, #28]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ade:	2350      	movs	r3, #80	@ 0x50
 8003ae0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b50      	cmp	r3, #80	@ 0x50
 8003ae6:	d00b      	beq.n	8003b00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	61bb      	str	r3, [r7, #24]
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f840 	bl	8003ba8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3730      	adds	r7, #48	@ 0x30
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b08a      	sub	sp, #40	@ 0x28
 8003b36:	af02      	add	r7, sp, #8
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	613b      	str	r3, [r7, #16]
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	e7fd      	b.n	8003b5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3350      	adds	r3, #80	@ 0x50
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fca7 	bl	80064c0 <pvPortMalloc>
 8003b72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d011      	beq.n	8003b9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3350      	adds	r3, #80	@ 0x50
 8003b82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b8c:	79fa      	ldrb	r2, [r7, #7]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f805 	bl	8003ba8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e002      	b.n	8003bca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	69b8      	ldr	r0, [r7, #24]
 8003bda:	f7ff fec3 	bl	8003964 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08a      	sub	sp, #40	@ 0x28
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61bb      	str	r3, [r7, #24]
}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d90b      	bls.n	8003c38 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	617b      	str	r3, [r7, #20]
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c38:	2302      	movs	r3, #2
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fef8 	bl	8003a38 <xQueueGenericCreateStatic>
 8003c48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c56:	69fb      	ldr	r3, [r7, #28]
	}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	613b      	str	r3, [r7, #16]
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d90b      	bls.n	8003ca8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003ca8:	2202      	movs	r2, #2
 8003caa:	2100      	movs	r1, #0
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff40 	bl	8003b32 <xQueueGenericCreate>
 8003cb2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003cc0:	697b      	ldr	r3, [r7, #20]
	}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	@ 0x38
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <xQueueGenericSend+0x34>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <xQueueGenericSend+0x42>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <xQueueGenericSend+0x46>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueGenericSend+0x48>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueGenericSend+0x64>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSend+0x72>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <xQueueGenericSend+0x76>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <xQueueGenericSend+0x78>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <xQueueGenericSend+0x94>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	623b      	str	r3, [r7, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d60:	f001 fc7e 	bl	8005660 <xTaskGetSchedulerState>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <xQueueGenericSend+0xa4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <xQueueGenericSend+0xa8>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <xQueueGenericSend+0xaa>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <xQueueGenericSend+0xc6>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	61fb      	str	r3, [r7, #28]
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	e7fd      	b.n	8003d8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d92:	f002 fa93 	bl	80062bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <xQueueGenericSend+0xdc>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d129      	bne.n	8003dfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dae:	f000 fc6c 	bl	800468a <prvCopyDataToQueue>
 8003db2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	3324      	adds	r3, #36	@ 0x24
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fa87 	bl	80052d4 <xTaskRemoveFromEventList>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <xQueueGenericSend+0x200>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	e00a      	b.n	8003df4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003de4:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <xQueueGenericSend+0x200>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003df4:	f002 fa92 	bl	800631c <vPortExitCritical>
				return pdPASS;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e063      	b.n	8003ec4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e02:	f002 fa8b 	bl	800631c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e05c      	b.n	8003ec4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fac1 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e1e:	f002 fa7d 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e22:	f001 f82d 	bl	8004e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e26:	f002 fa49 	bl	80062bc <vPortEnterCritical>
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d103      	bne.n	8003e40 <xQueueGenericSend+0x174>
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d103      	bne.n	8003e56 <xQueueGenericSend+0x18a>
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e56:	f002 fa61 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e5a:	1d3a      	adds	r2, r7, #4
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fab0 	bl	80053c8 <xTaskCheckForTimeOut>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d124      	bne.n	8003eb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e70:	f000 fd03 	bl	800487a <prvIsQueueFull>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f9d4 	bl	8005230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e8a:	f000 fc8e 	bl	80047aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e8e:	f001 f805 	bl	8004e9c <xTaskResumeAll>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f af7c 	bne.w	8003d92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <xQueueGenericSend+0x200>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	e772      	b.n	8003d92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eae:	f000 fc7c 	bl	80047aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eb2:	f000 fff3 	bl	8004e9c <xTaskResumeAll>
 8003eb6:	e76c      	b.n	8003d92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eba:	f000 fc76 	bl	80047aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ebe:	f000 ffed 	bl	8004e9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3738      	adds	r7, #56	@ 0x38
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b090      	sub	sp, #64	@ 0x40
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSendFromISR+0x3e>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <xQueueGenericSendFromISR+0x42>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <xQueueGenericSendFromISR+0x44>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d103      	bne.n	8003f3e <xQueueGenericSendFromISR+0x6e>
 8003f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <xQueueGenericSendFromISR+0x72>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericSendFromISR+0x74>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f60:	f002 fa6e 	bl	8006440 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f64:	f3ef 8211 	mrs	r2, BASEPRI
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	61fa      	str	r2, [r7, #28]
 8003f7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <xQueueGenericSendFromISR+0xc2>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d12f      	bne.n	8003ff2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003fa8:	f000 fb6f 	bl	800468a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d112      	bne.n	8003fdc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	3324      	adds	r3, #36	@ 0x24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 f986 	bl	80052d4 <xTaskRemoveFromEventList>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e007      	b.n	8003fec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	b25a      	sxtb	r2, r3
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003fec:	2301      	movs	r3, #1
 8003fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003ff0:	e001      	b.n	8003ff6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004000:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004004:	4618      	mov	r0, r3
 8004006:	3740      	adds	r7, #64	@ 0x40
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	@ 0x38
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61fb      	str	r3, [r7, #28]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueGiveFromISR+0x5c>
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGiveFromISR+0x60>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGiveFromISR+0x62>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61bb      	str	r3, [r7, #24]
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800408a:	f002 f9d9 	bl	8006440 <vPortValidateInterruptPriority>
	__asm volatile
 800408e:	f3ef 8211 	mrs	r2, BASEPRI
 8004092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	617a      	str	r2, [r7, #20]
 80040a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80040a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d22b      	bcs.n	8004112 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d112      	bne.n	80040fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	3324      	adds	r3, #36	@ 0x24
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 f8f6 	bl	80052d4 <xTaskRemoveFromEventList>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00e      	beq.n	800410c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e007      	b.n	800410c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004100:	3301      	adds	r3, #1
 8004102:	b2db      	uxtb	r3, r3
 8004104:	b25a      	sxtb	r2, r3
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800410c:	2301      	movs	r3, #1
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004110:	e001      	b.n	8004116 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
 8004116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004118:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f383 8811 	msr	BASEPRI, r3
}
 8004120:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004124:	4618      	mov	r0, r3
 8004126:	3738      	adds	r7, #56	@ 0x38
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	@ 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <xQueueReceive+0x32>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	623b      	str	r3, [r7, #32]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <xQueueReceive+0x40>
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <xQueueReceive+0x44>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <xQueueReceive+0x46>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <xQueueReceive+0x62>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	61fb      	str	r3, [r7, #28]
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800418e:	f001 fa67 	bl	8005660 <xTaskGetSchedulerState>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <xQueueReceive+0x72>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <xQueueReceive+0x76>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <xQueueReceive+0x78>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <xQueueReceive+0x94>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61bb      	str	r3, [r7, #24]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041c0:	f002 f87c 	bl	80062bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01f      	beq.n	8004210 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041d4:	f000 fac3 	bl	800475e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	1e5a      	subs	r2, r3, #1
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00f      	beq.n	8004208 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	3310      	adds	r3, #16
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 f871 	bl	80052d4 <xTaskRemoveFromEventList>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041f8:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <xQueueReceive+0x1c0>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004208:	f002 f888 	bl	800631c <vPortExitCritical>
				return pdPASS;
 800420c:	2301      	movs	r3, #1
 800420e:	e069      	b.n	80042e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004216:	f002 f881 	bl	800631c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800421a:	2300      	movs	r3, #0
 800421c:	e062      	b.n	80042e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	4618      	mov	r0, r3
 800422a:	f001 f8b7 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800422e:	2301      	movs	r3, #1
 8004230:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004232:	f002 f873 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004236:	f000 fe23 	bl	8004e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800423a:	f002 f83f 	bl	80062bc <vPortEnterCritical>
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004244:	b25b      	sxtb	r3, r3
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d103      	bne.n	8004254 <xQueueReceive+0x128>
 800424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800425a:	b25b      	sxtb	r3, r3
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d103      	bne.n	800426a <xQueueReceive+0x13e>
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800426a:	f002 f857 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800426e:	1d3a      	adds	r2, r7, #4
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f8a6 	bl	80053c8 <xTaskCheckForTimeOut>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d123      	bne.n	80042ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004284:	f000 fae3 	bl	800484e <prvIsQueueEmpty>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	3324      	adds	r3, #36	@ 0x24
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 ffca 	bl	8005230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800429c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800429e:	f000 fa84 	bl	80047aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042a2:	f000 fdfb 	bl	8004e9c <xTaskResumeAll>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d189      	bne.n	80041c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80042ac:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <xQueueReceive+0x1c0>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	e780      	b.n	80041c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c0:	f000 fa73 	bl	80047aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042c4:	f000 fdea 	bl	8004e9c <xTaskResumeAll>
 80042c8:	e77a      	b.n	80041c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042cc:	f000 fa6d 	bl	80047aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042d0:	f000 fde4 	bl	8004e9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042d6:	f000 faba 	bl	800484e <prvIsQueueEmpty>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f43f af6f 	beq.w	80041c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	@ 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08e      	sub	sp, #56	@ 0x38
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004302:	2300      	movs	r3, #0
 8004304:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	623b      	str	r3, [r7, #32]
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	61fb      	str	r3, [r7, #28]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004344:	f001 f98c 	bl	8005660 <xTaskGetSchedulerState>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <xQueueSemaphoreTake+0x64>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <xQueueSemaphoreTake+0x68>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <xQueueSemaphoreTake+0x6a>
 8004358:	2300      	movs	r3, #0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	61bb      	str	r3, [r7, #24]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004376:	f001 ffa1 	bl	80062bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d024      	beq.n	80043d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d104      	bne.n	80043a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004396:	f001 fadd 	bl	8005954 <pvTaskIncrementMutexHeldCount>
 800439a:	4602      	mov	r2, r0
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00f      	beq.n	80043c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043aa:	3310      	adds	r3, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 ff91 	bl	80052d4 <xTaskRemoveFromEventList>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043b8:	4b54      	ldr	r3, [pc, #336]	@ (800450c <xQueueSemaphoreTake+0x21c>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043c8:	f001 ffa8 	bl	800631c <vPortExitCritical>
				return pdPASS;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e098      	b.n	8004502 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d112      	bne.n	80043fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00b      	beq.n	80043f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	617b      	str	r3, [r7, #20]
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043f4:	f001 ff92 	bl	800631c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e082      	b.n	8004502 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004402:	f107 030c 	add.w	r3, r7, #12
 8004406:	4618      	mov	r0, r3
 8004408:	f000 ffc8 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004410:	f001 ff84 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004414:	f000 fd34 	bl	8004e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004418:	f001 ff50 	bl	80062bc <vPortEnterCritical>
 800441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004422:	b25b      	sxtb	r3, r3
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d103      	bne.n	8004432 <xQueueSemaphoreTake+0x142>
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004434:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004438:	b25b      	sxtb	r3, r3
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d103      	bne.n	8004448 <xQueueSemaphoreTake+0x158>
 8004440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004448:	f001 ff68 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444c:	463a      	mov	r2, r7
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f000 ffb7 	bl	80053c8 <xTaskCheckForTimeOut>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d132      	bne.n	80044c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004462:	f000 f9f4 	bl	800484e <prvIsQueueEmpty>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d026      	beq.n	80044ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004474:	f001 ff22 	bl	80062bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f001 f90d 	bl	800569c <xTaskPriorityInherit>
 8004482:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004484:	f001 ff4a 	bl	800631c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	3324      	adds	r3, #36	@ 0x24
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fecd 	bl	8005230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004498:	f000 f987 	bl	80047aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800449c:	f000 fcfe 	bl	8004e9c <xTaskResumeAll>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f47f af67 	bne.w	8004376 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80044a8:	4b18      	ldr	r3, [pc, #96]	@ (800450c <xQueueSemaphoreTake+0x21c>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	e75d      	b.n	8004376 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044bc:	f000 f975 	bl	80047aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044c0:	f000 fcec 	bl	8004e9c <xTaskResumeAll>
 80044c4:	e757      	b.n	8004376 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044c8:	f000 f96f 	bl	80047aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044cc:	f000 fce6 	bl	8004e9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044d2:	f000 f9bc 	bl	800484e <prvIsQueueEmpty>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f43f af4c 	beq.w	8004376 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80044e4:	f001 feea 	bl	80062bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044ea:	f000 f8b7 	bl	800465c <prvGetDisinheritPriorityAfterTimeout>
 80044ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 f9a8 	bl	800584c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044fc:	f001 ff0e 	bl	800631c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004502:	4618      	mov	r0, r3
 8004504:	3738      	adds	r7, #56	@ 0x38
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000ed04 	.word	0xe000ed04

08004510 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08e      	sub	sp, #56	@ 0x38
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	623b      	str	r3, [r7, #32]
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <xQueueReceiveFromISR+0x3c>
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <xQueueReceiveFromISR+0x40>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <xQueueReceiveFromISR+0x42>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	61fb      	str	r3, [r7, #28]
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	e7fd      	b.n	800456a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800456e:	f001 ff67 	bl	8006440 <vPortValidateInterruptPriority>
	__asm volatile
 8004572:	f3ef 8211 	mrs	r2, BASEPRI
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61ba      	str	r2, [r7, #24]
 8004588:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800458a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02f      	beq.n	80045fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045a8:	f000 f8d9 	bl	800475e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	1e5a      	subs	r2, r3, #1
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80045b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d112      	bne.n	80045e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	3310      	adds	r3, #16
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fe82 	bl	80052d4 <xTaskRemoveFromEventList>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e007      	b.n	80045f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045e8:	3301      	adds	r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	b25a      	sxtb	r2, r3
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80045f4:	2301      	movs	r3, #1
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f8:	e001      	b.n	80045fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f383 8811 	msr	BASEPRI, r3
}
 8004608:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800460c:	4618      	mov	r0, r3
 800460e:	3738      	adds	r7, #56	@ 0x38
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <vQueueDelete+0x2a>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	e7fd      	b.n	800463a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f95c 	bl	80048fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f002 f804 	bl	800665c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d006      	beq.n	800467a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e001      	b.n	800467e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800467e:	68fb      	ldr	r3, [r7, #12]
	}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d14d      	bne.n	800474c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f859 	bl	800576c <xTaskPriorityDisinherit>
 80046ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	e043      	b.n	800474c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d119      	bne.n	80046fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6858      	ldr	r0, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	461a      	mov	r2, r3
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	f002 f973 	bl	80069c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d32b      	bcc.n	800474c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	e026      	b.n	800474c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68d8      	ldr	r0, [r3, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	461a      	mov	r2, r3
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	f002 f959 	bl	80069c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	425b      	negs	r3, r3
 8004718:	441a      	add	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d207      	bcs.n	800473a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	425b      	negs	r3, r3
 8004734:	441a      	add	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d105      	bne.n	800474c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3b01      	subs	r3, #1
 800474a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004754:	697b      	ldr	r3, [r7, #20]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d018      	beq.n	80047a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d303      	bcc.n	8004792 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68d9      	ldr	r1, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	461a      	mov	r2, r3
 800479c:	6838      	ldr	r0, [r7, #0]
 800479e:	f002 f90f 	bl	80069c0 <memcpy>
	}
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047b2:	f001 fd83 	bl	80062bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047be:	e011      	b.n	80047e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d012      	beq.n	80047ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3324      	adds	r3, #36	@ 0x24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fd81 	bl	80052d4 <xTaskRemoveFromEventList>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047d8:	f000 fe5a 	bl	8005490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	3b01      	subs	r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dce9      	bgt.n	80047c0 <prvUnlockQueue+0x16>
 80047ec:	e000      	b.n	80047f0 <prvUnlockQueue+0x46>
					break;
 80047ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	22ff      	movs	r2, #255	@ 0xff
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047f8:	f001 fd90 	bl	800631c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047fc:	f001 fd5e 	bl	80062bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004806:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004808:	e011      	b.n	800482e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3310      	adds	r3, #16
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fd5c 	bl	80052d4 <xTaskRemoveFromEventList>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004822:	f000 fe35 	bl	8005490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004826:	7bbb      	ldrb	r3, [r7, #14]
 8004828:	3b01      	subs	r3, #1
 800482a:	b2db      	uxtb	r3, r3
 800482c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800482e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dce9      	bgt.n	800480a <prvUnlockQueue+0x60>
 8004836:	e000      	b.n	800483a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004838:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	22ff      	movs	r2, #255	@ 0xff
 800483e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004842:	f001 fd6b 	bl	800631c <vPortExitCritical>
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004856:	f001 fd31 	bl	80062bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004862:	2301      	movs	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e001      	b.n	800486c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800486c:	f001 fd56 	bl	800631c <vPortExitCritical>

	return xReturn;
 8004870:	68fb      	ldr	r3, [r7, #12]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004882:	f001 fd1b 	bl	80062bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	429a      	cmp	r2, r3
 8004890:	d102      	bne.n	8004898 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004892:	2301      	movs	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e001      	b.n	800489c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800489c:	f001 fd3e 	bl	800631c <vPortExitCritical>

	return xReturn;
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e014      	b.n	80048e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048bc:	4a0e      	ldr	r2, [pc, #56]	@ (80048f8 <vQueueAddToRegistry+0x4c>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048c8:	490b      	ldr	r1, [pc, #44]	@ (80048f8 <vQueueAddToRegistry+0x4c>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <vQueueAddToRegistry+0x4c>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048de:	e006      	b.n	80048ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b07      	cmp	r3, #7
 80048ea:	d9e7      	bls.n	80048bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	20002398 	.word	0x20002398

080048fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e016      	b.n	8004938 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800490a:	4a10      	ldr	r2, [pc, #64]	@ (800494c <vQueueUnregisterQueue+0x50>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d10b      	bne.n	8004932 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800491a:	4a0c      	ldr	r2, [pc, #48]	@ (800494c <vQueueUnregisterQueue+0x50>)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2100      	movs	r1, #0
 8004920:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004924:	4a09      	ldr	r2, [pc, #36]	@ (800494c <vQueueUnregisterQueue+0x50>)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	2200      	movs	r2, #0
 800492e:	605a      	str	r2, [r3, #4]
				break;
 8004930:	e006      	b.n	8004940 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b07      	cmp	r3, #7
 800493c:	d9e5      	bls.n	800490a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20002398 	.word	0x20002398

08004950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004960:	f001 fcac 	bl	80062bc <vPortEnterCritical>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d103      	bne.n	800497a <vQueueWaitForMessageRestricted+0x2a>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004980:	b25b      	sxtb	r3, r3
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d103      	bne.n	8004990 <vQueueWaitForMessageRestricted+0x40>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004990:	f001 fcc4 	bl	800631c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3324      	adds	r3, #36	@ 0x24
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fc69 	bl	800527c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f7ff fefd 	bl	80047aa <prvUnlockQueue>
	}
 80049b0:	bf00      	nop
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	@ 0x38
 80049bc:	af04      	add	r7, sp, #16
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	623b      	str	r3, [r7, #32]
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <xTaskCreateStatic+0x4a>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a02:	23a8      	movs	r3, #168	@ 0xa8
 8004a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2ba8      	cmp	r3, #168	@ 0xa8
 8004a0a:	d00b      	beq.n	8004a24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	61bb      	str	r3, [r7, #24]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01e      	beq.n	8004a6a <xTaskCreateStatic+0xb2>
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01b      	beq.n	8004a6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a44:	2300      	movs	r3, #0
 8004a46:	9303      	str	r3, [sp, #12]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	9302      	str	r3, [sp, #8]
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f851 	bl	8004b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a64:	f000 f8f6 	bl	8004c54 <prvAddNewTaskToReadyList>
 8004a68:	e001      	b.n	8004a6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a6e:	697b      	ldr	r3, [r7, #20]
	}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3728      	adds	r7, #40	@ 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	@ 0x30
 8004a7c:	af04      	add	r7, sp, #16
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fd17 	bl	80064c0 <pvPortMalloc>
 8004a92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a9a:	20a8      	movs	r0, #168	@ 0xa8
 8004a9c:	f001 fd10 	bl	80064c0 <pvPortMalloc>
 8004aa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aae:	e005      	b.n	8004abc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f001 fdd3 	bl	800665c <vPortFree>
 8004ab6:	e001      	b.n	8004abc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	2300      	movs	r3, #0
 8004ace:	9303      	str	r3, [sp, #12]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	9302      	str	r3, [sp, #8]
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f80f 	bl	8004b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae6:	69f8      	ldr	r0, [r7, #28]
 8004ae8:	f000 f8b4 	bl	8004c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e002      	b.n	8004af8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004af8:	69bb      	ldr	r3, [r7, #24]
	}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	21a5      	movs	r1, #165	@ 0xa5
 8004b1e:	f001 fecb 	bl	80068b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01f      	beq.n	8004ba4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e012      	b.n	8004b90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	7819      	ldrb	r1, [r3, #0]
 8004b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	3334      	adds	r3, #52	@ 0x34
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d9e9      	bls.n	8004b6a <prvInitialiseNewTask+0x66>
 8004b96:	e000      	b.n	8004b9a <prvInitialiseNewTask+0x96>
			{
				break;
 8004b98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ba2:	e003      	b.n	8004bac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	2b37      	cmp	r3, #55	@ 0x37
 8004bb0:	d901      	bls.n	8004bb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bb2:	2337      	movs	r3, #55	@ 0x37
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe fe38 	bl	8003842 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd4:	3318      	adds	r3, #24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fe33 	bl	8003842 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	3354      	adds	r3, #84	@ 0x54
 8004c06:	224c      	movs	r2, #76	@ 0x4c
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 fe54 	bl	80068b8 <memset>
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	4a0d      	ldr	r2, [pc, #52]	@ (8004c48 <prvInitialiseNewTask+0x144>)
 8004c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	4a0c      	ldr	r2, [pc, #48]	@ (8004c4c <prvInitialiseNewTask+0x148>)
 8004c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c50 <prvInitialiseNewTask+0x14c>)
 8004c20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	69b8      	ldr	r0, [r7, #24]
 8004c28:	f001 fa54 	bl	80060d4 <pxPortInitialiseStack>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3e:	bf00      	nop
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20003dc0 	.word	0x20003dc0
 8004c4c:	20003e28 	.word	0x20003e28
 8004c50:	20003e90 	.word	0x20003e90

08004c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c5c:	f001 fb2e 	bl	80062bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c60:	4b2d      	ldr	r3, [pc, #180]	@ (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a2c      	ldr	r2, [pc, #176]	@ (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c72:	4a2a      	ldr	r2, [pc, #168]	@ (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d110      	bne.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c80:	f000 fc2a 	bl	80054d8 <prvInitialiseTaskLists>
 8004c84:	e00d      	b.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c86:	4b26      	ldr	r3, [pc, #152]	@ (8004d20 <prvAddNewTaskToReadyList+0xcc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c8e:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d802      	bhi.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ca2:	4b20      	ldr	r3, [pc, #128]	@ (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cac:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <prvAddNewTaskToReadyList+0xd4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d903      	bls.n	8004cc8 <prvAddNewTaskToReadyList+0x74>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	4a18      	ldr	r2, [pc, #96]	@ (8004d28 <prvAddNewTaskToReadyList+0xd4>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4a15      	ldr	r2, [pc, #84]	@ (8004d2c <prvAddNewTaskToReadyList+0xd8>)
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f7fe fdbb 	bl	800385a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ce4:	f001 fb1a 	bl	800631c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <prvAddNewTaskToReadyList+0xcc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d207      	bcs.n	8004d0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8004d30 <prvAddNewTaskToReadyList+0xdc>)
 8004d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200028ac 	.word	0x200028ac
 8004d1c:	200023d8 	.word	0x200023d8
 8004d20:	200028b8 	.word	0x200028b8
 8004d24:	200028c8 	.word	0x200028c8
 8004d28:	200028b4 	.word	0x200028b4
 8004d2c:	200023dc 	.word	0x200023dc
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <vTaskDelay+0x64>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <vTaskDelay+0x32>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	60bb      	str	r3, [r7, #8]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d66:	f000 f88b 	bl	8004e80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fe05 	bl	800597c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d72:	f000 f893 	bl	8004e9c <xTaskResumeAll>
 8004d76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <vTaskDelay+0x68>)
 8004d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200028d4 	.word	0x200028d4
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	@ 0x28
 8004da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dae:	463a      	mov	r2, r7
 8004db0:	1d39      	adds	r1, r7, #4
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fcf2 	bl	80037a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	9202      	str	r2, [sp, #8]
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	4924      	ldr	r1, [pc, #144]	@ (8004e60 <vTaskStartScheduler+0xc0>)
 8004dd0:	4824      	ldr	r0, [pc, #144]	@ (8004e64 <vTaskStartScheduler+0xc4>)
 8004dd2:	f7ff fdf1 	bl	80049b8 <xTaskCreateStatic>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <vTaskStartScheduler+0xc8>)
 8004dda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ddc:	4b22      	ldr	r3, [pc, #136]	@ (8004e68 <vTaskStartScheduler+0xc8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e001      	b.n	8004dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d102      	bne.n	8004dfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004df4:	f000 fe16 	bl	8005a24 <xTimerCreateTimerTask>
 8004df8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d11b      	bne.n	8004e38 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	613b      	str	r3, [r7, #16]
}
 8004e12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e14:	4b15      	ldr	r3, [pc, #84]	@ (8004e6c <vTaskStartScheduler+0xcc>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3354      	adds	r3, #84	@ 0x54
 8004e1a:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <vTaskStartScheduler+0xd0>)
 8004e1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <vTaskStartScheduler+0xd4>)
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e26:	4b14      	ldr	r3, [pc, #80]	@ (8004e78 <vTaskStartScheduler+0xd8>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <vTaskStartScheduler+0xdc>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e32:	f001 f9d1 	bl	80061d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e36:	e00f      	b.n	8004e58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d10b      	bne.n	8004e58 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <vTaskStartScheduler+0xb4>
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	08006c44 	.word	0x08006c44
 8004e64:	080054a9 	.word	0x080054a9
 8004e68:	200028d0 	.word	0x200028d0
 8004e6c:	200023d8 	.word	0x200023d8
 8004e70:	20000ad8 	.word	0x20000ad8
 8004e74:	200028cc 	.word	0x200028cc
 8004e78:	200028b8 	.word	0x200028b8
 8004e7c:	200028b0 	.word	0x200028b0

08004e80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <vTaskSuspendAll+0x18>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a03      	ldr	r2, [pc, #12]	@ (8004e98 <vTaskSuspendAll+0x18>)
 8004e8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e8e:	bf00      	nop
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	200028d4 	.word	0x200028d4

08004e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eaa:	4b42      	ldr	r3, [pc, #264]	@ (8004fb4 <xTaskResumeAll+0x118>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <xTaskResumeAll+0x2e>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	603b      	str	r3, [r7, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eca:	f001 f9f7 	bl	80062bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ece:	4b39      	ldr	r3, [pc, #228]	@ (8004fb4 <xTaskResumeAll+0x118>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	4a37      	ldr	r2, [pc, #220]	@ (8004fb4 <xTaskResumeAll+0x118>)
 8004ed6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed8:	4b36      	ldr	r3, [pc, #216]	@ (8004fb4 <xTaskResumeAll+0x118>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d162      	bne.n	8004fa6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ee0:	4b35      	ldr	r3, [pc, #212]	@ (8004fb8 <xTaskResumeAll+0x11c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05e      	beq.n	8004fa6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee8:	e02f      	b.n	8004f4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eea:	4b34      	ldr	r3, [pc, #208]	@ (8004fbc <xTaskResumeAll+0x120>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3318      	adds	r3, #24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fd0a 	bl	8003910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fd05 	bl	8003910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc0 <xTaskResumeAll+0x124>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d903      	bls.n	8004f1a <xTaskResumeAll+0x7e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc0 <xTaskResumeAll+0x124>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4a27      	ldr	r2, [pc, #156]	@ (8004fc4 <xTaskResumeAll+0x128>)
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7fe fc92 	bl	800385a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3a:	4b23      	ldr	r3, [pc, #140]	@ (8004fc8 <xTaskResumeAll+0x12c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f44:	4b21      	ldr	r3, [pc, #132]	@ (8004fcc <xTaskResumeAll+0x130>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <xTaskResumeAll+0x120>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1cb      	bne.n	8004eea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f58:	f000 fb62 	bl	8005620 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <xTaskResumeAll+0x134>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f68:	f000 f844 	bl	8004ff4 <xTaskIncrementTick>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f72:	4b16      	ldr	r3, [pc, #88]	@ (8004fcc <xTaskResumeAll+0x130>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f1      	bne.n	8004f68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f84:	4b12      	ldr	r3, [pc, #72]	@ (8004fd0 <xTaskResumeAll+0x134>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f8a:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <xTaskResumeAll+0x130>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f96:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <xTaskResumeAll+0x138>)
 8004f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 f9b9 	bl	800631c <vPortExitCritical>

	return xAlreadyYielded;
 8004faa:	68bb      	ldr	r3, [r7, #8]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	200028d4 	.word	0x200028d4
 8004fb8:	200028ac 	.word	0x200028ac
 8004fbc:	2000286c 	.word	0x2000286c
 8004fc0:	200028b4 	.word	0x200028b4
 8004fc4:	200023dc 	.word	0x200023dc
 8004fc8:	200023d8 	.word	0x200023d8
 8004fcc:	200028c0 	.word	0x200028c0
 8004fd0:	200028bc 	.word	0x200028bc
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fde:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <xTaskGetTickCount+0x18>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	200028b0 	.word	0x200028b0

08004ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800513c <xTaskIncrementTick+0x148>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 8090 	bne.w	8005128 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005008:	4b4d      	ldr	r3, [pc, #308]	@ (8005140 <xTaskIncrementTick+0x14c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005010:	4a4b      	ldr	r2, [pc, #300]	@ (8005140 <xTaskIncrementTick+0x14c>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d121      	bne.n	8005060 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800501c:	4b49      	ldr	r3, [pc, #292]	@ (8005144 <xTaskIncrementTick+0x150>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <xTaskIncrementTick+0x46>
 800503e:	4b41      	ldr	r3, [pc, #260]	@ (8005144 <xTaskIncrementTick+0x150>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	4b40      	ldr	r3, [pc, #256]	@ (8005148 <xTaskIncrementTick+0x154>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3e      	ldr	r2, [pc, #248]	@ (8005144 <xTaskIncrementTick+0x150>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	4a3e      	ldr	r2, [pc, #248]	@ (8005148 <xTaskIncrementTick+0x154>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b3e      	ldr	r3, [pc, #248]	@ (800514c <xTaskIncrementTick+0x158>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a3c      	ldr	r2, [pc, #240]	@ (800514c <xTaskIncrementTick+0x158>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	f000 fae0 	bl	8005620 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005060:	4b3b      	ldr	r3, [pc, #236]	@ (8005150 <xTaskIncrementTick+0x15c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d349      	bcc.n	80050fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506a:	4b36      	ldr	r3, [pc, #216]	@ (8005144 <xTaskIncrementTick+0x150>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005074:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <xTaskIncrementTick+0x15c>)
 8005076:	f04f 32ff 	mov.w	r2, #4294967295
 800507a:	601a      	str	r2, [r3, #0]
					break;
 800507c:	e03f      	b.n	80050fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507e:	4b31      	ldr	r3, [pc, #196]	@ (8005144 <xTaskIncrementTick+0x150>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d203      	bcs.n	800509e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005096:	4a2e      	ldr	r2, [pc, #184]	@ (8005150 <xTaskIncrementTick+0x15c>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800509c:	e02f      	b.n	80050fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fc34 	bl	8003910 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3318      	adds	r3, #24
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fc2b 	bl	8003910 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050be:	4b25      	ldr	r3, [pc, #148]	@ (8005154 <xTaskIncrementTick+0x160>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d903      	bls.n	80050ce <xTaskIncrementTick+0xda>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	4a22      	ldr	r2, [pc, #136]	@ (8005154 <xTaskIncrementTick+0x160>)
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4a1f      	ldr	r2, [pc, #124]	@ (8005158 <xTaskIncrementTick+0x164>)
 80050dc:	441a      	add	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f7fe fbb8 	bl	800385a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ee:	4b1b      	ldr	r3, [pc, #108]	@ (800515c <xTaskIncrementTick+0x168>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3b8      	bcc.n	800506a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050fc:	e7b5      	b.n	800506a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050fe:	4b17      	ldr	r3, [pc, #92]	@ (800515c <xTaskIncrementTick+0x168>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005104:	4914      	ldr	r1, [pc, #80]	@ (8005158 <xTaskIncrementTick+0x164>)
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d901      	bls.n	800511a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800511a:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <xTaskIncrementTick+0x16c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e004      	b.n	8005132 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005128:	4b0e      	ldr	r3, [pc, #56]	@ (8005164 <xTaskIncrementTick+0x170>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	4a0d      	ldr	r2, [pc, #52]	@ (8005164 <xTaskIncrementTick+0x170>)
 8005130:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005132:	697b      	ldr	r3, [r7, #20]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	200028d4 	.word	0x200028d4
 8005140:	200028b0 	.word	0x200028b0
 8005144:	20002864 	.word	0x20002864
 8005148:	20002868 	.word	0x20002868
 800514c:	200028c4 	.word	0x200028c4
 8005150:	200028cc 	.word	0x200028cc
 8005154:	200028b4 	.word	0x200028b4
 8005158:	200023dc 	.word	0x200023dc
 800515c:	200023d8 	.word	0x200023d8
 8005160:	200028c0 	.word	0x200028c0
 8005164:	200028bc 	.word	0x200028bc

08005168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800516e:	4b2a      	ldr	r3, [pc, #168]	@ (8005218 <vTaskSwitchContext+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005176:	4b29      	ldr	r3, [pc, #164]	@ (800521c <vTaskSwitchContext+0xb4>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800517c:	e047      	b.n	800520e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800517e:	4b27      	ldr	r3, [pc, #156]	@ (800521c <vTaskSwitchContext+0xb4>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005184:	4b26      	ldr	r3, [pc, #152]	@ (8005220 <vTaskSwitchContext+0xb8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e011      	b.n	80051b0 <vTaskSwitchContext+0x48>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <vTaskSwitchContext+0x42>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	607b      	str	r3, [r7, #4]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <vTaskSwitchContext+0x3e>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	491c      	ldr	r1, [pc, #112]	@ (8005224 <vTaskSwitchContext+0xbc>)
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0e3      	beq.n	800518c <vTaskSwitchContext+0x24>
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <vTaskSwitchContext+0xbc>)
 80051d0:	4413      	add	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3308      	adds	r3, #8
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d104      	bne.n	80051f4 <vTaskSwitchContext+0x8c>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005228 <vTaskSwitchContext+0xc0>)
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4a08      	ldr	r2, [pc, #32]	@ (8005220 <vTaskSwitchContext+0xb8>)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <vTaskSwitchContext+0xc0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3354      	adds	r3, #84	@ 0x54
 800520a:	4a08      	ldr	r2, [pc, #32]	@ (800522c <vTaskSwitchContext+0xc4>)
 800520c:	6013      	str	r3, [r2, #0]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	200028d4 	.word	0x200028d4
 800521c:	200028c0 	.word	0x200028c0
 8005220:	200028b4 	.word	0x200028b4
 8005224:	200023dc 	.word	0x200023dc
 8005228:	200023d8 	.word	0x200023d8
 800522c:	20000ad8 	.word	0x20000ad8

08005230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005258:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <vTaskPlaceOnEventList+0x48>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3318      	adds	r3, #24
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fe fb1d 	bl	80038a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005266:	2101      	movs	r1, #1
 8005268:	6838      	ldr	r0, [r7, #0]
 800526a:	f000 fb87 	bl	800597c <prvAddCurrentTaskToDelayedList>
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200023d8 	.word	0x200023d8

0800527c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	617b      	str	r3, [r7, #20]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052a6:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3318      	adds	r3, #24
 80052ac:	4619      	mov	r1, r3
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7fe fad3 	bl	800385a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	f000 fb5a 	bl	800597c <prvAddCurrentTaskToDelayedList>
	}
 80052c8:	bf00      	nop
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200023d8 	.word	0x200023d8

080052d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60fb      	str	r3, [r7, #12]
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3318      	adds	r3, #24
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fb02 	bl	8003910 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530c:	4b1d      	ldr	r3, [pc, #116]	@ (8005384 <xTaskRemoveFromEventList+0xb0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11d      	bne.n	8005350 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	3304      	adds	r3, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe faf9 	bl	8003910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005322:	4b19      	ldr	r3, [pc, #100]	@ (8005388 <xTaskRemoveFromEventList+0xb4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d903      	bls.n	8005332 <xTaskRemoveFromEventList+0x5e>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <xTaskRemoveFromEventList+0xb4>)
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4a13      	ldr	r2, [pc, #76]	@ (800538c <xTaskRemoveFromEventList+0xb8>)
 8005340:	441a      	add	r2, r3
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3304      	adds	r3, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f7fe fa86 	bl	800385a <vListInsertEnd>
 800534e:	e005      	b.n	800535c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	3318      	adds	r3, #24
 8005354:	4619      	mov	r1, r3
 8005356:	480e      	ldr	r0, [pc, #56]	@ (8005390 <xTaskRemoveFromEventList+0xbc>)
 8005358:	f7fe fa7f 	bl	800385a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005360:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <xTaskRemoveFromEventList+0xc0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	429a      	cmp	r2, r3
 8005368:	d905      	bls.n	8005376 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800536a:	2301      	movs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800536e:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <xTaskRemoveFromEventList+0xc4>)
 8005370:	2201      	movs	r2, #1
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e001      	b.n	800537a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800537a:	697b      	ldr	r3, [r7, #20]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200028d4 	.word	0x200028d4
 8005388:	200028b4 	.word	0x200028b4
 800538c:	200023dc 	.word	0x200023dc
 8005390:	2000286c 	.word	0x2000286c
 8005394:	200023d8 	.word	0x200023d8
 8005398:	200028c0 	.word	0x200028c0

0800539c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053a4:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <vTaskInternalSetTimeOutState+0x24>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <vTaskInternalSetTimeOutState+0x28>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200028c4 	.word	0x200028c4
 80053c4:	200028b0 	.word	0x200028b0

080053c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800540e:	f000 ff55 	bl	80062bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005412:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <xTaskCheckForTimeOut+0xc0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d102      	bne.n	8005432 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e023      	b.n	800547a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b15      	ldr	r3, [pc, #84]	@ (800548c <xTaskCheckForTimeOut+0xc4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d007      	beq.n	800544e <xTaskCheckForTimeOut+0x86>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	429a      	cmp	r2, r3
 8005446:	d302      	bcc.n	800544e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e015      	b.n	800547a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	429a      	cmp	r2, r3
 8005456:	d20b      	bcs.n	8005470 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ff99 	bl	800539c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e004      	b.n	800547a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800547a:	f000 ff4f 	bl	800631c <vPortExitCritical>

	return xReturn;
 800547e:	69fb      	ldr	r3, [r7, #28]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200028b0 	.word	0x200028b0
 800548c:	200028c4 	.word	0x200028c4

08005490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005494:	4b03      	ldr	r3, [pc, #12]	@ (80054a4 <vTaskMissedYield+0x14>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
}
 800549a:	bf00      	nop
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	200028c0 	.word	0x200028c0

080054a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054b0:	f000 f852 	bl	8005558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054b4:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <prvIdleTask+0x28>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d9f9      	bls.n	80054b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <prvIdleTask+0x2c>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054cc:	e7f0      	b.n	80054b0 <prvIdleTask+0x8>
 80054ce:	bf00      	nop
 80054d0:	200023dc 	.word	0x200023dc
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	e00c      	b.n	80054fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4a12      	ldr	r2, [pc, #72]	@ (8005538 <prvInitialiseTaskLists+0x60>)
 80054f0:	4413      	add	r3, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe f986 	bl	8003804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3301      	adds	r3, #1
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b37      	cmp	r3, #55	@ 0x37
 8005502:	d9ef      	bls.n	80054e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005504:	480d      	ldr	r0, [pc, #52]	@ (800553c <prvInitialiseTaskLists+0x64>)
 8005506:	f7fe f97d 	bl	8003804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800550a:	480d      	ldr	r0, [pc, #52]	@ (8005540 <prvInitialiseTaskLists+0x68>)
 800550c:	f7fe f97a 	bl	8003804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005510:	480c      	ldr	r0, [pc, #48]	@ (8005544 <prvInitialiseTaskLists+0x6c>)
 8005512:	f7fe f977 	bl	8003804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005516:	480c      	ldr	r0, [pc, #48]	@ (8005548 <prvInitialiseTaskLists+0x70>)
 8005518:	f7fe f974 	bl	8003804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800551c:	480b      	ldr	r0, [pc, #44]	@ (800554c <prvInitialiseTaskLists+0x74>)
 800551e:	f7fe f971 	bl	8003804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005522:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <prvInitialiseTaskLists+0x78>)
 8005524:	4a05      	ldr	r2, [pc, #20]	@ (800553c <prvInitialiseTaskLists+0x64>)
 8005526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <prvInitialiseTaskLists+0x7c>)
 800552a:	4a05      	ldr	r2, [pc, #20]	@ (8005540 <prvInitialiseTaskLists+0x68>)
 800552c:	601a      	str	r2, [r3, #0]
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200023dc 	.word	0x200023dc
 800553c:	2000283c 	.word	0x2000283c
 8005540:	20002850 	.word	0x20002850
 8005544:	2000286c 	.word	0x2000286c
 8005548:	20002880 	.word	0x20002880
 800554c:	20002898 	.word	0x20002898
 8005550:	20002864 	.word	0x20002864
 8005554:	20002868 	.word	0x20002868

08005558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800555e:	e019      	b.n	8005594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005560:	f000 feac 	bl	80062bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <prvCheckTasksWaitingTermination+0x50>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe f9cd 	bl	8003910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005576:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <prvCheckTasksWaitingTermination+0x54>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3b01      	subs	r3, #1
 800557c:	4a0b      	ldr	r2, [pc, #44]	@ (80055ac <prvCheckTasksWaitingTermination+0x54>)
 800557e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <prvCheckTasksWaitingTermination+0x58>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3b01      	subs	r3, #1
 8005586:	4a0a      	ldr	r2, [pc, #40]	@ (80055b0 <prvCheckTasksWaitingTermination+0x58>)
 8005588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800558a:	f000 fec7 	bl	800631c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f810 	bl	80055b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005594:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <prvCheckTasksWaitingTermination+0x58>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e1      	bne.n	8005560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20002880 	.word	0x20002880
 80055ac:	200028ac 	.word	0x200028ac
 80055b0:	20002894 	.word	0x20002894

080055b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3354      	adds	r3, #84	@ 0x54
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 f981 	bl	80068c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d108      	bne.n	80055e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 f841 	bl	800665c <vPortFree>
				vPortFree( pxTCB );
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f83e 	bl	800665c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055e0:	e019      	b.n	8005616 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d103      	bne.n	80055f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 f835 	bl	800665c <vPortFree>
	}
 80055f2:	e010      	b.n	8005616 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d00b      	beq.n	8005616 <prvDeleteTCB+0x62>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60fb      	str	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <prvDeleteTCB+0x5e>
	}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005626:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <prvResetNextTaskUnblockTime+0x38>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005630:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <prvResetNextTaskUnblockTime+0x3c>)
 8005632:	f04f 32ff 	mov.w	r2, #4294967295
 8005636:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005638:	e008      	b.n	800564c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563a:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <prvResetNextTaskUnblockTime+0x38>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a04      	ldr	r2, [pc, #16]	@ (800565c <prvResetNextTaskUnblockTime+0x3c>)
 800564a:	6013      	str	r3, [r2, #0]
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20002864 	.word	0x20002864
 800565c:	200028cc 	.word	0x200028cc

08005660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005666:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <xTaskGetSchedulerState+0x34>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800566e:	2301      	movs	r3, #1
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	e008      	b.n	8005686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005674:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <xTaskGetSchedulerState+0x38>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800567c:	2302      	movs	r3, #2
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	e001      	b.n	8005686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005686:	687b      	ldr	r3, [r7, #4]
	}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	200028b8 	.word	0x200028b8
 8005698:	200028d4 	.word	0x200028d4

0800569c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d051      	beq.n	8005756 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <xTaskPriorityInherit+0xc4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d241      	bcs.n	8005744 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db06      	blt.n	80056d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	4b25      	ldr	r3, [pc, #148]	@ (8005760 <xTaskPriorityInherit+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6959      	ldr	r1, [r3, #20]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005764 <xTaskPriorityInherit+0xc8>)
 80056e8:	4413      	add	r3, r2
 80056ea:	4299      	cmp	r1, r3
 80056ec:	d122      	bne.n	8005734 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe f90c 	bl	8003910 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056f8:	4b19      	ldr	r3, [pc, #100]	@ (8005760 <xTaskPriorityInherit+0xc4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4b18      	ldr	r3, [pc, #96]	@ (8005768 <xTaskPriorityInherit+0xcc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d903      	bls.n	8005716 <xTaskPriorityInherit+0x7a>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	4a15      	ldr	r2, [pc, #84]	@ (8005768 <xTaskPriorityInherit+0xcc>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a10      	ldr	r2, [pc, #64]	@ (8005764 <xTaskPriorityInherit+0xc8>)
 8005724:	441a      	add	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f7fe f894 	bl	800385a <vListInsertEnd>
 8005732:	e004      	b.n	800573e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005734:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <xTaskPriorityInherit+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800573e:	2301      	movs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e008      	b.n	8005756 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005748:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <xTaskPriorityInherit+0xc4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d201      	bcs.n	8005756 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005752:	2301      	movs	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005756:	68fb      	ldr	r3, [r7, #12]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200023d8 	.word	0x200023d8
 8005764:	200023dc 	.word	0x200023dc
 8005768:	200028b4 	.word	0x200028b4

0800576c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d058      	beq.n	8005834 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005782:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <xTaskPriorityDisinherit+0xd4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d00b      	beq.n	80057a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60bb      	str	r3, [r7, #8]
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d02c      	beq.n	8005834 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d128      	bne.n	8005834 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe f892 	bl	8003910 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005804:	4b0f      	ldr	r3, [pc, #60]	@ (8005844 <xTaskPriorityDisinherit+0xd8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskPriorityDisinherit+0xa8>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4a0c      	ldr	r2, [pc, #48]	@ (8005844 <xTaskPriorityDisinherit+0xd8>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <xTaskPriorityDisinherit+0xdc>)
 8005822:	441a      	add	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe f815 	bl	800385a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005830:	2301      	movs	r3, #1
 8005832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005834:	697b      	ldr	r3, [r7, #20]
	}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200023d8 	.word	0x200023d8
 8005844:	200028b4 	.word	0x200028b4
 8005848:	200023dc 	.word	0x200023dc

0800584c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800585a:	2301      	movs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d06c      	beq.n	800593e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d902      	bls.n	8005894 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	e002      	b.n	800589a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005898:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d04c      	beq.n	800593e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d147      	bne.n	800593e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80058ae:	4b26      	ldr	r3, [pc, #152]	@ (8005948 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d10b      	bne.n	80058d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60bb      	str	r3, [r7, #8]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db04      	blt.n	80058ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	6959      	ldr	r1, [r3, #20]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80058fe:	4413      	add	r3, r2
 8005900:	4299      	cmp	r1, r3
 8005902:	d11c      	bne.n	800593e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	3304      	adds	r3, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe f801 	bl	8003910 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005912:	4b0f      	ldr	r3, [pc, #60]	@ (8005950 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d903      	bls.n	8005922 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	4a0c      	ldr	r2, [pc, #48]	@ (8005950 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a07      	ldr	r2, [pc, #28]	@ (800594c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005930:	441a      	add	r2, r3
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7fd ff8e 	bl	800385a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800593e:	bf00      	nop
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200023d8 	.word	0x200023d8
 800594c:	200023dc 	.word	0x200023dc
 8005950:	200028b4 	.word	0x200028b4

08005954 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005958:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <pvTaskIncrementMutexHeldCount+0x24>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <pvTaskIncrementMutexHeldCount+0x24>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005966:	3201      	adds	r2, #1
 8005968:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800596a:	4b03      	ldr	r3, [pc, #12]	@ (8005978 <pvTaskIncrementMutexHeldCount+0x24>)
 800596c:	681b      	ldr	r3, [r3, #0]
	}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	200023d8 	.word	0x200023d8

0800597c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005986:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <prvAddCurrentTaskToDelayedList+0x90>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800598c:	4b20      	ldr	r3, [pc, #128]	@ (8005a10 <prvAddCurrentTaskToDelayedList+0x94>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3304      	adds	r3, #4
 8005992:	4618      	mov	r0, r3
 8005994:	f7fd ffbc 	bl	8003910 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d10a      	bne.n	80059b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4819      	ldr	r0, [pc, #100]	@ (8005a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80059b0:	f7fd ff53 	bl	800385a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059b4:	e026      	b.n	8005a04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059be:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d209      	bcs.n	80059e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ce:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fd ff60 	bl	80038a0 <vListInsert>
}
 80059e0:	e010      	b.n	8005a04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0xa0>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7fd ff56 	bl	80038a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d202      	bcs.n	8005a04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059fe:	4a08      	ldr	r2, [pc, #32]	@ (8005a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200028b0 	.word	0x200028b0
 8005a10:	200023d8 	.word	0x200023d8
 8005a14:	20002898 	.word	0x20002898
 8005a18:	20002868 	.word	0x20002868
 8005a1c:	20002864 	.word	0x20002864
 8005a20:	200028cc 	.word	0x200028cc

08005a24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	@ 0x28
 8005a28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a2e:	f000 fb11 	bl	8006054 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a32:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa8 <xTimerCreateTimerTask+0x84>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d021      	beq.n	8005a7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a42:	1d3a      	adds	r2, r7, #4
 8005a44:	f107 0108 	add.w	r1, r7, #8
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd febf 	bl	80037d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	9202      	str	r2, [sp, #8]
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	2300      	movs	r3, #0
 8005a62:	460a      	mov	r2, r1
 8005a64:	4911      	ldr	r1, [pc, #68]	@ (8005aac <xTimerCreateTimerTask+0x88>)
 8005a66:	4812      	ldr	r0, [pc, #72]	@ (8005ab0 <xTimerCreateTimerTask+0x8c>)
 8005a68:	f7fe ffa6 	bl	80049b8 <xTaskCreateStatic>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4a11      	ldr	r2, [pc, #68]	@ (8005ab4 <xTimerCreateTimerTask+0x90>)
 8005a70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <xTimerCreateTimerTask+0x90>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	613b      	str	r3, [r7, #16]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20002908 	.word	0x20002908
 8005aac:	08006c4c 	.word	0x08006c4c
 8005ab0:	08005bf1 	.word	0x08005bf1
 8005ab4:	2000290c 	.word	0x2000290c

08005ab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	@ 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <xTimerGenericCommand+0x30>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	623b      	str	r3, [r7, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ae8:	4b19      	ldr	r3, [pc, #100]	@ (8005b50 <xTimerGenericCommand+0x98>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02a      	beq.n	8005b46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	dc18      	bgt.n	8005b34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b02:	f7ff fdad 	bl	8005660 <xTaskGetSchedulerState>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d109      	bne.n	8005b20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <xTimerGenericCommand+0x98>)
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	f107 0110 	add.w	r1, r7, #16
 8005b14:	2300      	movs	r3, #0
 8005b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b18:	f7fe f8d8 	bl	8003ccc <xQueueGenericSend>
 8005b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b1e:	e012      	b.n	8005b46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b20:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <xTimerGenericCommand+0x98>)
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	f107 0110 	add.w	r1, r7, #16
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f7fe f8ce 	bl	8003ccc <xQueueGenericSend>
 8005b30:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b32:	e008      	b.n	8005b46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b34:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <xTimerGenericCommand+0x98>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	f107 0110 	add.w	r1, r7, #16
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	f7fe f9c6 	bl	8003ed0 <xQueueGenericSendFromISR>
 8005b44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	@ 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20002908 	.word	0x20002908

08005b54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b5e:	4b23      	ldr	r3, [pc, #140]	@ (8005bec <prvProcessExpiredTimer+0x98>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fd fecf 	bl	8003910 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d023      	beq.n	8005bc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	18d1      	adds	r1, r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	6978      	ldr	r0, [r7, #20]
 8005b8e:	f000 f8d3 	bl	8005d38 <prvInsertTimerInActiveList>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6978      	ldr	r0, [r7, #20]
 8005ba4:	f7ff ff88 	bl	8005ab8 <xTimerGenericCommand>
 8005ba8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d114      	bne.n	8005bda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60fb      	str	r3, [r7, #12]
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	e7fd      	b.n	8005bc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	6978      	ldr	r0, [r7, #20]
 8005be0:	4798      	blx	r3
}
 8005be2:	bf00      	nop
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20002900 	.word	0x20002900

08005bf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bf8:	f107 0308 	add.w	r3, r7, #8
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f859 	bl	8005cb4 <prvGetNextExpireTime>
 8005c02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f805 	bl	8005c18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c0e:	f000 f8d5 	bl	8005dbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c12:	bf00      	nop
 8005c14:	e7f0      	b.n	8005bf8 <prvTimerTask+0x8>
	...

08005c18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c22:	f7ff f92d 	bl	8004e80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c26:	f107 0308 	add.w	r3, r7, #8
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f864 	bl	8005cf8 <prvSampleTimeNow>
 8005c30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d130      	bne.n	8005c9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <prvProcessTimerOrBlockTask+0x3c>
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d806      	bhi.n	8005c54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c46:	f7ff f929 	bl	8004e9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff81 	bl	8005b54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c52:	e024      	b.n	8005c9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ca8 <prvProcessTimerOrBlockTask+0x90>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <prvProcessTimerOrBlockTask+0x50>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <prvProcessTimerOrBlockTask+0x52>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <prvProcessTimerOrBlockTask+0x94>)
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f7fe fe69 	bl	8004950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c7e:	f7ff f90d 	bl	8004e9c <xTaskResumeAll>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c88:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <prvProcessTimerOrBlockTask+0x98>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
}
 8005c98:	e001      	b.n	8005c9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c9a:	f7ff f8ff 	bl	8004e9c <xTaskResumeAll>
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20002904 	.word	0x20002904
 8005cac:	20002908 	.word	0x20002908
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <prvGetNextExpireTime+0x40>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <prvGetNextExpireTime+0x16>
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	e000      	b.n	8005ccc <prvGetNextExpireTime+0x18>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <prvGetNextExpireTime+0x40>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e001      	b.n	8005ce8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	20002900 	.word	0x20002900

08005cf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d00:	f7ff f96a 	bl	8004fd8 <xTaskGetTickCount>
 8005d04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d06:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <prvSampleTimeNow+0x3c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d205      	bcs.n	8005d1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d10:	f000 f93a 	bl	8005f88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d22:	4a04      	ldr	r2, [pc, #16]	@ (8005d34 <prvSampleTimeNow+0x3c>)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d28:	68fb      	ldr	r3, [r7, #12]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20002910 	.word	0x20002910

08005d38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d812      	bhi.n	8005d84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d302      	bcc.n	8005d72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e01b      	b.n	8005daa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d72:	4b10      	ldr	r3, [pc, #64]	@ (8005db4 <prvInsertTimerInActiveList+0x7c>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f7fd fd8f 	bl	80038a0 <vListInsert>
 8005d82:	e012      	b.n	8005daa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d206      	bcs.n	8005d9a <prvInsertTimerInActiveList+0x62>
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d302      	bcc.n	8005d9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e007      	b.n	8005daa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d9a:	4b07      	ldr	r3, [pc, #28]	@ (8005db8 <prvInsertTimerInActiveList+0x80>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7fd fd7b 	bl	80038a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005daa:	697b      	ldr	r3, [r7, #20]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20002904 	.word	0x20002904
 8005db8:	20002900 	.word	0x20002900

08005dbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08e      	sub	sp, #56	@ 0x38
 8005dc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dc2:	e0ce      	b.n	8005f62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	da19      	bge.n	8005dfe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	3304      	adds	r3, #4
 8005dce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	61fb      	str	r3, [r7, #28]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df4:	6850      	ldr	r0, [r2, #4]
 8005df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df8:	6892      	ldr	r2, [r2, #8]
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f2c0 80ae 	blt.w	8005f62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd fd7a 	bl	8003910 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff ff6a 	bl	8005cf8 <prvSampleTimeNow>
 8005e24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b09      	cmp	r3, #9
 8005e2a:	f200 8097 	bhi.w	8005f5c <prvProcessReceivedCommands+0x1a0>
 8005e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <prvProcessReceivedCommands+0x78>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005ed3 	.word	0x08005ed3
 8005e44:	08005ee7 	.word	0x08005ee7
 8005e48:	08005f33 	.word	0x08005f33
 8005e4c:	08005e5d 	.word	0x08005e5d
 8005e50:	08005e5d 	.word	0x08005e5d
 8005e54:	08005ed3 	.word	0x08005ed3
 8005e58:	08005ee7 	.word	0x08005ee7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	18d1      	adds	r1, r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e7c:	f7ff ff5c 	bl	8005d38 <prvInsertTimerInActiveList>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d06c      	beq.n	8005f60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d061      	beq.n	8005f60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	441a      	add	r2, r3
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eae:	f7ff fe03 	bl	8005ab8 <xTimerGenericCommand>
 8005eb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d152      	bne.n	8005f60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61bb      	str	r3, [r7, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ee4:	e03d      	b.n	8005f62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	617b      	str	r3, [r7, #20]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	18d1      	adds	r1, r2, r3
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f2c:	f7ff ff04 	bl	8005d38 <prvInsertTimerInActiveList>
					break;
 8005f30:	e017      	b.n	8005f62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f42:	f000 fb8b 	bl	800665c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f46:	e00c      	b.n	8005f62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f5a:	e002      	b.n	8005f62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <prvProcessReceivedCommands+0x1a6>
					break;
 8005f60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f62:	4b08      	ldr	r3, [pc, #32]	@ (8005f84 <prvProcessReceivedCommands+0x1c8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	1d39      	adds	r1, r7, #4
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe f8de 	bl	800412c <xQueueReceive>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f47f af26 	bne.w	8005dc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	3730      	adds	r7, #48	@ 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20002908 	.word	0x20002908

08005f88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f8e:	e049      	b.n	8006024 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f90:	4b2e      	ldr	r3, [pc, #184]	@ (800604c <prvSwitchTimerLists+0xc4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800604c <prvSwitchTimerLists+0xc4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd fcb1 	bl	8003910 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d02f      	beq.n	8006024 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d90e      	bls.n	8005ff4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800604c <prvSwitchTimerLists+0xc4>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7fd fc57 	bl	80038a0 <vListInsert>
 8005ff2:	e017      	b.n	8006024 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fd5a 	bl	8005ab8 <xTimerGenericCommand>
 8006004:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10b      	bne.n	8006024 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	603b      	str	r3, [r7, #0]
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	e7fd      	b.n	8006020 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <prvSwitchTimerLists+0xc4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1b0      	bne.n	8005f90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800602e:	4b07      	ldr	r3, [pc, #28]	@ (800604c <prvSwitchTimerLists+0xc4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006034:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <prvSwitchTimerLists+0xc8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a04      	ldr	r2, [pc, #16]	@ (800604c <prvSwitchTimerLists+0xc4>)
 800603a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800603c:	4a04      	ldr	r2, [pc, #16]	@ (8006050 <prvSwitchTimerLists+0xc8>)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6013      	str	r3, [r2, #0]
}
 8006042:	bf00      	nop
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20002900 	.word	0x20002900
 8006050:	20002904 	.word	0x20002904

08006054 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800605a:	f000 f92f 	bl	80062bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800605e:	4b15      	ldr	r3, [pc, #84]	@ (80060b4 <prvCheckForValidListAndQueue+0x60>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d120      	bne.n	80060a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006066:	4814      	ldr	r0, [pc, #80]	@ (80060b8 <prvCheckForValidListAndQueue+0x64>)
 8006068:	f7fd fbcc 	bl	8003804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800606c:	4813      	ldr	r0, [pc, #76]	@ (80060bc <prvCheckForValidListAndQueue+0x68>)
 800606e:	f7fd fbc9 	bl	8003804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006072:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <prvCheckForValidListAndQueue+0x6c>)
 8006074:	4a10      	ldr	r2, [pc, #64]	@ (80060b8 <prvCheckForValidListAndQueue+0x64>)
 8006076:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006078:	4b12      	ldr	r3, [pc, #72]	@ (80060c4 <prvCheckForValidListAndQueue+0x70>)
 800607a:	4a10      	ldr	r2, [pc, #64]	@ (80060bc <prvCheckForValidListAndQueue+0x68>)
 800607c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800607e:	2300      	movs	r3, #0
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4b11      	ldr	r3, [pc, #68]	@ (80060c8 <prvCheckForValidListAndQueue+0x74>)
 8006084:	4a11      	ldr	r2, [pc, #68]	@ (80060cc <prvCheckForValidListAndQueue+0x78>)
 8006086:	2110      	movs	r1, #16
 8006088:	200a      	movs	r0, #10
 800608a:	f7fd fcd5 	bl	8003a38 <xQueueGenericCreateStatic>
 800608e:	4603      	mov	r3, r0
 8006090:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <prvCheckForValidListAndQueue+0x60>)
 8006092:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006094:	4b07      	ldr	r3, [pc, #28]	@ (80060b4 <prvCheckForValidListAndQueue+0x60>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <prvCheckForValidListAndQueue+0x60>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	490b      	ldr	r1, [pc, #44]	@ (80060d0 <prvCheckForValidListAndQueue+0x7c>)
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fc02 	bl	80048ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060a8:	f000 f938 	bl	800631c <vPortExitCritical>
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20002908 	.word	0x20002908
 80060b8:	200028d8 	.word	0x200028d8
 80060bc:	200028ec 	.word	0x200028ec
 80060c0:	20002900 	.word	0x20002900
 80060c4:	20002904 	.word	0x20002904
 80060c8:	200029b4 	.word	0x200029b4
 80060cc:	20002914 	.word	0x20002914
 80060d0:	08006c54 	.word	0x08006c54

080060d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3b04      	subs	r3, #4
 80060e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b04      	subs	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006104:	4a08      	ldr	r2, [pc, #32]	@ (8006128 <pxPortInitialiseStack+0x54>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3b14      	subs	r3, #20
 800610e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b20      	subs	r3, #32
 800611a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800611c:	68fb      	ldr	r3, [r7, #12]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	0800612d 	.word	0x0800612d

0800612c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006136:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <prvTaskExitError+0x54>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d00b      	beq.n	8006158 <prvTaskExitError+0x2c>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60fb      	str	r3, [r7, #12]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <prvTaskExitError+0x28>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	60bb      	str	r3, [r7, #8]
}
 800616a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800616c:	bf00      	nop
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0fc      	beq.n	800616e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	20000ad4 	.word	0x20000ad4
	...

08006190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006190:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <pxCurrentTCBConst2>)
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	6808      	ldr	r0, [r1, #0]
 8006196:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800619a:	f380 8809 	msr	PSP, r0
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8811 	msr	BASEPRI, r0
 80061aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80061ae:	4770      	bx	lr

080061b0 <pxCurrentTCBConst2>:
 80061b0:	200023d8 	.word	0x200023d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop

080061b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061b8:	4806      	ldr	r0, [pc, #24]	@ (80061d4 <prvPortStartFirstTask+0x1c>)
 80061ba:	6800      	ldr	r0, [r0, #0]
 80061bc:	6800      	ldr	r0, [r0, #0]
 80061be:	f380 8808 	msr	MSP, r0
 80061c2:	b662      	cpsie	i
 80061c4:	b661      	cpsie	f
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	df00      	svc	0
 80061d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061d2:	bf00      	nop
 80061d4:	e000ed08 	.word	0xe000ed08

080061d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061de:	4b32      	ldr	r3, [pc, #200]	@ (80062a8 <xPortStartScheduler+0xd0>)
 80061e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	22ff      	movs	r2, #255	@ 0xff
 80061ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006200:	b2da      	uxtb	r2, r3
 8006202:	4b2a      	ldr	r3, [pc, #168]	@ (80062ac <xPortStartScheduler+0xd4>)
 8006204:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006206:	4b2a      	ldr	r3, [pc, #168]	@ (80062b0 <xPortStartScheduler+0xd8>)
 8006208:	2207      	movs	r2, #7
 800620a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620c:	e009      	b.n	8006222 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800620e:	4b28      	ldr	r3, [pc, #160]	@ (80062b0 <xPortStartScheduler+0xd8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3b01      	subs	r3, #1
 8006214:	4a26      	ldr	r2, [pc, #152]	@ (80062b0 <xPortStartScheduler+0xd8>)
 8006216:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622a:	2b80      	cmp	r3, #128	@ 0x80
 800622c:	d0ef      	beq.n	800620e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800622e:	4b20      	ldr	r3, [pc, #128]	@ (80062b0 <xPortStartScheduler+0xd8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1c3 0307 	rsb	r3, r3, #7
 8006236:	2b04      	cmp	r3, #4
 8006238:	d00b      	beq.n	8006252 <xPortStartScheduler+0x7a>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	60bb      	str	r3, [r7, #8]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006252:	4b17      	ldr	r3, [pc, #92]	@ (80062b0 <xPortStartScheduler+0xd8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	4a15      	ldr	r2, [pc, #84]	@ (80062b0 <xPortStartScheduler+0xd8>)
 800625a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800625c:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <xPortStartScheduler+0xd8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006264:	4a12      	ldr	r2, [pc, #72]	@ (80062b0 <xPortStartScheduler+0xd8>)
 8006266:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006270:	4b10      	ldr	r3, [pc, #64]	@ (80062b4 <xPortStartScheduler+0xdc>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0f      	ldr	r2, [pc, #60]	@ (80062b4 <xPortStartScheduler+0xdc>)
 8006276:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800627a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800627c:	4b0d      	ldr	r3, [pc, #52]	@ (80062b4 <xPortStartScheduler+0xdc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0c      	ldr	r2, [pc, #48]	@ (80062b4 <xPortStartScheduler+0xdc>)
 8006282:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006286:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006288:	f000 f8b8 	bl	80063fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800628c:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <xPortStartScheduler+0xe0>)
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006292:	f7ff ff91 	bl	80061b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006296:	f7fe ff67 	bl	8005168 <vTaskSwitchContext>
	prvTaskExitError();
 800629a:	f7ff ff47 	bl	800612c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	e000e400 	.word	0xe000e400
 80062ac:	20002a04 	.word	0x20002a04
 80062b0:	20002a08 	.word	0x20002a08
 80062b4:	e000ed20 	.word	0xe000ed20
 80062b8:	20000ad4 	.word	0x20000ad4

080062bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	607b      	str	r3, [r7, #4]
}
 80062d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006314 <vPortEnterCritical+0x58>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006314 <vPortEnterCritical+0x58>)
 80062de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006314 <vPortEnterCritical+0x58>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d110      	bne.n	800630a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <vPortEnterCritical+0x5c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <vPortEnterCritical+0x4e>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	603b      	str	r3, [r7, #0]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <vPortEnterCritical+0x4a>
	}
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	20000ad4 	.word	0x20000ad4
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006322:	4b12      	ldr	r3, [pc, #72]	@ (800636c <vPortExitCritical+0x50>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vPortExitCritical+0x26>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	607b      	str	r3, [r7, #4]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a08      	ldr	r2, [pc, #32]	@ (800636c <vPortExitCritical+0x50>)
 800634a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <vPortExitCritical+0x50>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <vPortExitCritical+0x44>
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000ad4 	.word	0x20000ad4

08006370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006370:	f3ef 8009 	mrs	r0, PSP
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <pxCurrentTCBConst>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006380:	6010      	str	r0, [r2, #0]
 8006382:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006386:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800638a:	f380 8811 	msr	BASEPRI, r0
 800638e:	f7fe feeb 	bl	8005168 <vTaskSwitchContext>
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8811 	msr	BASEPRI, r0
 800639a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800639e:	6819      	ldr	r1, [r3, #0]
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063a6:	f380 8809 	msr	PSP, r0
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	4770      	bx	lr

080063b0 <pxCurrentTCBConst>:
 80063b0:	200023d8 	.word	0x200023d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop

080063b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	607b      	str	r3, [r7, #4]
}
 80063d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063d2:	f7fe fe0f 	bl	8004ff4 <xTaskIncrementTick>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063dc:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <xPortSysTickHandler+0x40>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	2300      	movs	r3, #0
 80063e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f383 8811 	msr	BASEPRI, r3
}
 80063ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006400:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <vPortSetupTimerInterrupt+0x30>)
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <vPortSetupTimerInterrupt+0x34>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800640c:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <vPortSetupTimerInterrupt+0x38>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a09      	ldr	r2, [pc, #36]	@ (8006438 <vPortSetupTimerInterrupt+0x3c>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	099b      	lsrs	r3, r3, #6
 8006418:	4a08      	ldr	r2, [pc, #32]	@ (800643c <vPortSetupTimerInterrupt+0x40>)
 800641a:	3b01      	subs	r3, #1
 800641c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800641e:	4b03      	ldr	r3, [pc, #12]	@ (800642c <vPortSetupTimerInterrupt+0x30>)
 8006420:	2207      	movs	r2, #7
 8006422:	601a      	str	r2, [r3, #0]
}
 8006424:	bf00      	nop
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr
 800642c:	e000e010 	.word	0xe000e010
 8006430:	e000e018 	.word	0xe000e018
 8006434:	20000ac8 	.word	0x20000ac8
 8006438:	10624dd3 	.word	0x10624dd3
 800643c:	e000e014 	.word	0xe000e014

08006440 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006446:	f3ef 8305 	mrs	r3, IPSR
 800644a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d915      	bls.n	800647e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006452:	4a17      	ldr	r2, [pc, #92]	@ (80064b0 <vPortValidateInterruptPriority+0x70>)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800645c:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <vPortValidateInterruptPriority+0x74>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	7afa      	ldrb	r2, [r7, #11]
 8006462:	429a      	cmp	r2, r3
 8006464:	d20b      	bcs.n	800647e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	607b      	str	r3, [r7, #4]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800647e:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <vPortValidateInterruptPriority+0x78>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006486:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <vPortValidateInterruptPriority+0x7c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d90b      	bls.n	80064a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	603b      	str	r3, [r7, #0]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <vPortValidateInterruptPriority+0x62>
	}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr
 80064b0:	e000e3f0 	.word	0xe000e3f0
 80064b4:	20002a04 	.word	0x20002a04
 80064b8:	e000ed0c 	.word	0xe000ed0c
 80064bc:	20002a08 	.word	0x20002a08

080064c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	@ 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064cc:	f7fe fcd8 	bl	8004e80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006644 <pvPortMalloc+0x184>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064d8:	f000 f924 	bl	8006724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006648 <pvPortMalloc+0x188>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 8095 	bne.w	8006614 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01e      	beq.n	800652e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80064f0:	2208      	movs	r2, #8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d015      	beq.n	800652e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	3308      	adds	r3, #8
 800650a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <pvPortMalloc+0x6e>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	617b      	str	r3, [r7, #20]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d06f      	beq.n	8006614 <pvPortMalloc+0x154>
 8006534:	4b45      	ldr	r3, [pc, #276]	@ (800664c <pvPortMalloc+0x18c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d86a      	bhi.n	8006614 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800653e:	4b44      	ldr	r3, [pc, #272]	@ (8006650 <pvPortMalloc+0x190>)
 8006540:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006542:	4b43      	ldr	r3, [pc, #268]	@ (8006650 <pvPortMalloc+0x190>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006548:	e004      	b.n	8006554 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d903      	bls.n	8006566 <pvPortMalloc+0xa6>
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f1      	bne.n	800654a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006566:	4b37      	ldr	r3, [pc, #220]	@ (8006644 <pvPortMalloc+0x184>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656c:	429a      	cmp	r2, r3
 800656e:	d051      	beq.n	8006614 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2208      	movs	r2, #8
 8006576:	4413      	add	r3, r2
 8006578:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	1ad2      	subs	r2, r2, r3
 800658a:	2308      	movs	r3, #8
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	429a      	cmp	r2, r3
 8006590:	d920      	bls.n	80065d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <pvPortMalloc+0xfc>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	613b      	str	r3, [r7, #16]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065ce:	69b8      	ldr	r0, [r7, #24]
 80065d0:	f000 f90a 	bl	80067e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d4:	4b1d      	ldr	r3, [pc, #116]	@ (800664c <pvPortMalloc+0x18c>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <pvPortMalloc+0x18c>)
 80065e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e2:	4b1a      	ldr	r3, [pc, #104]	@ (800664c <pvPortMalloc+0x18c>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006654 <pvPortMalloc+0x194>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d203      	bcs.n	80065f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065ee:	4b17      	ldr	r3, [pc, #92]	@ (800664c <pvPortMalloc+0x18c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <pvPortMalloc+0x194>)
 80065f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	4b13      	ldr	r3, [pc, #76]	@ (8006648 <pvPortMalloc+0x188>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	431a      	orrs	r2, r3
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800660a:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <pvPortMalloc+0x198>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	4a11      	ldr	r2, [pc, #68]	@ (8006658 <pvPortMalloc+0x198>)
 8006612:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006614:	f7fe fc42 	bl	8004e9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <pvPortMalloc+0x17a>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60fb      	str	r3, [r7, #12]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <pvPortMalloc+0x176>
	return pvReturn;
 800663a:	69fb      	ldr	r3, [r7, #28]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3728      	adds	r7, #40	@ 0x28
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20003da8 	.word	0x20003da8
 8006648:	20003dbc 	.word	0x20003dbc
 800664c:	20003dac 	.word	0x20003dac
 8006650:	20003da0 	.word	0x20003da0
 8006654:	20003db0 	.word	0x20003db0
 8006658:	20003db4 	.word	0x20003db4

0800665c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d04f      	beq.n	800670e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800666e:	2308      	movs	r3, #8
 8006670:	425b      	negs	r3, r3
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b25      	ldr	r3, [pc, #148]	@ (8006718 <vPortFree+0xbc>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <vPortFree+0x46>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <vPortFree+0x66>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60bb      	str	r3, [r7, #8]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	4b14      	ldr	r3, [pc, #80]	@ (8006718 <vPortFree+0xbc>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01e      	beq.n	800670e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11a      	bne.n	800670e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <vPortFree+0xbc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066e8:	f7fe fbca 	bl	8004e80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <vPortFree+0xc0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4413      	add	r3, r2
 80066f6:	4a09      	ldr	r2, [pc, #36]	@ (800671c <vPortFree+0xc0>)
 80066f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f000 f874 	bl	80067e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006700:	4b07      	ldr	r3, [pc, #28]	@ (8006720 <vPortFree+0xc4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	4a06      	ldr	r2, [pc, #24]	@ (8006720 <vPortFree+0xc4>)
 8006708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800670a:	f7fe fbc7 	bl	8004e9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20003dbc 	.word	0x20003dbc
 800671c:	20003dac 	.word	0x20003dac
 8006720:	20003db8 	.word	0x20003db8

08006724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800672a:	f241 3394 	movw	r3, #5012	@ 0x1394
 800672e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006730:	4b27      	ldr	r3, [pc, #156]	@ (80067d0 <prvHeapInit+0xac>)
 8006732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3307      	adds	r3, #7
 8006742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	4a1f      	ldr	r2, [pc, #124]	@ (80067d0 <prvHeapInit+0xac>)
 8006754:	4413      	add	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <prvHeapInit+0xb0>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006762:	4b1c      	ldr	r3, [pc, #112]	@ (80067d4 <prvHeapInit+0xb0>)
 8006764:	2200      	movs	r2, #0
 8006766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006770:	2208      	movs	r2, #8
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0307 	bic.w	r3, r3, #7
 800677e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a15      	ldr	r2, [pc, #84]	@ (80067d8 <prvHeapInit+0xb4>)
 8006784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006786:	4b14      	ldr	r3, [pc, #80]	@ (80067d8 <prvHeapInit+0xb4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800678e:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <prvHeapInit+0xb4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <prvHeapInit+0xb4>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4a0a      	ldr	r2, [pc, #40]	@ (80067dc <prvHeapInit+0xb8>)
 80067b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a09      	ldr	r2, [pc, #36]	@ (80067e0 <prvHeapInit+0xbc>)
 80067ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067bc:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <prvHeapInit+0xc0>)
 80067be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067c2:	601a      	str	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20002a0c 	.word	0x20002a0c
 80067d4:	20003da0 	.word	0x20003da0
 80067d8:	20003da8 	.word	0x20003da8
 80067dc:	20003db0 	.word	0x20003db0
 80067e0:	20003dac 	.word	0x20003dac
 80067e4:	20003dbc 	.word	0x20003dbc

080067e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f0:	4b27      	ldr	r3, [pc, #156]	@ (8006890 <prvInsertBlockIntoFreeList+0xa8>)
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e002      	b.n	80067fc <prvInsertBlockIntoFreeList+0x14>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d8f7      	bhi.n	80067f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	4413      	add	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d108      	bne.n	800682a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	441a      	add	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	441a      	add	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d118      	bne.n	8006870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <prvInsertBlockIntoFreeList+0xac>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d00d      	beq.n	8006866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	441a      	add	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e008      	b.n	8006878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006866:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <prvInsertBlockIntoFreeList+0xac>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e003      	b.n	8006878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d002      	beq.n	8006886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr
 8006890:	20003da0 	.word	0x20003da0
 8006894:	20003da8 	.word	0x20003da8

08006898 <memcmp>:
 8006898:	b510      	push	{r4, lr}
 800689a:	3901      	subs	r1, #1
 800689c:	4402      	add	r2, r0
 800689e:	4290      	cmp	r0, r2
 80068a0:	d101      	bne.n	80068a6 <memcmp+0xe>
 80068a2:	2000      	movs	r0, #0
 80068a4:	e005      	b.n	80068b2 <memcmp+0x1a>
 80068a6:	7803      	ldrb	r3, [r0, #0]
 80068a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d001      	beq.n	80068b4 <memcmp+0x1c>
 80068b0:	1b18      	subs	r0, r3, r4
 80068b2:	bd10      	pop	{r4, pc}
 80068b4:	3001      	adds	r0, #1
 80068b6:	e7f2      	b.n	800689e <memcmp+0x6>

080068b8 <memset>:
 80068b8:	4603      	mov	r3, r0
 80068ba:	4402      	add	r2, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <_reclaim_reent>:
 80068c8:	4b29      	ldr	r3, [pc, #164]	@ (8006970 <_reclaim_reent+0xa8>)
 80068ca:	b570      	push	{r4, r5, r6, lr}
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4604      	mov	r4, r0
 80068d0:	4283      	cmp	r3, r0
 80068d2:	d04b      	beq.n	800696c <_reclaim_reent+0xa4>
 80068d4:	69c3      	ldr	r3, [r0, #28]
 80068d6:	b1ab      	cbz	r3, 8006904 <_reclaim_reent+0x3c>
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	b16b      	cbz	r3, 80068f8 <_reclaim_reent+0x30>
 80068dc:	2500      	movs	r5, #0
 80068de:	69e3      	ldr	r3, [r4, #28]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	5959      	ldr	r1, [r3, r5]
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d13b      	bne.n	8006960 <_reclaim_reent+0x98>
 80068e8:	3504      	adds	r5, #4
 80068ea:	2d80      	cmp	r5, #128	@ 0x80
 80068ec:	d1f7      	bne.n	80068de <_reclaim_reent+0x16>
 80068ee:	69e3      	ldr	r3, [r4, #28]
 80068f0:	4620      	mov	r0, r4
 80068f2:	68d9      	ldr	r1, [r3, #12]
 80068f4:	f000 f872 	bl	80069dc <_free_r>
 80068f8:	69e3      	ldr	r3, [r4, #28]
 80068fa:	6819      	ldr	r1, [r3, #0]
 80068fc:	b111      	cbz	r1, 8006904 <_reclaim_reent+0x3c>
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f86c 	bl	80069dc <_free_r>
 8006904:	6961      	ldr	r1, [r4, #20]
 8006906:	b111      	cbz	r1, 800690e <_reclaim_reent+0x46>
 8006908:	4620      	mov	r0, r4
 800690a:	f000 f867 	bl	80069dc <_free_r>
 800690e:	69e1      	ldr	r1, [r4, #28]
 8006910:	b111      	cbz	r1, 8006918 <_reclaim_reent+0x50>
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f862 	bl	80069dc <_free_r>
 8006918:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800691a:	b111      	cbz	r1, 8006922 <_reclaim_reent+0x5a>
 800691c:	4620      	mov	r0, r4
 800691e:	f000 f85d 	bl	80069dc <_free_r>
 8006922:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006924:	b111      	cbz	r1, 800692c <_reclaim_reent+0x64>
 8006926:	4620      	mov	r0, r4
 8006928:	f000 f858 	bl	80069dc <_free_r>
 800692c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800692e:	b111      	cbz	r1, 8006936 <_reclaim_reent+0x6e>
 8006930:	4620      	mov	r0, r4
 8006932:	f000 f853 	bl	80069dc <_free_r>
 8006936:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006938:	b111      	cbz	r1, 8006940 <_reclaim_reent+0x78>
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f84e 	bl	80069dc <_free_r>
 8006940:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006942:	b111      	cbz	r1, 800694a <_reclaim_reent+0x82>
 8006944:	4620      	mov	r0, r4
 8006946:	f000 f849 	bl	80069dc <_free_r>
 800694a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800694c:	b111      	cbz	r1, 8006954 <_reclaim_reent+0x8c>
 800694e:	4620      	mov	r0, r4
 8006950:	f000 f844 	bl	80069dc <_free_r>
 8006954:	6a23      	ldr	r3, [r4, #32]
 8006956:	b14b      	cbz	r3, 800696c <_reclaim_reent+0xa4>
 8006958:	4620      	mov	r0, r4
 800695a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800695e:	4718      	bx	r3
 8006960:	680e      	ldr	r6, [r1, #0]
 8006962:	4620      	mov	r0, r4
 8006964:	f000 f83a 	bl	80069dc <_free_r>
 8006968:	4631      	mov	r1, r6
 800696a:	e7bb      	b.n	80068e4 <_reclaim_reent+0x1c>
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	bf00      	nop
 8006970:	20000ad8 	.word	0x20000ad8

08006974 <__libc_init_array>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	2600      	movs	r6, #0
 8006978:	4d0c      	ldr	r5, [pc, #48]	@ (80069ac <__libc_init_array+0x38>)
 800697a:	4c0d      	ldr	r4, [pc, #52]	@ (80069b0 <__libc_init_array+0x3c>)
 800697c:	1b64      	subs	r4, r4, r5
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	42a6      	cmp	r6, r4
 8006982:	d109      	bne.n	8006998 <__libc_init_array+0x24>
 8006984:	f000 f87e 	bl	8006a84 <_init>
 8006988:	2600      	movs	r6, #0
 800698a:	4d0a      	ldr	r5, [pc, #40]	@ (80069b4 <__libc_init_array+0x40>)
 800698c:	4c0a      	ldr	r4, [pc, #40]	@ (80069b8 <__libc_init_array+0x44>)
 800698e:	1b64      	subs	r4, r4, r5
 8006990:	10a4      	asrs	r4, r4, #2
 8006992:	42a6      	cmp	r6, r4
 8006994:	d105      	bne.n	80069a2 <__libc_init_array+0x2e>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	f855 3b04 	ldr.w	r3, [r5], #4
 800699c:	4798      	blx	r3
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <__libc_init_array+0xc>
 80069a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a6:	4798      	blx	r3
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7f2      	b.n	8006992 <__libc_init_array+0x1e>
 80069ac:	08006dc0 	.word	0x08006dc0
 80069b0:	08006dc0 	.word	0x08006dc0
 80069b4:	08006dc0 	.word	0x08006dc0
 80069b8:	08006dc4 	.word	0x08006dc4

080069bc <__retarget_lock_acquire_recursive>:
 80069bc:	4770      	bx	lr

080069be <__retarget_lock_release_recursive>:
 80069be:	4770      	bx	lr

080069c0 <memcpy>:
 80069c0:	440a      	add	r2, r1
 80069c2:	4291      	cmp	r1, r2
 80069c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069c8:	d100      	bne.n	80069cc <memcpy+0xc>
 80069ca:	4770      	bx	lr
 80069cc:	b510      	push	{r4, lr}
 80069ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d2:	4291      	cmp	r1, r2
 80069d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d8:	d1f9      	bne.n	80069ce <memcpy+0xe>
 80069da:	bd10      	pop	{r4, pc}

080069dc <_free_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4605      	mov	r5, r0
 80069e0:	2900      	cmp	r1, #0
 80069e2:	d040      	beq.n	8006a66 <_free_r+0x8a>
 80069e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e8:	1f0c      	subs	r4, r1, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bfb8      	it	lt
 80069ee:	18e4      	addlt	r4, r4, r3
 80069f0:	f000 f83c 	bl	8006a6c <__malloc_lock>
 80069f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <_free_r+0x8c>)
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	b933      	cbnz	r3, 8006a08 <_free_r+0x2c>
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	6014      	str	r4, [r2, #0]
 80069fe:	4628      	mov	r0, r5
 8006a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a04:	f000 b838 	b.w	8006a78 <__malloc_unlock>
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d908      	bls.n	8006a1e <_free_r+0x42>
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	1821      	adds	r1, r4, r0
 8006a10:	428b      	cmp	r3, r1
 8006a12:	bf01      	itttt	eq
 8006a14:	6819      	ldreq	r1, [r3, #0]
 8006a16:	685b      	ldreq	r3, [r3, #4]
 8006a18:	1809      	addeq	r1, r1, r0
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	e7ed      	b.n	80069fa <_free_r+0x1e>
 8006a1e:	461a      	mov	r2, r3
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	b10b      	cbz	r3, 8006a28 <_free_r+0x4c>
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d9fa      	bls.n	8006a1e <_free_r+0x42>
 8006a28:	6811      	ldr	r1, [r2, #0]
 8006a2a:	1850      	adds	r0, r2, r1
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d10b      	bne.n	8006a48 <_free_r+0x6c>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	4401      	add	r1, r0
 8006a34:	1850      	adds	r0, r2, r1
 8006a36:	4283      	cmp	r3, r0
 8006a38:	6011      	str	r1, [r2, #0]
 8006a3a:	d1e0      	bne.n	80069fe <_free_r+0x22>
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4408      	add	r0, r1
 8006a42:	6010      	str	r0, [r2, #0]
 8006a44:	6053      	str	r3, [r2, #4]
 8006a46:	e7da      	b.n	80069fe <_free_r+0x22>
 8006a48:	d902      	bls.n	8006a50 <_free_r+0x74>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	e7d6      	b.n	80069fe <_free_r+0x22>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428b      	cmp	r3, r1
 8006a56:	bf01      	itttt	eq
 8006a58:	6819      	ldreq	r1, [r3, #0]
 8006a5a:	685b      	ldreq	r3, [r3, #4]
 8006a5c:	1809      	addeq	r1, r1, r0
 8006a5e:	6021      	streq	r1, [r4, #0]
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	6054      	str	r4, [r2, #4]
 8006a64:	e7cb      	b.n	80069fe <_free_r+0x22>
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20003efc 	.word	0x20003efc

08006a6c <__malloc_lock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	@ (8006a74 <__malloc_lock+0x8>)
 8006a6e:	f7ff bfa5 	b.w	80069bc <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	20003ef8 	.word	0x20003ef8

08006a78 <__malloc_unlock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	@ (8006a80 <__malloc_unlock+0x8>)
 8006a7a:	f7ff bfa0 	b.w	80069be <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20003ef8 	.word	0x20003ef8

08006a84 <_init>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr

08006a90 <_fini>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr
