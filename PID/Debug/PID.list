
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a03c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800a14c  0800a14c  0000b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e8  0800a3e8  0000c894  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3e8  0800a3e8  0000c894  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3e8  0800a3e8  0000c894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e8  0800a3e8  0000b3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3ec  0800a3ec  0000b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000894  20000000  0800a3f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033ec  20000894  0800ac84  0000c894  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c80  0800ac84  0000cc80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c894  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020009  00000000  00000000  0000c8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ece  00000000  00000000  0002c8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00031798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b6  00000000  00000000  00033258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d851  00000000  00000000  0003470e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239e4  00000000  00000000  00051f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d98b  00000000  00000000  00075943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001132ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007550  00000000  00000000  00113314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011a864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000894 	.word	0x20000894
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a134 	.word	0x0800a134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000898 	.word	0x20000898
 800014c:	0800a134 	.word	0x0800a134

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__gedf2>:
 8000630:	f04f 3cff 	mov.w	ip, #4294967295
 8000634:	e006      	b.n	8000644 <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__ledf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	e002      	b.n	8000644 <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__cmpdf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800064c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000650:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000654:	bf18      	it	ne
 8000656:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800065a:	d01b      	beq.n	8000694 <__cmpdf2+0x54>
 800065c:	b001      	add	sp, #4
 800065e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000662:	bf0c      	ite	eq
 8000664:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000668:	ea91 0f03 	teqne	r1, r3
 800066c:	bf02      	ittt	eq
 800066e:	ea90 0f02 	teqeq	r0, r2
 8000672:	2000      	moveq	r0, #0
 8000674:	4770      	bxeq	lr
 8000676:	f110 0f00 	cmn.w	r0, #0
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf58      	it	pl
 8000680:	4299      	cmppl	r1, r3
 8000682:	bf08      	it	eq
 8000684:	4290      	cmpeq	r0, r2
 8000686:	bf2c      	ite	cs
 8000688:	17d8      	asrcs	r0, r3, #31
 800068a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800068e:	f040 0001 	orr.w	r0, r0, #1
 8000692:	4770      	bx	lr
 8000694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800069c:	d102      	bne.n	80006a4 <__cmpdf2+0x64>
 800069e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006a2:	d107      	bne.n	80006b4 <__cmpdf2+0x74>
 80006a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006ac:	d1d6      	bne.n	800065c <__cmpdf2+0x1c>
 80006ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006b2:	d0d3      	beq.n	800065c <__cmpdf2+0x1c>
 80006b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__aeabi_cdrcmple>:
 80006bc:	4684      	mov	ip, r0
 80006be:	4610      	mov	r0, r2
 80006c0:	4662      	mov	r2, ip
 80006c2:	468c      	mov	ip, r1
 80006c4:	4619      	mov	r1, r3
 80006c6:	4663      	mov	r3, ip
 80006c8:	e000      	b.n	80006cc <__aeabi_cdcmpeq>
 80006ca:	bf00      	nop

080006cc <__aeabi_cdcmpeq>:
 80006cc:	b501      	push	{r0, lr}
 80006ce:	f7ff ffb7 	bl	8000640 <__cmpdf2>
 80006d2:	2800      	cmp	r0, #0
 80006d4:	bf48      	it	mi
 80006d6:	f110 0f00 	cmnmi.w	r0, #0
 80006da:	bd01      	pop	{r0, pc}

080006dc <__aeabi_dcmpeq>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff fff4 	bl	80006cc <__aeabi_cdcmpeq>
 80006e4:	bf0c      	ite	eq
 80006e6:	2001      	moveq	r0, #1
 80006e8:	2000      	movne	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmplt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffea 	bl	80006cc <__aeabi_cdcmpeq>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmple>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffe0 	bl	80006cc <__aeabi_cdcmpeq>
 800070c:	bf94      	ite	ls
 800070e:	2001      	movls	r0, #1
 8000710:	2000      	movhi	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_dcmpge>:
 8000718:	f84d ed08 	str.w	lr, [sp, #-8]!
 800071c:	f7ff ffce 	bl	80006bc <__aeabi_cdrcmple>
 8000720:	bf94      	ite	ls
 8000722:	2001      	movls	r0, #1
 8000724:	2000      	movhi	r0, #0
 8000726:	f85d fb08 	ldr.w	pc, [sp], #8
 800072a:	bf00      	nop

0800072c <__aeabi_dcmpgt>:
 800072c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000730:	f7ff ffc4 	bl	80006bc <__aeabi_cdrcmple>
 8000734:	bf34      	ite	cc
 8000736:	2001      	movcc	r0, #1
 8000738:	2000      	movcs	r0, #0
 800073a:	f85d fb08 	ldr.w	pc, [sp], #8
 800073e:	bf00      	nop

08000740 <__aeabi_frsub>:
 8000740:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000744:	e002      	b.n	800074c <__addsf3>
 8000746:	bf00      	nop

08000748 <__aeabi_fsub>:
 8000748:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800074c <__addsf3>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	bf1f      	itttt	ne
 8000750:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000754:	ea92 0f03 	teqne	r2, r3
 8000758:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800075c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000760:	d06a      	beq.n	8000838 <__addsf3+0xec>
 8000762:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000766:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800076a:	bfc1      	itttt	gt
 800076c:	18d2      	addgt	r2, r2, r3
 800076e:	4041      	eorgt	r1, r0
 8000770:	4048      	eorgt	r0, r1
 8000772:	4041      	eorgt	r1, r0
 8000774:	bfb8      	it	lt
 8000776:	425b      	neglt	r3, r3
 8000778:	2b19      	cmp	r3, #25
 800077a:	bf88      	it	hi
 800077c:	4770      	bxhi	lr
 800077e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000786:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800078a:	bf18      	it	ne
 800078c:	4240      	negne	r0, r0
 800078e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000792:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000796:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800079a:	bf18      	it	ne
 800079c:	4249      	negne	r1, r1
 800079e:	ea92 0f03 	teq	r2, r3
 80007a2:	d03f      	beq.n	8000824 <__addsf3+0xd8>
 80007a4:	f1a2 0201 	sub.w	r2, r2, #1
 80007a8:	fa41 fc03 	asr.w	ip, r1, r3
 80007ac:	eb10 000c 	adds.w	r0, r0, ip
 80007b0:	f1c3 0320 	rsb	r3, r3, #32
 80007b4:	fa01 f103 	lsl.w	r1, r1, r3
 80007b8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007bc:	d502      	bpl.n	80007c4 <__addsf3+0x78>
 80007be:	4249      	negs	r1, r1
 80007c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007c4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007c8:	d313      	bcc.n	80007f2 <__addsf3+0xa6>
 80007ca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ce:	d306      	bcc.n	80007de <__addsf3+0x92>
 80007d0:	0840      	lsrs	r0, r0, #1
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	f102 0201 	add.w	r2, r2, #1
 80007da:	2afe      	cmp	r2, #254	@ 0xfe
 80007dc:	d251      	bcs.n	8000882 <__addsf3+0x136>
 80007de:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e6:	bf08      	it	eq
 80007e8:	f020 0001 	biceq.w	r0, r0, #1
 80007ec:	ea40 0003 	orr.w	r0, r0, r3
 80007f0:	4770      	bx	lr
 80007f2:	0049      	lsls	r1, r1, #1
 80007f4:	eb40 0000 	adc.w	r0, r0, r0
 80007f8:	3a01      	subs	r2, #1
 80007fa:	bf28      	it	cs
 80007fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000800:	d2ed      	bcs.n	80007de <__addsf3+0x92>
 8000802:	fab0 fc80 	clz	ip, r0
 8000806:	f1ac 0c08 	sub.w	ip, ip, #8
 800080a:	ebb2 020c 	subs.w	r2, r2, ip
 800080e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000812:	bfaa      	itet	ge
 8000814:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000818:	4252      	neglt	r2, r2
 800081a:	4318      	orrge	r0, r3
 800081c:	bfbc      	itt	lt
 800081e:	40d0      	lsrlt	r0, r2
 8000820:	4318      	orrlt	r0, r3
 8000822:	4770      	bx	lr
 8000824:	f092 0f00 	teq	r2, #0
 8000828:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800082c:	bf06      	itte	eq
 800082e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000832:	3201      	addeq	r2, #1
 8000834:	3b01      	subne	r3, #1
 8000836:	e7b5      	b.n	80007a4 <__addsf3+0x58>
 8000838:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800083c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000840:	bf18      	it	ne
 8000842:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000846:	d021      	beq.n	800088c <__addsf3+0x140>
 8000848:	ea92 0f03 	teq	r2, r3
 800084c:	d004      	beq.n	8000858 <__addsf3+0x10c>
 800084e:	f092 0f00 	teq	r2, #0
 8000852:	bf08      	it	eq
 8000854:	4608      	moveq	r0, r1
 8000856:	4770      	bx	lr
 8000858:	ea90 0f01 	teq	r0, r1
 800085c:	bf1c      	itt	ne
 800085e:	2000      	movne	r0, #0
 8000860:	4770      	bxne	lr
 8000862:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000866:	d104      	bne.n	8000872 <__addsf3+0x126>
 8000868:	0040      	lsls	r0, r0, #1
 800086a:	bf28      	it	cs
 800086c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000870:	4770      	bx	lr
 8000872:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000876:	bf3c      	itt	cc
 8000878:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800087c:	4770      	bxcc	lr
 800087e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000882:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000886:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800088a:	4770      	bx	lr
 800088c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000890:	bf16      	itet	ne
 8000892:	4608      	movne	r0, r1
 8000894:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000898:	4601      	movne	r1, r0
 800089a:	0242      	lsls	r2, r0, #9
 800089c:	bf06      	itte	eq
 800089e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008a2:	ea90 0f01 	teqeq	r0, r1
 80008a6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008aa:	4770      	bx	lr

080008ac <__aeabi_ui2f>:
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	e004      	b.n	80008bc <__aeabi_i2f+0x8>
 80008b2:	bf00      	nop

080008b4 <__aeabi_i2f>:
 80008b4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008b8:	bf48      	it	mi
 80008ba:	4240      	negmi	r0, r0
 80008bc:	ea5f 0c00 	movs.w	ip, r0
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008c8:	4601      	mov	r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	e01c      	b.n	800090a <__aeabi_l2f+0x2a>

080008d0 <__aeabi_ul2f>:
 80008d0:	ea50 0201 	orrs.w	r2, r0, r1
 80008d4:	bf08      	it	eq
 80008d6:	4770      	bxeq	lr
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e00a      	b.n	80008f4 <__aeabi_l2f+0x14>
 80008de:	bf00      	nop

080008e0 <__aeabi_l2f>:
 80008e0:	ea50 0201 	orrs.w	r2, r0, r1
 80008e4:	bf08      	it	eq
 80008e6:	4770      	bxeq	lr
 80008e8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008ec:	d502      	bpl.n	80008f4 <__aeabi_l2f+0x14>
 80008ee:	4240      	negs	r0, r0
 80008f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008f4:	ea5f 0c01 	movs.w	ip, r1
 80008f8:	bf02      	ittt	eq
 80008fa:	4684      	moveq	ip, r0
 80008fc:	4601      	moveq	r1, r0
 80008fe:	2000      	moveq	r0, #0
 8000900:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000904:	bf08      	it	eq
 8000906:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800090a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800090e:	fabc f28c 	clz	r2, ip
 8000912:	3a08      	subs	r2, #8
 8000914:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000918:	db10      	blt.n	800093c <__aeabi_l2f+0x5c>
 800091a:	fa01 fc02 	lsl.w	ip, r1, r2
 800091e:	4463      	add	r3, ip
 8000920:	fa00 fc02 	lsl.w	ip, r0, r2
 8000924:	f1c2 0220 	rsb	r2, r2, #32
 8000928:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800092c:	fa20 f202 	lsr.w	r2, r0, r2
 8000930:	eb43 0002 	adc.w	r0, r3, r2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f102 0220 	add.w	r2, r2, #32
 8000940:	fa01 fc02 	lsl.w	ip, r1, r2
 8000944:	f1c2 0220 	rsb	r2, r2, #32
 8000948:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800094c:	fa21 f202 	lsr.w	r2, r1, r2
 8000950:	eb43 0002 	adc.w	r0, r3, r2
 8000954:	bf08      	it	eq
 8000956:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800095a:	4770      	bx	lr

0800095c <__aeabi_f2iz>:
 800095c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000960:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000964:	d30f      	bcc.n	8000986 <__aeabi_f2iz+0x2a>
 8000966:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800096a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800096e:	d90d      	bls.n	800098c <__aeabi_f2iz+0x30>
 8000970:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000978:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097c:	fa23 f002 	lsr.w	r0, r3, r2
 8000980:	bf18      	it	ne
 8000982:	4240      	negne	r0, r0
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr
 800098c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000990:	d101      	bne.n	8000996 <__aeabi_f2iz+0x3a>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d105      	bne.n	80009a2 <__aeabi_f2iz+0x46>
 8000996:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800099a:	bf08      	it	eq
 800099c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	4770      	bx	lr

080009a8 <OLED_WriteCommand>:
uint8_t dataBuf1[8][129]={0};
uint8_t dataBuf2[8][129]={0};
uint8_t CommandBuffer[2]={0x00};

void OLED_WriteCommand(uint8_t cmd)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	CommandBuffer[1]=cmd;
 80009b2:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <OLED_WriteCommand+0x2c>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, CommandBuffer, 2, HAL_MAX_DELAY);
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2302      	movs	r3, #2
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <OLED_WriteCommand+0x2c>)
 80009c2:	2178      	movs	r1, #120	@ 0x78
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <OLED_WriteCommand+0x30>)
 80009c6:	f003 f821 	bl	8003a0c <HAL_I2C_Master_Transmit>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200018c0 	.word	0x200018c0
 80009d8:	20001a8c 	.word	0x20001a8c

080009dc <OLED_SetCursor>:
	sendBuffer[1]=dat;
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
}

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffd7 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffce 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ffc7 	bl	80009a8 <OLED_WriteCommand>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <OLED_init>:

void OLED_init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af02      	add	r7, sp, #8
	HAL_Delay(100);
 8000a2a:	2064      	movs	r0, #100	@ 0x64
 8000a2c:	f001 fcc2 	bl	80023b4 <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 8000a30:	20ae      	movs	r0, #174	@ 0xae
 8000a32:	f7ff ffb9 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 8000a36:	20d5      	movs	r0, #213	@ 0xd5
 8000a38:	f7ff ffb6 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 8000a3c:	2080      	movs	r0, #128	@ 0x80
 8000a3e:	f7ff ffb3 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 8000a42:	20a8      	movs	r0, #168	@ 0xa8
 8000a44:	f7ff ffb0 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 8000a48:	203f      	movs	r0, #63	@ 0x3f
 8000a4a:	f7ff ffad 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 8000a4e:	20d3      	movs	r0, #211	@ 0xd3
 8000a50:	f7ff ffaa 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffa7 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 8000a5a:	2040      	movs	r0, #64	@ 0x40
 8000a5c:	f7ff ffa4 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000a60:	20a1      	movs	r0, #161	@ 0xa1
 8000a62:	f7ff ffa1 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 8000a66:	20c8      	movs	r0, #200	@ 0xc8
 8000a68:	f7ff ff9e 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000a6c:	20da      	movs	r0, #218	@ 0xda
 8000a6e:	f7ff ff9b 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000a72:	2012      	movs	r0, #18
 8000a74:	f7ff ff98 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 8000a78:	2081      	movs	r0, #129	@ 0x81
 8000a7a:	f7ff ff95 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8000a7e:	20cf      	movs	r0, #207	@ 0xcf
 8000a80:	f7ff ff92 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8000a84:	20d9      	movs	r0, #217	@ 0xd9
 8000a86:	f7ff ff8f 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000a8a:	20f1      	movs	r0, #241	@ 0xf1
 8000a8c:	f7ff ff8c 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000a90:	20db      	movs	r0, #219	@ 0xdb
 8000a92:	f7ff ff89 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8000a96:	2030      	movs	r0, #48	@ 0x30
 8000a98:	f7ff ff86 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000a9c:	20a4      	movs	r0, #164	@ 0xa4
 8000a9e:	f7ff ff83 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8000aa2:	20a6      	movs	r0, #166	@ 0xa6
 8000aa4:	f7ff ff80 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000aa8:	208d      	movs	r0, #141	@ 0x8d
 8000aaa:	f7ff ff7d 	bl	80009a8 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000aae:	2014      	movs	r0, #20
 8000ab0:	f7ff ff7a 	bl	80009a8 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000ab4:	20af      	movs	r0, #175	@ 0xaf
 8000ab6:	f7ff ff77 	bl	80009a8 <OLED_WriteCommand>
	for (uint8_t i = 0; i < 8; ++i)
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e012      	b.n	8000ae6 <OLED_init+0xc2>
	{
		dataBuf1[i][0]=0x40;
 8000ac0:	79fa      	ldrb	r2, [r7, #7]
 8000ac2:	4923      	ldr	r1, [pc, #140]	@ (8000b50 <OLED_init+0x12c>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	01db      	lsls	r3, r3, #7
 8000ac8:	4413      	add	r3, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	2240      	movs	r2, #64	@ 0x40
 8000ace:	701a      	strb	r2, [r3, #0]
		dataBuf2[i][0]=0x40;
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	4920      	ldr	r1, [pc, #128]	@ (8000b54 <OLED_init+0x130>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	01db      	lsls	r3, r3, #7
 8000ad8:	4413      	add	r3, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	2240      	movs	r2, #64	@ 0x40
 8000ade:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; ++i)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	d9e9      	bls.n	8000ac0 <OLED_init+0x9c>
	}
	OLED_chear();
 8000aec:	f000 f838 	bl	8000b60 <OLED_chear>
	for (uint8_t i = 0; i < 8; ++i)
 8000af0:	2300      	movs	r3, #0
 8000af2:	71bb      	strb	r3, [r7, #6]
 8000af4:	e024      	b.n	8000b40 <OLED_init+0x11c>
	{
		OLED_SetCursor(i, 0);
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff6e 	bl	80009dc <OLED_SetCursor>
		memcpy( (&dataBuf1[i][0])+1, DisplayBuf1[i], 128);
 8000b00:	79ba      	ldrb	r2, [r7, #6]
 8000b02:	4613      	mov	r3, r2
 8000b04:	01db      	lsls	r3, r3, #7
 8000b06:	4413      	add	r3, r2
 8000b08:	4a11      	ldr	r2, [pc, #68]	@ (8000b50 <OLED_init+0x12c>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	1c58      	adds	r0, r3, #1
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	01db      	lsls	r3, r3, #7
 8000b12:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <OLED_init+0x134>)
 8000b14:	4413      	add	r3, r2
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f008 feaf 	bl	800987c <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, &dataBuf1[i][0], 129, HAL_MAX_DELAY);
 8000b1e:	79ba      	ldrb	r2, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	01db      	lsls	r3, r3, #7
 8000b24:	4413      	add	r3, r2
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <OLED_init+0x12c>)
 8000b28:	441a      	add	r2, r3
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2381      	movs	r3, #129	@ 0x81
 8000b32:	2178      	movs	r1, #120	@ 0x78
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <OLED_init+0x138>)
 8000b36:	f002 ff69 	bl	8003a0c <HAL_I2C_Master_Transmit>
	for (uint8_t i = 0; i < 8; ++i)
 8000b3a:	79bb      	ldrb	r3, [r7, #6]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	71bb      	strb	r3, [r7, #6]
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d9d7      	bls.n	8000af6 <OLED_init+0xd2>
	}
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200010b0 	.word	0x200010b0
 8000b54:	200014b8 	.word	0x200014b8
 8000b58:	200008b0 	.word	0x200008b0
 8000b5c:	20001a8c 	.word	0x20001a8c

08000b60 <OLED_chear>:

void OLED_chear(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	e013      	b.n	8000b94 <OLED_chear+0x34>
	{
//		OLED_SetCursor(i, 0);
		for (int j = 0; j < 128; ++j)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	e00a      	b.n	8000b88 <OLED_chear+0x28>
		{
//			OLED_WriteData(0x00);
			DisplayBuf1[i][j] = 0x00;
 8000b72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <OLED_chear+0x48>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	01db      	lsls	r3, r3, #7
 8000b78:	441a      	add	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; ++j)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b8c:	ddf1      	ble.n	8000b72 <OLED_chear+0x12>
	for (int i = 0; i < 8; ++i)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	dde8      	ble.n	8000b6c <OLED_chear+0xc>
		}
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200008b0 	.word	0x200008b0

08000bac <OLED_updata>:

void OLED_updata()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 8; ++i)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	e020      	b.n	8000bfa <OLED_updata+0x4e>
	{
		memcpy( (&dataBuf1[i][0])+1, DisplayBuf1[i], 128);
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	01db      	lsls	r3, r3, #7
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c80 <OLED_updata+0xd4>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	1c58      	adds	r0, r3, #1
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	01db      	lsls	r3, r3, #7
 8000bca:	4a2e      	ldr	r2, [pc, #184]	@ (8000c84 <OLED_updata+0xd8>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f008 fe53 	bl	800987c <memcpy>
		memcpy( (&dataBuf2[i][0])+1, DisplayBuf2[i], 128);
 8000bd6:	79fa      	ldrb	r2, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	01db      	lsls	r3, r3, #7
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a2a      	ldr	r2, [pc, #168]	@ (8000c88 <OLED_updata+0xdc>)
 8000be0:	4413      	add	r3, r2
 8000be2:	1c58      	adds	r0, r3, #1
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	01db      	lsls	r3, r3, #7
 8000be8:	4a28      	ldr	r2, [pc, #160]	@ (8000c8c <OLED_updata+0xe0>)
 8000bea:	4413      	add	r3, r2
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f008 fe44 	bl	800987c <memcpy>
	for (uint8_t i = 0; i < 8; ++i)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	d9db      	bls.n	8000bb8 <OLED_updata+0xc>
	}
	for (uint8_t i = 0; i < 8; ++i)
 8000c00:	2300      	movs	r3, #0
 8000c02:	71bb      	strb	r3, [r7, #6]
 8000c04:	e034      	b.n	8000c70 <OLED_updata+0xc4>
	{
		if(memcmp(&dataBuf1[i][0],&dataBuf2[i][0],129) != 0)
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	01db      	lsls	r3, r3, #7
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c80 <OLED_updata+0xd4>)
 8000c10:	1898      	adds	r0, r3, r2
 8000c12:	79ba      	ldrb	r2, [r7, #6]
 8000c14:	4613      	mov	r3, r2
 8000c16:	01db      	lsls	r3, r3, #7
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <OLED_updata+0xdc>)
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2281      	movs	r2, #129	@ 0x81
 8000c20:	4619      	mov	r1, r3
 8000c22:	f008 fd91 	bl	8009748 <memcmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d01e      	beq.n	8000c6a <OLED_updata+0xbe>
		{
			OLED_SetCursor(i, 0);
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fed3 	bl	80009dc <OLED_SetCursor>
			HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, &dataBuf1[i][0], 129, HAL_MAX_DELAY);
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	01db      	lsls	r3, r3, #7
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <OLED_updata+0xd4>)
 8000c40:	441a      	add	r2, r3
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2381      	movs	r3, #129	@ 0x81
 8000c4a:	2178      	movs	r1, #120	@ 0x78
 8000c4c:	4810      	ldr	r0, [pc, #64]	@ (8000c90 <OLED_updata+0xe4>)
 8000c4e:	f002 fedd 	bl	8003a0c <HAL_I2C_Master_Transmit>
			memcpy(DisplayBuf2[i], DisplayBuf1[i], 128);
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	01db      	lsls	r3, r3, #7
 8000c56:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <OLED_updata+0xe0>)
 8000c58:	1898      	adds	r0, r3, r2
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	01db      	lsls	r3, r3, #7
 8000c5e:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <OLED_updata+0xd8>)
 8000c60:	4413      	add	r3, r2
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	4619      	mov	r1, r3
 8000c66:	f008 fe09 	bl	800987c <memcpy>
	for (uint8_t i = 0; i < 8; ++i)
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	71bb      	strb	r3, [r7, #6]
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9c7      	bls.n	8000c06 <OLED_updata+0x5a>
		}
	}
}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200010b0 	.word	0x200010b0
 8000c84:	200008b0 	.word	0x200008b0
 8000c88:	200014b8 	.word	0x200014b8
 8000c8c:	20000cb0 	.word	0x20000cb0
 8000c90:	20001a8c 	.word	0x20001a8c

08000c94 <OLED_showChar>:
		--Y;
	}
}

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71bb      	strb	r3, [r7, #6]
 8000caa:	460b      	mov	r3, r1
 8000cac:	717b      	strb	r3, [r7, #5]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe8f 	bl	80009dc <OLED_SetCursor>
	if (fontSize == 8)
 8000cbe:	793b      	ldrb	r3, [r7, #4]
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d10c      	bne.n	8000cde <OLED_showChar+0x4a>
	{
		OLED_showImage(Page, X, 8, 2, EN8_16[ a - ' ' ]);
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	3b20      	subs	r3, #32
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <OLED_showChar+0x78>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	79b9      	ldrb	r1, [r7, #6]
 8000cd0:	79f8      	ldrb	r0, [r7, #7]
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	f000 f84a 	bl	8000d70 <OLED_showImage>
	}
	else if (fontSize == 6)
	{
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
	}
}
 8000cdc:	e012      	b.n	8000d04 <OLED_showChar+0x70>
	else if (fontSize == 6)
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d10f      	bne.n	8000d04 <OLED_showChar+0x70>
		OLED_showImage(Page, X, 6, 1, EN6_8[ a - ' ' ]);
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	f1a3 0220 	sub.w	r2, r3, #32
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <OLED_showChar+0x7c>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	79b9      	ldrb	r1, [r7, #6]
 8000cf8:	79f8      	ldrb	r0, [r7, #7]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	2206      	movs	r2, #6
 8000d00:	f000 f836 	bl	8000d70 <OLED_showImage>
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	200005f0 	.word	0x200005f0

08000d14 <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	603a      	str	r2, [r7, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	460b      	mov	r3, r1
 8000d24:	71bb      	strb	r3, [r7, #6]
 8000d26:	4613      	mov	r3, r2
 8000d28:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e013      	b.n	8000d58 <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	797a      	ldrb	r2, [r7, #5]
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2d9      	uxtb	r1, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	79f8      	ldrb	r0, [r7, #7]
 8000d4e:	f7ff ffa1 	bl	8000c94 <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1e5      	bne.n	8000d30 <OLED_showString+0x1c>
	}
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <OLED_showImage>:

void OLED_showImage(uint8_t Page, uint8_t X, uint8_t Width, uint8_t Height,uint8_t *Image)
{
 8000d70:	b490      	push	{r4, r7}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	4603      	mov	r3, r0
 8000d84:	71bb      	strb	r3, [r7, #6]
 8000d86:	460b      	mov	r3, r1
 8000d88:	717b      	strb	r3, [r7, #5]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	713b      	strb	r3, [r7, #4]
	for (int j = 0; j < Height; ++j)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e022      	b.n	8000dda <OLED_showImage+0x6a>
	{
//		OLED_SetCursor( Page+j , X);
		for (int i = 0; i < Width; ++i)
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	e018      	b.n	8000dcc <OLED_showImage+0x5c>
		{
//			OLED_WriteData(Image[Width*j+i]);
			DisplayBuf1[Page+j][X+i] = Image[Width*j+i];
 8000d9a:	797b      	ldrb	r3, [r7, #5]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	fb03 f202 	mul.w	r2, r3, r2
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	461a      	mov	r2, r3
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	1899      	adds	r1, r3, r2
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	441a      	add	r2, r3
 8000db2:	79b8      	ldrb	r0, [r7, #6]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4403      	add	r3, r0
 8000db8:	7808      	ldrb	r0, [r1, #0]
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <OLED_showImage+0x80>)
 8000dbc:	01d2      	lsls	r2, r2, #7
 8000dbe:	440a      	add	r2, r1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < Width; ++i)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbe2      	blt.n	8000d9a <OLED_showImage+0x2a>
	for (int j = 0; j < Height; ++j)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dbd8      	blt.n	8000d94 <OLED_showImage+0x24>
		}
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc90      	pop	{r4, r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200008b0 	.word	0x200008b0

08000df4 <OLED_showNUM>:
		if(Chinese[pointAllChinese]==0x00){break;}
	}
}

void OLED_showNUM(uint8_t Page, uint8_t X, uint32_t num, uint8_t fontSize)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	603a      	str	r2, [r7, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	460b      	mov	r3, r1
 8000e04:	71bb      	strb	r3, [r7, #6]
 8000e06:	4613      	mov	r3, r2
 8000e08:	717b      	strb	r3, [r7, #5]
	char buffer[10];
	sprintf(buffer, "%lu   ", num);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4907      	ldr	r1, [pc, #28]	@ (8000e30 <OLED_showNUM+0x3c>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 fc78 	bl	8009708 <siprintf>
	OLED_showString(Page, X, buffer, fontSize);
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	f107 020c 	add.w	r2, r7, #12
 8000e1e:	79b9      	ldrb	r1, [r7, #6]
 8000e20:	79f8      	ldrb	r0, [r7, #7]
 8000e22:	f7ff ff77 	bl	8000d14 <OLED_showString>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	0800a150 	.word	0x0800a150

08000e34 <OLED_showSignedNUM>:

void OLED_showSignedNUM(uint8_t Page, uint8_t X, int32_t num, uint8_t fontSize)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	603a      	str	r2, [r7, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	460b      	mov	r3, r1
 8000e44:	71bb      	strb	r3, [r7, #6]
 8000e46:	4613      	mov	r3, r2
 8000e48:	717b      	strb	r3, [r7, #5]
	char buffer[11];
	sprintf(buffer, "%ld ", num);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4907      	ldr	r1, [pc, #28]	@ (8000e70 <OLED_showSignedNUM+0x3c>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f008 fc58 	bl	8009708 <siprintf>
	OLED_showString(Page, X, buffer, fontSize);
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	f107 020c 	add.w	r2, r7, #12
 8000e5e:	79b9      	ldrb	r1, [r7, #6]
 8000e60:	79f8      	ldrb	r0, [r7, #7]
 8000e62:	f7ff ff57 	bl	8000d14 <OLED_showString>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	0800a158 	.word	0x0800a158

08000e74 <motorSet>:
 */

#include "motor.h"

void motorSet(uint8_t motor, uint8_t dir, uint16_t speed)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	71bb      	strb	r3, [r7, #6]
 8000e82:	4613      	mov	r3, r2
 8000e84:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState in1 = GPIO_PIN_RESET, in2 = GPIO_PIN_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73bb      	strb	r3, [r7, #14]
	switch(dir)
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d81f      	bhi.n	8000ed6 <motorSet+0x62>
 8000e96:	a201      	add	r2, pc, #4	@ (adr r2, 8000e9c <motorSet+0x28>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ead 	.word	0x08000ead
 8000ea0:	08000eb7 	.word	0x08000eb7
 8000ea4:	08000ec1 	.word	0x08000ec1
 8000ea8:	08000ecb 	.word	0x08000ecb
	{
		case MOTOR_FORWARD:
			in1 = GPIO_PIN_RESET;//0
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_SET;//1
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73bb      	strb	r3, [r7, #14]
			break;
 8000eb4:	e00f      	b.n	8000ed6 <motorSet+0x62>
		case MOTOR_BACKWARD:
			in1 = GPIO_PIN_SET;//1
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_RESET;//0
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73bb      	strb	r3, [r7, #14]
			break;
 8000ebe:	e00a      	b.n	8000ed6 <motorSet+0x62>
		case MOTOR_BREAK:
			in1 = GPIO_PIN_SET;//0
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_SET;//1
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73bb      	strb	r3, [r7, #14]
			break;
 8000ec8:	e005      	b.n	8000ed6 <motorSet+0x62>
		case MOTOR_STOP:
			in1 = GPIO_PIN_RESET;//0
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
			in2 = GPIO_PIN_RESET;//0
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73bb      	strb	r3, [r7, #14]
			speed = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	80bb      	strh	r3, [r7, #4]
	}
	if(motor == MOTOR_A)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10d      	bne.n	8000ef8 <motorSet+0x84>
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, in1);
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <motorSet+0xb8>)
 8000ee6:	f002 fc34 	bl	8003752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, in2);
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	461a      	mov	r2, r3
 8000eee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef2:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <motorSet+0xb8>)
 8000ef4:	f002 fc2d 	bl	8003752 <HAL_GPIO_WritePin>
		//__HAL_TIM_SET_COMPARE(MOTOR_PWM_TIM, TIM_CHANNEL_1, speed);
	}
	if(motor == MOTOR_B)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d10d      	bne.n	8000f1a <motorSet+0xa6>
	{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, in1);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	461a      	mov	r2, r3
 8000f02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f06:	4809      	ldr	r0, [pc, #36]	@ (8000f2c <motorSet+0xb8>)
 8000f08:	f002 fc23 	bl	8003752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, in2);
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <motorSet+0xb8>)
 8000f16:	f002 fc1c 	bl	8003752 <HAL_GPIO_WritePin>
		//__HAL_TIM_SET_COMPARE(MOTOR_PWM_TIM, TIM_CHANNEL_2, speed);
	}
	Set_PWM_DutyCycle(speed);
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f807 	bl	8000f30 <Set_PWM_DutyCycle>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <Set_PWM_DutyCycle>:

void Set_PWM_DutyCycle(uint16_t duty)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
    // 参数限制：1~3600
    if (duty < 1) duty = 1;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <Set_PWM_DutyCycle+0x14>
 8000f40:	2301      	movs	r3, #1
 8000f42:	80fb      	strh	r3, [r7, #6]
    if (duty > 3600) duty = 3600;
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000f4a:	d902      	bls.n	8000f52 <Set_PWM_DutyCycle+0x22>
 8000f4c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8000f50:	80fb      	strh	r3, [r7, #6]

    // 更新CCR
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <Set_PWM_DutyCycle+0x34>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20001b74 	.word	0x20001b74

08000f68 <HAL_ADC_ConvCpltCallback>:
extern float kp,ki,kd;
extern int SetSpeed;
extern osSemaphoreId_t OLEDupdateSemHandle;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2c      	ldr	r2, [pc, #176]	@ (8001028 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d152      	bne.n	8001020 <HAL_ADC_ConvCpltCallback+0xb8>
	{
//		if(RPValue[0]&&RPValue[1]&&RPValue[2]&&RPValue[3])return;
		for (uint8_t i = 0; i < 4; ++i) {RPValue[i]/=128;}
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e00c      	b.n	8000f9a <HAL_ADC_ConvCpltCallback+0x32>
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000f84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	09d2      	lsrs	r2, r2, #7
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	4a27      	ldr	r2, [pc, #156]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d9ef      	bls.n	8000f80 <HAL_ADC_ConvCpltCallback+0x18>
		kp=RPValue[3];
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000fa2:	88db      	ldrh	r3, [r3, #6]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fc81 	bl	80008ac <__aeabi_ui2f>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000fae:	6013      	str	r3, [r2, #0]
		ki=RPValue[0];
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fc79 	bl	80008ac <__aeabi_ui2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000fbe:	6013      	str	r3, [r2, #0]
		kd=RPValue[1];
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000fc2:	885b      	ldrh	r3, [r3, #2]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fc71 	bl	80008ac <__aeabi_ui2f>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000fce:	6013      	str	r3, [r2, #0]
		SetSpeed=RPValue[2]*128/88;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	01db      	lsls	r3, r3, #7
 8000fd6:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_ADC_ConvCpltCallback+0xd4>)
 8000fd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fdc:	1112      	asrs	r2, r2, #4
 8000fde:	17db      	asrs	r3, r3, #31
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fe4:	6013      	str	r3, [r2, #0]
		OLED_showNUM(2, 0, RPValue[3], 8);//RP1
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	461a      	mov	r2, r3
 8000fec:	2308      	movs	r3, #8
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f7ff feff 	bl	8000df4 <OLED_showNUM>
		OLED_showNUM(4, 0, RPValue[0], 8);//RP2
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	2100      	movs	r1, #0
 8001000:	2004      	movs	r0, #4
 8001002:	f7ff fef7 	bl	8000df4 <OLED_showNUM>
		OLED_showNUM(6, 0, RPValue[1], 8);//RP3
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_ADC_ConvCpltCallback+0xc4>)
 8001008:	885b      	ldrh	r3, [r3, #2]
 800100a:	461a      	mov	r2, r3
 800100c:	2308      	movs	r3, #8
 800100e:	2100      	movs	r1, #0
 8001010:	2006      	movs	r0, #6
 8001012:	f7ff feef 	bl	8000df4 <OLED_showNUM>
//		OLED_showNUM(6, 0, RPValue[2], 8);//RP4
		osSemaphoreRelease (OLEDupdateSemHandle);
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f005 fabc 	bl	8006598 <osSemaphoreRelease>
	}
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40012400 	.word	0x40012400
 800102c:	20001968 	.word	0x20001968
 8001030:	2000082c 	.word	0x2000082c
 8001034:	20000830 	.word	0x20000830
 8001038:	20001a48 	.word	0x20001a48
 800103c:	2e8ba2e9 	.word	0x2e8ba2e9
 8001040:	20001978 	.word	0x20001978
 8001044:	20001a80 	.word	0x20001a80

08001048 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <MX_ADC1_Init+0xcc>)
 800105a:	4a2f      	ldr	r2, [pc, #188]	@ (8001118 <MX_ADC1_Init+0xd0>)
 800105c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800105e:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <MX_ADC1_Init+0xcc>)
 8001060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <MX_ADC1_Init+0xcc>)
 8001068:	2200      	movs	r2, #0
 800106a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <MX_ADC1_Init+0xcc>)
 800106e:	2200      	movs	r2, #0
 8001070:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <MX_ADC1_Init+0xcc>)
 8001074:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001078:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_ADC1_Init+0xcc>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <MX_ADC1_Init+0xcc>)
 8001082:	2204      	movs	r2, #4
 8001084:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001086:	4823      	ldr	r0, [pc, #140]	@ (8001114 <MX_ADC1_Init+0xcc>)
 8001088:	f001 f9b8 	bl	80023fc <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001092:	f000 fdd5 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001096:	2302      	movs	r3, #2
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	481b      	ldr	r0, [pc, #108]	@ (8001114 <MX_ADC1_Init+0xcc>)
 80010a8:	f001 fc38 	bl	800291c <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010b2:	f000 fdc5 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b6:	2303      	movs	r3, #3
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_ADC1_Init+0xcc>)
 80010c4:	f001 fc2a 	bl	800291c <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010ce:	f000 fdb7 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010d6:	2303      	movs	r3, #3
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_ADC1_Init+0xcc>)
 80010e0:	f001 fc1c 	bl	800291c <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010ea:	f000 fda9 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010ee:	2305      	movs	r3, #5
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_ADC1_Init+0xcc>)
 80010fc:	f001 fc0e 	bl	800291c <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001106:	f000 fd9b 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200018c4 	.word	0x200018c4
 8001118:	40012400 	.word	0x40012400

0800111c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_ADC2_Init+0x74>)
 800112e:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <MX_ADC2_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001132:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_ADC2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001146:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800114a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_ADC2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC2_Init+0x74>)
 800115a:	f001 f94f 	bl	80023fc <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 fd6c 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001168:	2308      	movs	r3, #8
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_ADC2_Init+0x74>)
 800117a:	f001 fbcf 	bl	800291c <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001184:	f000 fd5c 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200018f4 	.word	0x200018f4
 8001194:	40012800 	.word	0x40012800

08001198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <HAL_ADC_MspInit+0x12c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d152      	bne.n	800125e <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b8:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a42      	ldr	r2, [pc, #264]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b40      	ldr	r3, [pc, #256]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a3c      	ldr	r2, [pc, #240]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RP1_Pin|RP2_Pin|RP4_Pin|RP5_Pin;
 80011e8:	233c      	movs	r3, #60	@ 0x3c
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4835      	ldr	r0, [pc, #212]	@ (80012cc <HAL_ADC_MspInit+0x134>)
 80011f8:	f002 f910 	bl	800341c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011fc:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 80011fe:	4a35      	ldr	r2, [pc, #212]	@ (80012d4 <HAL_ADC_MspInit+0x13c>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001210:	2280      	movs	r2, #128	@ 0x80
 8001212:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001214:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800121a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121c:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800121e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001222:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001224:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001230:	4827      	ldr	r0, [pc, #156]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001232:	f001 ff05 	bl	8003040 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800123c:	f000 fd00 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a23      	ldr	r2, [pc, #140]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001244:	621a      	str	r2, [r3, #32]
 8001246:	4a22      	ldr	r2, [pc, #136]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2105      	movs	r1, #5
 8001250:	2012      	movs	r0, #18
 8001252:	f001 feca 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001256:	2012      	movs	r0, #18
 8001258:	f001 fee3 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800125c:	e02e      	b.n	80012bc <HAL_ADC_MspInit+0x124>
  else if(adcHandle->Instance==ADC2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <HAL_ADC_MspInit+0x140>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d129      	bne.n	80012bc <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a16      	ldr	r2, [pc, #88]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Sensor1_Pin;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <HAL_ADC_MspInit+0x144>)
 80012a8:	f002 f8b8 	bl	800341c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	2012      	movs	r0, #18
 80012b2:	f001 fe9a 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012b6:	2012      	movs	r0, #18
 80012b8:	f001 feb3 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	@ 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012400 	.word	0x40012400
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	20001924 	.word	0x20001924
 80012d4:	40020008 	.word	0x40020008
 80012d8:	40012800 	.word	0x40012800
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_DMA_Init+0x38>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <MX_DMA_Init+0x38>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_DMA_Init+0x38>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	200b      	movs	r0, #11
 8001304:	f001 fe71 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001308:	200b      	movs	r0, #11
 800130a:	f001 fe8a 	bl	8003022 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of OLEDupdateSem */
  OLEDupdateSemHandle = osSemaphoreNew(1, 1, &OLEDupdateSem_attributes);
 8001320:	4a2c      	ldr	r2, [pc, #176]	@ (80013d4 <MX_FREERTOS_Init+0xb8>)
 8001322:	2101      	movs	r1, #1
 8001324:	2001      	movs	r0, #1
 8001326:	f005 f85c 	bl	80063e2 <osSemaphoreNew>
 800132a:	4603      	mov	r3, r0
 800132c:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <MX_FREERTOS_Init+0xbc>)
 800132e:	6013      	str	r3, [r2, #0]

  /* creation of PIDupdateSem */
  PIDupdateSemHandle = osSemaphoreNew(1, 1, &PIDupdateSem_attributes);
 8001330:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <MX_FREERTOS_Init+0xc0>)
 8001332:	2101      	movs	r1, #1
 8001334:	2001      	movs	r0, #1
 8001336:	f005 f854 	bl	80063e2 <osSemaphoreNew>
 800133a:	4603      	mov	r3, r0
 800133c:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <MX_FREERTOS_Init+0xc4>)
 800133e:	6013      	str	r3, [r2, #0]

  /* creation of MotorUpdateSem */
  MotorUpdateSemHandle = osSemaphoreNew(1, 1, &MotorUpdateSem_attributes);
 8001340:	4a28      	ldr	r2, [pc, #160]	@ (80013e4 <MX_FREERTOS_Init+0xc8>)
 8001342:	2101      	movs	r1, #1
 8001344:	2001      	movs	r0, #1
 8001346:	f005 f84c 	bl	80063e2 <osSemaphoreNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a26      	ldr	r2, [pc, #152]	@ (80013e8 <MX_FREERTOS_Init+0xcc>)
 800134e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001350:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <MX_FREERTOS_Init+0xd0>)
 8001352:	2100      	movs	r1, #0
 8001354:	4826      	ldr	r0, [pc, #152]	@ (80013f0 <MX_FREERTOS_Init+0xd4>)
 8001356:	f004 ff97 	bl	8006288 <osThreadNew>
 800135a:	4603      	mov	r3, r0
 800135c:	4a25      	ldr	r2, [pc, #148]	@ (80013f4 <MX_FREERTOS_Init+0xd8>)
 800135e:	6013      	str	r3, [r2, #0]

  /* creation of OLEDupdateTask */
  OLEDupdateTaskHandle = osThreadNew(StartOLEDupdateTask, NULL, &OLEDupdateTask_attributes);
 8001360:	4a25      	ldr	r2, [pc, #148]	@ (80013f8 <MX_FREERTOS_Init+0xdc>)
 8001362:	2100      	movs	r1, #0
 8001364:	4825      	ldr	r0, [pc, #148]	@ (80013fc <MX_FREERTOS_Init+0xe0>)
 8001366:	f004 ff8f 	bl	8006288 <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a24      	ldr	r2, [pc, #144]	@ (8001400 <MX_FREERTOS_Init+0xe4>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of ReadADCTask */
  ReadADCTaskHandle = osThreadNew(StartReadADCTask, NULL, &ReadADCTask_attributes);
 8001370:	4a24      	ldr	r2, [pc, #144]	@ (8001404 <MX_FREERTOS_Init+0xe8>)
 8001372:	2100      	movs	r1, #0
 8001374:	4824      	ldr	r0, [pc, #144]	@ (8001408 <MX_FREERTOS_Init+0xec>)
 8001376:	f004 ff87 	bl	8006288 <osThreadNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a23      	ldr	r2, [pc, #140]	@ (800140c <MX_FREERTOS_Init+0xf0>)
 800137e:	6013      	str	r3, [r2, #0]

  /* creation of SstMotorTask */
  SstMotorTaskHandle = osThreadNew(StartSstMotorTask, NULL, &SstMotorTask_attributes);
 8001380:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <MX_FREERTOS_Init+0xf4>)
 8001382:	2100      	movs	r1, #0
 8001384:	4823      	ldr	r0, [pc, #140]	@ (8001414 <MX_FREERTOS_Init+0xf8>)
 8001386:	f004 ff7f 	bl	8006288 <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <MX_FREERTOS_Init+0xfc>)
 800138e:	6013      	str	r3, [r2, #0]

  /* creation of USART1Task */
  USART1TaskHandle = osThreadNew(StartUSART1Task, NULL, &USART1Task_attributes);
 8001390:	4a22      	ldr	r2, [pc, #136]	@ (800141c <MX_FREERTOS_Init+0x100>)
 8001392:	2100      	movs	r1, #0
 8001394:	4822      	ldr	r0, [pc, #136]	@ (8001420 <MX_FREERTOS_Init+0x104>)
 8001396:	f004 ff77 	bl	8006288 <osThreadNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <MX_FREERTOS_Init+0x108>)
 800139e:	6013      	str	r3, [r2, #0]

  /* creation of PIDupdateTask */
  PIDupdateTaskHandle = osThreadNew(StartPIDupdateTask, NULL, &PIDupdateTask_attributes);
 80013a0:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <MX_FREERTOS_Init+0x10c>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4821      	ldr	r0, [pc, #132]	@ (800142c <MX_FREERTOS_Init+0x110>)
 80013a6:	f004 ff6f 	bl	8006288 <osThreadNew>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <MX_FREERTOS_Init+0x114>)
 80013ae:	6013      	str	r3, [r2, #0]

  /* creation of GetEncoderTask */
  GetEncoderTaskHandle = osThreadNew(StartGetEncoderTask, NULL, &GetEncoderTask_attributes);
 80013b0:	4a20      	ldr	r2, [pc, #128]	@ (8001434 <MX_FREERTOS_Init+0x118>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4820      	ldr	r0, [pc, #128]	@ (8001438 <MX_FREERTOS_Init+0x11c>)
 80013b6:	f004 ff67 	bl	8006288 <osThreadNew>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <MX_FREERTOS_Init+0x120>)
 80013be:	6013      	str	r3, [r2, #0]

  /* creation of CopeKeyTask */
  CopeKeyTaskHandle = osThreadNew(StartCopeKeyTask, NULL, &CopeKeyTask_attributes);
 80013c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <MX_FREERTOS_Init+0x124>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	481f      	ldr	r0, [pc, #124]	@ (8001444 <MX_FREERTOS_Init+0x128>)
 80013c6:	f004 ff5f 	bl	8006288 <osThreadNew>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001448 <MX_FREERTOS_Init+0x12c>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	0800a344 	.word	0x0800a344
 80013d8:	20001a80 	.word	0x20001a80
 80013dc:	0800a354 	.word	0x0800a354
 80013e0:	20001a84 	.word	0x20001a84
 80013e4:	0800a364 	.word	0x0800a364
 80013e8:	20001a88 	.word	0x20001a88
 80013ec:	0800a224 	.word	0x0800a224
 80013f0:	0800144d 	.word	0x0800144d
 80013f4:	20001a60 	.word	0x20001a60
 80013f8:	0800a248 	.word	0x0800a248
 80013fc:	0800145d 	.word	0x0800145d
 8001400:	20001a64 	.word	0x20001a64
 8001404:	0800a26c 	.word	0x0800a26c
 8001408:	08001485 	.word	0x08001485
 800140c:	20001a68 	.word	0x20001a68
 8001410:	0800a290 	.word	0x0800a290
 8001414:	080014a9 	.word	0x080014a9
 8001418:	20001a6c 	.word	0x20001a6c
 800141c:	0800a2b4 	.word	0x0800a2b4
 8001420:	08001515 	.word	0x08001515
 8001424:	20001a70 	.word	0x20001a70
 8001428:	0800a2d8 	.word	0x0800a2d8
 800142c:	080015b1 	.word	0x080015b1
 8001430:	20001a74 	.word	0x20001a74
 8001434:	0800a2fc 	.word	0x0800a2fc
 8001438:	080016f1 	.word	0x080016f1
 800143c:	20001a78 	.word	0x20001a78
 8001440:	0800a320 	.word	0x0800a320
 8001444:	0800177d 	.word	0x0800177d
 8001448:	20001a7c 	.word	0x20001a7c

0800144c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f004 ffa9 	bl	80063ac <osDelay>
 800145a:	e7fb      	b.n	8001454 <StartDefaultTask+0x8>

0800145c <StartOLEDupdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDupdateTask */
void StartOLEDupdateTask(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDupdateTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(OLEDupdateSemHandle, 1000) == osOK)
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <StartOLEDupdateTask+0x24>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800146c:	4618      	mov	r0, r3
 800146e:	f005 f841 	bl	80064f4 <osSemaphoreAcquire>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f5      	bne.n	8001464 <StartOLEDupdateTask+0x8>
	  {
		  OLED_updata();
 8001478:	f7ff fb98 	bl	8000bac <OLED_updata>
	  if(osSemaphoreAcquire(OLEDupdateSemHandle, 1000) == osOK)
 800147c:	e7f2      	b.n	8001464 <StartOLEDupdateTask+0x8>
 800147e:	bf00      	nop
 8001480:	20001a80 	.word	0x20001a80

08001484 <StartReadADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadADCTask */
void StartReadADCTask(void *argument)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadADCTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 800148c:	2064      	movs	r0, #100	@ 0x64
 800148e:	f004 ff8d 	bl	80063ac <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)RPValue, 4);
 8001492:	2204      	movs	r2, #4
 8001494:	4902      	ldr	r1, [pc, #8]	@ (80014a0 <StartReadADCTask+0x1c>)
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <StartReadADCTask+0x20>)
 8001498:	f001 f888 	bl	80025ac <HAL_ADC_Start_DMA>
	  osDelay(100);
 800149c:	bf00      	nop
 800149e:	e7f5      	b.n	800148c <StartReadADCTask+0x8>
 80014a0:	20001968 	.word	0x20001968
 80014a4:	200018c4 	.word	0x200018c4

080014a8 <StartSstMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSstMotorTask */
void StartSstMotorTask(void *argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSstMotorTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(MotorUpdateSemHandle, 1000) == osOK)
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <StartSstMotorTask+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 f81b 	bl	80064f4 <osSemaphoreAcquire>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f5      	bne.n	80014b0 <StartSstMotorTask+0x8>
	  {
		  if(PWMOutPut==0){motorSet(MOTOR_A, MOTOR_BREAK, 0);}
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <StartSstMotorTask+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <StartSstMotorTask+0x2e>
 80014cc:	2200      	movs	r2, #0
 80014ce:	2103      	movs	r1, #3
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff fccf 	bl	8000e74 <motorSet>
		  if(PWMOutPut>0){motorSet(MOTOR_A, MOTOR_FORWARD, PWMOutPut);}
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <StartSstMotorTask+0x68>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	dd07      	ble.n	80014ee <StartSstMotorTask+0x46>
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <StartSstMotorTask+0x68>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fcc3 	bl	8000e74 <motorSet>
		  if(PWMOutPut<0){motorSet(MOTOR_A, MOTOR_BREAK, -PWMOutPut);}
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <StartSstMotorTask+0x68>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dadc      	bge.n	80014b0 <StartSstMotorTask+0x8>
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <StartSstMotorTask+0x68>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	425b      	negs	r3, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	2103      	movs	r1, #3
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fcb5 	bl	8000e74 <motorSet>
	  if (osSemaphoreAcquire(MotorUpdateSemHandle, 1000) == osOK)
 800150a:	e7d1      	b.n	80014b0 <StartSstMotorTask+0x8>
 800150c:	20001a88 	.word	0x20001a88
 8001510:	20001a58 	.word	0x20001a58

08001514 <StartUSART1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSART1Task */
void StartUSART1Task(void *argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSART1Task */
  /* Infinite loop */
  for(;;)
  {
//	  uint8_t UART_SetSpeedBuf[sizeof(int)],UART_RealSpeedBuf[sizeof(int)],UART_PWMOutPutBuf[sizeof(int)];
	  UART1SendBuf[0]=(float)SetSpeed;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <StartUSART1Task+0x7c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f9c7 	bl	80008b4 <__aeabi_i2f>
 8001526:	4603      	mov	r3, r0
 8001528:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <StartUSART1Task+0x80>)
 800152a:	6013      	str	r3, [r2, #0]
	  UART1SendBuf[1]=(float)RealSpeed;
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <StartUSART1Task+0x84>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f9bf 	bl	80008b4 <__aeabi_i2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <StartUSART1Task+0x80>)
 800153a:	6053      	str	r3, [r2, #4]
	  UART1SendBuf[2]=(float)(PWMOutPut/36);
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <StartUSART1Task+0x88>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <StartUSART1Task+0x8c>)
 8001542:	fb82 1203 	smull	r1, r2, r2, r3
 8001546:	10d2      	asrs	r2, r2, #3
 8001548:	17db      	asrs	r3, r3, #31
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f9b1 	bl	80008b4 <__aeabi_i2f>
 8001552:	4603      	mov	r3, r0
 8001554:	4a0f      	ldr	r2, [pc, #60]	@ (8001594 <StartUSART1Task+0x80>)
 8001556:	6093      	str	r3, [r2, #8]
	  UART1SendBuf[3]=(float)ErrorRealTime;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <StartUSART1Task+0x90>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f9a9 	bl	80008b4 <__aeabi_i2f>
 8001562:	4603      	mov	r3, r0
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <StartUSART1Task+0x80>)
 8001566:	60d3      	str	r3, [r2, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t*)UART1SendBuf, sizeof(float)*4, HAL_MAX_DELAY);
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	2210      	movs	r2, #16
 800156e:	4909      	ldr	r1, [pc, #36]	@ (8001594 <StartUSART1Task+0x80>)
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <StartUSART1Task+0x94>)
 8001572:	f004 fc29 	bl	8005dc8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, tail, 4, HAL_MAX_DELAY);
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	2204      	movs	r2, #4
 800157c:	490b      	ldr	r1, [pc, #44]	@ (80015ac <StartUSART1Task+0x98>)
 800157e:	480a      	ldr	r0, [pc, #40]	@ (80015a8 <StartUSART1Task+0x94>)
 8001580:	f004 fc22 	bl	8005dc8 <HAL_UART_Transmit>
	  osDelay(10);
 8001584:	200a      	movs	r0, #10
 8001586:	f004 ff11 	bl	80063ac <osDelay>
	  UART1SendBuf[0]=(float)SetSpeed;
 800158a:	bf00      	nop
 800158c:	e7c6      	b.n	800151c <StartUSART1Task+0x8>
 800158e:	bf00      	nop
 8001590:	20001978 	.word	0x20001978
 8001594:	20001980 	.word	0x20001980
 8001598:	2000197c 	.word	0x2000197c
 800159c:	20001a58 	.word	0x20001a58
 80015a0:	38e38e39 	.word	0x38e38e39
 80015a4:	20001a4c 	.word	0x20001a4c
 80015a8:	20001c04 	.word	0x20001c04
 80015ac:	0800a220 	.word	0x0800a220

080015b0 <StartPIDupdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDupdateTask */
void StartPIDupdateTask(void *argument)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIDupdateTask */
  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(PIDupdateSemHandle, 1000) == osOK)
 80015b8:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <StartPIDupdateTask+0x110>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 ff97 	bl	80064f4 <osSemaphoreAcquire>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f5      	bne.n	80015b8 <StartPIDupdateTask+0x8>
	{
		ErrorLast1Time=ErrorRealTime;
 80015cc:	4b3d      	ldr	r3, [pc, #244]	@ (80016c4 <StartPIDupdateTask+0x114>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a3d      	ldr	r2, [pc, #244]	@ (80016c8 <StartPIDupdateTask+0x118>)
 80015d2:	6013      	str	r3, [r2, #0]
		ErrorRealTime=SetSpeed-RealSpeed;
 80015d4:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <StartPIDupdateTask+0x11c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <StartPIDupdateTask+0x120>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4a39      	ldr	r2, [pc, #228]	@ (80016c4 <StartPIDupdateTask+0x114>)
 80015e0:	6013      	str	r3, [r2, #0]
		if (fabs(ki) > 0.001){ErrorInt+=ErrorRealTime;}
 80015e2:	4b3c      	ldr	r3, [pc, #240]	@ (80016d4 <StartPIDupdateTask+0x124>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffc8 	bl	8000580 <__aeabi_f2d>
 80015f0:	a331      	add	r3, pc, #196	@ (adr r3, 80016b8 <StartPIDupdateTask+0x108>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f899 	bl	800072c <__aeabi_dcmpgt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <StartPIDupdateTask+0x5e>
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <StartPIDupdateTask+0x128>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <StartPIDupdateTask+0x114>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4413      	add	r3, r2
 800160a:	4a33      	ldr	r2, [pc, #204]	@ (80016d8 <StartPIDupdateTask+0x128>)
 800160c:	6013      	str	r3, [r2, #0]
		PWMOutPut=kp*ErrorRealTime+ki*ErrorInt+kd*(ErrorRealTime-ErrorLast1Time);
 800160e:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <StartPIDupdateTask+0x114>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f94e 	bl	80008b4 <__aeabi_i2f>
 8001618:	4602      	mov	r2, r0
 800161a:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <StartPIDupdateTask+0x12c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f7fe fd95 	bl	8000150 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	461c      	mov	r4, r3
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <StartPIDupdateTask+0x128>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f940 	bl	80008b4 <__aeabi_i2f>
 8001634:	4602      	mov	r2, r0
 8001636:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <StartPIDupdateTask+0x124>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f7fe fd87 	bl	8000150 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	4619      	mov	r1, r3
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff f880 	bl	800074c <__addsf3>
 800164c:	4603      	mov	r3, r0
 800164e:	461c      	mov	r4, r3
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <StartPIDupdateTask+0x114>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <StartPIDupdateTask+0x118>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f92a 	bl	80008b4 <__aeabi_i2f>
 8001660:	4602      	mov	r2, r0
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <StartPIDupdateTask+0x130>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f7fe fd71 	bl	8000150 <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff f86a 	bl	800074c <__addsf3>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f96e 	bl	800095c <__aeabi_f2iz>
 8001680:	4603      	mov	r3, r0
 8001682:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <StartPIDupdateTask+0x134>)
 8001684:	6013      	str	r3, [r2, #0]
		if(PWMOutPut>3600){PWMOutPut=3600;}
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <StartPIDupdateTask+0x134>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800168e:	dd03      	ble.n	8001698 <StartPIDupdateTask+0xe8>
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <StartPIDupdateTask+0x134>)
 8001692:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001696:	601a      	str	r2, [r3, #0]
		if(PWMOutPut<-3600){PWMOutPut=-3600;}
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <StartPIDupdateTask+0x134>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80016a0:	da02      	bge.n	80016a8 <StartPIDupdateTask+0xf8>
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <StartPIDupdateTask+0x134>)
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <StartPIDupdateTask+0x138>)
 80016a6:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease (MotorUpdateSemHandle);
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <StartPIDupdateTask+0x13c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 ff73 	bl	8006598 <osSemaphoreRelease>
	if (osSemaphoreAcquire(PIDupdateSemHandle, 1000) == osOK)
 80016b2:	e781      	b.n	80015b8 <StartPIDupdateTask+0x8>
 80016b4:	f3af 8000 	nop.w
 80016b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016bc:	3f50624d 	.word	0x3f50624d
 80016c0:	20001a84 	.word	0x20001a84
 80016c4:	20001a4c 	.word	0x20001a4c
 80016c8:	20001a50 	.word	0x20001a50
 80016cc:	20001978 	.word	0x20001978
 80016d0:	2000197c 	.word	0x2000197c
 80016d4:	20000830 	.word	0x20000830
 80016d8:	20001a54 	.word	0x20001a54
 80016dc:	2000082c 	.word	0x2000082c
 80016e0:	20001a48 	.word	0x20001a48
 80016e4:	20001a58 	.word	0x20001a58
 80016e8:	fffff1f0 	.word	0xfffff1f0
 80016ec:	20001a88 	.word	0x20001a88

080016f0 <StartGetEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetEncoderTask */
void StartGetEncoderTask(void *argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetEncoderTask */
  /* Infinite loop */
  for(;;)
  {
	  countRealTime =__HAL_TIM_GET_COUNTER(&htim3);
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <StartGetEncoderTask+0x74>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	461a      	mov	r2, r3
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <StartGetEncoderTask+0x78>)
 8001702:	601a      	str	r2, [r3, #0]
	  osDelay(10);
 8001704:	200a      	movs	r0, #10
 8001706:	f004 fe51 	bl	80063ac <osDelay>
	  if((countRealTime - countLastTime)<100 && (countRealTime - countLastTime)>-100){RealSpeed = countRealTime - countLastTime;}
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <StartGetEncoderTask+0x78>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <StartGetEncoderTask+0x7c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b63      	cmp	r3, #99	@ 0x63
 8001716:	dc0e      	bgt.n	8001736 <StartGetEncoderTask+0x46>
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <StartGetEncoderTask+0x78>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <StartGetEncoderTask+0x7c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8001726:	db06      	blt.n	8001736 <StartGetEncoderTask+0x46>
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <StartGetEncoderTask+0x78>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <StartGetEncoderTask+0x7c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <StartGetEncoderTask+0x80>)
 8001734:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease (PIDupdateSemHandle);
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <StartGetEncoderTask+0x84>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 ff2c 	bl	8006598 <osSemaphoreRelease>
	  OLED_showSignedNUM(0, 0, RealSpeed, 8);
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <StartGetEncoderTask+0x80>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2308      	movs	r3, #8
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fb73 	bl	8000e34 <OLED_showSignedNUM>
	  countLastTime = countRealTime;
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <StartGetEncoderTask+0x78>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a06      	ldr	r2, [pc, #24]	@ (800176c <StartGetEncoderTask+0x7c>)
 8001754:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease (OLEDupdateSemHandle);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <StartGetEncoderTask+0x88>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f004 ff1c 	bl	8006598 <osSemaphoreRelease>
	  countRealTime =__HAL_TIM_GET_COUNTER(&htim3);
 8001760:	e7ca      	b.n	80016f8 <StartGetEncoderTask+0x8>
 8001762:	bf00      	nop
 8001764:	20001bbc 	.word	0x20001bbc
 8001768:	20001970 	.word	0x20001970
 800176c:	20001974 	.word	0x20001974
 8001770:	2000197c 	.word	0x2000197c
 8001774:	20001a84 	.word	0x20001a84
 8001778:	20001a80 	.word	0x20001a80

0800177c <StartCopeKeyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCopeKeyTask */
void StartCopeKeyTask(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCopeKeyTask */
  /* Infinite loop */
  for(;;)
  {
	  KeyStateRealTime=0;
 8001784:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <StartCopeKeyTask+0x144>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X01;}
 800178a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800178e:	484d      	ldr	r0, [pc, #308]	@ (80018c4 <StartCopeKeyTask+0x148>)
 8001790:	f001 ffc8 	bl	8003724 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <StartCopeKeyTask+0x2c>
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <StartCopeKeyTask+0x144>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b46      	ldr	r3, [pc, #280]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80017a6:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X02;}
 80017a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ac:	4845      	ldr	r0, [pc, #276]	@ (80018c4 <StartCopeKeyTask+0x148>)
 80017ae:	f001 ffb9 	bl	8003724 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d106      	bne.n	80017c6 <StartCopeKeyTask+0x4a>
 80017b8:	4b41      	ldr	r3, [pc, #260]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80017c4:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(Key3_GPIO_Port, Key3_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X04;}
 80017c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ca:	483f      	ldr	r0, [pc, #252]	@ (80018c8 <StartCopeKeyTask+0x14c>)
 80017cc:	f001 ffaa 	bl	8003724 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <StartCopeKeyTask+0x68>
 80017d6:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80017e2:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(Key4_GPIO_Port, Key4_Pin)==KEY_TRIG_STATE){KeyStateRealTime|=0X08;}
 80017e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e8:	4837      	ldr	r0, [pc, #220]	@ (80018c8 <StartCopeKeyTask+0x14c>)
 80017ea:	f001 ff9b 	bl	8003724 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d106      	bne.n	8001802 <StartCopeKeyTask+0x86>
 80017f4:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b30      	ldr	r3, [pc, #192]	@ (80018c0 <StartCopeKeyTask+0x144>)
 8001800:	701a      	strb	r2, [r3, #0]

	  if(KeyStateRealTime!=KeyStateLastTime)
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <StartCopeKeyTask+0x144>)
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <StartCopeKeyTask+0x150>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d02e      	beq.n	800186c <StartCopeKeyTask+0xf0>
	  {
		  for (int i = 0; i < 4; ++i)
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e028      	b.n	8001866 <StartCopeKeyTask+0xea>
		  {
			  if((KeyStateRealTime&(0x01<<i))==0 && (KeyStateLastTime&(0x01<<i))==(0x01<<i))
 8001814:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <StartCopeKeyTask+0x144>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	fa42 f303 	asr.w	r3, r2, r3
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11b      	bne.n	8001860 <StartCopeKeyTask+0xe4>
 8001828:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <StartCopeKeyTask+0x150>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	2201      	movs	r2, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	ea01 0203 	and.w	r2, r1, r3
 800183a:	2101      	movs	r1, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	429a      	cmp	r2, r3
 8001844:	d10c      	bne.n	8001860 <StartCopeKeyTask+0xe4>
			  {
				  keyTrigState|=(0x01<<i);
 8001846:	2201      	movs	r2, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	b25a      	sxtb	r2, r3
 8001850:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <StartCopeKeyTask+0x154>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <StartCopeKeyTask+0x154>)
 800185e:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; ++i)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b03      	cmp	r3, #3
 800186a:	ddd3      	ble.n	8001814 <StartCopeKeyTask+0x98>
			  }
		  }
	  }
	  if((keyTrigState&0x01)==0x01){SetSpeed-=5;}
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <StartCopeKeyTask+0x154>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <StartCopeKeyTask+0x106>
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <StartCopeKeyTask+0x158>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3b05      	subs	r3, #5
 800187e:	4a15      	ldr	r2, [pc, #84]	@ (80018d4 <StartCopeKeyTask+0x158>)
 8001880:	6013      	str	r3, [r2, #0]
	  if((keyTrigState&0x02)==0x02){SetSpeed+=5;}
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <StartCopeKeyTask+0x154>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <StartCopeKeyTask+0x11c>
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <StartCopeKeyTask+0x158>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3305      	adds	r3, #5
 8001894:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <StartCopeKeyTask+0x158>)
 8001896:	6013      	str	r3, [r2, #0]
	  if((keyTrigState&0x04)==0x04){SetSpeed=0;}
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <StartCopeKeyTask+0x154>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <StartCopeKeyTask+0x12e>
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <StartCopeKeyTask+0x158>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
	  if((keyTrigState&0x08)==0x08){}
	  keyTrigState=0;
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <StartCopeKeyTask+0x154>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	  osDelay(20);
 80018b0:	2014      	movs	r0, #20
 80018b2:	f004 fd7b 	bl	80063ac <osDelay>
	  KeyStateLastTime=KeyStateRealTime;
 80018b6:	4b02      	ldr	r3, [pc, #8]	@ (80018c0 <StartCopeKeyTask+0x144>)
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <StartCopeKeyTask+0x150>)
 80018bc:	701a      	strb	r2, [r3, #0]
	  KeyStateRealTime=0;
 80018be:	e761      	b.n	8001784 <StartCopeKeyTask+0x8>
 80018c0:	20001a5d 	.word	0x20001a5d
 80018c4:	40010c00 	.word	0x40010c00
 80018c8:	40010800 	.word	0x40010800
 80018cc:	20001a5c 	.word	0x20001a5c
 80018d0:	20001a5e 	.word	0x20001a5e
 80018d4:	20001978 	.word	0x20001978

080018d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <MX_GPIO_Init+0x104>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a3a      	ldr	r2, [pc, #232]	@ (80019dc <MX_GPIO_Init+0x104>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <MX_GPIO_Init+0x104>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001904:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <MX_GPIO_Init+0x104>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a34      	ldr	r2, [pc, #208]	@ (80019dc <MX_GPIO_Init+0x104>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b32      	ldr	r3, [pc, #200]	@ (80019dc <MX_GPIO_Init+0x104>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <MX_GPIO_Init+0x104>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a2e      	ldr	r2, [pc, #184]	@ (80019dc <MX_GPIO_Init+0x104>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <MX_GPIO_Init+0x104>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <MX_GPIO_Init+0x104>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <MX_GPIO_Init+0x104>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <MX_GPIO_Init+0x104>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001952:	4823      	ldr	r0, [pc, #140]	@ (80019e0 <MX_GPIO_Init+0x108>)
 8001954:	f001 fefd 	bl	8003752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800195e:	4821      	ldr	r0, [pc, #132]	@ (80019e4 <MX_GPIO_Init+0x10c>)
 8001960:	f001 fef7 	bl	8003752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800196a:	2311      	movs	r3, #17
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	4619      	mov	r1, r3
 800197c:	4818      	ldr	r0, [pc, #96]	@ (80019e0 <MX_GPIO_Init+0x108>)
 800197e:	f001 fd4d 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : Key1_Pin Key2_Pin */
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;
 8001982:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4813      	ldr	r0, [pc, #76]	@ (80019e4 <MX_GPIO_Init+0x10c>)
 8001998:	f001 fd40 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN1_Pin AIN2_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin;
 800199c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4619      	mov	r1, r3
 80019b4:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <MX_GPIO_Init+0x10c>)
 80019b6:	f001 fd31 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : Key3_Pin Key4_Pin */
  GPIO_InitStruct.Pin = Key3_Pin|Key4_Pin;
 80019ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <MX_GPIO_Init+0x110>)
 80019d0:	f001 fd24 	bl	800341c <HAL_GPIO_Init>

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40011000 	.word	0x40011000
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	40010800 	.word	0x40010800

080019ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <MX_I2C1_Init+0x50>)
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <MX_I2C1_Init+0x54>)
 80019f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_I2C1_Init+0x50>)
 80019f8:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <MX_I2C1_Init+0x58>)
 80019fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	@ (8001a3c <MX_I2C1_Init+0x50>)
 8001a2a:	f001 feab 	bl	8003784 <HAL_I2C_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a34:	f000 f904 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20001a8c 	.word	0x20001a8c
 8001a40:	40005400 	.word	0x40005400
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	@ 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_I2C_MspInit+0x90>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d132      	bne.n	8001ace <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_I2C_MspInit+0x94>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_I2C_MspInit+0x94>)
 8001a6e:	f043 0308 	orr.w	r3, r3, #8
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_I2C_MspInit+0x94>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a86:	2312      	movs	r3, #18
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <HAL_I2C_MspInit+0x98>)
 8001a96:	f001 fcc1 	bl	800341c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_I2C_MspInit+0x9c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <HAL_I2C_MspInit+0x9c>)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_I2C_MspInit+0x94>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_I2C_MspInit+0x94>)
 8001abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_I2C_MspInit+0x94>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	@ 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010c00 	.word	0x40010c00
 8001ae4:	40010000 	.word	0x40010000

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aec:	f000 fc30 	bl	8002350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af0:	f000 f838 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af4:	f7ff fef0 	bl	80018d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af8:	f7ff fbf2 	bl	80012e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001afc:	f7ff faa4 	bl	8001048 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b00:	f7ff ff74 	bl	80019ec <MX_I2C1_Init>
  MX_ADC2_Init();
 8001b04:	f7ff fb0a 	bl	800111c <MX_ADC2_Init>
  MX_TIM1_Init();
 8001b08:	f000 f9ce 	bl	8001ea8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001b0c:	f000 fb84 	bl	8002218 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001b10:	f000 fa1a 	bl	8001f48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b14:	f000 fa8e 	bl	8002034 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 8001b18:	f7fe ff84 	bl	8000a24 <OLED_init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <main+0x6c>)
 8001b1e:	f001 f8f7 	bl	8002d10 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001b22:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <main+0x70>)
 8001b24:	f001 f8f4 	bl	8002d10 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b28:	213c      	movs	r1, #60	@ 0x3c
 8001b2a:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <main+0x74>)
 8001b2c:	f003 fab0 	bl	8005090 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//motor PWMA
 8001b30:	2100      	movs	r1, #0
 8001b32:	480b      	ldr	r0, [pc, #44]	@ (8001b60 <main+0x78>)
 8001b34:	f003 f968 	bl	8004e08 <HAL_TIM_PWM_Start>

  motorSet(MOTOR_A, MOTOR_FORWARD, 3600);
 8001b38:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff f998 	bl	8000e74 <motorSet>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b44:	f004 fb58 	bl	80061f8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b48:	f7ff fbe8 	bl	800131c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b4c:	f004 fb76 	bl	800623c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <main+0x68>
 8001b54:	200018c4 	.word	0x200018c4
 8001b58:	200018f4 	.word	0x200018f4
 8001b5c:	20001bbc 	.word	0x20001bbc
 8001b60:	20001b74 	.word	0x20001b74

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	@ 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b6e:	2228      	movs	r2, #40	@ 0x28
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fdf8 	bl	8009768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bb0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fa7e 	bl	80040bc <HAL_RCC_OscConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bc6:	f000 f83b 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bca:	230f      	movs	r3, #15
 8001bcc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2102      	movs	r1, #2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fcea 	bl	80045c0 <HAL_RCC_ClockConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bf2:	f000 f825 	bl	8001c40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fe9a 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c0e:	f000 f817 	bl	8001c40 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3750      	adds	r7, #80	@ 0x50
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c2e:	f000 fba5 	bl	800237c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40000800 	.word	0x40000800

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <Error_Handler+0x8>

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_MspInit+0x68>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a17      	ldr	r2, [pc, #92]	@ (8001cb4 <HAL_MspInit+0x68>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_MspInit+0x68>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_MspInit+0x68>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_MspInit+0x68>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <HAL_MspInit+0x68>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	210f      	movs	r1, #15
 8001c86:	f06f 0001 	mvn.w	r0, #1
 8001c8a:	f001 f9ae 	bl	8002fea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_MspInit+0x6c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_MspInit+0x6c>)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010000 	.word	0x40010000

08001cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	@ 0x38
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd2:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_InitTick+0xe8>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a33      	ldr	r2, [pc, #204]	@ (8001da4 <HAL_InitTick+0xe8>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_InitTick+0xe8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cea:	f107 0210 	add.w	r2, r7, #16
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 fdd3 	bl	80048a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d04:	f002 fda4 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8001d08:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d0a:	e004      	b.n	8001d16 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d0c:	f002 fda0 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8001d10:	4603      	mov	r3, r0
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d18:	4a23      	ldr	r2, [pc, #140]	@ (8001da8 <HAL_InitTick+0xec>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	3b01      	subs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d24:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d26:	4a22      	ldr	r2, [pc, #136]	@ (8001db0 <HAL_InitTick+0xf4>)
 8001d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d32:	4a1e      	ldr	r2, [pc, #120]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001d4a:	4818      	ldr	r0, [pc, #96]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d4c:	f002 ff62 	bl	8004c14 <HAL_TIM_Base_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11b      	bne.n	8001d96 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001d5e:	4813      	ldr	r0, [pc, #76]	@ (8001dac <HAL_InitTick+0xf0>)
 8001d60:	f002 ffa8 	bl	8004cb4 <HAL_TIM_Base_Start_IT>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d111      	bne.n	8001d96 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d72:	201e      	movs	r0, #30
 8001d74:	f001 f955 	bl	8003022 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	d808      	bhi.n	8001d90 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	201e      	movs	r0, #30
 8001d84:	f001 f931 	bl	8002fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_InitTick+0xf8>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e002      	b.n	8001d96 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3738      	adds	r7, #56	@ 0x38
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	20001ae0 	.word	0x20001ae0
 8001db0:	40000800 	.word	0x40000800
 8001db4:	20000838 	.word	0x20000838

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <NMI_Handler+0x4>

08001dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <MemManage_Handler+0x4>

08001dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <UsageFault_Handler+0x4>

08001de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <DMA1_Channel1_IRQHandler+0x10>)
 8001df2:	f001 f9df 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20001924 	.word	0x20001924

08001e00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <ADC1_2_IRQHandler+0x14>)
 8001e06:	f000 fcaf 	bl	8002768 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001e0a:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <ADC1_2_IRQHandler+0x18>)
 8001e0c:	f000 fcac 	bl	8002768 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200018c4 	.word	0x200018c4
 8001e18:	200018f4 	.word	0x200018f4

08001e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <TIM4_IRQHandler+0x10>)
 8001e22:	f003 f9c3 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20001ae0 	.word	0x20001ae0

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f007 fce0 	bl	8009824 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20005000 	.word	0x20005000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20001b28 	.word	0x20001b28
 8001e98:	20003c80 	.word	0x20003c80

08001e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f44 <MX_TIM1_Init+0x9c>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ef0:	4813      	ldr	r0, [pc, #76]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001ef2:	f002 fe8f 	bl	8004c14 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001efc:	f7ff fea0 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001f0e:	f003 faff 	bl	8005510 <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f18:	f7ff fe92 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <MX_TIM1_Init+0x98>)
 8001f2a:	f003 fe8d 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f34:	f7ff fe84 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20001b2c 	.word	0x20001b2c
 8001f44:	40012c00 	.word	0x40012c00

08001f48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	@ 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	f107 0320 	add.w	r3, r7, #32
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
 8001f74:	615a      	str	r2, [r3, #20]
 8001f76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8001f8c:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001f8e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001f9c:	2280      	movs	r2, #128	@ 0x80
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa0:	4823      	ldr	r0, [pc, #140]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001fa2:	f002 fe37 	bl	8004c14 <HAL_TIM_Base_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fac:	f7ff fe48 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481c      	ldr	r0, [pc, #112]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001fbe:	f003 faa7 	bl	8005510 <HAL_TIM_ConfigClockSource>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fc8:	f7ff fe3a 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fcc:	4818      	ldr	r0, [pc, #96]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001fce:	f002 fec3 	bl	8004d58 <HAL_TIM_PWM_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fd8:	f7ff fe32 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe4:	f107 0320 	add.w	r3, r7, #32
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4811      	ldr	r0, [pc, #68]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8001fec:	f003 fe2c 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ff6:	f7ff fe23 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffa:	2360      	movs	r3, #96	@ 0x60
 8001ffc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3600;
 8001ffe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	4807      	ldr	r0, [pc, #28]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8002014:	f003 f9ba 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800201e:	f7ff fe0f 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002022:	4803      	ldr	r0, [pc, #12]	@ (8002030 <MX_TIM2_Init+0xe8>)
 8002024:	f000 f8c8 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8002028:	bf00      	nop
 800202a:	3738      	adds	r7, #56	@ 0x38
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20001b74 	.word	0x20001b74

08002034 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	@ 0x30
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2224      	movs	r2, #36	@ 0x24
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f007 fb90 	bl	8009768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 8002052:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <MX_TIM3_Init+0xa4>)
 8002054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002056:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 8002064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002076:	2303      	movs	r3, #3
 8002078:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800207e:	2301      	movs	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800208e:	2301      	movs	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 80020a2:	f002 ff53 	bl	8004f4c <HAL_TIM_Encoder_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f7ff fdc8 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <MX_TIM3_Init+0xa0>)
 80020be:	f003 fdc3 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020c8:	f7ff fdba 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	@ 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20001bbc 	.word	0x20001bbc
 80020d8:	40000400 	.word	0x40000400

080020dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <HAL_TIM_Base_MspInit+0x58>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002106:	e010      	b.n	800212a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d10b      	bne.n	800212a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_TIM_Base_MspInit+0x5c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a15      	ldr	r2, [pc, #84]	@ (80021ac <HAL_TIM_Encoder_MspInit+0x70>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d123      	bne.n	80021a4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215c:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	4a13      	ldr	r2, [pc, #76]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	61d3      	str	r3, [r2, #28]
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800218c:	23c0      	movs	r3, #192	@ 0xc0
 800218e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4619      	mov	r1, r3
 800219e:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <HAL_TIM_Encoder_MspInit+0x78>)
 80021a0:	f001 f93c 	bl	800341c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010800 	.word	0x40010800

080021b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d6:	d117      	bne.n	8002208 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_TIM_MspPostInit+0x58>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002210 <HAL_TIM_MspPostInit+0x58>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_TIM_MspPostInit+0x58>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4619      	mov	r1, r3
 8002202:	4804      	ldr	r0, [pc, #16]	@ (8002214 <HAL_TIM_MspPostInit+0x5c>)
 8002204:	f001 f90a 	bl	800341c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	40010800 	.word	0x40010800

08002218 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <MX_USART1_UART_Init+0x50>)
 8002220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002224:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002250:	f003 fd6a 	bl	8005d28 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800225a:	f7ff fcf1 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20001c04 	.word	0x20001c04
 8002268:	40013800 	.word	0x40013800

0800226c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <HAL_UART_MspInit+0x8c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d131      	bne.n	80022f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_UART_MspInit+0x90>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a1a      	ldr	r2, [pc, #104]	@ (80022fc <HAL_UART_MspInit+0x90>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <HAL_UART_MspInit+0x90>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_UART_MspInit+0x90>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a14      	ldr	r2, [pc, #80]	@ (80022fc <HAL_UART_MspInit+0x90>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_UART_MspInit+0x90>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	4619      	mov	r1, r3
 80022d0:	480b      	ldr	r0, [pc, #44]	@ (8002300 <HAL_UART_MspInit+0x94>)
 80022d2:	f001 f8a3 	bl	800341c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	@ (8002300 <HAL_UART_MspInit+0x94>)
 80022ec:	f001 f896 	bl	800341c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010800 	.word	0x40010800

08002304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002304:	f7ff fdca 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002308:	480b      	ldr	r0, [pc, #44]	@ (8002338 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800230a:	490c      	ldr	r1, [pc, #48]	@ (800233c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800230c:	4a0c      	ldr	r2, [pc, #48]	@ (8002340 <LoopFillZerobss+0x16>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a09      	ldr	r2, [pc, #36]	@ (8002344 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002320:	4c09      	ldr	r4, [pc, #36]	@ (8002348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232e:	f007 fa7f 	bl	8009830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002332:	f7ff fbd9 	bl	8001ae8 <main>
  bx lr
 8002336:	4770      	bx	lr
  ldr r0, =_sdata
 8002338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800233c:	20000894 	.word	0x20000894
  ldr r2, =_sidata
 8002340:	0800a3f0 	.word	0x0800a3f0
  ldr r2, =_sbss
 8002344:	20000894 	.word	0x20000894
  ldr r4, =_ebss
 8002348:	20003c80 	.word	0x20003c80

0800234c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800234c:	e7fe      	b.n	800234c <CAN1_RX1_IRQHandler>
	...

08002350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_Init+0x28>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_Init+0x28>)
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 fe37 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002366:	200f      	movs	r0, #15
 8002368:	f7ff fca8 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236c:	f7ff fc6e 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_IncTick+0x1c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_IncTick+0x20>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a03      	ldr	r2, [pc, #12]	@ (800239c <HAL_IncTick+0x20>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	2000083c 	.word	0x2000083c
 800239c:	20001c4c 	.word	0x20001c4c

080023a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b02      	ldr	r3, [pc, #8]	@ (80023b0 <HAL_GetTick+0x10>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	20001c4c 	.word	0x20001c4c

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff fff0 	bl	80023a0 <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffe0 	bl	80023a0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000083c 	.word	0x2000083c

080023fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0be      	b.n	800259c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe feac 	bl	8001198 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fbbd 	bl	8002bc0 <ADC_ConversionStop_Disable>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 8099 	bne.w	800258a <HAL_ADC_Init+0x18e>
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8095 	bne.w	800258a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002468:	f023 0302 	bic.w	r3, r3, #2
 800246c:	f043 0202 	orr.w	r2, r3, #2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800247c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7b1b      	ldrb	r3, [r3, #12]
 8002482:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002484:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4313      	orrs	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002494:	d003      	beq.n	800249e <HAL_ADC_Init+0xa2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_ADC_Init+0xa8>
 800249e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a2:	e000      	b.n	80024a6 <HAL_ADC_Init+0xaa>
 80024a4:	2300      	movs	r3, #0
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7d1b      	ldrb	r3, [r3, #20]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d119      	bne.n	80024e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7b1b      	ldrb	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	035a      	lsls	r2, r3, #13
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e00b      	b.n	80024e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_ADC_Init+0x1a8>)
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	430b      	orrs	r3, r1
 800250e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002518:	d003      	beq.n	8002522 <HAL_ADC_Init+0x126>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d104      	bne.n	800252c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	3b01      	subs	r3, #1
 8002528:	051b      	lsls	r3, r3, #20
 800252a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002532:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	430a      	orrs	r2, r1
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_ADC_Init+0x1ac>)
 8002548:	4013      	ands	r3, r2
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d10b      	bne.n	8002568 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002566:	e018      	b.n	800259a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	f023 0312 	bic.w	r3, r3, #18
 8002570:	f043 0210 	orr.w	r2, r3, #16
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002588:	e007      	b.n	800259a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800259a:	7dfb      	ldrb	r3, [r7, #23]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	ffe1f7fd 	.word	0xffe1f7fd
 80025a8:	ff1f0efe 	.word	0xff1f0efe

080025ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a64      	ldr	r2, [pc, #400]	@ (8002754 <HAL_ADC_Start_DMA+0x1a8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_ADC_Start_DMA+0x24>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a63      	ldr	r2, [pc, #396]	@ (8002758 <HAL_ADC_Start_DMA+0x1ac>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d106      	bne.n	80025de <HAL_ADC_Start_DMA+0x32>
 80025d0:	4b60      	ldr	r3, [pc, #384]	@ (8002754 <HAL_ADC_Start_DMA+0x1a8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 80b3 	bne.w	8002744 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_Start_DMA+0x40>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e0ae      	b.n	800274a <HAL_ADC_Start_DMA+0x19e>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fa89 	bl	8002b0c <ADC_Enable>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 809a 	bne.w	800273a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a4e      	ldr	r2, [pc, #312]	@ (8002758 <HAL_ADC_Start_DMA+0x1ac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d105      	bne.n	8002630 <HAL_ADC_Start_DMA+0x84>
 8002624:	4b4b      	ldr	r3, [pc, #300]	@ (8002754 <HAL_ADC_Start_DMA+0x1a8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d115      	bne.n	800265c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d026      	beq.n	8002698 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002652:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800265a:	e01d      	b.n	8002698 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a39      	ldr	r2, [pc, #228]	@ (8002754 <HAL_ADC_Start_DMA+0x1a8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_ADC_Start_DMA+0xd0>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a38      	ldr	r2, [pc, #224]	@ (8002758 <HAL_ADC_Start_DMA+0x1ac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10d      	bne.n	8002698 <HAL_ADC_Start_DMA+0xec>
 800267c:	4b35      	ldr	r3, [pc, #212]	@ (8002754 <HAL_ADC_Start_DMA+0x1a8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002690:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	f023 0206 	bic.w	r2, r3, #6
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a25      	ldr	r2, [pc, #148]	@ (800275c <HAL_ADC_Start_DMA+0x1b0>)
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a24      	ldr	r2, [pc, #144]	@ (8002760 <HAL_ADC_Start_DMA+0x1b4>)
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4a23      	ldr	r2, [pc, #140]	@ (8002764 <HAL_ADC_Start_DMA+0x1b8>)
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0202 	mvn.w	r2, #2
 80026e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a18      	ldr	r0, [r3, #32]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	334c      	adds	r3, #76	@ 0x4c
 80026fc:	4619      	mov	r1, r3
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f000 fcf7 	bl	80030f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002710:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002714:	d108      	bne.n	8002728 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002724:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002726:	e00f      	b.n	8002748 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002736:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002738:	e006      	b.n	8002748 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002742:	e001      	b.n	8002748 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012400 	.word	0x40012400
 8002758:	40012800 	.word	0x40012800
 800275c:	08002c43 	.word	0x08002c43
 8002760:	08002cbf 	.word	0x08002cbf
 8002764:	08002cdb 	.word	0x08002cdb

08002768 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03e      	beq.n	8002808 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d039      	beq.n	8002808 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027ba:	d11d      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d119      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0220 	bic.w	r2, r2, #32
 80027d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe fbb5 	bl	8000f68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f06f 0212 	mvn.w	r2, #18
 8002806:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d04d      	beq.n	80028ae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d048      	beq.n	80028ae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800283e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002842:	d012      	beq.n	800286a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800284e:	2b00      	cmp	r3, #0
 8002850:	d125      	bne.n	800289e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800285c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002860:	d11d      	bne.n	800289e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d119      	bne.n	800289e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002878:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fae4 	bl	8002e6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 020c 	mvn.w	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f812 	bl	80028f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0201 	mvn.w	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x20>
 8002938:	2302      	movs	r3, #2
 800293a:	e0dc      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x1da>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d81c      	bhi.n	8002986 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b05      	subs	r3, #5
 800295e:	221f      	movs	r2, #31
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	4019      	ands	r1, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b05      	subs	r3, #5
 8002978:	fa00 f203 	lsl.w	r2, r0, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34
 8002984:	e03c      	b.n	8002a00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d81c      	bhi.n	80029c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	3b23      	subs	r3, #35	@ 0x23
 80029a0:	221f      	movs	r2, #31
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	4019      	ands	r1, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b23      	subs	r3, #35	@ 0x23
 80029ba:	fa00 f203 	lsl.w	r2, r0, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80029c6:	e01b      	b.n	8002a00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	3b41      	subs	r3, #65	@ 0x41
 80029da:	221f      	movs	r2, #31
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	4019      	ands	r1, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3b41      	subs	r3, #65	@ 0x41
 80029f4:	fa00 f203 	lsl.w	r2, r0, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d91c      	bls.n	8002a42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68d9      	ldr	r1, [r3, #12]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1e      	subs	r3, #30
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	e019      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	2207      	movs	r2, #7
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6898      	ldr	r0, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d003      	beq.n	8002a86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a82:	2b11      	cmp	r3, #17
 8002a84:	d132      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b00 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d125      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d126      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002aac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d11a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a13      	ldr	r2, [pc, #76]	@ (8002b08 <HAL_ADC_ConfigChannel+0x1ec>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9a      	lsrs	r2, r3, #18
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002acc:	e002      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f9      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x1b2>
 8002ada:	e007      	b.n	8002aec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012400 	.word	0x40012400
 8002b04:	20000834 	.word	0x20000834
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d040      	beq.n	8002bac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <ADC_Enable+0xac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bbc <ADC_Enable+0xb0>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b48:	e002      	b.n	8002b50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b56:	f7ff fc23 	bl	80023a0 <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b5c:	e01f      	b.n	8002b9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5e:	f7ff fc1f 	bl	80023a0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d918      	bls.n	8002b9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d011      	beq.n	8002b9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e007      	b.n	8002bae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d1d8      	bne.n	8002b5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000834 	.word	0x20000834
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d12e      	bne.n	8002c38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bea:	f7ff fbd9 	bl	80023a0 <HAL_GetTick>
 8002bee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bf0:	e01b      	b.n	8002c2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bf2:	f7ff fbd5 	bl	80023a0 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d914      	bls.n	8002c2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10d      	bne.n	8002c2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d0dc      	beq.n	8002bf2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d127      	bne.n	8002cac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c72:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c76:	d115      	bne.n	8002ca4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d111      	bne.n	8002ca4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7fe f95f 	bl	8000f68 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002caa:	e004      	b.n	8002cb6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fe0a 	bl	80028e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff fe02 	bl	800290a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_ADCEx_Calibration_Start+0x1e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e097      	b.n	8002e5e <HAL_ADCEx_Calibration_Start+0x14e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff42 	bl	8002bc0 <ADC_ConversionStop_Disable>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fee3 	bl	8002b0c <ADC_Enable>
 8002d46:	4603      	mov	r3, r0
 8002d48:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8081 	bne.w	8002e54 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d5a:	f023 0302 	bic.w	r3, r3, #2
 8002d5e:	f043 0202 	orr.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d66:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_ADCEx_Calibration_Start+0x158>)
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	f001 fe9c 	bl	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d70:	4603      	mov	r3, r0
 8002d72:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002d76:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002d78:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002d7a:	e002      	b.n	8002d82 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f9      	bne.n	8002d7c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0208 	orr.w	r2, r2, #8
 8002d96:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d98:	f7ff fb02 	bl	80023a0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d9e:	e01b      	b.n	8002dd8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002da0:	f7ff fafe 	bl	80023a0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b0a      	cmp	r3, #10
 8002dac:	d914      	bls.n	8002dd8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	f023 0312 	bic.w	r3, r3, #18
 8002dc4:	f043 0210 	orr.w	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e042      	b.n	8002e5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1dc      	bne.n	8002da0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0204 	orr.w	r2, r2, #4
 8002df4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002df6:	f7ff fad3 	bl	80023a0 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002dfc:	e01b      	b.n	8002e36 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002dfe:	f7ff facf 	bl	80023a0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b0a      	cmp	r3, #10
 8002e0a:	d914      	bls.n	8002e36 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	f023 0312 	bic.w	r3, r3, #18
 8002e22:	f043 0210 	orr.w	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e013      	b.n	8002e5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1dc      	bne.n	8002dfe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	f023 0303 	bic.w	r3, r3, #3
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000834 	.word	0x20000834

08002e6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
	...

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4906      	ldr	r1, [pc, #24]	@ (8002f18 <__NVIC_EnableIRQ+0x34>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	@ (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	@ (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
         );
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff4f 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff64 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ffb2 	bl	8002f70 <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff81 	bl	8002f1c <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff57 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e043      	b.n	80030de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <HAL_DMA_Init+0xa8>)
 800305e:	4413      	add	r3, r2
 8003060:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <HAL_DMA_Init+0xac>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	009a      	lsls	r2, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_DMA_Init+0xb0>)
 8003072:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800308a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800308e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	bffdfff8 	.word	0xbffdfff8
 80030ec:	cccccccd 	.word	0xcccccccd
 80030f0:	40020000 	.word	0x40020000

080030f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Start_IT+0x20>
 8003110:	2302      	movs	r3, #2
 8003112:	e04b      	b.n	80031ac <HAL_DMA_Start_IT+0xb8>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d13a      	bne.n	800319e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f937 	bl	80033c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 020e 	orr.w	r2, r2, #14
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e00f      	b.n	800318c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 020a 	orr.w	r2, r2, #10
 800318a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e005      	b.n	80031aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
 80031a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	2204      	movs	r2, #4
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d04f      	beq.n	800327c <HAL_DMA_IRQHandler+0xc8>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04a      	beq.n	800327c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0204 	bic.w	r2, r2, #4
 8003202:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a66      	ldr	r2, [pc, #408]	@ (80033a4 <HAL_DMA_IRQHandler+0x1f0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d029      	beq.n	8003262 <HAL_DMA_IRQHandler+0xae>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a65      	ldr	r2, [pc, #404]	@ (80033a8 <HAL_DMA_IRQHandler+0x1f4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMA_IRQHandler+0xaa>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a63      	ldr	r2, [pc, #396]	@ (80033ac <HAL_DMA_IRQHandler+0x1f8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01a      	beq.n	8003258 <HAL_DMA_IRQHandler+0xa4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a62      	ldr	r2, [pc, #392]	@ (80033b0 <HAL_DMA_IRQHandler+0x1fc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d012      	beq.n	8003252 <HAL_DMA_IRQHandler+0x9e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a60      	ldr	r2, [pc, #384]	@ (80033b4 <HAL_DMA_IRQHandler+0x200>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00a      	beq.n	800324c <HAL_DMA_IRQHandler+0x98>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5f      	ldr	r2, [pc, #380]	@ (80033b8 <HAL_DMA_IRQHandler+0x204>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d102      	bne.n	8003246 <HAL_DMA_IRQHandler+0x92>
 8003240:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003244:	e00e      	b.n	8003264 <HAL_DMA_IRQHandler+0xb0>
 8003246:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800324a:	e00b      	b.n	8003264 <HAL_DMA_IRQHandler+0xb0>
 800324c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003250:	e008      	b.n	8003264 <HAL_DMA_IRQHandler+0xb0>
 8003252:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003256:	e005      	b.n	8003264 <HAL_DMA_IRQHandler+0xb0>
 8003258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800325c:	e002      	b.n	8003264 <HAL_DMA_IRQHandler+0xb0>
 800325e:	2340      	movs	r3, #64	@ 0x40
 8003260:	e000      	b.n	8003264 <HAL_DMA_IRQHandler+0xb0>
 8003262:	2304      	movs	r3, #4
 8003264:	4a55      	ldr	r2, [pc, #340]	@ (80033bc <HAL_DMA_IRQHandler+0x208>)
 8003266:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8094 	beq.w	800339a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800327a:	e08e      	b.n	800339a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2202      	movs	r2, #2
 8003282:	409a      	lsls	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d056      	beq.n	800333a <HAL_DMA_IRQHandler+0x186>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d051      	beq.n	800333a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 020a 	bic.w	r2, r2, #10
 80032b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a38      	ldr	r2, [pc, #224]	@ (80033a4 <HAL_DMA_IRQHandler+0x1f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d029      	beq.n	800331a <HAL_DMA_IRQHandler+0x166>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a37      	ldr	r2, [pc, #220]	@ (80033a8 <HAL_DMA_IRQHandler+0x1f4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_IRQHandler+0x162>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a35      	ldr	r2, [pc, #212]	@ (80033ac <HAL_DMA_IRQHandler+0x1f8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01a      	beq.n	8003310 <HAL_DMA_IRQHandler+0x15c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a34      	ldr	r2, [pc, #208]	@ (80033b0 <HAL_DMA_IRQHandler+0x1fc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d012      	beq.n	800330a <HAL_DMA_IRQHandler+0x156>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a32      	ldr	r2, [pc, #200]	@ (80033b4 <HAL_DMA_IRQHandler+0x200>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00a      	beq.n	8003304 <HAL_DMA_IRQHandler+0x150>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a31      	ldr	r2, [pc, #196]	@ (80033b8 <HAL_DMA_IRQHandler+0x204>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <HAL_DMA_IRQHandler+0x14a>
 80032f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80032fc:	e00e      	b.n	800331c <HAL_DMA_IRQHandler+0x168>
 80032fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003302:	e00b      	b.n	800331c <HAL_DMA_IRQHandler+0x168>
 8003304:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003308:	e008      	b.n	800331c <HAL_DMA_IRQHandler+0x168>
 800330a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800330e:	e005      	b.n	800331c <HAL_DMA_IRQHandler+0x168>
 8003310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003314:	e002      	b.n	800331c <HAL_DMA_IRQHandler+0x168>
 8003316:	2320      	movs	r3, #32
 8003318:	e000      	b.n	800331c <HAL_DMA_IRQHandler+0x168>
 800331a:	2302      	movs	r3, #2
 800331c:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <HAL_DMA_IRQHandler+0x208>)
 800331e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d034      	beq.n	800339a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003338:	e02f      	b.n	800339a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2208      	movs	r2, #8
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d028      	beq.n	800339c <HAL_DMA_IRQHandler+0x1e8>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d023      	beq.n	800339c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 020e 	bic.w	r2, r2, #14
 8003362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
    }
  }
  return;
 800339a:	bf00      	nop
 800339c:	bf00      	nop
}
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40020008 	.word	0x40020008
 80033a8:	4002001c 	.word	0x4002001c
 80033ac:	40020030 	.word	0x40020030
 80033b0:	40020044 	.word	0x40020044
 80033b4:	40020058 	.word	0x40020058
 80033b8:	4002006c 	.word	0x4002006c
 80033bc:	40020000 	.word	0x40020000

080033c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d108      	bne.n	8003400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033fe:	e007      	b.n	8003410 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
	...

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b08b      	sub	sp, #44	@ 0x2c
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342e:	e169      	b.n	8003704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003430:	2201      	movs	r2, #1
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 8158 	bne.w	80036fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a9a      	ldr	r2, [pc, #616]	@ (80036bc <HAL_GPIO_Init+0x2a0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d05e      	beq.n	8003516 <HAL_GPIO_Init+0xfa>
 8003458:	4a98      	ldr	r2, [pc, #608]	@ (80036bc <HAL_GPIO_Init+0x2a0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d875      	bhi.n	800354a <HAL_GPIO_Init+0x12e>
 800345e:	4a98      	ldr	r2, [pc, #608]	@ (80036c0 <HAL_GPIO_Init+0x2a4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d058      	beq.n	8003516 <HAL_GPIO_Init+0xfa>
 8003464:	4a96      	ldr	r2, [pc, #600]	@ (80036c0 <HAL_GPIO_Init+0x2a4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d86f      	bhi.n	800354a <HAL_GPIO_Init+0x12e>
 800346a:	4a96      	ldr	r2, [pc, #600]	@ (80036c4 <HAL_GPIO_Init+0x2a8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d052      	beq.n	8003516 <HAL_GPIO_Init+0xfa>
 8003470:	4a94      	ldr	r2, [pc, #592]	@ (80036c4 <HAL_GPIO_Init+0x2a8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d869      	bhi.n	800354a <HAL_GPIO_Init+0x12e>
 8003476:	4a94      	ldr	r2, [pc, #592]	@ (80036c8 <HAL_GPIO_Init+0x2ac>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04c      	beq.n	8003516 <HAL_GPIO_Init+0xfa>
 800347c:	4a92      	ldr	r2, [pc, #584]	@ (80036c8 <HAL_GPIO_Init+0x2ac>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d863      	bhi.n	800354a <HAL_GPIO_Init+0x12e>
 8003482:	4a92      	ldr	r2, [pc, #584]	@ (80036cc <HAL_GPIO_Init+0x2b0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d046      	beq.n	8003516 <HAL_GPIO_Init+0xfa>
 8003488:	4a90      	ldr	r2, [pc, #576]	@ (80036cc <HAL_GPIO_Init+0x2b0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d85d      	bhi.n	800354a <HAL_GPIO_Init+0x12e>
 800348e:	2b12      	cmp	r3, #18
 8003490:	d82a      	bhi.n	80034e8 <HAL_GPIO_Init+0xcc>
 8003492:	2b12      	cmp	r3, #18
 8003494:	d859      	bhi.n	800354a <HAL_GPIO_Init+0x12e>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_GPIO_Init+0x80>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	08003517 	.word	0x08003517
 80034a0:	080034f1 	.word	0x080034f1
 80034a4:	08003503 	.word	0x08003503
 80034a8:	08003545 	.word	0x08003545
 80034ac:	0800354b 	.word	0x0800354b
 80034b0:	0800354b 	.word	0x0800354b
 80034b4:	0800354b 	.word	0x0800354b
 80034b8:	0800354b 	.word	0x0800354b
 80034bc:	0800354b 	.word	0x0800354b
 80034c0:	0800354b 	.word	0x0800354b
 80034c4:	0800354b 	.word	0x0800354b
 80034c8:	0800354b 	.word	0x0800354b
 80034cc:	0800354b 	.word	0x0800354b
 80034d0:	0800354b 	.word	0x0800354b
 80034d4:	0800354b 	.word	0x0800354b
 80034d8:	0800354b 	.word	0x0800354b
 80034dc:	0800354b 	.word	0x0800354b
 80034e0:	080034f9 	.word	0x080034f9
 80034e4:	0800350d 	.word	0x0800350d
 80034e8:	4a79      	ldr	r2, [pc, #484]	@ (80036d0 <HAL_GPIO_Init+0x2b4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ee:	e02c      	b.n	800354a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	623b      	str	r3, [r7, #32]
          break;
 80034f6:	e029      	b.n	800354c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	3304      	adds	r3, #4
 80034fe:	623b      	str	r3, [r7, #32]
          break;
 8003500:	e024      	b.n	800354c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	3308      	adds	r3, #8
 8003508:	623b      	str	r3, [r7, #32]
          break;
 800350a:	e01f      	b.n	800354c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	330c      	adds	r3, #12
 8003512:	623b      	str	r3, [r7, #32]
          break;
 8003514:	e01a      	b.n	800354c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800351e:	2304      	movs	r3, #4
 8003520:	623b      	str	r3, [r7, #32]
          break;
 8003522:	e013      	b.n	800354c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800352c:	2308      	movs	r3, #8
 800352e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	611a      	str	r2, [r3, #16]
          break;
 8003536:	e009      	b.n	800354c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003538:	2308      	movs	r3, #8
 800353a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	615a      	str	r2, [r3, #20]
          break;
 8003542:	e003      	b.n	800354c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]
          break;
 8003548:	e000      	b.n	800354c <HAL_GPIO_Init+0x130>
          break;
 800354a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2bff      	cmp	r3, #255	@ 0xff
 8003550:	d801      	bhi.n	8003556 <HAL_GPIO_Init+0x13a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	e001      	b.n	800355a <HAL_GPIO_Init+0x13e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2bff      	cmp	r3, #255	@ 0xff
 8003560:	d802      	bhi.n	8003568 <HAL_GPIO_Init+0x14c>
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	e002      	b.n	800356e <HAL_GPIO_Init+0x152>
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	3b08      	subs	r3, #8
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	210f      	movs	r1, #15
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	6a39      	ldr	r1, [r7, #32]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	431a      	orrs	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80b1 	beq.w	80036fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800359c:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_GPIO_Init+0x2b8>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4a4c      	ldr	r2, [pc, #304]	@ (80036d4 <HAL_GPIO_Init+0x2b8>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6193      	str	r3, [r2, #24]
 80035a8:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_GPIO_Init+0x2b8>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035b4:	4a48      	ldr	r2, [pc, #288]	@ (80036d8 <HAL_GPIO_Init+0x2bc>)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	220f      	movs	r2, #15
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a40      	ldr	r2, [pc, #256]	@ (80036dc <HAL_GPIO_Init+0x2c0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_GPIO_Init+0x1ec>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3f      	ldr	r2, [pc, #252]	@ (80036e0 <HAL_GPIO_Init+0x2c4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00d      	beq.n	8003604 <HAL_GPIO_Init+0x1e8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3e      	ldr	r2, [pc, #248]	@ (80036e4 <HAL_GPIO_Init+0x2c8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <HAL_GPIO_Init+0x1e4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3d      	ldr	r2, [pc, #244]	@ (80036e8 <HAL_GPIO_Init+0x2cc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_GPIO_Init+0x1e0>
 80035f8:	2303      	movs	r3, #3
 80035fa:	e006      	b.n	800360a <HAL_GPIO_Init+0x1ee>
 80035fc:	2304      	movs	r3, #4
 80035fe:	e004      	b.n	800360a <HAL_GPIO_Init+0x1ee>
 8003600:	2302      	movs	r3, #2
 8003602:	e002      	b.n	800360a <HAL_GPIO_Init+0x1ee>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_GPIO_Init+0x1ee>
 8003608:	2300      	movs	r3, #0
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	f002 0203 	and.w	r2, r2, #3
 8003610:	0092      	lsls	r2, r2, #2
 8003612:	4093      	lsls	r3, r2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800361a:	492f      	ldr	r1, [pc, #188]	@ (80036d8 <HAL_GPIO_Init+0x2bc>)
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3302      	adds	r3, #2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003634:	4b2d      	ldr	r3, [pc, #180]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	492c      	ldr	r1, [pc, #176]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003642:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	43db      	mvns	r3, r3
 800364a:	4928      	ldr	r1, [pc, #160]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 800364c:	4013      	ands	r3, r2
 800364e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800365c:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	4922      	ldr	r1, [pc, #136]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	60cb      	str	r3, [r1, #12]
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800366a:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	43db      	mvns	r3, r3
 8003672:	491e      	ldr	r1, [pc, #120]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 8003674:	4013      	ands	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d006      	beq.n	8003692 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4918      	ldr	r1, [pc, #96]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	43db      	mvns	r3, r3
 800369a:	4914      	ldr	r1, [pc, #80]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 800369c:	4013      	ands	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d021      	beq.n	80036f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	490e      	ldr	r1, [pc, #56]	@ (80036ec <HAL_GPIO_Init+0x2d0>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e021      	b.n	80036fe <HAL_GPIO_Init+0x2e2>
 80036ba:	bf00      	nop
 80036bc:	10320000 	.word	0x10320000
 80036c0:	10310000 	.word	0x10310000
 80036c4:	10220000 	.word	0x10220000
 80036c8:	10210000 	.word	0x10210000
 80036cc:	10120000 	.word	0x10120000
 80036d0:	10110000 	.word	0x10110000
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40010800 	.word	0x40010800
 80036e0:	40010c00 	.word	0x40010c00
 80036e4:	40011000 	.word	0x40011000
 80036e8:	40011400 	.word	0x40011400
 80036ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_GPIO_Init+0x304>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	4909      	ldr	r1, [pc, #36]	@ (8003720 <HAL_GPIO_Init+0x304>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	3301      	adds	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f47f ae8e 	bne.w	8003430 <HAL_GPIO_Init+0x14>
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	372c      	adds	r7, #44	@ 0x2c
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e001      	b.n	8003746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	807b      	strh	r3, [r7, #2]
 800375e:	4613      	mov	r3, r2
 8003760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003762:	787b      	ldrb	r3, [r7, #1]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800376e:	e003      	b.n	8003778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	041a      	lsls	r2, r3, #16
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	611a      	str	r2, [r3, #16]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
	...

08003784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e12b      	b.n	80039ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe f94c 	bl	8001a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	@ 0x24
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037e8:	f001 f832 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a81      	ldr	r2, [pc, #516]	@ (80039f8 <HAL_I2C_Init+0x274>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d807      	bhi.n	8003808 <HAL_I2C_Init+0x84>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a80      	ldr	r2, [pc, #512]	@ (80039fc <HAL_I2C_Init+0x278>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e006      	b.n	8003816 <HAL_I2C_Init+0x92>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a7d      	ldr	r2, [pc, #500]	@ (8003a00 <HAL_I2C_Init+0x27c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	bf94      	ite	ls
 8003810:	2301      	movls	r3, #1
 8003812:	2300      	movhi	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0e7      	b.n	80039ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a78      	ldr	r2, [pc, #480]	@ (8003a04 <HAL_I2C_Init+0x280>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0c9b      	lsrs	r3, r3, #18
 8003828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a6a      	ldr	r2, [pc, #424]	@ (80039f8 <HAL_I2C_Init+0x274>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d802      	bhi.n	8003858 <HAL_I2C_Init+0xd4>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3301      	adds	r3, #1
 8003856:	e009      	b.n	800386c <HAL_I2C_Init+0xe8>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a69      	ldr	r2, [pc, #420]	@ (8003a08 <HAL_I2C_Init+0x284>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	3301      	adds	r3, #1
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800387e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	495c      	ldr	r1, [pc, #368]	@ (80039f8 <HAL_I2C_Init+0x274>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d819      	bhi.n	80038c0 <HAL_I2C_Init+0x13c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e59      	subs	r1, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fbb1 f3f3 	udiv	r3, r1, r3
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038a0:	400b      	ands	r3, r1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_I2C_Init+0x138>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1e59      	subs	r1, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ba:	e051      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 80038bc:	2304      	movs	r3, #4
 80038be:	e04f      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d111      	bne.n	80038ec <HAL_I2C_Init+0x168>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	440b      	add	r3, r1
 80038d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e012      	b.n	8003912 <HAL_I2C_Init+0x18e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x196>
 8003916:	2301      	movs	r3, #1
 8003918:	e022      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <HAL_I2C_Init+0x1bc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e58      	subs	r0, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	440b      	add	r3, r1
 8003930:	fbb0 f3f3 	udiv	r3, r0, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800393e:	e00f      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	0099      	lsls	r1, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6809      	ldr	r1, [r1, #0]
 8003964:	4313      	orrs	r3, r2
 8003966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800398e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6911      	ldr	r1, [r2, #16]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	000186a0 	.word	0x000186a0
 80039fc:	001e847f 	.word	0x001e847f
 8003a00:	003d08ff 	.word	0x003d08ff
 8003a04:	431bde83 	.word	0x431bde83
 8003a08:	10624dd3 	.word	0x10624dd3

08003a0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	461a      	mov	r2, r3
 8003a18:	460b      	mov	r3, r1
 8003a1a:	817b      	strh	r3, [r7, #10]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7fe fcbe 	bl	80023a0 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	f040 80e0 	bne.w	8003bf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2319      	movs	r3, #25
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4970      	ldr	r1, [pc, #448]	@ (8003c00 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f964 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0d3      	b.n	8003bf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_I2C_Master_Transmit+0x50>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0cc      	b.n	8003bf6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d007      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2221      	movs	r2, #33	@ 0x21
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	893a      	ldrh	r2, [r7, #8]
 8003ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a50      	ldr	r2, [pc, #320]	@ (8003c04 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ac4:	8979      	ldrh	r1, [r7, #10]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f89c 	bl	8003c08 <I2C_MasterRequestWrite>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e08d      	b.n	8003bf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003af0:	e066      	b.n	8003bc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa22 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06b      	b.n	8003bf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11b      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0x188>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	6a39      	ldr	r1, [r7, #32]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fa19 	bl	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d107      	bne.n	8003bbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e01a      	b.n	8003bf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d194      	bne.n	8003af2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000

08003c08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	460b      	mov	r3, r1
 8003c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d006      	beq.n	8003c32 <I2C_MasterRequestWrite+0x2a>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d003      	beq.n	8003c32 <I2C_MasterRequestWrite+0x2a>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c30:	d108      	bne.n	8003c44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e00b      	b.n	8003c5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	2b12      	cmp	r3, #18
 8003c4a:	d107      	bne.n	8003c5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f84f 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c82:	d103      	bne.n	8003c8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e035      	b.n	8003cfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c98:	d108      	bne.n	8003cac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ca8:	611a      	str	r2, [r3, #16]
 8003caa:	e01b      	b.n	8003ce4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cac:	897b      	ldrh	r3, [r7, #10]
 8003cae:	11db      	asrs	r3, r3, #7
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0306 	and.w	r3, r3, #6
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f063 030f 	orn	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	490e      	ldr	r1, [pc, #56]	@ (8003d04 <I2C_MasterRequestWrite+0xfc>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f898 	bl	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e010      	b.n	8003cfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4907      	ldr	r1, [pc, #28]	@ (8003d08 <I2C_MasterRequestWrite+0x100>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f888 	bl	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00010008 	.word	0x00010008
 8003d08:	00010002 	.word	0x00010002

08003d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1c:	e048      	b.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d044      	beq.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe fb3b 	bl	80023a0 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d139      	bne.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10d      	bne.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	e00c      	b.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d116      	bne.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e023      	b.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10d      	bne.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	e00c      	b.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d093      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e0e:	e071      	b.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d123      	bne.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e067      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d041      	beq.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e70:	f7fe fa96 	bl	80023a0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d136      	bne.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d10c      	bne.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e00b      	b.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e021      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d10c      	bne.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e00b      	b.n	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f47f af6d 	bne.w	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f4c:	e034      	b.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f886 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e034      	b.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d028      	beq.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe fa1b 	bl	80023a0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11d      	bne.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b80      	cmp	r3, #128	@ 0x80
 8003f88:	d016      	beq.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc2:	2b80      	cmp	r3, #128	@ 0x80
 8003fc4:	d1c3      	bne.n	8003f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fdc:	e034      	b.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f83e 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e034      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d028      	beq.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fe f9d3 	bl	80023a0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11d      	bne.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b04      	cmp	r3, #4
 8004018:	d016      	beq.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d1c3      	bne.n	8003fde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004076:	d11b      	bne.n	80040b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e272      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8087 	beq.w	80041ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040dc:	4b92      	ldr	r3, [pc, #584]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d00c      	beq.n	8004102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d112      	bne.n	800411a <HAL_RCC_OscConfig+0x5e>
 80040f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004100:	d10b      	bne.n	800411a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004102:	4b89      	ldr	r3, [pc, #548]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d06c      	beq.n	80041e8 <HAL_RCC_OscConfig+0x12c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d168      	bne.n	80041e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e24c      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x76>
 8004124:	4b80      	ldr	r3, [pc, #512]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7f      	ldr	r2, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800412a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e02e      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x98>
 800413a:	4b7b      	ldr	r3, [pc, #492]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7a      	ldr	r2, [pc, #488]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b78      	ldr	r3, [pc, #480]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a77      	ldr	r2, [pc, #476]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800414c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e01d      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0xbc>
 800415e:	4b72      	ldr	r3, [pc, #456]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a71      	ldr	r2, [pc, #452]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4b6f      	ldr	r3, [pc, #444]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6e      	ldr	r2, [pc, #440]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e00b      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004178:	4b6b      	ldr	r3, [pc, #428]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6a      	ldr	r2, [pc, #424]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800417e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b68      	ldr	r3, [pc, #416]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a67      	ldr	r2, [pc, #412]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800418a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800418e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fe f902 	bl	80023a0 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a0:	f7fe f8fe 	bl	80023a0 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	@ 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e200      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0xe4>
 80041be:	e014      	b.n	80041ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fe f8ee 	bl	80023a0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fe f8ea 	bl	80023a0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	@ 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1ec      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x10c>
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d063      	beq.n	80042be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004202:	4b49      	ldr	r3, [pc, #292]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b08      	cmp	r3, #8
 800420c:	d11c      	bne.n	8004248 <HAL_RCC_OscConfig+0x18c>
 800420e:	4b46      	ldr	r3, [pc, #280]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d116      	bne.n	8004248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421a:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_RCC_OscConfig+0x176>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e1c0      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4939      	ldr	r1, [pc, #228]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004246:	e03a      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004250:	4b36      	ldr	r3, [pc, #216]	@ (800432c <HAL_RCC_OscConfig+0x270>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fe f8a3 	bl	80023a0 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425e:	f7fe f89f 	bl	80023a0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e1a1      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	4b2d      	ldr	r3, [pc, #180]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427c:	4b2a      	ldr	r3, [pc, #168]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4927      	ldr	r1, [pc, #156]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
 8004290:	e015      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004292:	4b26      	ldr	r3, [pc, #152]	@ (800432c <HAL_RCC_OscConfig+0x270>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe f882 	bl	80023a0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a0:	f7fe f87e 	bl	80023a0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e180      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03a      	beq.n	8004340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d019      	beq.n	8004306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d2:	4b17      	ldr	r3, [pc, #92]	@ (8004330 <HAL_RCC_OscConfig+0x274>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d8:	f7fe f862 	bl	80023a0 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e0:	f7fe f85e 	bl	80023a0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e160      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042fe:	2001      	movs	r0, #1
 8004300:	f000 fafe 	bl	8004900 <RCC_Delay>
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <HAL_RCC_OscConfig+0x274>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430c:	f7fe f848 	bl	80023a0 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004312:	e00f      	b.n	8004334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004314:	f7fe f844 	bl	80023a0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d908      	bls.n	8004334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e146      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	42420000 	.word	0x42420000
 8004330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	4b92      	ldr	r3, [pc, #584]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e9      	bne.n	8004314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a6 	beq.w	800449a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004352:	4b8b      	ldr	r3, [pc, #556]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10d      	bne.n	800437a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	4b88      	ldr	r3, [pc, #544]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	4a87      	ldr	r2, [pc, #540]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004368:	61d3      	str	r3, [r2, #28]
 800436a:	4b85      	ldr	r3, [pc, #532]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437a:	4b82      	ldr	r3, [pc, #520]	@ (8004584 <HAL_RCC_OscConfig+0x4c8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d118      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004386:	4b7f      	ldr	r3, [pc, #508]	@ (8004584 <HAL_RCC_OscConfig+0x4c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7e      	ldr	r2, [pc, #504]	@ (8004584 <HAL_RCC_OscConfig+0x4c8>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004392:	f7fe f805 	bl	80023a0 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439a:	f7fe f801 	bl	80023a0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b64      	cmp	r3, #100	@ 0x64
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e103      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ac:	4b75      	ldr	r3, [pc, #468]	@ (8004584 <HAL_RCC_OscConfig+0x4c8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d106      	bne.n	80043ce <HAL_RCC_OscConfig+0x312>
 80043c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6213      	str	r3, [r2, #32]
 80043cc:	e02d      	b.n	800442a <HAL_RCC_OscConfig+0x36e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x334>
 80043d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4a69      	ldr	r2, [pc, #420]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6213      	str	r3, [r2, #32]
 80043e2:	4b67      	ldr	r3, [pc, #412]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	4a66      	ldr	r2, [pc, #408]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6213      	str	r3, [r2, #32]
 80043ee:	e01c      	b.n	800442a <HAL_RCC_OscConfig+0x36e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d10c      	bne.n	8004412 <HAL_RCC_OscConfig+0x356>
 80043f8:	4b61      	ldr	r3, [pc, #388]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4a60      	ldr	r2, [pc, #384]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	f043 0304 	orr.w	r3, r3, #4
 8004402:	6213      	str	r3, [r2, #32]
 8004404:	4b5e      	ldr	r3, [pc, #376]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4a5d      	ldr	r2, [pc, #372]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6213      	str	r3, [r2, #32]
 8004410:	e00b      	b.n	800442a <HAL_RCC_OscConfig+0x36e>
 8004412:	4b5b      	ldr	r3, [pc, #364]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4a5a      	ldr	r2, [pc, #360]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6213      	str	r3, [r2, #32]
 800441e:	4b58      	ldr	r3, [pc, #352]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4a57      	ldr	r2, [pc, #348]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d015      	beq.n	800445e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004432:	f7fd ffb5 	bl	80023a0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fd ffb1 	bl	80023a0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0b1      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	4b4b      	ldr	r3, [pc, #300]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ee      	beq.n	800443a <HAL_RCC_OscConfig+0x37e>
 800445c:	e014      	b.n	8004488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445e:	f7fd ff9f 	bl	80023a0 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fd ff9b 	bl	80023a0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e09b      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447c:	4b40      	ldr	r3, [pc, #256]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ee      	bne.n	8004466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b3c      	ldr	r3, [pc, #240]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4a3b      	ldr	r2, [pc, #236]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8087 	beq.w	80045b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a4:	4b36      	ldr	r3, [pc, #216]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d061      	beq.n	8004574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d146      	bne.n	8004546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b33      	ldr	r3, [pc, #204]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fd ff6f 	bl	80023a0 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fd ff6b 	bl	80023a0 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e06d      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d8:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d108      	bne.n	8004500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ee:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4921      	ldr	r1, [pc, #132]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004500:	4b1f      	ldr	r3, [pc, #124]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a19      	ldr	r1, [r3, #32]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	430b      	orrs	r3, r1
 8004512:	491b      	ldr	r1, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fd ff3f 	bl	80023a0 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fd ff3b 	bl	80023a0 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03d      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004538:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x46a>
 8004544:	e035      	b.n	80045b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fd ff28 	bl	80023a0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fd ff24 	bl	80023a0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e026      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x498>
 8004572:	e01e      	b.n	80045b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d107      	bne.n	800458c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e019      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
 8004580:	40021000 	.word	0x40021000
 8004584:	40007000 	.word	0x40007000
 8004588:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800458c:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_RCC_OscConfig+0x500>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	429a      	cmp	r2, r3
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000

080045c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0d0      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d910      	bls.n	8004604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b67      	ldr	r3, [pc, #412]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 0207 	bic.w	r2, r3, #7
 80045ea:	4965      	ldr	r1, [pc, #404]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b63      	ldr	r3, [pc, #396]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0b8      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800461c:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a58      	ldr	r2, [pc, #352]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004634:	4b53      	ldr	r3, [pc, #332]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a52      	ldr	r2, [pc, #328]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800463e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b50      	ldr	r3, [pc, #320]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	494d      	ldr	r1, [pc, #308]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d040      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004666:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d115      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e07f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b41      	ldr	r3, [pc, #260]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e073      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3d      	ldr	r3, [pc, #244]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e06b      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4936      	ldr	r1, [pc, #216]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fe76 	bl	80023a0 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fe72 	bl	80023a0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e053      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d210      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b24      	ldr	r3, [pc, #144]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0207 	bic.w	r2, r3, #7
 80046f6:	4922      	ldr	r1, [pc, #136]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b20      	ldr	r3, [pc, #128]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e032      	b.n	8004776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4916      	ldr	r1, [pc, #88]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800473a:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	490e      	ldr	r1, [pc, #56]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800474e:	f000 f821 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	490a      	ldr	r1, [pc, #40]	@ (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	5ccb      	ldrb	r3, [r1, r3]
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	4a09      	ldr	r2, [pc, #36]	@ (800478c <HAL_RCC_ClockConfig+0x1cc>)
 8004768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800476a:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <HAL_RCC_ClockConfig+0x1d0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd faa4 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40022000 	.word	0x40022000
 8004784:	40021000 	.word	0x40021000
 8004788:	0800a374 	.word	0x0800a374
 800478c:	20000834 	.word	0x20000834
 8004790:	20000838 	.word	0x20000838

08004794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x94>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d002      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x30>
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d003      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x36>
 80047c2:	e027      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_RCC_GetSysClockFreq+0x98>)
 80047c6:	613b      	str	r3, [r7, #16]
      break;
 80047c8:	e027      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047d4:	5cd3      	ldrb	r3, [r2, r3]
 80047d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d010      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047e2:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x94>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	0c5b      	lsrs	r3, r3, #17
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a0d      	ldr	r2, [pc, #52]	@ (800482c <HAL_RCC_GetSysClockFreq+0x98>)
 80047f6:	fb03 f202 	mul.w	r2, r3, r2
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e004      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	613b      	str	r3, [r7, #16]
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetSysClockFreq+0x98>)
 8004816:	613b      	str	r3, [r7, #16]
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	693b      	ldr	r3, [r7, #16]
}
 800481c:	4618      	mov	r0, r3
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	007a1200 	.word	0x007a1200
 8004830:	0800a38c 	.word	0x0800a38c
 8004834:	0800a39c 	.word	0x0800a39c
 8004838:	003d0900 	.word	0x003d0900

0800483c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004840:	4b02      	ldr	r3, [pc, #8]	@ (800484c <HAL_RCC_GetHCLKFreq+0x10>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	20000834 	.word	0x20000834

08004850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004854:	f7ff fff2 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4903      	ldr	r1, [pc, #12]	@ (8004874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	0800a384 	.word	0x0800a384

08004878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800487c:	f7ff ffde 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	0adb      	lsrs	r3, r3, #11
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4903      	ldr	r1, [pc, #12]	@ (800489c <HAL_RCC_GetPCLK2Freq+0x24>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	0800a384 	.word	0x0800a384

080048a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	220f      	movs	r2, #15
 80048ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b0:	4b11      	ldr	r3, [pc, #68]	@ (80048f8 <HAL_RCC_GetClockConfig+0x58>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0203 	and.w	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048bc:	4b0e      	ldr	r3, [pc, #56]	@ (80048f8 <HAL_RCC_GetClockConfig+0x58>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048c8:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <HAL_RCC_GetClockConfig+0x58>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048d4:	4b08      	ldr	r3, [pc, #32]	@ (80048f8 <HAL_RCC_GetClockConfig+0x58>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	08db      	lsrs	r3, r3, #3
 80048da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048e2:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCC_GetClockConfig+0x5c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0207 	and.w	r2, r3, #7
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40022000 	.word	0x40022000

08004900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004908:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <RCC_Delay+0x34>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0a      	ldr	r2, [pc, #40]	@ (8004938 <RCC_Delay+0x38>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0a5b      	lsrs	r3, r3, #9
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800491c:	bf00      	nop
  }
  while (Delay --);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1e5a      	subs	r2, r3, #1
 8004922:	60fa      	str	r2, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f9      	bne.n	800491c <RCC_Delay+0x1c>
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr
 8004934:	20000834 	.word	0x20000834
 8004938:	10624dd3 	.word	0x10624dd3

0800493c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d07d      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10d      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b4c      	ldr	r3, [pc, #304]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004972:	61d3      	str	r3, [r2, #28]
 8004974:	4b49      	ldr	r3, [pc, #292]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	4b46      	ldr	r3, [pc, #280]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d118      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004990:	4b43      	ldr	r3, [pc, #268]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a42      	ldr	r2, [pc, #264]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800499a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499c:	f7fd fd00 	bl	80023a0 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a4:	f7fd fcfc 	bl	80023a0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e06d      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b6:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049c2:	4b36      	ldr	r3, [pc, #216]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d027      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ea:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f0:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049f6:	4a29      	ldr	r2, [pc, #164]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d014      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fd fccb 	bl	80023a0 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fd fcc7 	bl	80023a0 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e036      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	4b1d      	ldr	r3, [pc, #116]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ee      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4917      	ldr	r1, [pc, #92]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a60:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	490b      	ldr	r1, [pc, #44]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a7e:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4904      	ldr	r1, [pc, #16]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42420440 	.word	0x42420440

08004aa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	f200 808a 	bhi.w	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d045      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d075      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004ade:	e082      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004ae0:	4b46      	ldr	r3, [pc, #280]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004ae6:	4b45      	ldr	r3, [pc, #276]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d07b      	beq.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	0c9b      	lsrs	r3, r3, #18
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4a41      	ldr	r2, [pc, #260]	@ (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004afc:	5cd3      	ldrb	r3, [r2, r3]
 8004afe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d015      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	0c5b      	lsrs	r3, r3, #17
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	4a3b      	ldr	r2, [pc, #236]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b16:	5cd3      	ldrb	r3, [r2, r3]
 8004b18:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b24:	4a38      	ldr	r2, [pc, #224]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e004      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4a34      	ldr	r2, [pc, #208]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b40:	4b2e      	ldr	r3, [pc, #184]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b4c:	d102      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	61bb      	str	r3, [r7, #24]
      break;
 8004b52:	e04a      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4a2d      	ldr	r2, [pc, #180]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
      break;
 8004b62:	e042      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b74:	d108      	bne.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004b80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	e01f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b92:	d109      	bne.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004b94:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ba0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e00f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb2:	d11c      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004bb4:	4b11      	ldr	r3, [pc, #68]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004bc0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004bc4:	61bb      	str	r3, [r7, #24]
      break;
 8004bc6:	e012      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004bc8:	e011      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004bca:	f7ff fe55 	bl	8004878 <HAL_RCC_GetPCLK2Freq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0b9b      	lsrs	r3, r3, #14
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	61bb      	str	r3, [r7, #24]
      break;
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004bee:	bf00      	nop
    }
  }
  return (frequency);
 8004bf0:	69bb      	ldr	r3, [r7, #24]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	0800a3a0 	.word	0x0800a3a0
 8004c04:	0800a3b0 	.word	0x0800a3b0
 8004c08:	007a1200 	.word	0x007a1200
 8004c0c:	003d0900 	.word	0x003d0900
 8004c10:	aaaaaaab 	.word	0xaaaaaaab

08004c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e041      	b.n	8004caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd fa4e 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f000 fd48 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e03a      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_TIM_Base_Start_IT+0x98>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x58>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x58>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a14      	ldr	r2, [pc, #80]	@ (8004d50 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x58>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a13      	ldr	r2, [pc, #76]	@ (8004d54 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d111      	bne.n	8004d30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	e007      	b.n	8004d40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800

08004d58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e041      	b.n	8004dee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f839 	bl	8004df6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f000 fca6 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <HAL_TIM_PWM_Start+0x24>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e022      	b.n	8004e72 <HAL_TIM_PWM_Start+0x6a>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d109      	bne.n	8004e46 <HAL_TIM_PWM_Start+0x3e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e015      	b.n	8004e72 <HAL_TIM_PWM_Start+0x6a>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d109      	bne.n	8004e60 <HAL_TIM_PWM_Start+0x58>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e008      	b.n	8004e72 <HAL_TIM_PWM_Start+0x6a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e05e      	b.n	8004f38 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x82>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e88:	e013      	b.n	8004eb2 <HAL_TIM_PWM_Start+0xaa>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_PWM_Start+0x92>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e98:	e00b      	b.n	8004eb2 <HAL_TIM_PWM_Start+0xaa>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d104      	bne.n	8004eaa <HAL_TIM_PWM_Start+0xa2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ea8:	e003      	b.n	8004eb2 <HAL_TIM_PWM_Start+0xaa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fea0 	bl	8005c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f40 <HAL_TIM_PWM_Start+0x138>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <HAL_TIM_PWM_Start+0x138>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIM_PWM_Start+0xfa>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_PWM_Start+0xfa>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a14      	ldr	r2, [pc, #80]	@ (8004f44 <HAL_TIM_PWM_Start+0x13c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_PWM_Start+0xfa>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <HAL_TIM_PWM_Start+0x140>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d010      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	e007      	b.n	8004f36 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800

08004f4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e093      	b.n	8005088 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fd f8e1 	bl	800213c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f000 fba1 	bl	80056e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004fec:	f023 030c 	bic.w	r3, r3, #12
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ff8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	4313      	orrs	r3, r2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	011a      	lsls	r2, r3, #4
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	4313      	orrs	r3, r2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	4313      	orrs	r3, r2
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d110      	bne.n	80050e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050c6:	7b7b      	ldrb	r3, [r7, #13]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e069      	b.n	80051a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e0:	e031      	b.n	8005146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d110      	bne.n	800510a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d102      	bne.n	80050f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ee:	7b3b      	ldrb	r3, [r7, #12]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e055      	b.n	80051a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005108:	e01d      	b.n	8005146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d108      	bne.n	8005122 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005116:	7b7b      	ldrb	r3, [r7, #13]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d102      	bne.n	8005122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800511c:	7b3b      	ldrb	r3, [r7, #12]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d001      	beq.n	8005126 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e03e      	b.n	80051a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_TIM_Encoder_Start+0xc4>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b04      	cmp	r3, #4
 8005150:	d008      	beq.n	8005164 <HAL_TIM_Encoder_Start+0xd4>
 8005152:	e00f      	b.n	8005174 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2201      	movs	r2, #1
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fd4f 	bl	8005c00 <TIM_CCxChannelCmd>
      break;
 8005162:	e016      	b.n	8005192 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	2104      	movs	r1, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fd47 	bl	8005c00 <TIM_CCxChannelCmd>
      break;
 8005172:	e00e      	b.n	8005192 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fd3f 	bl	8005c00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	2104      	movs	r1, #4
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fd38 	bl	8005c00 <TIM_CCxChannelCmd>
      break;
 8005190:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d020      	beq.n	8005210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0202 	mvn.w	r2, #2
 80051e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa5a 	bl	80056b0 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa4d 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fa5c 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0204 	mvn.w	r2, #4
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa34 	bl	80056b0 <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa27 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fa36 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0208 	mvn.w	r2, #8
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2204      	movs	r2, #4
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa0e 	bl	80056b0 <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa01 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fa10 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d020      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0210 	mvn.w	r2, #16
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2208      	movs	r2, #8
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9e8 	bl	80056b0 <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f9db 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f9ea 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc fc82 	bl	8001c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fced 	bl	8005d16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9ba 	bl	80056d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fcc0 	bl	8005d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0ae      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	f200 809f 	bhi.w	80054f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ba:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080054f9 	.word	0x080054f9
 80053c8:	080054f9 	.word	0x080054f9
 80053cc:	080054f9 	.word	0x080054f9
 80053d0:	08005435 	.word	0x08005435
 80053d4:	080054f9 	.word	0x080054f9
 80053d8:	080054f9 	.word	0x080054f9
 80053dc:	080054f9 	.word	0x080054f9
 80053e0:	08005477 	.word	0x08005477
 80053e4:	080054f9 	.word	0x080054f9
 80053e8:	080054f9 	.word	0x080054f9
 80053ec:	080054f9 	.word	0x080054f9
 80053f0:	080054b7 	.word	0x080054b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f9e2 	bl	80057c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6999      	ldr	r1, [r3, #24]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	619a      	str	r2, [r3, #24]
      break;
 8005432:	e064      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fa28 	bl	8005890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800544e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800545e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	619a      	str	r2, [r3, #24]
      break;
 8005474:	e043      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fa71 	bl	8005964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0208 	orr.w	r2, r2, #8
 8005490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0204 	bic.w	r2, r2, #4
 80054a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69d9      	ldr	r1, [r3, #28]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	61da      	str	r2, [r3, #28]
      break;
 80054b4:	e023      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fabb 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69d9      	ldr	r1, [r3, #28]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	021a      	lsls	r2, r3, #8
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	61da      	str	r2, [r3, #28]
      break;
 80054f6:	e002      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIM_ConfigClockSource+0x1c>
 8005528:	2302      	movs	r3, #2
 800552a:	e0b4      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x186>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800554a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005564:	d03e      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800556a:	f200 8087 	bhi.w	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005572:	f000 8086 	beq.w	8005682 <HAL_TIM_ConfigClockSource+0x172>
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557a:	d87f      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800557c:	2b70      	cmp	r3, #112	@ 0x70
 800557e:	d01a      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005580:	2b70      	cmp	r3, #112	@ 0x70
 8005582:	d87b      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 8005584:	2b60      	cmp	r3, #96	@ 0x60
 8005586:	d050      	beq.n	800562a <HAL_TIM_ConfigClockSource+0x11a>
 8005588:	2b60      	cmp	r3, #96	@ 0x60
 800558a:	d877      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b50      	cmp	r3, #80	@ 0x50
 800558e:	d03c      	beq.n	800560a <HAL_TIM_ConfigClockSource+0xfa>
 8005590:	2b50      	cmp	r3, #80	@ 0x50
 8005592:	d873      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b40      	cmp	r3, #64	@ 0x40
 8005596:	d058      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x13a>
 8005598:	2b40      	cmp	r3, #64	@ 0x40
 800559a:	d86f      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b30      	cmp	r3, #48	@ 0x30
 800559e:	d064      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055a0:	2b30      	cmp	r3, #48	@ 0x30
 80055a2:	d86b      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d060      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d867      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d05c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d05a      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x15a>
 80055b4:	e062      	b.n	800567c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055c6:	f000 fafc 	bl	8005bc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	609a      	str	r2, [r3, #8]
      break;
 80055e2:	e04f      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	f000 fae5 	bl	8005bc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005606:	609a      	str	r2, [r3, #8]
      break;
 8005608:	e03c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005616:	461a      	mov	r2, r3
 8005618:	f000 fa5c 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2150      	movs	r1, #80	@ 0x50
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fab3 	bl	8005b8e <TIM_ITRx_SetConfig>
      break;
 8005628:	e02c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005636:	461a      	mov	r2, r3
 8005638:	f000 fa7a 	bl	8005b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2160      	movs	r1, #96	@ 0x60
 8005642:	4618      	mov	r0, r3
 8005644:	f000 faa3 	bl	8005b8e <TIM_ITRx_SetConfig>
      break;
 8005648:	e01c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005656:	461a      	mov	r2, r3
 8005658:	f000 fa3c 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2140      	movs	r1, #64	@ 0x40
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa93 	bl	8005b8e <TIM_ITRx_SetConfig>
      break;
 8005668:	e00c      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f000 fa8a 	bl	8005b8e <TIM_ITRx_SetConfig>
      break;
 800567a:	e003      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
      break;
 8005680:	e000      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
	...

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a2f      	ldr	r2, [pc, #188]	@ (80057b8 <TIM_Base_SetConfig+0xd0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00b      	beq.n	8005718 <TIM_Base_SetConfig+0x30>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0x30>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a2c      	ldr	r2, [pc, #176]	@ (80057bc <TIM_Base_SetConfig+0xd4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0x30>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2b      	ldr	r2, [pc, #172]	@ (80057c0 <TIM_Base_SetConfig+0xd8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a22      	ldr	r2, [pc, #136]	@ (80057b8 <TIM_Base_SetConfig+0xd0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_Base_SetConfig+0x62>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005738:	d007      	beq.n	800574a <TIM_Base_SetConfig+0x62>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1f      	ldr	r2, [pc, #124]	@ (80057bc <TIM_Base_SetConfig+0xd4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_Base_SetConfig+0x62>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1e      	ldr	r2, [pc, #120]	@ (80057c0 <TIM_Base_SetConfig+0xd8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d108      	bne.n	800575c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0d      	ldr	r2, [pc, #52]	@ (80057b8 <TIM_Base_SetConfig+0xd0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d103      	bne.n	8005790 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]
  }
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800

080057c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f023 0201 	bic.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 0302 	bic.w	r3, r3, #2
 800580c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1c      	ldr	r2, [pc, #112]	@ (800588c <TIM_OC1_SetConfig+0xc8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10c      	bne.n	800583a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0308 	bic.w	r3, r3, #8
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a13      	ldr	r2, [pc, #76]	@ (800588c <TIM_OC1_SetConfig+0xc8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00

08005890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 0210 	bic.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <TIM_OC2_SetConfig+0xd0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10d      	bne.n	800590c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800590a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <TIM_OC2_SetConfig+0xd0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d113      	bne.n	800593c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800591a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr
 8005960:	40012c00 	.word	0x40012c00

08005964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0303 	bic.w	r3, r3, #3
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a34 <TIM_OC3_SetConfig+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <TIM_OC3_SetConfig+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d113      	bne.n	8005a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40012c00 	.word	0x40012c00

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a0f      	ldr	r2, [pc, #60]	@ (8005ad0 <TIM_OC4_SetConfig+0x98>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d109      	bne.n	8005aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	019b      	lsls	r3, r3, #6
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr
 8005ad0:	40012c00 	.word	0x40012c00

08005ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 030a 	bic.w	r3, r3, #10
 8005b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0210 	bic.w	r2, r3, #16
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	031b      	lsls	r3, r3, #12
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f043 0307 	orr.w	r3, r3, #7
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	021a      	lsls	r2, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	609a      	str	r2, [r3, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2201      	movs	r2, #1
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e046      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	@ (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a12      	ldr	r2, [pc, #72]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a10      	ldr	r2, [pc, #64]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800

08005d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e042      	b.n	8005dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc fa8c 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2224      	movs	r2, #36	@ 0x24
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f971 	bl	8006054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	@ 0x28
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d175      	bne.n	8005ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_UART_Transmit+0x2c>
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e06e      	b.n	8005ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2221      	movs	r2, #33	@ 0x21
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e06:	f7fc facb 	bl	80023a0 <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e20:	d108      	bne.n	8005e34 <HAL_UART_Transmit+0x6c>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e003      	b.n	8005e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e3c:	e02e      	b.n	8005e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	2180      	movs	r1, #128	@ 0x80
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f848 	bl	8005ede <UART_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e03a      	b.n	8005ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e007      	b.n	8005e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1cb      	bne.n	8005e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2140      	movs	r1, #64	@ 0x40
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f814 	bl	8005ede <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b086      	sub	sp, #24
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eee:	e03b      	b.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d037      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fc fa52 	bl	80023a0 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e03a      	b.n	8005f88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d023      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b80      	cmp	r3, #128	@ 0x80
 8005f24:	d020      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b40      	cmp	r3, #64	@ 0x40
 8005f2a:	d01d      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d116      	bne.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f81d 	bl	8005f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e00f      	b.n	8005f88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d0b4      	beq.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b095      	sub	sp, #84	@ 0x54
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e5      	bne.n	8005f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e5      	bne.n	8005fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	2b01      	cmp	r3, #1
 8006006:	d119      	bne.n	800603c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	60bb      	str	r3, [r7, #8]
   return(result);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006028:	61ba      	str	r2, [r7, #24]
 800602a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	613b      	str	r3, [r7, #16]
   return(result);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e5      	bne.n	8006008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800604a:	bf00      	nop
 800604c:	3754      	adds	r7, #84	@ 0x54
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800608e:	f023 030c 	bic.w	r3, r3, #12
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	430b      	orrs	r3, r1
 800609a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006168 <UART_SetConfig+0x114>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fe fbdc 	bl	8004878 <HAL_RCC_GetPCLK2Freq>
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	e002      	b.n	80060ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe fbc4 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 80060c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009a      	lsls	r2, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4a22      	ldr	r2, [pc, #136]	@ (800616c <UART_SetConfig+0x118>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	0119      	lsls	r1, r3, #4
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009a      	lsls	r2, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <UART_SetConfig+0x118>)
 8006102:	fba3 0302 	umull	r0, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2064      	movs	r0, #100	@ 0x64
 800610a:	fb00 f303 	mul.w	r3, r0, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	3332      	adds	r3, #50	@ 0x32
 8006114:	4a15      	ldr	r2, [pc, #84]	@ (800616c <UART_SetConfig+0x118>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006120:	4419      	add	r1, r3
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009a      	lsls	r2, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	fbb2 f2f3 	udiv	r2, r2, r3
 8006138:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <UART_SetConfig+0x118>)
 800613a:	fba3 0302 	umull	r0, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	2064      	movs	r0, #100	@ 0x64
 8006142:	fb00 f303 	mul.w	r3, r0, r3
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	3332      	adds	r3, #50	@ 0x32
 800614c:	4a07      	ldr	r2, [pc, #28]	@ (800616c <UART_SetConfig+0x118>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	440a      	add	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40013800 	.word	0x40013800
 800616c:	51eb851f 	.word	0x51eb851f

08006170 <__NVIC_SetPriority>:
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800617c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006180:	2b00      	cmp	r3, #0
 8006182:	db0a      	blt.n	800619a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	490c      	ldr	r1, [pc, #48]	@ (80061bc <__NVIC_SetPriority+0x4c>)
 800618a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618e:	0112      	lsls	r2, r2, #4
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	440b      	add	r3, r1
 8006194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006198:	e00a      	b.n	80061b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4908      	ldr	r1, [pc, #32]	@ (80061c0 <__NVIC_SetPriority+0x50>)
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	3b04      	subs	r3, #4
 80061a8:	0112      	lsls	r2, r2, #4
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	440b      	add	r3, r1
 80061ae:	761a      	strb	r2, [r3, #24]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	e000e100 	.word	0xe000e100
 80061c0:	e000ed00 	.word	0xe000ed00

080061c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061c8:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <SysTick_Handler+0x1c>)
 80061ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061cc:	f002 f986 	bl	80084dc <xTaskGetSchedulerState>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d001      	beq.n	80061da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061d6:	f003 f827 	bl	8009228 <xPortSysTickHandler>
  }
}
 80061da:	bf00      	nop
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000e010 	.word	0xe000e010

080061e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80061e8:	2100      	movs	r1, #0
 80061ea:	f06f 0004 	mvn.w	r0, #4
 80061ee:	f7ff ffbf 	bl	8006170 <__NVIC_SetPriority>
#endif
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061fe:	f3ef 8305 	mrs	r3, IPSR
 8006202:	603b      	str	r3, [r7, #0]
  return(result);
 8006204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800620a:	f06f 0305 	mvn.w	r3, #5
 800620e:	607b      	str	r3, [r7, #4]
 8006210:	e00c      	b.n	800622c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006212:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <osKernelInitialize+0x40>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d105      	bne.n	8006226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800621a:	4b07      	ldr	r3, [pc, #28]	@ (8006238 <osKernelInitialize+0x40>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006220:	2300      	movs	r3, #0
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	e002      	b.n	800622c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800622c:	687b      	ldr	r3, [r7, #4]
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	20001c50 	.word	0x20001c50

0800623c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006242:	f3ef 8305 	mrs	r3, IPSR
 8006246:	603b      	str	r3, [r7, #0]
  return(result);
 8006248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <osKernelStart+0x1a>
    stat = osErrorISR;
 800624e:	f06f 0305 	mvn.w	r3, #5
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	e010      	b.n	8006278 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006256:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <osKernelStart+0x48>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d109      	bne.n	8006272 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800625e:	f7ff ffc1 	bl	80061e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006262:	4b08      	ldr	r3, [pc, #32]	@ (8006284 <osKernelStart+0x48>)
 8006264:	2202      	movs	r2, #2
 8006266:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006268:	f001 fcd8 	bl	8007c1c <vTaskStartScheduler>
      stat = osOK;
 800626c:	2300      	movs	r3, #0
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e002      	b.n	8006278 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006278:	687b      	ldr	r3, [r7, #4]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20001c50 	.word	0x20001c50

08006288 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	@ 0x38
 800628c:	af04      	add	r7, sp, #16
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006298:	f3ef 8305 	mrs	r3, IPSR
 800629c:	617b      	str	r3, [r7, #20]
  return(result);
 800629e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d17e      	bne.n	80063a2 <osThreadNew+0x11a>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d07b      	beq.n	80063a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062aa:	2340      	movs	r3, #64	@ 0x40
 80062ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062ae:	2318      	movs	r3, #24
 80062b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d045      	beq.n	800634e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <osThreadNew+0x48>
        name = attr->name;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <osThreadNew+0x6e>
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b38      	cmp	r3, #56	@ 0x38
 80062e8:	d805      	bhi.n	80062f6 <osThreadNew+0x6e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <osThreadNew+0x72>
        return (NULL);
 80062f6:	2300      	movs	r3, #0
 80062f8:	e054      	b.n	80063a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	089b      	lsrs	r3, r3, #2
 8006308:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <osThreadNew+0xa8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2ba7      	cmp	r3, #167	@ 0xa7
 8006318:	d90a      	bls.n	8006330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800631e:	2b00      	cmp	r3, #0
 8006320:	d006      	beq.n	8006330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <osThreadNew+0xa8>
        mem = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e010      	b.n	8006352 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10c      	bne.n	8006352 <osThreadNew+0xca>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d108      	bne.n	8006352 <osThreadNew+0xca>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <osThreadNew+0xca>
          mem = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	e001      	b.n	8006352 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d110      	bne.n	800637a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006360:	9202      	str	r2, [sp, #8]
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6a3a      	ldr	r2, [r7, #32]
 800636c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 fa60 	bl	8007834 <xTaskCreateStatic>
 8006374:	4603      	mov	r3, r0
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	e013      	b.n	80063a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d110      	bne.n	80063a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	b29a      	uxth	r2, r3
 8006384:	f107 0310 	add.w	r3, r7, #16
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f001 faae 	bl	80078f4 <xTaskCreate>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <osThreadNew+0x11a>
            hTask = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063a2:	693b      	ldr	r3, [r7, #16]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	@ 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b4:	f3ef 8305 	mrs	r3, IPSR
 80063b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <osDelay+0x1c>
    stat = osErrorISR;
 80063c0:	f06f 0305 	mvn.w	r3, #5
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e007      	b.n	80063d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fbec 	bl	8007bb0 <vTaskDelay>
    }
  }

  return (stat);
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b08a      	sub	sp, #40	@ 0x28
 80063e6:	af02      	add	r7, sp, #8
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f2:	f3ef 8305 	mrs	r3, IPSR
 80063f6:	613b      	str	r3, [r7, #16]
  return(result);
 80063f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d175      	bne.n	80064ea <osSemaphoreNew+0x108>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d072      	beq.n	80064ea <osSemaphoreNew+0x108>
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d86e      	bhi.n	80064ea <osSemaphoreNew+0x108>
    mem = -1;
 800640c:	f04f 33ff 	mov.w	r3, #4294967295
 8006410:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d015      	beq.n	8006444 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <osSemaphoreNew+0x4c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b4f      	cmp	r3, #79	@ 0x4f
 8006426:	d902      	bls.n	800642e <osSemaphoreNew+0x4c>
        mem = 1;
 8006428:	2301      	movs	r3, #1
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e00c      	b.n	8006448 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d108      	bne.n	8006448 <osSemaphoreNew+0x66>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <osSemaphoreNew+0x66>
          mem = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	e001      	b.n	8006448 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d04c      	beq.n	80064ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d128      	bne.n	80064a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10a      	bne.n	8006472 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2203      	movs	r2, #3
 8006462:	9200      	str	r2, [sp, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	2100      	movs	r1, #0
 8006468:	2001      	movs	r0, #1
 800646a:	f000 fa23 	bl	80068b4 <xQueueGenericCreateStatic>
 800646e:	61f8      	str	r0, [r7, #28]
 8006470:	e005      	b.n	800647e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006472:	2203      	movs	r2, #3
 8006474:	2100      	movs	r1, #0
 8006476:	2001      	movs	r0, #1
 8006478:	f000 fa99 	bl	80069ae <xQueueGenericCreate>
 800647c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d022      	beq.n	80064ca <osSemaphoreNew+0xe8>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01f      	beq.n	80064ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800648a:	2300      	movs	r3, #0
 800648c:	2200      	movs	r2, #0
 800648e:	2100      	movs	r1, #0
 8006490:	69f8      	ldr	r0, [r7, #28]
 8006492:	f000 fb59 	bl	8006b48 <xQueueGenericSend>
 8006496:	4603      	mov	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	d016      	beq.n	80064ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800649c:	69f8      	ldr	r0, [r7, #28]
 800649e:	f000 fff7 	bl	8007490 <vQueueDelete>
            hSemaphore = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	e010      	b.n	80064ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d108      	bne.n	80064c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fad7 	bl	8006a6a <xQueueCreateCountingSemaphoreStatic>
 80064bc:	61f8      	str	r0, [r7, #28]
 80064be:	e004      	b.n	80064ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fb0a 	bl	8006adc <xQueueCreateCountingSemaphore>
 80064c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <osSemaphoreNew+0xfc>
          name = attr->name;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e001      	b.n	80064e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80064e2:	6979      	ldr	r1, [r7, #20]
 80064e4:	69f8      	ldr	r0, [r7, #28]
 80064e6:	f001 f91f 	bl	8007728 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80064ea:	69fb      	ldr	r3, [r7, #28]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800650c:	f06f 0303 	mvn.w	r3, #3
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e039      	b.n	8006588 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006514:	f3ef 8305 	mrs	r3, IPSR
 8006518:	60fb      	str	r3, [r7, #12]
  return(result);
 800651a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800651c:	2b00      	cmp	r3, #0
 800651e:	d022      	beq.n	8006566 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006526:	f06f 0303 	mvn.w	r3, #3
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e02c      	b.n	8006588 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006532:	f107 0308 	add.w	r3, r7, #8
 8006536:	461a      	mov	r2, r3
 8006538:	2100      	movs	r1, #0
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f000 ff26 	bl	800738c <xQueueReceiveFromISR>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d003      	beq.n	800654e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006546:	f06f 0302 	mvn.w	r3, #2
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e01c      	b.n	8006588 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d019      	beq.n	8006588 <osSemaphoreAcquire+0x94>
 8006554:	4b0f      	ldr	r3, [pc, #60]	@ (8006594 <osSemaphoreAcquire+0xa0>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	e010      	b.n	8006588 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f000 fdff 	bl	800716c <xQueueSemaphoreTake>
 800656e:	4603      	mov	r3, r0
 8006570:	2b01      	cmp	r3, #1
 8006572:	d009      	beq.n	8006588 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800657a:	f06f 0301 	mvn.w	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e002      	b.n	8006588 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006582:	f06f 0302 	mvn.w	r3, #2
 8006586:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006588:	697b      	ldr	r3, [r7, #20]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80065ae:	f06f 0303 	mvn.w	r3, #3
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e02c      	b.n	8006610 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b6:	f3ef 8305 	mrs	r3, IPSR
 80065ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80065bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01a      	beq.n	80065f8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065c6:	f107 0308 	add.w	r3, r7, #8
 80065ca:	4619      	mov	r1, r3
 80065cc:	6938      	ldr	r0, [r7, #16]
 80065ce:	f000 fc5b 	bl	8006e88 <xQueueGiveFromISR>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d003      	beq.n	80065e0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80065d8:	f06f 0302 	mvn.w	r3, #2
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e017      	b.n	8006610 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d014      	beq.n	8006610 <osSemaphoreRelease+0x78>
 80065e6:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <osSemaphoreRelease+0x84>)
 80065e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	e00b      	b.n	8006610 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065f8:	2300      	movs	r3, #0
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	6938      	ldr	r0, [r7, #16]
 8006600:	f000 faa2 	bl	8006b48 <xQueueGenericSend>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d002      	beq.n	8006610 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800660a:	f06f 0302 	mvn.w	r3, #2
 800660e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006610:	697b      	ldr	r3, [r7, #20]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a06      	ldr	r2, [pc, #24]	@ (8006648 <vApplicationGetIdleTaskMemory+0x28>)
 8006630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4a05      	ldr	r2, [pc, #20]	@ (800664c <vApplicationGetIdleTaskMemory+0x2c>)
 8006636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2240      	movs	r2, #64	@ 0x40
 800663c:	601a      	str	r2, [r3, #0]
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	20001c54 	.word	0x20001c54
 800664c:	20001cfc 	.word	0x20001cfc

08006650 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4a06      	ldr	r2, [pc, #24]	@ (8006678 <vApplicationGetTimerTaskMemory+0x28>)
 8006660:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4a05      	ldr	r2, [pc, #20]	@ (800667c <vApplicationGetTimerTaskMemory+0x2c>)
 8006666:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2280      	movs	r2, #128	@ 0x80
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr
 8006678:	20001dfc 	.word	0x20001dfc
 800667c:	20001ea4 	.word	0x20001ea4

08006680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f103 0208 	add.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 0208 	add.w	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f103 0208 	add.w	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d103      	bne.n	800673c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e00c      	b.n	8006756 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3308      	adds	r3, #8
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e002      	b.n	800674a <vListInsert+0x2e>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	d2f6      	bcs.n	8006744 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6892      	ldr	r2, [r2, #8]
 80067a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d103      	bne.n	80067c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	1e5a      	subs	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr
	...

080067e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10b      	bne.n	800680c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	e7fd      	b.n	8006808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800680c:	f002 fc8e 	bl	800912c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	441a      	add	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800683c:	3b01      	subs	r3, #1
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	441a      	add	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	22ff      	movs	r2, #255	@ 0xff
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	22ff      	movs	r2, #255	@ 0xff
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d114      	bne.n	800688c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01a      	beq.n	80068a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3310      	adds	r3, #16
 800686e:	4618      	mov	r0, r3
 8006870:	f001 fc6e 	bl	8008150 <xTaskRemoveFromEventList>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d012      	beq.n	80068a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <xQueueGenericReset+0xd0>)
 800687c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	e009      	b.n	80068a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3310      	adds	r3, #16
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fef5 	bl	8006680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3324      	adds	r3, #36	@ 0x24
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fef0 	bl	8006680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068a0:	f002 fc74 	bl	800918c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068a4:	2301      	movs	r3, #1
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08e      	sub	sp, #56	@ 0x38
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	e7fd      	b.n	80068dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10b      	bne.n	80068fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <xQueueGenericCreateStatic+0x56>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <xQueueGenericCreateStatic+0x5a>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <xQueueGenericCreateStatic+0x5c>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10b      	bne.n	800692c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	623b      	str	r3, [r7, #32]
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	e7fd      	b.n	8006928 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <xQueueGenericCreateStatic+0x84>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <xQueueGenericCreateStatic+0x88>
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <xQueueGenericCreateStatic+0x8a>
 800693c:	2300      	movs	r3, #0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	61fb      	str	r3, [r7, #28]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800695a:	2350      	movs	r3, #80	@ 0x50
 800695c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b50      	cmp	r3, #80	@ 0x50
 8006962:	d00b      	beq.n	800697c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	61bb      	str	r3, [r7, #24]
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	e7fd      	b.n	8006978 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800697c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00d      	beq.n	80069a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006990:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f840 	bl	8006a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3730      	adds	r7, #48	@ 0x30
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08a      	sub	sp, #40	@ 0x28
 80069b2:	af02      	add	r7, sp, #8
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	4613      	mov	r3, r2
 80069ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <xQueueGenericCreate+0x2c>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	613b      	str	r3, [r7, #16]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3350      	adds	r3, #80	@ 0x50
 80069e8:	4618      	mov	r0, r3
 80069ea:	f002 fca1 	bl	8009330 <pvPortMalloc>
 80069ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d011      	beq.n	8006a1a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	3350      	adds	r3, #80	@ 0x50
 80069fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a08:	79fa      	ldrb	r2, [r7, #7]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f805 	bl	8006a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a52:	2101      	movs	r1, #1
 8006a54:	69b8      	ldr	r0, [r7, #24]
 8006a56:	f7ff fec3 	bl	80067e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b08a      	sub	sp, #40	@ 0x28
 8006a6e:	af02      	add	r7, sp, #8
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61bb      	str	r3, [r7, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d90b      	bls.n	8006ab4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	617b      	str	r3, [r7, #20]
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	e7fd      	b.n	8006ab0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff fef8 	bl	80068b4 <xQueueGenericCreateStatic>
 8006ac4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
	}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	613b      	str	r3, [r7, #16]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d90b      	bls.n	8006b24 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	60fb      	str	r3, [r7, #12]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b24:	2202      	movs	r2, #2
 8006b26:	2100      	movs	r1, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff40 	bl	80069ae <xQueueGenericCreate>
 8006b2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b3c:	697b      	ldr	r3, [r7, #20]
	}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	@ 0x38
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b56:	2300      	movs	r3, #0
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10b      	bne.n	8006b7c <xQueueGenericSend+0x34>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	e7fd      	b.n	8006b78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d103      	bne.n	8006b8a <xQueueGenericSend+0x42>
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <xQueueGenericSend+0x46>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <xQueueGenericSend+0x48>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <xQueueGenericSend+0x64>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d103      	bne.n	8006bba <xQueueGenericSend+0x72>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <xQueueGenericSend+0x76>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueGenericSend+0x78>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <xQueueGenericSend+0x94>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	623b      	str	r3, [r7, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bdc:	f001 fc7e 	bl	80084dc <xTaskGetSchedulerState>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <xQueueGenericSend+0xa4>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <xQueueGenericSend+0xa8>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <xQueueGenericSend+0xaa>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <xQueueGenericSend+0xc6>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c0e:	f002 fa8d 	bl	800912c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d302      	bcc.n	8006c24 <xQueueGenericSend+0xdc>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d129      	bne.n	8006c78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c2a:	f000 fc6c 	bl	8007506 <prvCopyDataToQueue>
 8006c2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	3324      	adds	r3, #36	@ 0x24
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 fa87 	bl	8008150 <xTaskRemoveFromEventList>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c48:	4b3f      	ldr	r3, [pc, #252]	@ (8006d48 <xQueueGenericSend+0x200>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	e00a      	b.n	8006c70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c60:	4b39      	ldr	r3, [pc, #228]	@ (8006d48 <xQueueGenericSend+0x200>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c70:	f002 fa8c 	bl	800918c <vPortExitCritical>
				return pdPASS;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e063      	b.n	8006d40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c7e:	f002 fa85 	bl	800918c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e05c      	b.n	8006d40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 fac1 	bl	8008218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c9a:	f002 fa77 	bl	800918c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c9e:	f001 f82d 	bl	8007cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ca2:	f002 fa43 	bl	800912c <vPortEnterCritical>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cac:	b25b      	sxtb	r3, r3
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d103      	bne.n	8006cbc <xQueueGenericSend+0x174>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cc2:	b25b      	sxtb	r3, r3
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSend+0x18a>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cd2:	f002 fa5b 	bl	800918c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd6:	1d3a      	adds	r2, r7, #4
 8006cd8:	f107 0314 	add.w	r3, r7, #20
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fab0 	bl	8008244 <xTaskCheckForTimeOut>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d124      	bne.n	8006d34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cec:	f000 fd03 	bl	80076f6 <prvIsQueueFull>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f9d4 	bl	80080ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d06:	f000 fc8e 	bl	8007626 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d0a:	f001 f805 	bl	8007d18 <xTaskResumeAll>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f47f af7c 	bne.w	8006c0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006d16:	4b0c      	ldr	r3, [pc, #48]	@ (8006d48 <xQueueGenericSend+0x200>)
 8006d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	e772      	b.n	8006c0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d2a:	f000 fc7c 	bl	8007626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d2e:	f000 fff3 	bl	8007d18 <xTaskResumeAll>
 8006d32:	e76c      	b.n	8006c0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d36:	f000 fc76 	bl	8007626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d3a:	f000 ffed 	bl	8007d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3738      	adds	r7, #56	@ 0x38
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b090      	sub	sp, #64	@ 0x40
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <xQueueGenericSendFromISR+0x3e>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <xQueueGenericSendFromISR+0x42>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <xQueueGenericSendFromISR+0x44>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d103      	bne.n	8006dba <xQueueGenericSendFromISR+0x6e>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <xQueueGenericSendFromISR+0x72>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <xQueueGenericSendFromISR+0x74>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	623b      	str	r3, [r7, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ddc:	f002 fa68 	bl	80092b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006de0:	f3ef 8211 	mrs	r2, BASEPRI
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	61fa      	str	r2, [r7, #28]
 8006df6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006df8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <xQueueGenericSendFromISR+0xc2>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d12f      	bne.n	8006e6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e24:	f000 fb6f 	bl	8007506 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d112      	bne.n	8006e58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	3324      	adds	r3, #36	@ 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 f986 	bl	8008150 <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e007      	b.n	8006e68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	b25a      	sxtb	r2, r3
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e6c:	e001      	b.n	8006e72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3740      	adds	r7, #64	@ 0x40
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	@ 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	623b      	str	r3, [r7, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	61fb      	str	r3, [r7, #28]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <xQueueGiveFromISR+0x5c>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <xQueueGiveFromISR+0x60>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <xQueueGiveFromISR+0x62>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10b      	bne.n	8006f06 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	61bb      	str	r3, [r7, #24]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f06:	f002 f9d3 	bl	80092b0 <vPortValidateInterruptPriority>
	__asm volatile
 8006f0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	617a      	str	r2, [r7, #20]
 8006f20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d22b      	bcs.n	8006f8e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d112      	bne.n	8006f78 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d016      	beq.n	8006f88 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	3324      	adds	r3, #36	@ 0x24
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 f8f6 	bl	8008150 <xTaskRemoveFromEventList>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00e      	beq.n	8006f88 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e007      	b.n	8006f88 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	b25a      	sxtb	r2, r3
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8c:	e001      	b.n	8006f92 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f383 8811 	msr	BASEPRI, r3
}
 8006f9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3738      	adds	r7, #56	@ 0x38
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08c      	sub	sp, #48	@ 0x30
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <xQueueReceive+0x32>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	623b      	str	r3, [r7, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <xQueueReceive+0x40>
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <xQueueReceive+0x44>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <xQueueReceive+0x46>
 8006fec:	2300      	movs	r3, #0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <xQueueReceive+0x62>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	61fb      	str	r3, [r7, #28]
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	e7fd      	b.n	8007006 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800700a:	f001 fa67 	bl	80084dc <xTaskGetSchedulerState>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <xQueueReceive+0x72>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <xQueueReceive+0x76>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <xQueueReceive+0x78>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <xQueueReceive+0x94>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	61bb      	str	r3, [r7, #24]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800703c:	f002 f876 	bl	800912c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01f      	beq.n	800708c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007050:	f000 fac3 	bl	80075da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00f      	beq.n	8007084 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	3310      	adds	r3, #16
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f871 	bl	8008150 <xTaskRemoveFromEventList>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007074:	4b3c      	ldr	r3, [pc, #240]	@ (8007168 <xQueueReceive+0x1c0>)
 8007076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007084:	f002 f882 	bl	800918c <vPortExitCritical>
				return pdPASS;
 8007088:	2301      	movs	r3, #1
 800708a:	e069      	b.n	8007160 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d103      	bne.n	800709a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007092:	f002 f87b 	bl	800918c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007096:	2300      	movs	r3, #0
 8007098:	e062      	b.n	8007160 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070a0:	f107 0310 	add.w	r3, r7, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f8b7 	bl	8008218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ae:	f002 f86d 	bl	800918c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070b2:	f000 fe23 	bl	8007cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070b6:	f002 f839 	bl	800912c <vPortEnterCritical>
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d103      	bne.n	80070d0 <xQueueReceive+0x128>
 80070c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d103      	bne.n	80070e6 <xQueueReceive+0x13e>
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070e6:	f002 f851 	bl	800918c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070ea:	1d3a      	adds	r2, r7, #4
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 f8a6 	bl	8008244 <xTaskCheckForTimeOut>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d123      	bne.n	8007146 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007100:	f000 fae3 	bl	80076ca <prvIsQueueEmpty>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710c:	3324      	adds	r3, #36	@ 0x24
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4611      	mov	r1, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f000 ffca 	bl	80080ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800711a:	f000 fa84 	bl	8007626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800711e:	f000 fdfb 	bl	8007d18 <xTaskResumeAll>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d189      	bne.n	800703c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007128:	4b0f      	ldr	r3, [pc, #60]	@ (8007168 <xQueueReceive+0x1c0>)
 800712a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	e780      	b.n	800703c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800713a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800713c:	f000 fa73 	bl	8007626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007140:	f000 fdea 	bl	8007d18 <xTaskResumeAll>
 8007144:	e77a      	b.n	800703c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007148:	f000 fa6d 	bl	8007626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800714c:	f000 fde4 	bl	8007d18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007152:	f000 faba 	bl	80076ca <prvIsQueueEmpty>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	f43f af6f 	beq.w	800703c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800715e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007160:	4618      	mov	r0, r3
 8007162:	3730      	adds	r7, #48	@ 0x30
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08e      	sub	sp, #56	@ 0x38
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800717e:	2300      	movs	r3, #0
 8007180:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	623b      	str	r3, [r7, #32]
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	61fb      	str	r3, [r7, #28]
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	e7fd      	b.n	80071bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c0:	f001 f98c 	bl	80084dc <xTaskGetSchedulerState>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <xQueueSemaphoreTake+0x64>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueSemaphoreTake+0x68>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueSemaphoreTake+0x6a>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	61bb      	str	r3, [r7, #24]
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	e7fd      	b.n	80071ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071f2:	f001 ff9b 	bl	800912c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d024      	beq.n	800724c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	1e5a      	subs	r2, r3, #1
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007212:	f001 fadd 	bl	80087d0 <pvTaskIncrementMutexHeldCount>
 8007216:	4602      	mov	r2, r0
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00f      	beq.n	8007244 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	3310      	adds	r3, #16
 8007228:	4618      	mov	r0, r3
 800722a:	f000 ff91 	bl	8008150 <xTaskRemoveFromEventList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007234:	4b54      	ldr	r3, [pc, #336]	@ (8007388 <xQueueSemaphoreTake+0x21c>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007244:	f001 ffa2 	bl	800918c <vPortExitCritical>
				return pdPASS;
 8007248:	2301      	movs	r3, #1
 800724a:	e098      	b.n	800737e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d112      	bne.n	8007278 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	617b      	str	r3, [r7, #20]
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	e7fd      	b.n	800726c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007270:	f001 ff8c 	bl	800918c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007274:	2300      	movs	r3, #0
 8007276:	e082      	b.n	800737e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4618      	mov	r0, r3
 8007284:	f000 ffc8 	bl	8008218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007288:	2301      	movs	r3, #1
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800728c:	f001 ff7e 	bl	800918c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007290:	f000 fd34 	bl	8007cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007294:	f001 ff4a 	bl	800912c <vPortEnterCritical>
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d103      	bne.n	80072ae <xQueueSemaphoreTake+0x142>
 80072a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d103      	bne.n	80072c4 <xQueueSemaphoreTake+0x158>
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072c4:	f001 ff62 	bl	800918c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072c8:	463a      	mov	r2, r7
 80072ca:	f107 030c 	add.w	r3, r7, #12
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 ffb7 	bl	8008244 <xTaskCheckForTimeOut>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d132      	bne.n	8007342 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072de:	f000 f9f4 	bl	80076ca <prvIsQueueEmpty>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d026      	beq.n	8007336 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80072f0:	f001 ff1c 	bl	800912c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 f90d 	bl	8008518 <xTaskPriorityInherit>
 80072fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007300:	f001 ff44 	bl	800918c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007306:	3324      	adds	r3, #36	@ 0x24
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fecd 	bl	80080ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007314:	f000 f987 	bl	8007626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007318:	f000 fcfe 	bl	8007d18 <xTaskResumeAll>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	f47f af67 	bne.w	80071f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007324:	4b18      	ldr	r3, [pc, #96]	@ (8007388 <xQueueSemaphoreTake+0x21c>)
 8007326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	e75d      	b.n	80071f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007338:	f000 f975 	bl	8007626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800733c:	f000 fcec 	bl	8007d18 <xTaskResumeAll>
 8007340:	e757      	b.n	80071f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007342:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007344:	f000 f96f 	bl	8007626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007348:	f000 fce6 	bl	8007d18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800734c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800734e:	f000 f9bc 	bl	80076ca <prvIsQueueEmpty>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	f43f af4c 	beq.w	80071f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00d      	beq.n	800737c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007360:	f001 fee4 	bl	800912c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007364:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007366:	f000 f8b7 	bl	80074d8 <prvGetDisinheritPriorityAfterTimeout>
 800736a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f9a8 	bl	80086c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007378:	f001 ff08 	bl	800918c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800737c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800737e:	4618      	mov	r0, r3
 8007380:	3738      	adds	r7, #56	@ 0x38
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08e      	sub	sp, #56	@ 0x38
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10b      	bne.n	80073ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	623b      	str	r3, [r7, #32]
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop
 80073b8:	e7fd      	b.n	80073b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <xQueueReceiveFromISR+0x3c>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <xQueueReceiveFromISR+0x40>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <xQueueReceiveFromISR+0x42>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	61fb      	str	r3, [r7, #28]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073ea:	f001 ff61 	bl	80092b0 <vPortValidateInterruptPriority>
	__asm volatile
 80073ee:	f3ef 8211 	mrs	r2, BASEPRI
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	61ba      	str	r2, [r7, #24]
 8007404:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007406:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007408:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02f      	beq.n	8007476 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800741c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007424:	f000 f8d9 	bl	80075da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742a:	1e5a      	subs	r2, r3, #1
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007430:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d112      	bne.n	8007460 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	3310      	adds	r3, #16
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fe82 	bl	8008150 <xTaskRemoveFromEventList>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e007      	b.n	8007470 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007464:	3301      	adds	r3, #1
 8007466:	b2db      	uxtb	r3, r3
 8007468:	b25a      	sxtb	r2, r3
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007470:	2301      	movs	r3, #1
 8007472:	637b      	str	r3, [r7, #52]	@ 0x34
 8007474:	e001      	b.n	800747a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007476:	2300      	movs	r3, #0
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f383 8811 	msr	BASEPRI, r3
}
 8007484:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007488:	4618      	mov	r0, r3
 800748a:	3738      	adds	r7, #56	@ 0x38
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <vQueueDelete+0x2a>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f95c 	bl	8007778 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f001 fffe 	bl	80094cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e001      	b.n	80074fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074fa:	68fb      	ldr	r3, [r7, #12]
	}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr

08007506 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10d      	bne.n	8007540 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d14d      	bne.n	80075c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f859 	bl	80085e8 <xTaskPriorityDisinherit>
 8007536:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
 800753e:	e043      	b.n	80075c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d119      	bne.n	800757a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6858      	ldr	r0, [r3, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	461a      	mov	r2, r3
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	f002 f993 	bl	800987c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	441a      	add	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d32b      	bcc.n	80075c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	e026      	b.n	80075c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68d8      	ldr	r0, [r3, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007582:	461a      	mov	r2, r3
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	f002 f979 	bl	800987c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	425b      	negs	r3, r3
 8007594:	441a      	add	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d207      	bcs.n	80075b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	425b      	negs	r3, r3
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d105      	bne.n	80075c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80075d0:	697b      	ldr	r3, [r7, #20]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d018      	beq.n	800761e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	441a      	add	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	d303      	bcc.n	800760e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68d9      	ldr	r1, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	461a      	mov	r2, r3
 8007618:	6838      	ldr	r0, [r7, #0]
 800761a:	f002 f92f 	bl	800987c <memcpy>
	}
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800762e:	f001 fd7d 	bl	800912c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007638:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800763a:	e011      	b.n	8007660 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3324      	adds	r3, #36	@ 0x24
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fd81 	bl	8008150 <xTaskRemoveFromEventList>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007654:	f000 fe5a 	bl	800830c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	3b01      	subs	r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dce9      	bgt.n	800763c <prvUnlockQueue+0x16>
 8007668:	e000      	b.n	800766c <prvUnlockQueue+0x46>
					break;
 800766a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	22ff      	movs	r2, #255	@ 0xff
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007674:	f001 fd8a 	bl	800918c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007678:	f001 fd58 	bl	800912c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007682:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007684:	e011      	b.n	80076aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d012      	beq.n	80076b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3310      	adds	r3, #16
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fd5c 	bl	8008150 <xTaskRemoveFromEventList>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800769e:	f000 fe35 	bl	800830c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dce9      	bgt.n	8007686 <prvUnlockQueue+0x60>
 80076b2:	e000      	b.n	80076b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	22ff      	movs	r2, #255	@ 0xff
 80076ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80076be:	f001 fd65 	bl	800918c <vPortExitCritical>
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076d2:	f001 fd2b 	bl	800912c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d102      	bne.n	80076e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	e001      	b.n	80076e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076e8:	f001 fd50 	bl	800918c <vPortExitCritical>

	return xReturn;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076fe:	f001 fd15 	bl	800912c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770a:	429a      	cmp	r2, r3
 800770c:	d102      	bne.n	8007714 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	e001      	b.n	8007718 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007718:	f001 fd38 	bl	800918c <vPortExitCritical>

	return xReturn;
 800771c:	68fb      	ldr	r3, [r7, #12]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e014      	b.n	8007762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007738:	4a0e      	ldr	r2, [pc, #56]	@ (8007774 <vQueueAddToRegistry+0x4c>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007744:	490b      	ldr	r1, [pc, #44]	@ (8007774 <vQueueAddToRegistry+0x4c>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800774e:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <vQueueAddToRegistry+0x4c>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800775a:	e006      	b.n	800776a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b07      	cmp	r3, #7
 8007766:	d9e7      	bls.n	8007738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr
 8007774:	200020a4 	.word	0x200020a4

08007778 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e016      	b.n	80077b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007786:	4a10      	ldr	r2, [pc, #64]	@ (80077c8 <vQueueUnregisterQueue+0x50>)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d10b      	bne.n	80077ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007796:	4a0c      	ldr	r2, [pc, #48]	@ (80077c8 <vQueueUnregisterQueue+0x50>)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2100      	movs	r1, #0
 800779c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80077a0:	4a09      	ldr	r2, [pc, #36]	@ (80077c8 <vQueueUnregisterQueue+0x50>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4413      	add	r3, r2
 80077a8:	2200      	movs	r2, #0
 80077aa:	605a      	str	r2, [r3, #4]
				break;
 80077ac:	e006      	b.n	80077bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b07      	cmp	r3, #7
 80077b8:	d9e5      	bls.n	8007786 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	200020a4 	.word	0x200020a4

080077cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077dc:	f001 fca6 	bl	800912c <vPortEnterCritical>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ec:	d103      	bne.n	80077f6 <vQueueWaitForMessageRestricted+0x2a>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d103      	bne.n	800780c <vQueueWaitForMessageRestricted+0x40>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800780c:	f001 fcbe 	bl	800918c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3324      	adds	r3, #36	@ 0x24
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fc69 	bl	80080f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff fefd 	bl	8007626 <prvUnlockQueue>
	}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08e      	sub	sp, #56	@ 0x38
 8007838:	af04      	add	r7, sp, #16
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10b      	bne.n	8007860 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	623b      	str	r3, [r7, #32]
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	e7fd      	b.n	800785c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	61fb      	str	r3, [r7, #28]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800787e:	23a8      	movs	r3, #168	@ 0xa8
 8007880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2ba8      	cmp	r3, #168	@ 0xa8
 8007886:	d00b      	beq.n	80078a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	61bb      	str	r3, [r7, #24]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01e      	beq.n	80078e6 <xTaskCreateStatic+0xb2>
 80078a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01b      	beq.n	80078e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078c0:	2300      	movs	r3, #0
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f851 	bl	8007980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078e0:	f000 f8f6 	bl	8007ad0 <prvAddNewTaskToReadyList>
 80078e4:	e001      	b.n	80078ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078ea:	697b      	ldr	r3, [r7, #20]
	}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	@ 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08c      	sub	sp, #48	@ 0x30
 80078f8:	af04      	add	r7, sp, #16
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fd11 	bl	8009330 <pvPortMalloc>
 800790e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007916:	20a8      	movs	r0, #168	@ 0xa8
 8007918:	f001 fd0a 	bl	8009330 <pvPortMalloc>
 800791c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	631a      	str	r2, [r3, #48]	@ 0x30
 800792a:	e005      	b.n	8007938 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800792c:	6978      	ldr	r0, [r7, #20]
 800792e:	f001 fdcd 	bl	80094cc <vPortFree>
 8007932:	e001      	b.n	8007938 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d017      	beq.n	800796e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007946:	88fa      	ldrh	r2, [r7, #6]
 8007948:	2300      	movs	r3, #0
 800794a:	9303      	str	r3, [sp, #12]
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f80f 	bl	8007980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007962:	69f8      	ldr	r0, [r7, #28]
 8007964:	f000 f8b4 	bl	8007ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007968:	2301      	movs	r3, #1
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	e002      	b.n	8007974 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800796e:	f04f 33ff 	mov.w	r3, #4294967295
 8007972:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007974:	69bb      	ldr	r3, [r7, #24]
	}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	461a      	mov	r2, r3
 8007998:	21a5      	movs	r1, #165	@ 0xa5
 800799a:	f001 fee5 	bl	8009768 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079a8:	3b01      	subs	r3, #1
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f023 0307 	bic.w	r3, r3, #7
 80079b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	617b      	str	r3, [r7, #20]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01f      	beq.n	8007a20 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e012      	b.n	8007a0c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	7819      	ldrb	r1, [r3, #0]
 80079ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	3334      	adds	r3, #52	@ 0x34
 80079f6:	460a      	mov	r2, r1
 80079f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d006      	beq.n	8007a14 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b0f      	cmp	r3, #15
 8007a10:	d9e9      	bls.n	80079e6 <prvInitialiseNewTask+0x66>
 8007a12:	e000      	b.n	8007a16 <prvInitialiseNewTask+0x96>
			{
				break;
 8007a14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a1e:	e003      	b.n	8007a28 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	2b37      	cmp	r3, #55	@ 0x37
 8007a2c:	d901      	bls.n	8007a32 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a2e:	2337      	movs	r3, #55	@ 0x37
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	2200      	movs	r2, #0
 8007a42:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	3304      	adds	r3, #4
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fe38 	bl	80066be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	3318      	adds	r3, #24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fe33 	bl	80066be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	3354      	adds	r3, #84	@ 0x54
 8007a82:	224c      	movs	r2, #76	@ 0x4c
 8007a84:	2100      	movs	r1, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 fe6e 	bl	8009768 <memset>
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8007ac4 <prvInitialiseNewTask+0x144>)
 8007a90:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	4a0c      	ldr	r2, [pc, #48]	@ (8007ac8 <prvInitialiseNewTask+0x148>)
 8007a96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007acc <prvInitialiseNewTask+0x14c>)
 8007a9c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	68f9      	ldr	r1, [r7, #12]
 8007aa2:	69b8      	ldr	r0, [r7, #24]
 8007aa4:	f001 fa54 	bl	8008f50 <pxPortInitialiseStack>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aba:	bf00      	nop
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20003b38 	.word	0x20003b38
 8007ac8:	20003ba0 	.word	0x20003ba0
 8007acc:	20003c08 	.word	0x20003c08

08007ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ad8:	f001 fb28 	bl	800912c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007adc:	4b2d      	ldr	r3, [pc, #180]	@ (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aee:	4a2a      	ldr	r2, [pc, #168]	@ (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007af4:	4b27      	ldr	r3, [pc, #156]	@ (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d110      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007afc:	f000 fc2a 	bl	8008354 <prvInitialiseTaskLists>
 8007b00:	e00d      	b.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b02:	4b26      	ldr	r3, [pc, #152]	@ (8007b9c <prvAddNewTaskToReadyList+0xcc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b0a:	4b23      	ldr	r3, [pc, #140]	@ (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d802      	bhi.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b18:	4a1f      	ldr	r2, [pc, #124]	@ (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ba0 <prvAddNewTaskToReadyList+0xd0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba0 <prvAddNewTaskToReadyList+0xd0>)
 8007b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba0 <prvAddNewTaskToReadyList+0xd0>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba4 <prvAddNewTaskToReadyList+0xd4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d903      	bls.n	8007b44 <prvAddNewTaskToReadyList+0x74>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	4a18      	ldr	r2, [pc, #96]	@ (8007ba4 <prvAddNewTaskToReadyList+0xd4>)
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4a15      	ldr	r2, [pc, #84]	@ (8007ba8 <prvAddNewTaskToReadyList+0xd8>)
 8007b52:	441a      	add	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f7fe fdbb 	bl	80066d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b60:	f001 fb14 	bl	800918c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b64:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <prvAddNewTaskToReadyList+0xcc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00e      	beq.n	8007b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d207      	bcs.n	8007b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <prvAddNewTaskToReadyList+0xdc>)
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200025b8 	.word	0x200025b8
 8007b98:	200020e4 	.word	0x200020e4
 8007b9c:	200025c4 	.word	0x200025c4
 8007ba0:	200025d4 	.word	0x200025d4
 8007ba4:	200025c0 	.word	0x200025c0
 8007ba8:	200020e8 	.word	0x200020e8
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d018      	beq.n	8007bf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bc2:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <vTaskDelay+0x64>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00b      	beq.n	8007be2 <vTaskDelay+0x32>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	60bb      	str	r3, [r7, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007be2:	f000 f88b 	bl	8007cfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007be6:	2100      	movs	r1, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fe05 	bl	80087f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bee:	f000 f893 	bl	8007d18 <xTaskResumeAll>
 8007bf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007bfa:	4b07      	ldr	r3, [pc, #28]	@ (8007c18 <vTaskDelay+0x68>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	200025e0 	.word	0x200025e0
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	@ 0x28
 8007c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	1d39      	adds	r1, r7, #4
 8007c2e:	f107 0308 	add.w	r3, r7, #8
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fcf4 	bl	8006620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	9202      	str	r2, [sp, #8]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	460a      	mov	r2, r1
 8007c4a:	4924      	ldr	r1, [pc, #144]	@ (8007cdc <vTaskStartScheduler+0xc0>)
 8007c4c:	4824      	ldr	r0, [pc, #144]	@ (8007ce0 <vTaskStartScheduler+0xc4>)
 8007c4e:	f7ff fdf1 	bl	8007834 <xTaskCreateStatic>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4a23      	ldr	r2, [pc, #140]	@ (8007ce4 <vTaskStartScheduler+0xc8>)
 8007c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c58:	4b22      	ldr	r3, [pc, #136]	@ (8007ce4 <vTaskStartScheduler+0xc8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c60:	2301      	movs	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e001      	b.n	8007c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d102      	bne.n	8007c76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c70:	f000 fe16 	bl	80088a0 <xTimerCreateTimerTask>
 8007c74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d11b      	bne.n	8007cb4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	613b      	str	r3, [r7, #16]
}
 8007c8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c90:	4b15      	ldr	r3, [pc, #84]	@ (8007ce8 <vTaskStartScheduler+0xcc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3354      	adds	r3, #84	@ 0x54
 8007c96:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <vTaskStartScheduler+0xd0>)
 8007c98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c9a:	4b15      	ldr	r3, [pc, #84]	@ (8007cf0 <vTaskStartScheduler+0xd4>)
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ca2:	4b14      	ldr	r3, [pc, #80]	@ (8007cf4 <vTaskStartScheduler+0xd8>)
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	@ (8007cf8 <vTaskStartScheduler+0xdc>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cae:	f001 f9cb 	bl	8009048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cb2:	e00f      	b.n	8007cd4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d10b      	bne.n	8007cd4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60fb      	str	r3, [r7, #12]
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <vTaskStartScheduler+0xb4>
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	0800a208 	.word	0x0800a208
 8007ce0:	08008325 	.word	0x08008325
 8007ce4:	200025dc 	.word	0x200025dc
 8007ce8:	200020e4 	.word	0x200020e4
 8007cec:	20000844 	.word	0x20000844
 8007cf0:	200025d8 	.word	0x200025d8
 8007cf4:	200025c4 	.word	0x200025c4
 8007cf8:	200025bc 	.word	0x200025bc

08007cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d00:	4b04      	ldr	r3, [pc, #16]	@ (8007d14 <vTaskSuspendAll+0x18>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3301      	adds	r3, #1
 8007d06:	4a03      	ldr	r2, [pc, #12]	@ (8007d14 <vTaskSuspendAll+0x18>)
 8007d08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	200025e0 	.word	0x200025e0

08007d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d26:	4b42      	ldr	r3, [pc, #264]	@ (8007e30 <xTaskResumeAll+0x118>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <xTaskResumeAll+0x2e>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	603b      	str	r3, [r7, #0]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d46:	f001 f9f1 	bl	800912c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d4a:	4b39      	ldr	r3, [pc, #228]	@ (8007e30 <xTaskResumeAll+0x118>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	4a37      	ldr	r2, [pc, #220]	@ (8007e30 <xTaskResumeAll+0x118>)
 8007d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d54:	4b36      	ldr	r3, [pc, #216]	@ (8007e30 <xTaskResumeAll+0x118>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d162      	bne.n	8007e22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d5c:	4b35      	ldr	r3, [pc, #212]	@ (8007e34 <xTaskResumeAll+0x11c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d05e      	beq.n	8007e22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d64:	e02f      	b.n	8007dc6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d66:	4b34      	ldr	r3, [pc, #208]	@ (8007e38 <xTaskResumeAll+0x120>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3318      	adds	r3, #24
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fd0a 	bl	800678c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fd05 	bl	800678c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	4b2d      	ldr	r3, [pc, #180]	@ (8007e3c <xTaskResumeAll+0x124>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d903      	bls.n	8007d96 <xTaskResumeAll+0x7e>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d92:	4a2a      	ldr	r2, [pc, #168]	@ (8007e3c <xTaskResumeAll+0x124>)
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4a27      	ldr	r2, [pc, #156]	@ (8007e40 <xTaskResumeAll+0x128>)
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fe fc92 	bl	80066d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db6:	4b23      	ldr	r3, [pc, #140]	@ (8007e44 <xTaskResumeAll+0x12c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d302      	bcc.n	8007dc6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007dc0:	4b21      	ldr	r3, [pc, #132]	@ (8007e48 <xTaskResumeAll+0x130>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e38 <xTaskResumeAll+0x120>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1cb      	bne.n	8007d66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dd4:	f000 fb62 	bl	800849c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e4c <xTaskResumeAll+0x134>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007de4:	f000 f844 	bl	8007e70 <xTaskIncrementTick>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007dee:	4b16      	ldr	r3, [pc, #88]	@ (8007e48 <xTaskResumeAll+0x130>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f1      	bne.n	8007de4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007e00:	4b12      	ldr	r3, [pc, #72]	@ (8007e4c <xTaskResumeAll+0x134>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e06:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <xTaskResumeAll+0x130>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e12:	4b0f      	ldr	r3, [pc, #60]	@ (8007e50 <xTaskResumeAll+0x138>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e22:	f001 f9b3 	bl	800918c <vPortExitCritical>

	return xAlreadyYielded;
 8007e26:	68bb      	ldr	r3, [r7, #8]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	200025e0 	.word	0x200025e0
 8007e34:	200025b8 	.word	0x200025b8
 8007e38:	20002578 	.word	0x20002578
 8007e3c:	200025c0 	.word	0x200025c0
 8007e40:	200020e8 	.word	0x200020e8
 8007e44:	200020e4 	.word	0x200020e4
 8007e48:	200025cc 	.word	0x200025cc
 8007e4c:	200025c8 	.word	0x200025c8
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e5a:	4b04      	ldr	r3, [pc, #16]	@ (8007e6c <xTaskGetTickCount+0x18>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e60:	687b      	ldr	r3, [r7, #4]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	200025bc 	.word	0x200025bc

08007e70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007fb8 <xTaskIncrementTick+0x148>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 8090 	bne.w	8007fa4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e84:	4b4d      	ldr	r3, [pc, #308]	@ (8007fbc <xTaskIncrementTick+0x14c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8007fbc <xTaskIncrementTick+0x14c>)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d121      	bne.n	8007edc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e98:	4b49      	ldr	r3, [pc, #292]	@ (8007fc0 <xTaskIncrementTick+0x150>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <xTaskIncrementTick+0x4a>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	603b      	str	r3, [r7, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <xTaskIncrementTick+0x46>
 8007eba:	4b41      	ldr	r3, [pc, #260]	@ (8007fc0 <xTaskIncrementTick+0x150>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	4b40      	ldr	r3, [pc, #256]	@ (8007fc4 <xTaskIncrementTick+0x154>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a3e      	ldr	r2, [pc, #248]	@ (8007fc0 <xTaskIncrementTick+0x150>)
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8007fc4 <xTaskIncrementTick+0x154>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc8 <xTaskIncrementTick+0x158>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fc8 <xTaskIncrementTick+0x158>)
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	f000 fae0 	bl	800849c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007edc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fcc <xTaskIncrementTick+0x15c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d349      	bcc.n	8007f7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ee6:	4b36      	ldr	r3, [pc, #216]	@ (8007fc0 <xTaskIncrementTick+0x150>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef0:	4b36      	ldr	r3, [pc, #216]	@ (8007fcc <xTaskIncrementTick+0x15c>)
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	601a      	str	r2, [r3, #0]
					break;
 8007ef8:	e03f      	b.n	8007f7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007efa:	4b31      	ldr	r3, [pc, #196]	@ (8007fc0 <xTaskIncrementTick+0x150>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d203      	bcs.n	8007f1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f12:	4a2e      	ldr	r2, [pc, #184]	@ (8007fcc <xTaskIncrementTick+0x15c>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f18:	e02f      	b.n	8007f7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fc34 	bl	800678c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	3318      	adds	r3, #24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fc2b 	bl	800678c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3a:	4b25      	ldr	r3, [pc, #148]	@ (8007fd0 <xTaskIncrementTick+0x160>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d903      	bls.n	8007f4a <xTaskIncrementTick+0xda>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	4a22      	ldr	r2, [pc, #136]	@ (8007fd0 <xTaskIncrementTick+0x160>)
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd4 <xTaskIncrementTick+0x164>)
 8007f58:	441a      	add	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4610      	mov	r0, r2
 8007f62:	f7fe fbb8 	bl	80066d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd8 <xTaskIncrementTick+0x168>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d3b8      	bcc.n	8007ee6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f78:	e7b5      	b.n	8007ee6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f7a:	4b17      	ldr	r3, [pc, #92]	@ (8007fd8 <xTaskIncrementTick+0x168>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f80:	4914      	ldr	r1, [pc, #80]	@ (8007fd4 <xTaskIncrementTick+0x164>)
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d901      	bls.n	8007f96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f96:	4b11      	ldr	r3, [pc, #68]	@ (8007fdc <xTaskIncrementTick+0x16c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e004      	b.n	8007fae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe0 <xTaskIncrementTick+0x170>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	4a0d      	ldr	r2, [pc, #52]	@ (8007fe0 <xTaskIncrementTick+0x170>)
 8007fac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007fae:	697b      	ldr	r3, [r7, #20]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200025e0 	.word	0x200025e0
 8007fbc:	200025bc 	.word	0x200025bc
 8007fc0:	20002570 	.word	0x20002570
 8007fc4:	20002574 	.word	0x20002574
 8007fc8:	200025d0 	.word	0x200025d0
 8007fcc:	200025d8 	.word	0x200025d8
 8007fd0:	200025c0 	.word	0x200025c0
 8007fd4:	200020e8 	.word	0x200020e8
 8007fd8:	200020e4 	.word	0x200020e4
 8007fdc:	200025cc 	.word	0x200025cc
 8007fe0:	200025c8 	.word	0x200025c8

08007fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fea:	4b2a      	ldr	r3, [pc, #168]	@ (8008094 <vTaskSwitchContext+0xb0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ff2:	4b29      	ldr	r3, [pc, #164]	@ (8008098 <vTaskSwitchContext+0xb4>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ff8:	e047      	b.n	800808a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007ffa:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <vTaskSwitchContext+0xb4>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008000:	4b26      	ldr	r3, [pc, #152]	@ (800809c <vTaskSwitchContext+0xb8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e011      	b.n	800802c <vTaskSwitchContext+0x48>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10b      	bne.n	8008026 <vTaskSwitchContext+0x42>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <vTaskSwitchContext+0x3e>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b01      	subs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	491c      	ldr	r1, [pc, #112]	@ (80080a0 <vTaskSwitchContext+0xbc>)
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0e3      	beq.n	8008008 <vTaskSwitchContext+0x24>
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4a15      	ldr	r2, [pc, #84]	@ (80080a0 <vTaskSwitchContext+0xbc>)
 800804c:	4413      	add	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3308      	adds	r3, #8
 8008062:	429a      	cmp	r2, r3
 8008064:	d104      	bne.n	8008070 <vTaskSwitchContext+0x8c>
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	605a      	str	r2, [r3, #4]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	4a0b      	ldr	r2, [pc, #44]	@ (80080a4 <vTaskSwitchContext+0xc0>)
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	4a08      	ldr	r2, [pc, #32]	@ (800809c <vTaskSwitchContext+0xb8>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008080:	4b08      	ldr	r3, [pc, #32]	@ (80080a4 <vTaskSwitchContext+0xc0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3354      	adds	r3, #84	@ 0x54
 8008086:	4a08      	ldr	r2, [pc, #32]	@ (80080a8 <vTaskSwitchContext+0xc4>)
 8008088:	6013      	str	r3, [r2, #0]
}
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	200025e0 	.word	0x200025e0
 8008098:	200025cc 	.word	0x200025cc
 800809c:	200025c0 	.word	0x200025c0
 80080a0:	200020e8 	.word	0x200020e8
 80080a4:	200020e4 	.word	0x200020e4
 80080a8:	20000844 	.word	0x20000844

080080ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10b      	bne.n	80080d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	60fb      	str	r3, [r7, #12]
}
 80080ce:	bf00      	nop
 80080d0:	bf00      	nop
 80080d2:	e7fd      	b.n	80080d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080d4:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <vTaskPlaceOnEventList+0x48>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3318      	adds	r3, #24
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7fe fb1d 	bl	800671c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080e2:	2101      	movs	r1, #1
 80080e4:	6838      	ldr	r0, [r7, #0]
 80080e6:	f000 fb87 	bl	80087f8 <prvAddCurrentTaskToDelayedList>
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200020e4 	.word	0x200020e4

080080f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	617b      	str	r3, [r7, #20]
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	e7fd      	b.n	800811e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008122:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <vTaskPlaceOnEventListRestricted+0x54>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3318      	adds	r3, #24
 8008128:	4619      	mov	r1, r3
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7fe fad3 	bl	80066d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008136:	f04f 33ff 	mov.w	r3, #4294967295
 800813a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f000 fb5a 	bl	80087f8 <prvAddCurrentTaskToDelayedList>
	}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200020e4 	.word	0x200020e4

08008150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10b      	bne.n	800817e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	e7fd      	b.n	800817a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3318      	adds	r3, #24
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fb02 	bl	800678c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008188:	4b1d      	ldr	r3, [pc, #116]	@ (8008200 <xTaskRemoveFromEventList+0xb0>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d11d      	bne.n	80081cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	3304      	adds	r3, #4
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe faf9 	bl	800678c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819e:	4b19      	ldr	r3, [pc, #100]	@ (8008204 <xTaskRemoveFromEventList+0xb4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d903      	bls.n	80081ae <xTaskRemoveFromEventList+0x5e>
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081aa:	4a16      	ldr	r2, [pc, #88]	@ (8008204 <xTaskRemoveFromEventList+0xb4>)
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4a13      	ldr	r2, [pc, #76]	@ (8008208 <xTaskRemoveFromEventList+0xb8>)
 80081bc:	441a      	add	r2, r3
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fe fa86 	bl	80066d6 <vListInsertEnd>
 80081ca:	e005      	b.n	80081d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	3318      	adds	r3, #24
 80081d0:	4619      	mov	r1, r3
 80081d2:	480e      	ldr	r0, [pc, #56]	@ (800820c <xTaskRemoveFromEventList+0xbc>)
 80081d4:	f7fe fa7f 	bl	80066d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <xTaskRemoveFromEventList+0xc0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d905      	bls.n	80081f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081e6:	2301      	movs	r3, #1
 80081e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008214 <xTaskRemoveFromEventList+0xc4>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e001      	b.n	80081f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081f6:	697b      	ldr	r3, [r7, #20]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	200025e0 	.word	0x200025e0
 8008204:	200025c0 	.word	0x200025c0
 8008208:	200020e8 	.word	0x200020e8
 800820c:	20002578 	.word	0x20002578
 8008210:	200020e4 	.word	0x200020e4
 8008214:	200025cc 	.word	0x200025cc

08008218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008220:	4b06      	ldr	r3, [pc, #24]	@ (800823c <vTaskInternalSetTimeOutState+0x24>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <vTaskInternalSetTimeOutState+0x28>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	605a      	str	r2, [r3, #4]
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	200025d0 	.word	0x200025d0
 8008240:	200025bc 	.word	0x200025bc

08008244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	613b      	str	r3, [r7, #16]
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	e7fd      	b.n	8008268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10b      	bne.n	800828a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60fb      	str	r3, [r7, #12]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800828a:	f000 ff4f 	bl	800912c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800828e:	4b1d      	ldr	r3, [pc, #116]	@ (8008304 <xTaskCheckForTimeOut+0xc0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d102      	bne.n	80082ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61fb      	str	r3, [r7, #28]
 80082ac:	e023      	b.n	80082f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b15      	ldr	r3, [pc, #84]	@ (8008308 <xTaskCheckForTimeOut+0xc4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d007      	beq.n	80082ca <xTaskCheckForTimeOut+0x86>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d302      	bcc.n	80082ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	e015      	b.n	80082f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d20b      	bcs.n	80082ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	1ad2      	subs	r2, r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ff99 	bl	8008218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
 80082ea:	e004      	b.n	80082f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082f6:	f000 ff49 	bl	800918c <vPortExitCritical>

	return xReturn;
 80082fa:	69fb      	ldr	r3, [r7, #28]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	200025bc 	.word	0x200025bc
 8008308:	200025d0 	.word	0x200025d0

0800830c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008310:	4b03      	ldr	r3, [pc, #12]	@ (8008320 <vTaskMissedYield+0x14>)
 8008312:	2201      	movs	r2, #1
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	46bd      	mov	sp, r7
 800831a:	bc80      	pop	{r7}
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	200025cc 	.word	0x200025cc

08008324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800832c:	f000 f852 	bl	80083d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008330:	4b06      	ldr	r3, [pc, #24]	@ (800834c <prvIdleTask+0x28>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d9f9      	bls.n	800832c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008338:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <prvIdleTask+0x2c>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008348:	e7f0      	b.n	800832c <prvIdleTask+0x8>
 800834a:	bf00      	nop
 800834c:	200020e8 	.word	0x200020e8
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800835a:	2300      	movs	r3, #0
 800835c:	607b      	str	r3, [r7, #4]
 800835e:	e00c      	b.n	800837a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4a12      	ldr	r2, [pc, #72]	@ (80083b4 <prvInitialiseTaskLists+0x60>)
 800836c:	4413      	add	r3, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe f986 	bl	8006680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3301      	adds	r3, #1
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b37      	cmp	r3, #55	@ 0x37
 800837e:	d9ef      	bls.n	8008360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008380:	480d      	ldr	r0, [pc, #52]	@ (80083b8 <prvInitialiseTaskLists+0x64>)
 8008382:	f7fe f97d 	bl	8006680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008386:	480d      	ldr	r0, [pc, #52]	@ (80083bc <prvInitialiseTaskLists+0x68>)
 8008388:	f7fe f97a 	bl	8006680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800838c:	480c      	ldr	r0, [pc, #48]	@ (80083c0 <prvInitialiseTaskLists+0x6c>)
 800838e:	f7fe f977 	bl	8006680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008392:	480c      	ldr	r0, [pc, #48]	@ (80083c4 <prvInitialiseTaskLists+0x70>)
 8008394:	f7fe f974 	bl	8006680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008398:	480b      	ldr	r0, [pc, #44]	@ (80083c8 <prvInitialiseTaskLists+0x74>)
 800839a:	f7fe f971 	bl	8006680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800839e:	4b0b      	ldr	r3, [pc, #44]	@ (80083cc <prvInitialiseTaskLists+0x78>)
 80083a0:	4a05      	ldr	r2, [pc, #20]	@ (80083b8 <prvInitialiseTaskLists+0x64>)
 80083a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083a4:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <prvInitialiseTaskLists+0x7c>)
 80083a6:	4a05      	ldr	r2, [pc, #20]	@ (80083bc <prvInitialiseTaskLists+0x68>)
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200020e8 	.word	0x200020e8
 80083b8:	20002548 	.word	0x20002548
 80083bc:	2000255c 	.word	0x2000255c
 80083c0:	20002578 	.word	0x20002578
 80083c4:	2000258c 	.word	0x2000258c
 80083c8:	200025a4 	.word	0x200025a4
 80083cc:	20002570 	.word	0x20002570
 80083d0:	20002574 	.word	0x20002574

080083d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083da:	e019      	b.n	8008410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083dc:	f000 fea6 	bl	800912c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e0:	4b10      	ldr	r3, [pc, #64]	@ (8008424 <prvCheckTasksWaitingTermination+0x50>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe f9cd 	bl	800678c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008428 <prvCheckTasksWaitingTermination+0x54>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	4a0b      	ldr	r2, [pc, #44]	@ (8008428 <prvCheckTasksWaitingTermination+0x54>)
 80083fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083fc:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <prvCheckTasksWaitingTermination+0x58>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3b01      	subs	r3, #1
 8008402:	4a0a      	ldr	r2, [pc, #40]	@ (800842c <prvCheckTasksWaitingTermination+0x58>)
 8008404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008406:	f000 fec1 	bl	800918c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f810 	bl	8008430 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008410:	4b06      	ldr	r3, [pc, #24]	@ (800842c <prvCheckTasksWaitingTermination+0x58>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e1      	bne.n	80083dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	2000258c 	.word	0x2000258c
 8008428:	200025b8 	.word	0x200025b8
 800842c:	200025a0 	.word	0x200025a0

08008430 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3354      	adds	r3, #84	@ 0x54
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f99b 	bl	8009778 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008448:	2b00      	cmp	r3, #0
 800844a:	d108      	bne.n	800845e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008450:	4618      	mov	r0, r3
 8008452:	f001 f83b 	bl	80094cc <vPortFree>
				vPortFree( pxTCB );
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 f838 	bl	80094cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800845c:	e019      	b.n	8008492 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008464:	2b01      	cmp	r3, #1
 8008466:	d103      	bne.n	8008470 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 f82f 	bl	80094cc <vPortFree>
	}
 800846e:	e010      	b.n	8008492 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008476:	2b02      	cmp	r3, #2
 8008478:	d00b      	beq.n	8008492 <prvDeleteTCB+0x62>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60fb      	str	r3, [r7, #12]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <prvDeleteTCB+0x5e>
	}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a2:	4b0c      	ldr	r3, [pc, #48]	@ (80084d4 <prvResetNextTaskUnblockTime+0x38>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084ac:	4b0a      	ldr	r3, [pc, #40]	@ (80084d8 <prvResetNextTaskUnblockTime+0x3c>)
 80084ae:	f04f 32ff 	mov.w	r2, #4294967295
 80084b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084b4:	e008      	b.n	80084c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b6:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <prvResetNextTaskUnblockTime+0x38>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	4a04      	ldr	r2, [pc, #16]	@ (80084d8 <prvResetNextTaskUnblockTime+0x3c>)
 80084c6:	6013      	str	r3, [r2, #0]
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20002570 	.word	0x20002570
 80084d8:	200025d8 	.word	0x200025d8

080084dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008510 <xTaskGetSchedulerState+0x34>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084ea:	2301      	movs	r3, #1
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	e008      	b.n	8008502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f0:	4b08      	ldr	r3, [pc, #32]	@ (8008514 <xTaskGetSchedulerState+0x38>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084f8:	2302      	movs	r3, #2
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	e001      	b.n	8008502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084fe:	2300      	movs	r3, #0
 8008500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008502:	687b      	ldr	r3, [r7, #4]
	}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	200025c4 	.word	0x200025c4
 8008514:	200025e0 	.word	0x200025e0

08008518 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d051      	beq.n	80085d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008532:	4b2a      	ldr	r3, [pc, #168]	@ (80085dc <xTaskPriorityInherit+0xc4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008538:	429a      	cmp	r2, r3
 800853a:	d241      	bcs.n	80085c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	2b00      	cmp	r3, #0
 8008542:	db06      	blt.n	8008552 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008544:	4b25      	ldr	r3, [pc, #148]	@ (80085dc <xTaskPriorityInherit+0xc4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6959      	ldr	r1, [r3, #20]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4a1f      	ldr	r2, [pc, #124]	@ (80085e0 <xTaskPriorityInherit+0xc8>)
 8008564:	4413      	add	r3, r2
 8008566:	4299      	cmp	r1, r3
 8008568:	d122      	bne.n	80085b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3304      	adds	r3, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe f90c 	bl	800678c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008574:	4b19      	ldr	r3, [pc, #100]	@ (80085dc <xTaskPriorityInherit+0xc4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008582:	4b18      	ldr	r3, [pc, #96]	@ (80085e4 <xTaskPriorityInherit+0xcc>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d903      	bls.n	8008592 <xTaskPriorityInherit+0x7a>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	4a15      	ldr	r2, [pc, #84]	@ (80085e4 <xTaskPriorityInherit+0xcc>)
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4a10      	ldr	r2, [pc, #64]	@ (80085e0 <xTaskPriorityInherit+0xc8>)
 80085a0:	441a      	add	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fe f894 	bl	80066d6 <vListInsertEnd>
 80085ae:	e004      	b.n	80085ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085b0:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <xTaskPriorityInherit+0xc4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085ba:	2301      	movs	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e008      	b.n	80085d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085c4:	4b05      	ldr	r3, [pc, #20]	@ (80085dc <xTaskPriorityInherit+0xc4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d201      	bcs.n	80085d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085ce:	2301      	movs	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085d2:	68fb      	ldr	r3, [r7, #12]
	}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	200020e4 	.word	0x200020e4
 80085e0:	200020e8 	.word	0x200020e8
 80085e4:	200025c0 	.word	0x200025c0

080085e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d058      	beq.n	80086b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085fe:	4b2f      	ldr	r3, [pc, #188]	@ (80086bc <xTaskPriorityDisinherit+0xd4>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	429a      	cmp	r2, r3
 8008606:	d00b      	beq.n	8008620 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	60fb      	str	r3, [r7, #12]
}
 800861a:	bf00      	nop
 800861c:	bf00      	nop
 800861e:	e7fd      	b.n	800861c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10b      	bne.n	8008640 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60bb      	str	r3, [r7, #8]
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008644:	1e5a      	subs	r2, r3, #1
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008652:	429a      	cmp	r2, r3
 8008654:	d02c      	beq.n	80086b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865a:	2b00      	cmp	r3, #0
 800865c:	d128      	bne.n	80086b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3304      	adds	r3, #4
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe f892 	bl	800678c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008674:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	4b0f      	ldr	r3, [pc, #60]	@ (80086c0 <xTaskPriorityDisinherit+0xd8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d903      	bls.n	8008690 <xTaskPriorityDisinherit+0xa8>
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868c:	4a0c      	ldr	r2, [pc, #48]	@ (80086c0 <xTaskPriorityDisinherit+0xd8>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4a09      	ldr	r2, [pc, #36]	@ (80086c4 <xTaskPriorityDisinherit+0xdc>)
 800869e:	441a      	add	r2, r3
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fe f815 	bl	80066d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086b0:	697b      	ldr	r3, [r7, #20]
	}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200020e4 	.word	0x200020e4
 80086c0:	200025c0 	.word	0x200025c0
 80086c4:	200020e8 	.word	0x200020e8

080086c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086d6:	2301      	movs	r3, #1
 80086d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d06c      	beq.n	80087ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10b      	bne.n	8008700 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	60fb      	str	r3, [r7, #12]
}
 80086fa:	bf00      	nop
 80086fc:	bf00      	nop
 80086fe:	e7fd      	b.n	80086fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d902      	bls.n	8008710 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	e002      	b.n	8008716 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008714:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	429a      	cmp	r2, r3
 800871e:	d04c      	beq.n	80087ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	429a      	cmp	r2, r3
 8008728:	d147      	bne.n	80087ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800872a:	4b26      	ldr	r3, [pc, #152]	@ (80087c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	429a      	cmp	r2, r3
 8008732:	d10b      	bne.n	800874c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	60bb      	str	r3, [r7, #8]
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008750:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	db04      	blt.n	800876a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	6959      	ldr	r1, [r3, #20]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4a13      	ldr	r2, [pc, #76]	@ (80087c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800877a:	4413      	add	r3, r2
 800877c:	4299      	cmp	r1, r3
 800877e:	d11c      	bne.n	80087ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	3304      	adds	r3, #4
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe f801 	bl	800678c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	4b0f      	ldr	r3, [pc, #60]	@ (80087cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d903      	bls.n	800879e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	4a0c      	ldr	r2, [pc, #48]	@ (80087cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4a07      	ldr	r2, [pc, #28]	@ (80087c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087ac:	441a      	add	r2, r3
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f7fd ff8e 	bl	80066d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087ba:	bf00      	nop
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200020e4 	.word	0x200020e4
 80087c8:	200020e8 	.word	0x200020e8
 80087cc:	200025c0 	.word	0x200025c0

080087d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087d4:	4b07      	ldr	r3, [pc, #28]	@ (80087f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087dc:	4b05      	ldr	r3, [pc, #20]	@ (80087f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087e2:	3201      	adds	r2, #1
 80087e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80087e6:	4b03      	ldr	r3, [pc, #12]	@ (80087f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80087e8:	681b      	ldr	r3, [r3, #0]
	}
 80087ea:	4618      	mov	r0, r3
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	200020e4 	.word	0x200020e4

080087f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008802:	4b21      	ldr	r3, [pc, #132]	@ (8008888 <prvAddCurrentTaskToDelayedList+0x90>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008808:	4b20      	ldr	r3, [pc, #128]	@ (800888c <prvAddCurrentTaskToDelayedList+0x94>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3304      	adds	r3, #4
 800880e:	4618      	mov	r0, r3
 8008810:	f7fd ffbc 	bl	800678c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d10a      	bne.n	8008832 <prvAddCurrentTaskToDelayedList+0x3a>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008822:	4b1a      	ldr	r3, [pc, #104]	@ (800888c <prvAddCurrentTaskToDelayedList+0x94>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4819      	ldr	r0, [pc, #100]	@ (8008890 <prvAddCurrentTaskToDelayedList+0x98>)
 800882c:	f7fd ff53 	bl	80066d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008830:	e026      	b.n	8008880 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4413      	add	r3, r2
 8008838:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800883a:	4b14      	ldr	r3, [pc, #80]	@ (800888c <prvAddCurrentTaskToDelayedList+0x94>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	429a      	cmp	r2, r3
 8008848:	d209      	bcs.n	800885e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800884a:	4b12      	ldr	r3, [pc, #72]	@ (8008894 <prvAddCurrentTaskToDelayedList+0x9c>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4b0f      	ldr	r3, [pc, #60]	@ (800888c <prvAddCurrentTaskToDelayedList+0x94>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f7fd ff60 	bl	800671c <vListInsert>
}
 800885c:	e010      	b.n	8008880 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800885e:	4b0e      	ldr	r3, [pc, #56]	@ (8008898 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	4b0a      	ldr	r3, [pc, #40]	@ (800888c <prvAddCurrentTaskToDelayedList+0x94>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f7fd ff56 	bl	800671c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008870:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	429a      	cmp	r2, r3
 8008878:	d202      	bcs.n	8008880 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800887a:	4a08      	ldr	r2, [pc, #32]	@ (800889c <prvAddCurrentTaskToDelayedList+0xa4>)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6013      	str	r3, [r2, #0]
}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200025bc 	.word	0x200025bc
 800888c:	200020e4 	.word	0x200020e4
 8008890:	200025a4 	.word	0x200025a4
 8008894:	20002574 	.word	0x20002574
 8008898:	20002570 	.word	0x20002570
 800889c:	200025d8 	.word	0x200025d8

080088a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08a      	sub	sp, #40	@ 0x28
 80088a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088aa:	f000 fb11 	bl	8008ed0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008924 <xTimerCreateTimerTask+0x84>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d021      	beq.n	80088fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088be:	1d3a      	adds	r2, r7, #4
 80088c0:	f107 0108 	add.w	r1, r7, #8
 80088c4:	f107 030c 	add.w	r3, r7, #12
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fd fec1 	bl	8006650 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	9202      	str	r2, [sp, #8]
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	2302      	movs	r3, #2
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	460a      	mov	r2, r1
 80088e0:	4911      	ldr	r1, [pc, #68]	@ (8008928 <xTimerCreateTimerTask+0x88>)
 80088e2:	4812      	ldr	r0, [pc, #72]	@ (800892c <xTimerCreateTimerTask+0x8c>)
 80088e4:	f7fe ffa6 	bl	8007834 <xTaskCreateStatic>
 80088e8:	4603      	mov	r3, r0
 80088ea:	4a11      	ldr	r2, [pc, #68]	@ (8008930 <xTimerCreateTimerTask+0x90>)
 80088ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088ee:	4b10      	ldr	r3, [pc, #64]	@ (8008930 <xTimerCreateTimerTask+0x90>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088f6:	2301      	movs	r3, #1
 80088f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008918:	697b      	ldr	r3, [r7, #20]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20002614 	.word	0x20002614
 8008928:	0800a210 	.word	0x0800a210
 800892c:	08008a6d 	.word	0x08008a6d
 8008930:	20002618 	.word	0x20002618

08008934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08a      	sub	sp, #40	@ 0x28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008942:	2300      	movs	r3, #0
 8008944:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10b      	bne.n	8008964 <xTimerGenericCommand+0x30>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	623b      	str	r3, [r7, #32]
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008964:	4b19      	ldr	r3, [pc, #100]	@ (80089cc <xTimerGenericCommand+0x98>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d02a      	beq.n	80089c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b05      	cmp	r3, #5
 800897c:	dc18      	bgt.n	80089b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800897e:	f7ff fdad 	bl	80084dc <xTaskGetSchedulerState>
 8008982:	4603      	mov	r3, r0
 8008984:	2b02      	cmp	r3, #2
 8008986:	d109      	bne.n	800899c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008988:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <xTimerGenericCommand+0x98>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	f107 0110 	add.w	r1, r7, #16
 8008990:	2300      	movs	r3, #0
 8008992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008994:	f7fe f8d8 	bl	8006b48 <xQueueGenericSend>
 8008998:	6278      	str	r0, [r7, #36]	@ 0x24
 800899a:	e012      	b.n	80089c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800899c:	4b0b      	ldr	r3, [pc, #44]	@ (80089cc <xTimerGenericCommand+0x98>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	f107 0110 	add.w	r1, r7, #16
 80089a4:	2300      	movs	r3, #0
 80089a6:	2200      	movs	r2, #0
 80089a8:	f7fe f8ce 	bl	8006b48 <xQueueGenericSend>
 80089ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80089ae:	e008      	b.n	80089c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089b0:	4b06      	ldr	r3, [pc, #24]	@ (80089cc <xTimerGenericCommand+0x98>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	f107 0110 	add.w	r1, r7, #16
 80089b8:	2300      	movs	r3, #0
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	f7fe f9c6 	bl	8006d4c <xQueueGenericSendFromISR>
 80089c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3728      	adds	r7, #40	@ 0x28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20002614 	.word	0x20002614

080089d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089da:	4b23      	ldr	r3, [pc, #140]	@ (8008a68 <prvProcessExpiredTimer+0x98>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fd fecf 	bl	800678c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d023      	beq.n	8008a44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	699a      	ldr	r2, [r3, #24]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	18d1      	adds	r1, r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	6978      	ldr	r0, [r7, #20]
 8008a0a:	f000 f8d3 	bl	8008bb4 <prvInsertTimerInActiveList>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d020      	beq.n	8008a56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a14:	2300      	movs	r3, #0
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	6978      	ldr	r0, [r7, #20]
 8008a20:	f7ff ff88 	bl	8008934 <xTimerGenericCommand>
 8008a24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d114      	bne.n	8008a56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	6978      	ldr	r0, [r7, #20]
 8008a5c:	4798      	blx	r3
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2000260c 	.word	0x2000260c

08008a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a74:	f107 0308 	add.w	r3, r7, #8
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f859 	bl	8008b30 <prvGetNextExpireTime>
 8008a7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4619      	mov	r1, r3
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 f805 	bl	8008a94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a8a:	f000 f8d5 	bl	8008c38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a8e:	bf00      	nop
 8008a90:	e7f0      	b.n	8008a74 <prvTimerTask+0x8>
	...

08008a94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a9e:	f7ff f92d 	bl	8007cfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aa2:	f107 0308 	add.w	r3, r7, #8
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f864 	bl	8008b74 <prvSampleTimeNow>
 8008aac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d130      	bne.n	8008b16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <prvProcessTimerOrBlockTask+0x3c>
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d806      	bhi.n	8008ad0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ac2:	f7ff f929 	bl	8007d18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ac6:	68f9      	ldr	r1, [r7, #12]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ff81 	bl	80089d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ace:	e024      	b.n	8008b1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d008      	beq.n	8008ae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ad6:	4b13      	ldr	r3, [pc, #76]	@ (8008b24 <prvProcessTimerOrBlockTask+0x90>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <prvProcessTimerOrBlockTask+0x50>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <prvProcessTimerOrBlockTask+0x52>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8008b28 <prvProcessTimerOrBlockTask+0x94>)
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	4619      	mov	r1, r3
 8008af6:	f7fe fe69 	bl	80077cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008afa:	f7ff f90d 	bl	8007d18 <xTaskResumeAll>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b04:	4b09      	ldr	r3, [pc, #36]	@ (8008b2c <prvProcessTimerOrBlockTask+0x98>)
 8008b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	f3bf 8f6f 	isb	sy
}
 8008b14:	e001      	b.n	8008b1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b16:	f7ff f8ff 	bl	8007d18 <xTaskResumeAll>
}
 8008b1a:	bf00      	nop
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20002610 	.word	0x20002610
 8008b28:	20002614 	.word	0x20002614
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b38:	4b0d      	ldr	r3, [pc, #52]	@ (8008b70 <prvGetNextExpireTime+0x40>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <prvGetNextExpireTime+0x16>
 8008b42:	2201      	movs	r2, #1
 8008b44:	e000      	b.n	8008b48 <prvGetNextExpireTime+0x18>
 8008b46:	2200      	movs	r2, #0
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d105      	bne.n	8008b60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b54:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <prvGetNextExpireTime+0x40>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	e001      	b.n	8008b64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b64:	68fb      	ldr	r3, [r7, #12]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr
 8008b70:	2000260c 	.word	0x2000260c

08008b74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b7c:	f7ff f96a 	bl	8007e54 <xTaskGetTickCount>
 8008b80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b82:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <prvSampleTimeNow+0x3c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d205      	bcs.n	8008b98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b8c:	f000 f93a 	bl	8008e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	e002      	b.n	8008b9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b9e:	4a04      	ldr	r2, [pc, #16]	@ (8008bb0 <prvSampleTimeNow+0x3c>)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	2000261c 	.word	0x2000261c

08008bb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d812      	bhi.n	8008c00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d302      	bcc.n	8008bee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e01b      	b.n	8008c26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bee:	4b10      	ldr	r3, [pc, #64]	@ (8008c30 <prvInsertTimerInActiveList+0x7c>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fd fd8f 	bl	800671c <vListInsert>
 8008bfe:	e012      	b.n	8008c26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d206      	bcs.n	8008c16 <prvInsertTimerInActiveList+0x62>
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d302      	bcc.n	8008c16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e007      	b.n	8008c26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c16:	4b07      	ldr	r3, [pc, #28]	@ (8008c34 <prvInsertTimerInActiveList+0x80>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7fd fd7b 	bl	800671c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c26:	697b      	ldr	r3, [r7, #20]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20002610 	.word	0x20002610
 8008c34:	2000260c 	.word	0x2000260c

08008c38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	@ 0x38
 8008c3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c3e:	e0ce      	b.n	8008dde <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	da19      	bge.n	8008c7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c46:	1d3b      	adds	r3, r7, #4
 8008c48:	3304      	adds	r3, #4
 8008c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	61fb      	str	r3, [r7, #28]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c70:	6850      	ldr	r0, [r2, #4]
 8008c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c74:	6892      	ldr	r2, [r2, #8]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f2c0 80ae 	blt.w	8008dde <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d004      	beq.n	8008c98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fd fd7a 	bl	800678c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c98:	463b      	mov	r3, r7
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff ff6a 	bl	8008b74 <prvSampleTimeNow>
 8008ca0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	f200 8097 	bhi.w	8008dd8 <prvProcessReceivedCommands+0x1a0>
 8008caa:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb0 <prvProcessReceivedCommands+0x78>)
 8008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008cd9 	.word	0x08008cd9
 8008cbc:	08008d4f 	.word	0x08008d4f
 8008cc0:	08008d63 	.word	0x08008d63
 8008cc4:	08008daf 	.word	0x08008daf
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008cd9 	.word	0x08008cd9
 8008cd0:	08008d4f 	.word	0x08008d4f
 8008cd4:	08008d63 	.word	0x08008d63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cde:	f043 0301 	orr.w	r3, r3, #1
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	18d1      	adds	r1, r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cf8:	f7ff ff5c 	bl	8008bb4 <prvInsertTimerInActiveList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d06c      	beq.n	8008ddc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d061      	beq.n	8008ddc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	441a      	add	r2, r3
 8008d20:	2300      	movs	r3, #0
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2300      	movs	r3, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d2a:	f7ff fe03 	bl	8008934 <xTimerGenericCommand>
 8008d2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d152      	bne.n	8008ddc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	61bb      	str	r3, [r7, #24]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008d60:	e03d      	b.n	8008dde <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d68:	f043 0301 	orr.w	r3, r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	18d1      	adds	r1, r2, r3
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008da8:	f7ff ff04 	bl	8008bb4 <prvInsertTimerInActiveList>
					break;
 8008dac:	e017      	b.n	8008dde <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dbe:	f000 fb85 	bl	80094cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008dc2:	e00c      	b.n	8008dde <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dca:	f023 0301 	bic.w	r3, r3, #1
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008dd6:	e002      	b.n	8008dde <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <prvProcessReceivedCommands+0x1a6>
					break;
 8008ddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dde:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <prvProcessReceivedCommands+0x1c8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	1d39      	adds	r1, r7, #4
 8008de4:	2200      	movs	r2, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe f8de 	bl	8006fa8 <xQueueReceive>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f47f af26 	bne.w	8008c40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	3730      	adds	r7, #48	@ 0x30
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20002614 	.word	0x20002614

08008e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e0a:	e049      	b.n	8008ea0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e16:	4b2c      	ldr	r3, [pc, #176]	@ (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fd fcb1 	bl	800678c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d02f      	beq.n	8008ea0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4413      	add	r3, r2
 8008e48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d90e      	bls.n	8008e70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f7fd fc57 	bl	800671c <vListInsert>
 8008e6e:	e017      	b.n	8008ea0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e70:	2300      	movs	r3, #0
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2300      	movs	r3, #0
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff fd5a 	bl	8008934 <xTimerGenericCommand>
 8008e80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10b      	bne.n	8008ea0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	603b      	str	r3, [r7, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	bf00      	nop
 8008e9e:	e7fd      	b.n	8008e9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ea0:	4b09      	ldr	r3, [pc, #36]	@ (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1b0      	bne.n	8008e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008eaa:	4b07      	ldr	r3, [pc, #28]	@ (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008eb0:	4b06      	ldr	r3, [pc, #24]	@ (8008ecc <prvSwitchTimerLists+0xc8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a04      	ldr	r2, [pc, #16]	@ (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008eb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008eb8:	4a04      	ldr	r2, [pc, #16]	@ (8008ecc <prvSwitchTimerLists+0xc8>)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6013      	str	r3, [r2, #0]
}
 8008ebe:	bf00      	nop
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	2000260c 	.word	0x2000260c
 8008ecc:	20002610 	.word	0x20002610

08008ed0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ed6:	f000 f929 	bl	800912c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008eda:	4b15      	ldr	r3, [pc, #84]	@ (8008f30 <prvCheckForValidListAndQueue+0x60>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d120      	bne.n	8008f24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ee2:	4814      	ldr	r0, [pc, #80]	@ (8008f34 <prvCheckForValidListAndQueue+0x64>)
 8008ee4:	f7fd fbcc 	bl	8006680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ee8:	4813      	ldr	r0, [pc, #76]	@ (8008f38 <prvCheckForValidListAndQueue+0x68>)
 8008eea:	f7fd fbc9 	bl	8006680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008eee:	4b13      	ldr	r3, [pc, #76]	@ (8008f3c <prvCheckForValidListAndQueue+0x6c>)
 8008ef0:	4a10      	ldr	r2, [pc, #64]	@ (8008f34 <prvCheckForValidListAndQueue+0x64>)
 8008ef2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ef4:	4b12      	ldr	r3, [pc, #72]	@ (8008f40 <prvCheckForValidListAndQueue+0x70>)
 8008ef6:	4a10      	ldr	r2, [pc, #64]	@ (8008f38 <prvCheckForValidListAndQueue+0x68>)
 8008ef8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008efa:	2300      	movs	r3, #0
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4b11      	ldr	r3, [pc, #68]	@ (8008f44 <prvCheckForValidListAndQueue+0x74>)
 8008f00:	4a11      	ldr	r2, [pc, #68]	@ (8008f48 <prvCheckForValidListAndQueue+0x78>)
 8008f02:	2110      	movs	r1, #16
 8008f04:	200a      	movs	r0, #10
 8008f06:	f7fd fcd5 	bl	80068b4 <xQueueGenericCreateStatic>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4a08      	ldr	r2, [pc, #32]	@ (8008f30 <prvCheckForValidListAndQueue+0x60>)
 8008f0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f10:	4b07      	ldr	r3, [pc, #28]	@ (8008f30 <prvCheckForValidListAndQueue+0x60>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f18:	4b05      	ldr	r3, [pc, #20]	@ (8008f30 <prvCheckForValidListAndQueue+0x60>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	490b      	ldr	r1, [pc, #44]	@ (8008f4c <prvCheckForValidListAndQueue+0x7c>)
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fc02 	bl	8007728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f24:	f000 f932 	bl	800918c <vPortExitCritical>
}
 8008f28:	bf00      	nop
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20002614 	.word	0x20002614
 8008f34:	200025e4 	.word	0x200025e4
 8008f38:	200025f8 	.word	0x200025f8
 8008f3c:	2000260c 	.word	0x2000260c
 8008f40:	20002610 	.word	0x20002610
 8008f44:	200026c0 	.word	0x200026c0
 8008f48:	20002620 	.word	0x20002620
 8008f4c:	0800a218 	.word	0x0800a218

08008f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3b04      	subs	r3, #4
 8008f60:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3b04      	subs	r3, #4
 8008f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f023 0201 	bic.w	r2, r3, #1
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3b04      	subs	r3, #4
 8008f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f80:	4a08      	ldr	r2, [pc, #32]	@ (8008fa4 <pxPortInitialiseStack+0x54>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3b14      	subs	r3, #20
 8008f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3b20      	subs	r3, #32
 8008f96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f98:	68fb      	ldr	r3, [r7, #12]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc80      	pop	{r7}
 8008fa2:	4770      	bx	lr
 8008fa4:	08008fa9 	.word	0x08008fa9

08008fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fb2:	4b12      	ldr	r3, [pc, #72]	@ (8008ffc <prvTaskExitError+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d00b      	beq.n	8008fd4 <prvTaskExitError+0x2c>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	60fb      	str	r3, [r7, #12]
}
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <prvTaskExitError+0x28>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	60bb      	str	r3, [r7, #8]
}
 8008fe6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fe8:	bf00      	nop
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0fc      	beq.n	8008fea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr
 8008ffc:	20000840 	.word	0x20000840

08009000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <pxCurrentTCBConst2>)
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	6808      	ldr	r0, [r1, #0]
 8009006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800900a:	f380 8809 	msr	PSP, r0
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f04f 0000 	mov.w	r0, #0
 8009016:	f380 8811 	msr	BASEPRI, r0
 800901a:	f04e 0e0d 	orr.w	lr, lr, #13
 800901e:	4770      	bx	lr

08009020 <pxCurrentTCBConst2>:
 8009020:	200020e4 	.word	0x200020e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop

08009028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009028:	4806      	ldr	r0, [pc, #24]	@ (8009044 <prvPortStartFirstTask+0x1c>)
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	6800      	ldr	r0, [r0, #0]
 800902e:	f380 8808 	msr	MSP, r0
 8009032:	b662      	cpsie	i
 8009034:	b661      	cpsie	f
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	df00      	svc	0
 8009040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009042:	bf00      	nop
 8009044:	e000ed08 	.word	0xe000ed08

08009048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800904e:	4b32      	ldr	r3, [pc, #200]	@ (8009118 <xPortStartScheduler+0xd0>)
 8009050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	22ff      	movs	r2, #255	@ 0xff
 800905e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009070:	b2da      	uxtb	r2, r3
 8009072:	4b2a      	ldr	r3, [pc, #168]	@ (800911c <xPortStartScheduler+0xd4>)
 8009074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009076:	4b2a      	ldr	r3, [pc, #168]	@ (8009120 <xPortStartScheduler+0xd8>)
 8009078:	2207      	movs	r2, #7
 800907a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800907c:	e009      	b.n	8009092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800907e:	4b28      	ldr	r3, [pc, #160]	@ (8009120 <xPortStartScheduler+0xd8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3b01      	subs	r3, #1
 8009084:	4a26      	ldr	r2, [pc, #152]	@ (8009120 <xPortStartScheduler+0xd8>)
 8009086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800909a:	2b80      	cmp	r3, #128	@ 0x80
 800909c:	d0ef      	beq.n	800907e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800909e:	4b20      	ldr	r3, [pc, #128]	@ (8009120 <xPortStartScheduler+0xd8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f1c3 0307 	rsb	r3, r3, #7
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d00b      	beq.n	80090c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	60bb      	str	r3, [r7, #8]
}
 80090bc:	bf00      	nop
 80090be:	bf00      	nop
 80090c0:	e7fd      	b.n	80090be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090c2:	4b17      	ldr	r3, [pc, #92]	@ (8009120 <xPortStartScheduler+0xd8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	021b      	lsls	r3, r3, #8
 80090c8:	4a15      	ldr	r2, [pc, #84]	@ (8009120 <xPortStartScheduler+0xd8>)
 80090ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090cc:	4b14      	ldr	r3, [pc, #80]	@ (8009120 <xPortStartScheduler+0xd8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80090d4:	4a12      	ldr	r2, [pc, #72]	@ (8009120 <xPortStartScheduler+0xd8>)
 80090d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090e0:	4b10      	ldr	r3, [pc, #64]	@ (8009124 <xPortStartScheduler+0xdc>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a0f      	ldr	r2, [pc, #60]	@ (8009124 <xPortStartScheduler+0xdc>)
 80090e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <xPortStartScheduler+0xdc>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0c      	ldr	r2, [pc, #48]	@ (8009124 <xPortStartScheduler+0xdc>)
 80090f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80090f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090f8:	f000 f8b8 	bl	800926c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <xPortStartScheduler+0xe0>)
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009102:	f7ff ff91 	bl	8009028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009106:	f7fe ff6d 	bl	8007fe4 <vTaskSwitchContext>
	prvTaskExitError();
 800910a:	f7ff ff4d 	bl	8008fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	e000e400 	.word	0xe000e400
 800911c:	20002710 	.word	0x20002710
 8009120:	20002714 	.word	0x20002714
 8009124:	e000ed20 	.word	0xe000ed20
 8009128:	20000840 	.word	0x20000840

0800912c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	607b      	str	r3, [r7, #4]
}
 8009144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009146:	4b0f      	ldr	r3, [pc, #60]	@ (8009184 <vPortEnterCritical+0x58>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3301      	adds	r3, #1
 800914c:	4a0d      	ldr	r2, [pc, #52]	@ (8009184 <vPortEnterCritical+0x58>)
 800914e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009150:	4b0c      	ldr	r3, [pc, #48]	@ (8009184 <vPortEnterCritical+0x58>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d110      	bne.n	800917a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009158:	4b0b      	ldr	r3, [pc, #44]	@ (8009188 <vPortEnterCritical+0x5c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00b      	beq.n	800917a <vPortEnterCritical+0x4e>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	603b      	str	r3, [r7, #0]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <vPortEnterCritical+0x4a>
	}
}
 800917a:	bf00      	nop
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr
 8009184:	20000840 	.word	0x20000840
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009192:	4b12      	ldr	r3, [pc, #72]	@ (80091dc <vPortExitCritical+0x50>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <vPortExitCritical+0x26>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	607b      	str	r3, [r7, #4]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091b2:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <vPortExitCritical+0x50>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	4a08      	ldr	r2, [pc, #32]	@ (80091dc <vPortExitCritical+0x50>)
 80091ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091bc:	4b07      	ldr	r3, [pc, #28]	@ (80091dc <vPortExitCritical+0x50>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d105      	bne.n	80091d0 <vPortExitCritical+0x44>
 80091c4:	2300      	movs	r3, #0
 80091c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f383 8811 	msr	BASEPRI, r3
}
 80091ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000840 	.word	0x20000840

080091e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091e0:	f3ef 8009 	mrs	r0, PSP
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <pxCurrentTCBConst>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80091f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80091fa:	f380 8811 	msr	BASEPRI, r0
 80091fe:	f7fe fef1 	bl	8007fe4 <vTaskSwitchContext>
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f380 8811 	msr	BASEPRI, r0
 800920a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	6808      	ldr	r0, [r1, #0]
 8009212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009216:	f380 8809 	msr	PSP, r0
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	4770      	bx	lr

08009220 <pxCurrentTCBConst>:
 8009220:	200020e4 	.word	0x200020e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop

08009228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009242:	f7fe fe15 	bl	8007e70 <xTaskIncrementTick>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800924c:	4b06      	ldr	r3, [pc, #24]	@ (8009268 <xPortSysTickHandler+0x40>)
 800924e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f383 8811 	msr	BASEPRI, r3
}
 800925e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009270:	4b0a      	ldr	r3, [pc, #40]	@ (800929c <vPortSetupTimerInterrupt+0x30>)
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009276:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <vPortSetupTimerInterrupt+0x34>)
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800927c:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <vPortSetupTimerInterrupt+0x38>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a09      	ldr	r2, [pc, #36]	@ (80092a8 <vPortSetupTimerInterrupt+0x3c>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	099b      	lsrs	r3, r3, #6
 8009288:	4a08      	ldr	r2, [pc, #32]	@ (80092ac <vPortSetupTimerInterrupt+0x40>)
 800928a:	3b01      	subs	r3, #1
 800928c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800928e:	4b03      	ldr	r3, [pc, #12]	@ (800929c <vPortSetupTimerInterrupt+0x30>)
 8009290:	2207      	movs	r2, #7
 8009292:	601a      	str	r2, [r3, #0]
}
 8009294:	bf00      	nop
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr
 800929c:	e000e010 	.word	0xe000e010
 80092a0:	e000e018 	.word	0xe000e018
 80092a4:	20000834 	.word	0x20000834
 80092a8:	10624dd3 	.word	0x10624dd3
 80092ac:	e000e014 	.word	0xe000e014

080092b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092b6:	f3ef 8305 	mrs	r3, IPSR
 80092ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b0f      	cmp	r3, #15
 80092c0:	d915      	bls.n	80092ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092c2:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <vPortValidateInterruptPriority+0x70>)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092cc:	4b15      	ldr	r3, [pc, #84]	@ (8009324 <vPortValidateInterruptPriority+0x74>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	7afa      	ldrb	r2, [r7, #11]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d20b      	bcs.n	80092ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	607b      	str	r3, [r7, #4]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009328 <vPortValidateInterruptPriority+0x78>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80092f6:	4b0d      	ldr	r3, [pc, #52]	@ (800932c <vPortValidateInterruptPriority+0x7c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d90b      	bls.n	8009316 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	603b      	str	r3, [r7, #0]
}
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	e7fd      	b.n	8009312 <vPortValidateInterruptPriority+0x62>
	}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	bc80      	pop	{r7}
 800931e:	4770      	bx	lr
 8009320:	e000e3f0 	.word	0xe000e3f0
 8009324:	20002710 	.word	0x20002710
 8009328:	e000ed0c 	.word	0xe000ed0c
 800932c:	20002714 	.word	0x20002714

08009330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	@ 0x28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009338:	2300      	movs	r3, #0
 800933a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800933c:	f7fe fcde 	bl	8007cfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009340:	4b5c      	ldr	r3, [pc, #368]	@ (80094b4 <pvPortMalloc+0x184>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009348:	f000 f924 	bl	8009594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800934c:	4b5a      	ldr	r3, [pc, #360]	@ (80094b8 <pvPortMalloc+0x188>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4013      	ands	r3, r2
 8009354:	2b00      	cmp	r3, #0
 8009356:	f040 8095 	bne.w	8009484 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01e      	beq.n	800939e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009360:	2208      	movs	r2, #8
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4413      	add	r3, r2
 8009366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	2b00      	cmp	r3, #0
 8009370:	d015      	beq.n	800939e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f023 0307 	bic.w	r3, r3, #7
 8009378:	3308      	adds	r3, #8
 800937a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <pvPortMalloc+0x6e>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	617b      	str	r3, [r7, #20]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d06f      	beq.n	8009484 <pvPortMalloc+0x154>
 80093a4:	4b45      	ldr	r3, [pc, #276]	@ (80094bc <pvPortMalloc+0x18c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d86a      	bhi.n	8009484 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093ae:	4b44      	ldr	r3, [pc, #272]	@ (80094c0 <pvPortMalloc+0x190>)
 80093b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093b2:	4b43      	ldr	r3, [pc, #268]	@ (80094c0 <pvPortMalloc+0x190>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093b8:	e004      	b.n	80093c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d903      	bls.n	80093d6 <pvPortMalloc+0xa6>
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1f1      	bne.n	80093ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093d6:	4b37      	ldr	r3, [pc, #220]	@ (80094b4 <pvPortMalloc+0x184>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093dc:	429a      	cmp	r2, r3
 80093de:	d051      	beq.n	8009484 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2208      	movs	r2, #8
 80093e6:	4413      	add	r3, r2
 80093e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	2308      	movs	r3, #8
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	429a      	cmp	r2, r3
 8009400:	d920      	bls.n	8009444 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4413      	add	r3, r2
 8009408:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00b      	beq.n	800942c <pvPortMalloc+0xfc>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	613b      	str	r3, [r7, #16]
}
 8009426:	bf00      	nop
 8009428:	bf00      	nop
 800942a:	e7fd      	b.n	8009428 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800943e:	69b8      	ldr	r0, [r7, #24]
 8009440:	f000 f90a 	bl	8009658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009444:	4b1d      	ldr	r3, [pc, #116]	@ (80094bc <pvPortMalloc+0x18c>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	4a1b      	ldr	r2, [pc, #108]	@ (80094bc <pvPortMalloc+0x18c>)
 8009450:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009452:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <pvPortMalloc+0x18c>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	4b1b      	ldr	r3, [pc, #108]	@ (80094c4 <pvPortMalloc+0x194>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d203      	bcs.n	8009466 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800945e:	4b17      	ldr	r3, [pc, #92]	@ (80094bc <pvPortMalloc+0x18c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a18      	ldr	r2, [pc, #96]	@ (80094c4 <pvPortMalloc+0x194>)
 8009464:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	4b13      	ldr	r3, [pc, #76]	@ (80094b8 <pvPortMalloc+0x188>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	431a      	orrs	r2, r3
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800947a:	4b13      	ldr	r3, [pc, #76]	@ (80094c8 <pvPortMalloc+0x198>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3301      	adds	r3, #1
 8009480:	4a11      	ldr	r2, [pc, #68]	@ (80094c8 <pvPortMalloc+0x198>)
 8009482:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009484:	f7fe fc48 	bl	8007d18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00b      	beq.n	80094aa <pvPortMalloc+0x17a>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	60fb      	str	r3, [r7, #12]
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	e7fd      	b.n	80094a6 <pvPortMalloc+0x176>
	return pvReturn;
 80094aa:	69fb      	ldr	r3, [r7, #28]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3728      	adds	r7, #40	@ 0x28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20003b20 	.word	0x20003b20
 80094b8:	20003b34 	.word	0x20003b34
 80094bc:	20003b24 	.word	0x20003b24
 80094c0:	20003b18 	.word	0x20003b18
 80094c4:	20003b28 	.word	0x20003b28
 80094c8:	20003b2c 	.word	0x20003b2c

080094cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d04f      	beq.n	800957e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094de:	2308      	movs	r3, #8
 80094e0:	425b      	negs	r3, r3
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4413      	add	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	4b25      	ldr	r3, [pc, #148]	@ (8009588 <vPortFree+0xbc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4013      	ands	r3, r2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10b      	bne.n	8009512 <vPortFree+0x46>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	60fb      	str	r3, [r7, #12]
}
 800950c:	bf00      	nop
 800950e:	bf00      	nop
 8009510:	e7fd      	b.n	800950e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <vPortFree+0x66>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	60bb      	str	r3, [r7, #8]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	4b14      	ldr	r3, [pc, #80]	@ (8009588 <vPortFree+0xbc>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01e      	beq.n	800957e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11a      	bne.n	800957e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	4b0e      	ldr	r3, [pc, #56]	@ (8009588 <vPortFree+0xbc>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	43db      	mvns	r3, r3
 8009552:	401a      	ands	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009558:	f7fe fbd0 	bl	8007cfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	4b0a      	ldr	r3, [pc, #40]	@ (800958c <vPortFree+0xc0>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4413      	add	r3, r2
 8009566:	4a09      	ldr	r2, [pc, #36]	@ (800958c <vPortFree+0xc0>)
 8009568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800956a:	6938      	ldr	r0, [r7, #16]
 800956c:	f000 f874 	bl	8009658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009570:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <vPortFree+0xc4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a06      	ldr	r2, [pc, #24]	@ (8009590 <vPortFree+0xc4>)
 8009578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800957a:	f7fe fbcd 	bl	8007d18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20003b34 	.word	0x20003b34
 800958c:	20003b24 	.word	0x20003b24
 8009590:	20003b30 	.word	0x20003b30

08009594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800959a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800959e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095a0:	4b27      	ldr	r3, [pc, #156]	@ (8009640 <prvHeapInit+0xac>)
 80095a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00c      	beq.n	80095c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3307      	adds	r3, #7
 80095b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0307 	bic.w	r3, r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009640 <prvHeapInit+0xac>)
 80095c4:	4413      	add	r3, r2
 80095c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009644 <prvHeapInit+0xb0>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009644 <prvHeapInit+0xb0>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095e0:	2208      	movs	r2, #8
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4a15      	ldr	r2, [pc, #84]	@ (8009648 <prvHeapInit+0xb4>)
 80095f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095f6:	4b14      	ldr	r3, [pc, #80]	@ (8009648 <prvHeapInit+0xb4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2200      	movs	r2, #0
 80095fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095fe:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <prvHeapInit+0xb4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009614:	4b0c      	ldr	r3, [pc, #48]	@ (8009648 <prvHeapInit+0xb4>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a0a      	ldr	r2, [pc, #40]	@ (800964c <prvHeapInit+0xb8>)
 8009622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	4a09      	ldr	r2, [pc, #36]	@ (8009650 <prvHeapInit+0xbc>)
 800962a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800962c:	4b09      	ldr	r3, [pc, #36]	@ (8009654 <prvHeapInit+0xc0>)
 800962e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009632:	601a      	str	r2, [r3, #0]
}
 8009634:	bf00      	nop
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	bc80      	pop	{r7}
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20002718 	.word	0x20002718
 8009644:	20003b18 	.word	0x20003b18
 8009648:	20003b20 	.word	0x20003b20
 800964c:	20003b28 	.word	0x20003b28
 8009650:	20003b24 	.word	0x20003b24
 8009654:	20003b34 	.word	0x20003b34

08009658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009660:	4b27      	ldr	r3, [pc, #156]	@ (8009700 <prvInsertBlockIntoFreeList+0xa8>)
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e002      	b.n	800966c <prvInsertBlockIntoFreeList+0x14>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	429a      	cmp	r2, r3
 8009674:	d8f7      	bhi.n	8009666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4413      	add	r3, r2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d108      	bne.n	800969a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	441a      	add	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	441a      	add	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d118      	bne.n	80096e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <prvInsertBlockIntoFreeList+0xac>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d00d      	beq.n	80096d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	441a      	add	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e008      	b.n	80096e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009704 <prvInsertBlockIntoFreeList+0xac>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e003      	b.n	80096e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d002      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	20003b18 	.word	0x20003b18
 8009704:	20003b20 	.word	0x20003b20

08009708 <siprintf>:
 8009708:	b40e      	push	{r1, r2, r3}
 800970a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800970e:	b500      	push	{lr}
 8009710:	b09c      	sub	sp, #112	@ 0x70
 8009712:	ab1d      	add	r3, sp, #116	@ 0x74
 8009714:	9002      	str	r0, [sp, #8]
 8009716:	9006      	str	r0, [sp, #24]
 8009718:	9107      	str	r1, [sp, #28]
 800971a:	9104      	str	r1, [sp, #16]
 800971c:	4808      	ldr	r0, [pc, #32]	@ (8009740 <siprintf+0x38>)
 800971e:	4909      	ldr	r1, [pc, #36]	@ (8009744 <siprintf+0x3c>)
 8009720:	f853 2b04 	ldr.w	r2, [r3], #4
 8009724:	9105      	str	r1, [sp, #20]
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	a902      	add	r1, sp, #8
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	f000 fa06 	bl	8009b3c <_svfiprintf_r>
 8009730:	2200      	movs	r2, #0
 8009732:	9b02      	ldr	r3, [sp, #8]
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	b01c      	add	sp, #112	@ 0x70
 8009738:	f85d eb04 	ldr.w	lr, [sp], #4
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	20000844 	.word	0x20000844
 8009744:	ffff0208 	.word	0xffff0208

08009748 <memcmp>:
 8009748:	b510      	push	{r4, lr}
 800974a:	3901      	subs	r1, #1
 800974c:	4402      	add	r2, r0
 800974e:	4290      	cmp	r0, r2
 8009750:	d101      	bne.n	8009756 <memcmp+0xe>
 8009752:	2000      	movs	r0, #0
 8009754:	e005      	b.n	8009762 <memcmp+0x1a>
 8009756:	7803      	ldrb	r3, [r0, #0]
 8009758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800975c:	42a3      	cmp	r3, r4
 800975e:	d001      	beq.n	8009764 <memcmp+0x1c>
 8009760:	1b18      	subs	r0, r3, r4
 8009762:	bd10      	pop	{r4, pc}
 8009764:	3001      	adds	r0, #1
 8009766:	e7f2      	b.n	800974e <memcmp+0x6>

08009768 <memset>:
 8009768:	4603      	mov	r3, r0
 800976a:	4402      	add	r2, r0
 800976c:	4293      	cmp	r3, r2
 800976e:	d100      	bne.n	8009772 <memset+0xa>
 8009770:	4770      	bx	lr
 8009772:	f803 1b01 	strb.w	r1, [r3], #1
 8009776:	e7f9      	b.n	800976c <memset+0x4>

08009778 <_reclaim_reent>:
 8009778:	4b29      	ldr	r3, [pc, #164]	@ (8009820 <_reclaim_reent+0xa8>)
 800977a:	b570      	push	{r4, r5, r6, lr}
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4604      	mov	r4, r0
 8009780:	4283      	cmp	r3, r0
 8009782:	d04b      	beq.n	800981c <_reclaim_reent+0xa4>
 8009784:	69c3      	ldr	r3, [r0, #28]
 8009786:	b1ab      	cbz	r3, 80097b4 <_reclaim_reent+0x3c>
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	b16b      	cbz	r3, 80097a8 <_reclaim_reent+0x30>
 800978c:	2500      	movs	r5, #0
 800978e:	69e3      	ldr	r3, [r4, #28]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	5959      	ldr	r1, [r3, r5]
 8009794:	2900      	cmp	r1, #0
 8009796:	d13b      	bne.n	8009810 <_reclaim_reent+0x98>
 8009798:	3504      	adds	r5, #4
 800979a:	2d80      	cmp	r5, #128	@ 0x80
 800979c:	d1f7      	bne.n	800978e <_reclaim_reent+0x16>
 800979e:	69e3      	ldr	r3, [r4, #28]
 80097a0:	4620      	mov	r0, r4
 80097a2:	68d9      	ldr	r1, [r3, #12]
 80097a4:	f000 f878 	bl	8009898 <_free_r>
 80097a8:	69e3      	ldr	r3, [r4, #28]
 80097aa:	6819      	ldr	r1, [r3, #0]
 80097ac:	b111      	cbz	r1, 80097b4 <_reclaim_reent+0x3c>
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 f872 	bl	8009898 <_free_r>
 80097b4:	6961      	ldr	r1, [r4, #20]
 80097b6:	b111      	cbz	r1, 80097be <_reclaim_reent+0x46>
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 f86d 	bl	8009898 <_free_r>
 80097be:	69e1      	ldr	r1, [r4, #28]
 80097c0:	b111      	cbz	r1, 80097c8 <_reclaim_reent+0x50>
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 f868 	bl	8009898 <_free_r>
 80097c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097ca:	b111      	cbz	r1, 80097d2 <_reclaim_reent+0x5a>
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 f863 	bl	8009898 <_free_r>
 80097d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097d4:	b111      	cbz	r1, 80097dc <_reclaim_reent+0x64>
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 f85e 	bl	8009898 <_free_r>
 80097dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80097de:	b111      	cbz	r1, 80097e6 <_reclaim_reent+0x6e>
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 f859 	bl	8009898 <_free_r>
 80097e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80097e8:	b111      	cbz	r1, 80097f0 <_reclaim_reent+0x78>
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 f854 	bl	8009898 <_free_r>
 80097f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80097f2:	b111      	cbz	r1, 80097fa <_reclaim_reent+0x82>
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 f84f 	bl	8009898 <_free_r>
 80097fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80097fc:	b111      	cbz	r1, 8009804 <_reclaim_reent+0x8c>
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 f84a 	bl	8009898 <_free_r>
 8009804:	6a23      	ldr	r3, [r4, #32]
 8009806:	b14b      	cbz	r3, 800981c <_reclaim_reent+0xa4>
 8009808:	4620      	mov	r0, r4
 800980a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800980e:	4718      	bx	r3
 8009810:	680e      	ldr	r6, [r1, #0]
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f840 	bl	8009898 <_free_r>
 8009818:	4631      	mov	r1, r6
 800981a:	e7bb      	b.n	8009794 <_reclaim_reent+0x1c>
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	bf00      	nop
 8009820:	20000844 	.word	0x20000844

08009824 <__errno>:
 8009824:	4b01      	ldr	r3, [pc, #4]	@ (800982c <__errno+0x8>)
 8009826:	6818      	ldr	r0, [r3, #0]
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	20000844 	.word	0x20000844

08009830 <__libc_init_array>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	2600      	movs	r6, #0
 8009834:	4d0c      	ldr	r5, [pc, #48]	@ (8009868 <__libc_init_array+0x38>)
 8009836:	4c0d      	ldr	r4, [pc, #52]	@ (800986c <__libc_init_array+0x3c>)
 8009838:	1b64      	subs	r4, r4, r5
 800983a:	10a4      	asrs	r4, r4, #2
 800983c:	42a6      	cmp	r6, r4
 800983e:	d109      	bne.n	8009854 <__libc_init_array+0x24>
 8009840:	f000 fc78 	bl	800a134 <_init>
 8009844:	2600      	movs	r6, #0
 8009846:	4d0a      	ldr	r5, [pc, #40]	@ (8009870 <__libc_init_array+0x40>)
 8009848:	4c0a      	ldr	r4, [pc, #40]	@ (8009874 <__libc_init_array+0x44>)
 800984a:	1b64      	subs	r4, r4, r5
 800984c:	10a4      	asrs	r4, r4, #2
 800984e:	42a6      	cmp	r6, r4
 8009850:	d105      	bne.n	800985e <__libc_init_array+0x2e>
 8009852:	bd70      	pop	{r4, r5, r6, pc}
 8009854:	f855 3b04 	ldr.w	r3, [r5], #4
 8009858:	4798      	blx	r3
 800985a:	3601      	adds	r6, #1
 800985c:	e7ee      	b.n	800983c <__libc_init_array+0xc>
 800985e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009862:	4798      	blx	r3
 8009864:	3601      	adds	r6, #1
 8009866:	e7f2      	b.n	800984e <__libc_init_array+0x1e>
 8009868:	0800a3e8 	.word	0x0800a3e8
 800986c:	0800a3e8 	.word	0x0800a3e8
 8009870:	0800a3e8 	.word	0x0800a3e8
 8009874:	0800a3ec 	.word	0x0800a3ec

08009878 <__retarget_lock_acquire_recursive>:
 8009878:	4770      	bx	lr

0800987a <__retarget_lock_release_recursive>:
 800987a:	4770      	bx	lr

0800987c <memcpy>:
 800987c:	440a      	add	r2, r1
 800987e:	4291      	cmp	r1, r2
 8009880:	f100 33ff 	add.w	r3, r0, #4294967295
 8009884:	d100      	bne.n	8009888 <memcpy+0xc>
 8009886:	4770      	bx	lr
 8009888:	b510      	push	{r4, lr}
 800988a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988e:	4291      	cmp	r1, r2
 8009890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009894:	d1f9      	bne.n	800988a <memcpy+0xe>
 8009896:	bd10      	pop	{r4, pc}

08009898 <_free_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4605      	mov	r5, r0
 800989c:	2900      	cmp	r1, #0
 800989e:	d040      	beq.n	8009922 <_free_r+0x8a>
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f0c      	subs	r4, r1, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfb8      	it	lt
 80098aa:	18e4      	addlt	r4, r4, r3
 80098ac:	f000 f8de 	bl	8009a6c <__malloc_lock>
 80098b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009924 <_free_r+0x8c>)
 80098b2:	6813      	ldr	r3, [r2, #0]
 80098b4:	b933      	cbnz	r3, 80098c4 <_free_r+0x2c>
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	6014      	str	r4, [r2, #0]
 80098ba:	4628      	mov	r0, r5
 80098bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c0:	f000 b8da 	b.w	8009a78 <__malloc_unlock>
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d908      	bls.n	80098da <_free_r+0x42>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	1821      	adds	r1, r4, r0
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf01      	itttt	eq
 80098d0:	6819      	ldreq	r1, [r3, #0]
 80098d2:	685b      	ldreq	r3, [r3, #4]
 80098d4:	1809      	addeq	r1, r1, r0
 80098d6:	6021      	streq	r1, [r4, #0]
 80098d8:	e7ed      	b.n	80098b6 <_free_r+0x1e>
 80098da:	461a      	mov	r2, r3
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	b10b      	cbz	r3, 80098e4 <_free_r+0x4c>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d9fa      	bls.n	80098da <_free_r+0x42>
 80098e4:	6811      	ldr	r1, [r2, #0]
 80098e6:	1850      	adds	r0, r2, r1
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d10b      	bne.n	8009904 <_free_r+0x6c>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	4401      	add	r1, r0
 80098f0:	1850      	adds	r0, r2, r1
 80098f2:	4283      	cmp	r3, r0
 80098f4:	6011      	str	r1, [r2, #0]
 80098f6:	d1e0      	bne.n	80098ba <_free_r+0x22>
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4408      	add	r0, r1
 80098fe:	6010      	str	r0, [r2, #0]
 8009900:	6053      	str	r3, [r2, #4]
 8009902:	e7da      	b.n	80098ba <_free_r+0x22>
 8009904:	d902      	bls.n	800990c <_free_r+0x74>
 8009906:	230c      	movs	r3, #12
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	e7d6      	b.n	80098ba <_free_r+0x22>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	1821      	adds	r1, r4, r0
 8009910:	428b      	cmp	r3, r1
 8009912:	bf01      	itttt	eq
 8009914:	6819      	ldreq	r1, [r3, #0]
 8009916:	685b      	ldreq	r3, [r3, #4]
 8009918:	1809      	addeq	r1, r1, r0
 800991a:	6021      	streq	r1, [r4, #0]
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	6054      	str	r4, [r2, #4]
 8009920:	e7cb      	b.n	80098ba <_free_r+0x22>
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20003c7c 	.word	0x20003c7c

08009928 <sbrk_aligned>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4e0f      	ldr	r6, [pc, #60]	@ (8009968 <sbrk_aligned+0x40>)
 800992c:	460c      	mov	r4, r1
 800992e:	6831      	ldr	r1, [r6, #0]
 8009930:	4605      	mov	r5, r0
 8009932:	b911      	cbnz	r1, 800993a <sbrk_aligned+0x12>
 8009934:	f000 fbaa 	bl	800a08c <_sbrk_r>
 8009938:	6030      	str	r0, [r6, #0]
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 fba5 	bl	800a08c <_sbrk_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d103      	bne.n	800994e <sbrk_aligned+0x26>
 8009946:	f04f 34ff 	mov.w	r4, #4294967295
 800994a:	4620      	mov	r0, r4
 800994c:	bd70      	pop	{r4, r5, r6, pc}
 800994e:	1cc4      	adds	r4, r0, #3
 8009950:	f024 0403 	bic.w	r4, r4, #3
 8009954:	42a0      	cmp	r0, r4
 8009956:	d0f8      	beq.n	800994a <sbrk_aligned+0x22>
 8009958:	1a21      	subs	r1, r4, r0
 800995a:	4628      	mov	r0, r5
 800995c:	f000 fb96 	bl	800a08c <_sbrk_r>
 8009960:	3001      	adds	r0, #1
 8009962:	d1f2      	bne.n	800994a <sbrk_aligned+0x22>
 8009964:	e7ef      	b.n	8009946 <sbrk_aligned+0x1e>
 8009966:	bf00      	nop
 8009968:	20003c78 	.word	0x20003c78

0800996c <_malloc_r>:
 800996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009970:	1ccd      	adds	r5, r1, #3
 8009972:	f025 0503 	bic.w	r5, r5, #3
 8009976:	3508      	adds	r5, #8
 8009978:	2d0c      	cmp	r5, #12
 800997a:	bf38      	it	cc
 800997c:	250c      	movcc	r5, #12
 800997e:	2d00      	cmp	r5, #0
 8009980:	4606      	mov	r6, r0
 8009982:	db01      	blt.n	8009988 <_malloc_r+0x1c>
 8009984:	42a9      	cmp	r1, r5
 8009986:	d904      	bls.n	8009992 <_malloc_r+0x26>
 8009988:	230c      	movs	r3, #12
 800998a:	6033      	str	r3, [r6, #0]
 800998c:	2000      	movs	r0, #0
 800998e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a68 <_malloc_r+0xfc>
 8009996:	f000 f869 	bl	8009a6c <__malloc_lock>
 800999a:	f8d8 3000 	ldr.w	r3, [r8]
 800999e:	461c      	mov	r4, r3
 80099a0:	bb44      	cbnz	r4, 80099f4 <_malloc_r+0x88>
 80099a2:	4629      	mov	r1, r5
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff ffbf 	bl	8009928 <sbrk_aligned>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	4604      	mov	r4, r0
 80099ae:	d158      	bne.n	8009a62 <_malloc_r+0xf6>
 80099b0:	f8d8 4000 	ldr.w	r4, [r8]
 80099b4:	4627      	mov	r7, r4
 80099b6:	2f00      	cmp	r7, #0
 80099b8:	d143      	bne.n	8009a42 <_malloc_r+0xd6>
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	d04b      	beq.n	8009a56 <_malloc_r+0xea>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	4639      	mov	r1, r7
 80099c2:	4630      	mov	r0, r6
 80099c4:	eb04 0903 	add.w	r9, r4, r3
 80099c8:	f000 fb60 	bl	800a08c <_sbrk_r>
 80099cc:	4581      	cmp	r9, r0
 80099ce:	d142      	bne.n	8009a56 <_malloc_r+0xea>
 80099d0:	6821      	ldr	r1, [r4, #0]
 80099d2:	4630      	mov	r0, r6
 80099d4:	1a6d      	subs	r5, r5, r1
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7ff ffa6 	bl	8009928 <sbrk_aligned>
 80099dc:	3001      	adds	r0, #1
 80099de:	d03a      	beq.n	8009a56 <_malloc_r+0xea>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	442b      	add	r3, r5
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	bb62      	cbnz	r2, 8009a48 <_malloc_r+0xdc>
 80099ee:	f8c8 7000 	str.w	r7, [r8]
 80099f2:	e00f      	b.n	8009a14 <_malloc_r+0xa8>
 80099f4:	6822      	ldr	r2, [r4, #0]
 80099f6:	1b52      	subs	r2, r2, r5
 80099f8:	d420      	bmi.n	8009a3c <_malloc_r+0xd0>
 80099fa:	2a0b      	cmp	r2, #11
 80099fc:	d917      	bls.n	8009a2e <_malloc_r+0xc2>
 80099fe:	1961      	adds	r1, r4, r5
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	6025      	str	r5, [r4, #0]
 8009a04:	bf18      	it	ne
 8009a06:	6059      	strne	r1, [r3, #4]
 8009a08:	6863      	ldr	r3, [r4, #4]
 8009a0a:	bf08      	it	eq
 8009a0c:	f8c8 1000 	streq.w	r1, [r8]
 8009a10:	5162      	str	r2, [r4, r5]
 8009a12:	604b      	str	r3, [r1, #4]
 8009a14:	4630      	mov	r0, r6
 8009a16:	f000 f82f 	bl	8009a78 <__malloc_unlock>
 8009a1a:	f104 000b 	add.w	r0, r4, #11
 8009a1e:	1d23      	adds	r3, r4, #4
 8009a20:	f020 0007 	bic.w	r0, r0, #7
 8009a24:	1ac2      	subs	r2, r0, r3
 8009a26:	bf1c      	itt	ne
 8009a28:	1a1b      	subne	r3, r3, r0
 8009a2a:	50a3      	strne	r3, [r4, r2]
 8009a2c:	e7af      	b.n	800998e <_malloc_r+0x22>
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	bf0c      	ite	eq
 8009a34:	f8c8 2000 	streq.w	r2, [r8]
 8009a38:	605a      	strne	r2, [r3, #4]
 8009a3a:	e7eb      	b.n	8009a14 <_malloc_r+0xa8>
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	6864      	ldr	r4, [r4, #4]
 8009a40:	e7ae      	b.n	80099a0 <_malloc_r+0x34>
 8009a42:	463c      	mov	r4, r7
 8009a44:	687f      	ldr	r7, [r7, #4]
 8009a46:	e7b6      	b.n	80099b6 <_malloc_r+0x4a>
 8009a48:	461a      	mov	r2, r3
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d1fb      	bne.n	8009a48 <_malloc_r+0xdc>
 8009a50:	2300      	movs	r3, #0
 8009a52:	6053      	str	r3, [r2, #4]
 8009a54:	e7de      	b.n	8009a14 <_malloc_r+0xa8>
 8009a56:	230c      	movs	r3, #12
 8009a58:	4630      	mov	r0, r6
 8009a5a:	6033      	str	r3, [r6, #0]
 8009a5c:	f000 f80c 	bl	8009a78 <__malloc_unlock>
 8009a60:	e794      	b.n	800998c <_malloc_r+0x20>
 8009a62:	6005      	str	r5, [r0, #0]
 8009a64:	e7d6      	b.n	8009a14 <_malloc_r+0xa8>
 8009a66:	bf00      	nop
 8009a68:	20003c7c 	.word	0x20003c7c

08009a6c <__malloc_lock>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	@ (8009a74 <__malloc_lock+0x8>)
 8009a6e:	f7ff bf03 	b.w	8009878 <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	20003c74 	.word	0x20003c74

08009a78 <__malloc_unlock>:
 8009a78:	4801      	ldr	r0, [pc, #4]	@ (8009a80 <__malloc_unlock+0x8>)
 8009a7a:	f7ff befe 	b.w	800987a <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20003c74 	.word	0x20003c74

08009a84 <__ssputs_r>:
 8009a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	461f      	mov	r7, r3
 8009a8a:	688e      	ldr	r6, [r1, #8]
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	42be      	cmp	r6, r7
 8009a90:	460c      	mov	r4, r1
 8009a92:	4690      	mov	r8, r2
 8009a94:	680b      	ldr	r3, [r1, #0]
 8009a96:	d82d      	bhi.n	8009af4 <__ssputs_r+0x70>
 8009a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009aa0:	d026      	beq.n	8009af0 <__ssputs_r+0x6c>
 8009aa2:	6965      	ldr	r5, [r4, #20]
 8009aa4:	6909      	ldr	r1, [r1, #16]
 8009aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aaa:	eba3 0901 	sub.w	r9, r3, r1
 8009aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ab2:	1c7b      	adds	r3, r7, #1
 8009ab4:	444b      	add	r3, r9
 8009ab6:	106d      	asrs	r5, r5, #1
 8009ab8:	429d      	cmp	r5, r3
 8009aba:	bf38      	it	cc
 8009abc:	461d      	movcc	r5, r3
 8009abe:	0553      	lsls	r3, r2, #21
 8009ac0:	d527      	bpl.n	8009b12 <__ssputs_r+0x8e>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	f7ff ff52 	bl	800996c <_malloc_r>
 8009ac8:	4606      	mov	r6, r0
 8009aca:	b360      	cbz	r0, 8009b26 <__ssputs_r+0xa2>
 8009acc:	464a      	mov	r2, r9
 8009ace:	6921      	ldr	r1, [r4, #16]
 8009ad0:	f7ff fed4 	bl	800987c <memcpy>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ade:	81a3      	strh	r3, [r4, #12]
 8009ae0:	6126      	str	r6, [r4, #16]
 8009ae2:	444e      	add	r6, r9
 8009ae4:	6026      	str	r6, [r4, #0]
 8009ae6:	463e      	mov	r6, r7
 8009ae8:	6165      	str	r5, [r4, #20]
 8009aea:	eba5 0509 	sub.w	r5, r5, r9
 8009aee:	60a5      	str	r5, [r4, #8]
 8009af0:	42be      	cmp	r6, r7
 8009af2:	d900      	bls.n	8009af6 <__ssputs_r+0x72>
 8009af4:	463e      	mov	r6, r7
 8009af6:	4632      	mov	r2, r6
 8009af8:	4641      	mov	r1, r8
 8009afa:	6820      	ldr	r0, [r4, #0]
 8009afc:	f000 faac 	bl	800a058 <memmove>
 8009b00:	2000      	movs	r0, #0
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	1b9b      	subs	r3, r3, r6
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	4433      	add	r3, r6
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b12:	462a      	mov	r2, r5
 8009b14:	f000 fad8 	bl	800a0c8 <_realloc_r>
 8009b18:	4606      	mov	r6, r0
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d1e0      	bne.n	8009ae0 <__ssputs_r+0x5c>
 8009b1e:	4650      	mov	r0, sl
 8009b20:	6921      	ldr	r1, [r4, #16]
 8009b22:	f7ff feb9 	bl	8009898 <_free_r>
 8009b26:	230c      	movs	r3, #12
 8009b28:	f8ca 3000 	str.w	r3, [sl]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	e7e9      	b.n	8009b0e <__ssputs_r+0x8a>
	...

08009b3c <_svfiprintf_r>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	4698      	mov	r8, r3
 8009b42:	898b      	ldrh	r3, [r1, #12]
 8009b44:	4607      	mov	r7, r0
 8009b46:	061b      	lsls	r3, r3, #24
 8009b48:	460d      	mov	r5, r1
 8009b4a:	4614      	mov	r4, r2
 8009b4c:	b09d      	sub	sp, #116	@ 0x74
 8009b4e:	d510      	bpl.n	8009b72 <_svfiprintf_r+0x36>
 8009b50:	690b      	ldr	r3, [r1, #16]
 8009b52:	b973      	cbnz	r3, 8009b72 <_svfiprintf_r+0x36>
 8009b54:	2140      	movs	r1, #64	@ 0x40
 8009b56:	f7ff ff09 	bl	800996c <_malloc_r>
 8009b5a:	6028      	str	r0, [r5, #0]
 8009b5c:	6128      	str	r0, [r5, #16]
 8009b5e:	b930      	cbnz	r0, 8009b6e <_svfiprintf_r+0x32>
 8009b60:	230c      	movs	r3, #12
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	b01d      	add	sp, #116	@ 0x74
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	2340      	movs	r3, #64	@ 0x40
 8009b70:	616b      	str	r3, [r5, #20]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b76:	2320      	movs	r3, #32
 8009b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b7c:	2330      	movs	r3, #48	@ 0x30
 8009b7e:	f04f 0901 	mov.w	r9, #1
 8009b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009d20 <_svfiprintf_r+0x1e4>
 8009b8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b8e:	4623      	mov	r3, r4
 8009b90:	469a      	mov	sl, r3
 8009b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b96:	b10a      	cbz	r2, 8009b9c <_svfiprintf_r+0x60>
 8009b98:	2a25      	cmp	r2, #37	@ 0x25
 8009b9a:	d1f9      	bne.n	8009b90 <_svfiprintf_r+0x54>
 8009b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009ba0:	d00b      	beq.n	8009bba <_svfiprintf_r+0x7e>
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ff6b 	bl	8009a84 <__ssputs_r>
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f000 80a7 	beq.w	8009d02 <_svfiprintf_r+0x1c6>
 8009bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb6:	445a      	add	r2, fp
 8009bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bba:	f89a 3000 	ldrb.w	r3, [sl]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 809f 	beq.w	8009d02 <_svfiprintf_r+0x1c6>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bce:	f10a 0a01 	add.w	sl, sl, #1
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bdc:	4654      	mov	r4, sl
 8009bde:	2205      	movs	r2, #5
 8009be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be4:	484e      	ldr	r0, [pc, #312]	@ (8009d20 <_svfiprintf_r+0x1e4>)
 8009be6:	f000 fa61 	bl	800a0ac <memchr>
 8009bea:	9a04      	ldr	r2, [sp, #16]
 8009bec:	b9d8      	cbnz	r0, 8009c26 <_svfiprintf_r+0xea>
 8009bee:	06d0      	lsls	r0, r2, #27
 8009bf0:	bf44      	itt	mi
 8009bf2:	2320      	movmi	r3, #32
 8009bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf8:	0711      	lsls	r1, r2, #28
 8009bfa:	bf44      	itt	mi
 8009bfc:	232b      	movmi	r3, #43	@ 0x2b
 8009bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c02:	f89a 3000 	ldrb.w	r3, [sl]
 8009c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c08:	d015      	beq.n	8009c36 <_svfiprintf_r+0xfa>
 8009c0a:	4654      	mov	r4, sl
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	f04f 0c0a 	mov.w	ip, #10
 8009c12:	9a07      	ldr	r2, [sp, #28]
 8009c14:	4621      	mov	r1, r4
 8009c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c1a:	3b30      	subs	r3, #48	@ 0x30
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	d94b      	bls.n	8009cb8 <_svfiprintf_r+0x17c>
 8009c20:	b1b0      	cbz	r0, 8009c50 <_svfiprintf_r+0x114>
 8009c22:	9207      	str	r2, [sp, #28]
 8009c24:	e014      	b.n	8009c50 <_svfiprintf_r+0x114>
 8009c26:	eba0 0308 	sub.w	r3, r0, r8
 8009c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	46a2      	mov	sl, r4
 8009c32:	9304      	str	r3, [sp, #16]
 8009c34:	e7d2      	b.n	8009bdc <_svfiprintf_r+0xa0>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	1d19      	adds	r1, r3, #4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	9103      	str	r1, [sp, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfbb      	ittet	lt
 8009c42:	425b      	neglt	r3, r3
 8009c44:	f042 0202 	orrlt.w	r2, r2, #2
 8009c48:	9307      	strge	r3, [sp, #28]
 8009c4a:	9307      	strlt	r3, [sp, #28]
 8009c4c:	bfb8      	it	lt
 8009c4e:	9204      	strlt	r2, [sp, #16]
 8009c50:	7823      	ldrb	r3, [r4, #0]
 8009c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c54:	d10a      	bne.n	8009c6c <_svfiprintf_r+0x130>
 8009c56:	7863      	ldrb	r3, [r4, #1]
 8009c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c5a:	d132      	bne.n	8009cc2 <_svfiprintf_r+0x186>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	3402      	adds	r4, #2
 8009c60:	1d1a      	adds	r2, r3, #4
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	9203      	str	r2, [sp, #12]
 8009c66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c6a:	9305      	str	r3, [sp, #20]
 8009c6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009d24 <_svfiprintf_r+0x1e8>
 8009c70:	2203      	movs	r2, #3
 8009c72:	4650      	mov	r0, sl
 8009c74:	7821      	ldrb	r1, [r4, #0]
 8009c76:	f000 fa19 	bl	800a0ac <memchr>
 8009c7a:	b138      	cbz	r0, 8009c8c <_svfiprintf_r+0x150>
 8009c7c:	2240      	movs	r2, #64	@ 0x40
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	eba0 000a 	sub.w	r0, r0, sl
 8009c84:	4082      	lsls	r2, r0
 8009c86:	4313      	orrs	r3, r2
 8009c88:	3401      	adds	r4, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c90:	2206      	movs	r2, #6
 8009c92:	4825      	ldr	r0, [pc, #148]	@ (8009d28 <_svfiprintf_r+0x1ec>)
 8009c94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c98:	f000 fa08 	bl	800a0ac <memchr>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d036      	beq.n	8009d0e <_svfiprintf_r+0x1d2>
 8009ca0:	4b22      	ldr	r3, [pc, #136]	@ (8009d2c <_svfiprintf_r+0x1f0>)
 8009ca2:	bb1b      	cbnz	r3, 8009cec <_svfiprintf_r+0x1b0>
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	3307      	adds	r3, #7
 8009ca8:	f023 0307 	bic.w	r3, r3, #7
 8009cac:	3308      	adds	r3, #8
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb2:	4433      	add	r3, r6
 8009cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb6:	e76a      	b.n	8009b8e <_svfiprintf_r+0x52>
 8009cb8:	460c      	mov	r4, r1
 8009cba:	2001      	movs	r0, #1
 8009cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cc0:	e7a8      	b.n	8009c14 <_svfiprintf_r+0xd8>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f04f 0c0a 	mov.w	ip, #10
 8009cc8:	4619      	mov	r1, r3
 8009cca:	3401      	adds	r4, #1
 8009ccc:	9305      	str	r3, [sp, #20]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cd4:	3a30      	subs	r2, #48	@ 0x30
 8009cd6:	2a09      	cmp	r2, #9
 8009cd8:	d903      	bls.n	8009ce2 <_svfiprintf_r+0x1a6>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0c6      	beq.n	8009c6c <_svfiprintf_r+0x130>
 8009cde:	9105      	str	r1, [sp, #20]
 8009ce0:	e7c4      	b.n	8009c6c <_svfiprintf_r+0x130>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cea:	e7f0      	b.n	8009cce <_svfiprintf_r+0x192>
 8009cec:	ab03      	add	r3, sp, #12
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	462a      	mov	r2, r5
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d30 <_svfiprintf_r+0x1f4>)
 8009cf6:	a904      	add	r1, sp, #16
 8009cf8:	f3af 8000 	nop.w
 8009cfc:	1c42      	adds	r2, r0, #1
 8009cfe:	4606      	mov	r6, r0
 8009d00:	d1d6      	bne.n	8009cb0 <_svfiprintf_r+0x174>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	065b      	lsls	r3, r3, #25
 8009d06:	f53f af2d 	bmi.w	8009b64 <_svfiprintf_r+0x28>
 8009d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d0c:	e72c      	b.n	8009b68 <_svfiprintf_r+0x2c>
 8009d0e:	ab03      	add	r3, sp, #12
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	462a      	mov	r2, r5
 8009d14:	4638      	mov	r0, r7
 8009d16:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <_svfiprintf_r+0x1f4>)
 8009d18:	a904      	add	r1, sp, #16
 8009d1a:	f000 f87d 	bl	8009e18 <_printf_i>
 8009d1e:	e7ed      	b.n	8009cfc <_svfiprintf_r+0x1c0>
 8009d20:	0800a3b2 	.word	0x0800a3b2
 8009d24:	0800a3b8 	.word	0x0800a3b8
 8009d28:	0800a3bc 	.word	0x0800a3bc
 8009d2c:	00000000 	.word	0x00000000
 8009d30:	08009a85 	.word	0x08009a85

08009d34 <_printf_common>:
 8009d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	4616      	mov	r6, r2
 8009d3a:	4698      	mov	r8, r3
 8009d3c:	688a      	ldr	r2, [r1, #8]
 8009d3e:	690b      	ldr	r3, [r1, #16]
 8009d40:	4607      	mov	r7, r0
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bfb8      	it	lt
 8009d46:	4613      	movlt	r3, r2
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d4e:	460c      	mov	r4, r1
 8009d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d54:	b10a      	cbz	r2, 8009d5a <_printf_common+0x26>
 8009d56:	3301      	adds	r3, #1
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	0699      	lsls	r1, r3, #26
 8009d5e:	bf42      	ittt	mi
 8009d60:	6833      	ldrmi	r3, [r6, #0]
 8009d62:	3302      	addmi	r3, #2
 8009d64:	6033      	strmi	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	f015 0506 	ands.w	r5, r5, #6
 8009d6c:	d106      	bne.n	8009d7c <_printf_common+0x48>
 8009d6e:	f104 0a19 	add.w	sl, r4, #25
 8009d72:	68e3      	ldr	r3, [r4, #12]
 8009d74:	6832      	ldr	r2, [r6, #0]
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	42ab      	cmp	r3, r5
 8009d7a:	dc2b      	bgt.n	8009dd4 <_printf_common+0xa0>
 8009d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	3b00      	subs	r3, #0
 8009d84:	bf18      	it	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	0692      	lsls	r2, r2, #26
 8009d8a:	d430      	bmi.n	8009dee <_printf_common+0xba>
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d94:	47c8      	blx	r9
 8009d96:	3001      	adds	r0, #1
 8009d98:	d023      	beq.n	8009de2 <_printf_common+0xae>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6922      	ldr	r2, [r4, #16]
 8009d9e:	f003 0306 	and.w	r3, r3, #6
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	bf14      	ite	ne
 8009da6:	2500      	movne	r5, #0
 8009da8:	6833      	ldreq	r3, [r6, #0]
 8009daa:	f04f 0600 	mov.w	r6, #0
 8009dae:	bf08      	it	eq
 8009db0:	68e5      	ldreq	r5, [r4, #12]
 8009db2:	f104 041a 	add.w	r4, r4, #26
 8009db6:	bf08      	it	eq
 8009db8:	1aed      	subeq	r5, r5, r3
 8009dba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009dbe:	bf08      	it	eq
 8009dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	bfc4      	itt	gt
 8009dc8:	1a9b      	subgt	r3, r3, r2
 8009dca:	18ed      	addgt	r5, r5, r3
 8009dcc:	42b5      	cmp	r5, r6
 8009dce:	d11a      	bne.n	8009e06 <_printf_common+0xd2>
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e008      	b.n	8009de6 <_printf_common+0xb2>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4641      	mov	r1, r8
 8009dda:	4638      	mov	r0, r7
 8009ddc:	47c8      	blx	r9
 8009dde:	3001      	adds	r0, #1
 8009de0:	d103      	bne.n	8009dea <_printf_common+0xb6>
 8009de2:	f04f 30ff 	mov.w	r0, #4294967295
 8009de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dea:	3501      	adds	r5, #1
 8009dec:	e7c1      	b.n	8009d72 <_printf_common+0x3e>
 8009dee:	2030      	movs	r0, #48	@ 0x30
 8009df0:	18e1      	adds	r1, r4, r3
 8009df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dfc:	4422      	add	r2, r4
 8009dfe:	3302      	adds	r3, #2
 8009e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e04:	e7c2      	b.n	8009d8c <_printf_common+0x58>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4641      	mov	r1, r8
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	47c8      	blx	r9
 8009e10:	3001      	adds	r0, #1
 8009e12:	d0e6      	beq.n	8009de2 <_printf_common+0xae>
 8009e14:	3601      	adds	r6, #1
 8009e16:	e7d9      	b.n	8009dcc <_printf_common+0x98>

08009e18 <_printf_i>:
 8009e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1c:	7e0f      	ldrb	r7, [r1, #24]
 8009e1e:	4691      	mov	r9, r2
 8009e20:	2f78      	cmp	r7, #120	@ 0x78
 8009e22:	4680      	mov	r8, r0
 8009e24:	460c      	mov	r4, r1
 8009e26:	469a      	mov	sl, r3
 8009e28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e2e:	d807      	bhi.n	8009e40 <_printf_i+0x28>
 8009e30:	2f62      	cmp	r7, #98	@ 0x62
 8009e32:	d80a      	bhi.n	8009e4a <_printf_i+0x32>
 8009e34:	2f00      	cmp	r7, #0
 8009e36:	f000 80d3 	beq.w	8009fe0 <_printf_i+0x1c8>
 8009e3a:	2f58      	cmp	r7, #88	@ 0x58
 8009e3c:	f000 80ba 	beq.w	8009fb4 <_printf_i+0x19c>
 8009e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e48:	e03a      	b.n	8009ec0 <_printf_i+0xa8>
 8009e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e4e:	2b15      	cmp	r3, #21
 8009e50:	d8f6      	bhi.n	8009e40 <_printf_i+0x28>
 8009e52:	a101      	add	r1, pc, #4	@ (adr r1, 8009e58 <_printf_i+0x40>)
 8009e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e58:	08009eb1 	.word	0x08009eb1
 8009e5c:	08009ec5 	.word	0x08009ec5
 8009e60:	08009e41 	.word	0x08009e41
 8009e64:	08009e41 	.word	0x08009e41
 8009e68:	08009e41 	.word	0x08009e41
 8009e6c:	08009e41 	.word	0x08009e41
 8009e70:	08009ec5 	.word	0x08009ec5
 8009e74:	08009e41 	.word	0x08009e41
 8009e78:	08009e41 	.word	0x08009e41
 8009e7c:	08009e41 	.word	0x08009e41
 8009e80:	08009e41 	.word	0x08009e41
 8009e84:	08009fc7 	.word	0x08009fc7
 8009e88:	08009eef 	.word	0x08009eef
 8009e8c:	08009f81 	.word	0x08009f81
 8009e90:	08009e41 	.word	0x08009e41
 8009e94:	08009e41 	.word	0x08009e41
 8009e98:	08009fe9 	.word	0x08009fe9
 8009e9c:	08009e41 	.word	0x08009e41
 8009ea0:	08009eef 	.word	0x08009eef
 8009ea4:	08009e41 	.word	0x08009e41
 8009ea8:	08009e41 	.word	0x08009e41
 8009eac:	08009f89 	.word	0x08009f89
 8009eb0:	6833      	ldr	r3, [r6, #0]
 8009eb2:	1d1a      	adds	r2, r3, #4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6032      	str	r2, [r6, #0]
 8009eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e09e      	b.n	800a002 <_printf_i+0x1ea>
 8009ec4:	6833      	ldr	r3, [r6, #0]
 8009ec6:	6820      	ldr	r0, [r4, #0]
 8009ec8:	1d19      	adds	r1, r3, #4
 8009eca:	6031      	str	r1, [r6, #0]
 8009ecc:	0606      	lsls	r6, r0, #24
 8009ece:	d501      	bpl.n	8009ed4 <_printf_i+0xbc>
 8009ed0:	681d      	ldr	r5, [r3, #0]
 8009ed2:	e003      	b.n	8009edc <_printf_i+0xc4>
 8009ed4:	0645      	lsls	r5, r0, #25
 8009ed6:	d5fb      	bpl.n	8009ed0 <_printf_i+0xb8>
 8009ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	da03      	bge.n	8009ee8 <_printf_i+0xd0>
 8009ee0:	232d      	movs	r3, #45	@ 0x2d
 8009ee2:	426d      	negs	r5, r5
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ee8:	230a      	movs	r3, #10
 8009eea:	4859      	ldr	r0, [pc, #356]	@ (800a050 <_printf_i+0x238>)
 8009eec:	e011      	b.n	8009f12 <_printf_i+0xfa>
 8009eee:	6821      	ldr	r1, [r4, #0]
 8009ef0:	6833      	ldr	r3, [r6, #0]
 8009ef2:	0608      	lsls	r0, r1, #24
 8009ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ef8:	d402      	bmi.n	8009f00 <_printf_i+0xe8>
 8009efa:	0649      	lsls	r1, r1, #25
 8009efc:	bf48      	it	mi
 8009efe:	b2ad      	uxthmi	r5, r5
 8009f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f02:	6033      	str	r3, [r6, #0]
 8009f04:	bf14      	ite	ne
 8009f06:	230a      	movne	r3, #10
 8009f08:	2308      	moveq	r3, #8
 8009f0a:	4851      	ldr	r0, [pc, #324]	@ (800a050 <_printf_i+0x238>)
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f12:	6866      	ldr	r6, [r4, #4]
 8009f14:	2e00      	cmp	r6, #0
 8009f16:	bfa8      	it	ge
 8009f18:	6821      	ldrge	r1, [r4, #0]
 8009f1a:	60a6      	str	r6, [r4, #8]
 8009f1c:	bfa4      	itt	ge
 8009f1e:	f021 0104 	bicge.w	r1, r1, #4
 8009f22:	6021      	strge	r1, [r4, #0]
 8009f24:	b90d      	cbnz	r5, 8009f2a <_printf_i+0x112>
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	d04b      	beq.n	8009fc2 <_printf_i+0x1aa>
 8009f2a:	4616      	mov	r6, r2
 8009f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f30:	fb03 5711 	mls	r7, r3, r1, r5
 8009f34:	5dc7      	ldrb	r7, [r0, r7]
 8009f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f3a:	462f      	mov	r7, r5
 8009f3c:	42bb      	cmp	r3, r7
 8009f3e:	460d      	mov	r5, r1
 8009f40:	d9f4      	bls.n	8009f2c <_printf_i+0x114>
 8009f42:	2b08      	cmp	r3, #8
 8009f44:	d10b      	bne.n	8009f5e <_printf_i+0x146>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	07df      	lsls	r7, r3, #31
 8009f4a:	d508      	bpl.n	8009f5e <_printf_i+0x146>
 8009f4c:	6923      	ldr	r3, [r4, #16]
 8009f4e:	6861      	ldr	r1, [r4, #4]
 8009f50:	4299      	cmp	r1, r3
 8009f52:	bfde      	ittt	le
 8009f54:	2330      	movle	r3, #48	@ 0x30
 8009f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f5e:	1b92      	subs	r2, r2, r6
 8009f60:	6122      	str	r2, [r4, #16]
 8009f62:	464b      	mov	r3, r9
 8009f64:	4621      	mov	r1, r4
 8009f66:	4640      	mov	r0, r8
 8009f68:	f8cd a000 	str.w	sl, [sp]
 8009f6c:	aa03      	add	r2, sp, #12
 8009f6e:	f7ff fee1 	bl	8009d34 <_printf_common>
 8009f72:	3001      	adds	r0, #1
 8009f74:	d14a      	bne.n	800a00c <_printf_i+0x1f4>
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7a:	b004      	add	sp, #16
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	f043 0320 	orr.w	r3, r3, #32
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	2778      	movs	r7, #120	@ 0x78
 8009f8a:	4832      	ldr	r0, [pc, #200]	@ (800a054 <_printf_i+0x23c>)
 8009f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	061f      	lsls	r7, r3, #24
 8009f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f9a:	d402      	bmi.n	8009fa2 <_printf_i+0x18a>
 8009f9c:	065f      	lsls	r7, r3, #25
 8009f9e:	bf48      	it	mi
 8009fa0:	b2ad      	uxthmi	r5, r5
 8009fa2:	6031      	str	r1, [r6, #0]
 8009fa4:	07d9      	lsls	r1, r3, #31
 8009fa6:	bf44      	itt	mi
 8009fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fac:	6023      	strmi	r3, [r4, #0]
 8009fae:	b11d      	cbz	r5, 8009fb8 <_printf_i+0x1a0>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	e7ab      	b.n	8009f0c <_printf_i+0xf4>
 8009fb4:	4826      	ldr	r0, [pc, #152]	@ (800a050 <_printf_i+0x238>)
 8009fb6:	e7e9      	b.n	8009f8c <_printf_i+0x174>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	f023 0320 	bic.w	r3, r3, #32
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	e7f6      	b.n	8009fb0 <_printf_i+0x198>
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	e7bd      	b.n	8009f42 <_printf_i+0x12a>
 8009fc6:	6833      	ldr	r3, [r6, #0]
 8009fc8:	6825      	ldr	r5, [r4, #0]
 8009fca:	1d18      	adds	r0, r3, #4
 8009fcc:	6961      	ldr	r1, [r4, #20]
 8009fce:	6030      	str	r0, [r6, #0]
 8009fd0:	062e      	lsls	r6, r5, #24
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	d501      	bpl.n	8009fda <_printf_i+0x1c2>
 8009fd6:	6019      	str	r1, [r3, #0]
 8009fd8:	e002      	b.n	8009fe0 <_printf_i+0x1c8>
 8009fda:	0668      	lsls	r0, r5, #25
 8009fdc:	d5fb      	bpl.n	8009fd6 <_printf_i+0x1be>
 8009fde:	8019      	strh	r1, [r3, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4616      	mov	r6, r2
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	e7bc      	b.n	8009f62 <_printf_i+0x14a>
 8009fe8:	6833      	ldr	r3, [r6, #0]
 8009fea:	2100      	movs	r1, #0
 8009fec:	1d1a      	adds	r2, r3, #4
 8009fee:	6032      	str	r2, [r6, #0]
 8009ff0:	681e      	ldr	r6, [r3, #0]
 8009ff2:	6862      	ldr	r2, [r4, #4]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f859 	bl	800a0ac <memchr>
 8009ffa:	b108      	cbz	r0, 800a000 <_printf_i+0x1e8>
 8009ffc:	1b80      	subs	r0, r0, r6
 8009ffe:	6060      	str	r0, [r4, #4]
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	2300      	movs	r3, #0
 800a006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a00a:	e7aa      	b.n	8009f62 <_printf_i+0x14a>
 800a00c:	4632      	mov	r2, r6
 800a00e:	4649      	mov	r1, r9
 800a010:	4640      	mov	r0, r8
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	47d0      	blx	sl
 800a016:	3001      	adds	r0, #1
 800a018:	d0ad      	beq.n	8009f76 <_printf_i+0x15e>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	079b      	lsls	r3, r3, #30
 800a01e:	d413      	bmi.n	800a048 <_printf_i+0x230>
 800a020:	68e0      	ldr	r0, [r4, #12]
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	4298      	cmp	r0, r3
 800a026:	bfb8      	it	lt
 800a028:	4618      	movlt	r0, r3
 800a02a:	e7a6      	b.n	8009f7a <_printf_i+0x162>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4632      	mov	r2, r6
 800a030:	4649      	mov	r1, r9
 800a032:	4640      	mov	r0, r8
 800a034:	47d0      	blx	sl
 800a036:	3001      	adds	r0, #1
 800a038:	d09d      	beq.n	8009f76 <_printf_i+0x15e>
 800a03a:	3501      	adds	r5, #1
 800a03c:	68e3      	ldr	r3, [r4, #12]
 800a03e:	9903      	ldr	r1, [sp, #12]
 800a040:	1a5b      	subs	r3, r3, r1
 800a042:	42ab      	cmp	r3, r5
 800a044:	dcf2      	bgt.n	800a02c <_printf_i+0x214>
 800a046:	e7eb      	b.n	800a020 <_printf_i+0x208>
 800a048:	2500      	movs	r5, #0
 800a04a:	f104 0619 	add.w	r6, r4, #25
 800a04e:	e7f5      	b.n	800a03c <_printf_i+0x224>
 800a050:	0800a3c3 	.word	0x0800a3c3
 800a054:	0800a3d4 	.word	0x0800a3d4

0800a058 <memmove>:
 800a058:	4288      	cmp	r0, r1
 800a05a:	b510      	push	{r4, lr}
 800a05c:	eb01 0402 	add.w	r4, r1, r2
 800a060:	d902      	bls.n	800a068 <memmove+0x10>
 800a062:	4284      	cmp	r4, r0
 800a064:	4623      	mov	r3, r4
 800a066:	d807      	bhi.n	800a078 <memmove+0x20>
 800a068:	1e43      	subs	r3, r0, #1
 800a06a:	42a1      	cmp	r1, r4
 800a06c:	d008      	beq.n	800a080 <memmove+0x28>
 800a06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a076:	e7f8      	b.n	800a06a <memmove+0x12>
 800a078:	4601      	mov	r1, r0
 800a07a:	4402      	add	r2, r0
 800a07c:	428a      	cmp	r2, r1
 800a07e:	d100      	bne.n	800a082 <memmove+0x2a>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a08a:	e7f7      	b.n	800a07c <memmove+0x24>

0800a08c <_sbrk_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	2300      	movs	r3, #0
 800a090:	4d05      	ldr	r5, [pc, #20]	@ (800a0a8 <_sbrk_r+0x1c>)
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	f7f7 feca 	bl	8001e30 <_sbrk>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_sbrk_r+0x1a>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_sbrk_r+0x1a>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20003c70 	.word	0x20003c70

0800a0ac <memchr>:
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	b2c9      	uxtb	r1, r1
 800a0b2:	4402      	add	r2, r0
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	d101      	bne.n	800a0be <memchr+0x12>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	e003      	b.n	800a0c6 <memchr+0x1a>
 800a0be:	7804      	ldrb	r4, [r0, #0]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	428c      	cmp	r4, r1
 800a0c4:	d1f6      	bne.n	800a0b4 <memchr+0x8>
 800a0c6:	bd10      	pop	{r4, pc}

0800a0c8 <_realloc_r>:
 800a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	4615      	mov	r5, r2
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	b921      	cbnz	r1, 800a0de <_realloc_r+0x16>
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0da:	f7ff bc47 	b.w	800996c <_malloc_r>
 800a0de:	b92a      	cbnz	r2, 800a0ec <_realloc_r+0x24>
 800a0e0:	f7ff fbda 	bl	8009898 <_free_r>
 800a0e4:	2400      	movs	r4, #0
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ec:	f000 f81a 	bl	800a124 <_malloc_usable_size_r>
 800a0f0:	4285      	cmp	r5, r0
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	d802      	bhi.n	800a0fc <_realloc_r+0x34>
 800a0f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0fa:	d8f4      	bhi.n	800a0e6 <_realloc_r+0x1e>
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	4640      	mov	r0, r8
 800a100:	f7ff fc34 	bl	800996c <_malloc_r>
 800a104:	4607      	mov	r7, r0
 800a106:	2800      	cmp	r0, #0
 800a108:	d0ec      	beq.n	800a0e4 <_realloc_r+0x1c>
 800a10a:	42b5      	cmp	r5, r6
 800a10c:	462a      	mov	r2, r5
 800a10e:	4621      	mov	r1, r4
 800a110:	bf28      	it	cs
 800a112:	4632      	movcs	r2, r6
 800a114:	f7ff fbb2 	bl	800987c <memcpy>
 800a118:	4621      	mov	r1, r4
 800a11a:	4640      	mov	r0, r8
 800a11c:	f7ff fbbc 	bl	8009898 <_free_r>
 800a120:	463c      	mov	r4, r7
 800a122:	e7e0      	b.n	800a0e6 <_realloc_r+0x1e>

0800a124 <_malloc_usable_size_r>:
 800a124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a128:	1f18      	subs	r0, r3, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfbc      	itt	lt
 800a12e:	580b      	ldrlt	r3, [r1, r0]
 800a130:	18c0      	addlt	r0, r0, r3
 800a132:	4770      	bx	lr

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
