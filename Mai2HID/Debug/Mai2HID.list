
Mai2HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008698  08008698  0000a18c  2**0
                  CONTENTS
  4 .ARM          00000000  08008698  08008698  0000a18c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008698  08008698  0000a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008698  08008698  00009698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800869c  0800869c  0000969c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  080086a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  2000018c  0800882c  0000a18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  0800882c  0000a978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b75e  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3d  00000000  00000000  00015913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00018350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a1  00000000  00000000  00018dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001969f  00000000  00000000  00019579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f948  00000000  00000000  00032c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084862  00000000  00000000  00042560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6dc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  000c6e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c9594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	080085fc 	.word	0x080085fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	080085fc 	.word	0x080085fc

0800014c <ifkey>:
#include <Keyboard_Driver.h>

uint8_t report[15]={0};

void ifkey(int command)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(command)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	3b01      	subs	r3, #1
 8000158:	2bcf      	cmp	r3, #207	@ 0xcf
 800015a:	f201 807f 	bhi.w	800125c <ifkey+0x1110>
 800015e:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <ifkey+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	080004a5 	.word	0x080004a5
 8000168:	080004b7 	.word	0x080004b7
 800016c:	080004c9 	.word	0x080004c9
 8000170:	080004db 	.word	0x080004db
 8000174:	080004ed 	.word	0x080004ed
 8000178:	080004ff 	.word	0x080004ff
 800017c:	08000511 	.word	0x08000511
 8000180:	08000523 	.word	0x08000523
 8000184:	08000535 	.word	0x08000535
 8000188:	08000547 	.word	0x08000547
 800018c:	08000559 	.word	0x08000559
 8000190:	0800056b 	.word	0x0800056b
 8000194:	0800057d 	.word	0x0800057d
 8000198:	0800058f 	.word	0x0800058f
 800019c:	080005a1 	.word	0x080005a1
 80001a0:	080005b3 	.word	0x080005b3
 80001a4:	080005c5 	.word	0x080005c5
 80001a8:	080005d7 	.word	0x080005d7
 80001ac:	080005e9 	.word	0x080005e9
 80001b0:	080005fb 	.word	0x080005fb
 80001b4:	0800060d 	.word	0x0800060d
 80001b8:	0800061f 	.word	0x0800061f
 80001bc:	08000631 	.word	0x08000631
 80001c0:	08000643 	.word	0x08000643
 80001c4:	08000655 	.word	0x08000655
 80001c8:	08000667 	.word	0x08000667
 80001cc:	08000679 	.word	0x08000679
 80001d0:	0800068b 	.word	0x0800068b
 80001d4:	0800069d 	.word	0x0800069d
 80001d8:	080006af 	.word	0x080006af
 80001dc:	080006c1 	.word	0x080006c1
 80001e0:	080006d3 	.word	0x080006d3
 80001e4:	080006e5 	.word	0x080006e5
 80001e8:	080006f7 	.word	0x080006f7
 80001ec:	08000709 	.word	0x08000709
 80001f0:	0800071b 	.word	0x0800071b
 80001f4:	0800072d 	.word	0x0800072d
 80001f8:	0800073f 	.word	0x0800073f
 80001fc:	08000751 	.word	0x08000751
 8000200:	08000769 	.word	0x08000769
 8000204:	0800077b 	.word	0x0800077b
 8000208:	0800078d 	.word	0x0800078d
 800020c:	0800079f 	.word	0x0800079f
 8000210:	080007b1 	.word	0x080007b1
 8000214:	080007c3 	.word	0x080007c3
 8000218:	080007d5 	.word	0x080007d5
 800021c:	080007e7 	.word	0x080007e7
 8000220:	080007f9 	.word	0x080007f9
 8000224:	0800080b 	.word	0x0800080b
 8000228:	0800081d 	.word	0x0800081d
 800022c:	0800082f 	.word	0x0800082f
 8000230:	08000841 	.word	0x08000841
 8000234:	08000853 	.word	0x08000853
 8000238:	08000865 	.word	0x08000865
 800023c:	08000877 	.word	0x08000877
 8000240:	08000889 	.word	0x08000889
 8000244:	0800089b 	.word	0x0800089b
 8000248:	080008ad 	.word	0x080008ad
 800024c:	080008bf 	.word	0x080008bf
 8000250:	080008d1 	.word	0x080008d1
 8000254:	080008e3 	.word	0x080008e3
 8000258:	080008f5 	.word	0x080008f5
 800025c:	08000907 	.word	0x08000907
 8000260:	08000919 	.word	0x08000919
 8000264:	0800092b 	.word	0x0800092b
 8000268:	0800093d 	.word	0x0800093d
 800026c:	0800094f 	.word	0x0800094f
 8000270:	08000961 	.word	0x08000961
 8000274:	08000973 	.word	0x08000973
 8000278:	08000985 	.word	0x08000985
 800027c:	08000997 	.word	0x08000997
 8000280:	080009a9 	.word	0x080009a9
 8000284:	080009bb 	.word	0x080009bb
 8000288:	080009cd 	.word	0x080009cd
 800028c:	080009df 	.word	0x080009df
 8000290:	080009f1 	.word	0x080009f1
 8000294:	08000a03 	.word	0x08000a03
 8000298:	08000a15 	.word	0x08000a15
 800029c:	08000a2d 	.word	0x08000a2d
 80002a0:	08000a3f 	.word	0x08000a3f
 80002a4:	08000a51 	.word	0x08000a51
 80002a8:	08000a61 	.word	0x08000a61
 80002ac:	08000a71 	.word	0x08000a71
 80002b0:	08000a81 	.word	0x08000a81
 80002b4:	08000a91 	.word	0x08000a91
 80002b8:	08000aa1 	.word	0x08000aa1
 80002bc:	08000ab1 	.word	0x08000ab1
 80002c0:	08000ac1 	.word	0x08000ac1
 80002c4:	08000ad1 	.word	0x08000ad1
 80002c8:	08000ae1 	.word	0x08000ae1
 80002cc:	08000af1 	.word	0x08000af1
 80002d0:	08000b01 	.word	0x08000b01
 80002d4:	08000b11 	.word	0x08000b11
 80002d8:	08000b21 	.word	0x08000b21
 80002dc:	08000b31 	.word	0x08000b31
 80002e0:	08000b41 	.word	0x08000b41
 80002e4:	08000b51 	.word	0x08000b51
 80002e8:	08000b61 	.word	0x08000b61
 80002ec:	08000b71 	.word	0x08000b71
 80002f0:	08000b81 	.word	0x08000b81
 80002f4:	08000b91 	.word	0x08000b91
 80002f8:	08000ba1 	.word	0x08000ba1
 80002fc:	08000bb1 	.word	0x08000bb1
 8000300:	08000bc1 	.word	0x08000bc1
 8000304:	08000bd1 	.word	0x08000bd1
 8000308:	08000be1 	.word	0x08000be1
 800030c:	08000bf1 	.word	0x08000bf1
 8000310:	08000c01 	.word	0x08000c01
 8000314:	08000c11 	.word	0x08000c11
 8000318:	08000c21 	.word	0x08000c21
 800031c:	08000c31 	.word	0x08000c31
 8000320:	08000c41 	.word	0x08000c41
 8000324:	08000c51 	.word	0x08000c51
 8000328:	08000c61 	.word	0x08000c61
 800032c:	08000c71 	.word	0x08000c71
 8000330:	08000c81 	.word	0x08000c81
 8000334:	08000c91 	.word	0x08000c91
 8000338:	08000ca5 	.word	0x08000ca5
 800033c:	08000cb5 	.word	0x08000cb5
 8000340:	08000cc5 	.word	0x08000cc5
 8000344:	08000cd5 	.word	0x08000cd5
 8000348:	08000ce5 	.word	0x08000ce5
 800034c:	08000cf5 	.word	0x08000cf5
 8000350:	08000d05 	.word	0x08000d05
 8000354:	08000d15 	.word	0x08000d15
 8000358:	08000d25 	.word	0x08000d25
 800035c:	08000d35 	.word	0x08000d35
 8000360:	08000d45 	.word	0x08000d45
 8000364:	08000d55 	.word	0x08000d55
 8000368:	08000d65 	.word	0x08000d65
 800036c:	08000d75 	.word	0x08000d75
 8000370:	08000d85 	.word	0x08000d85
 8000374:	08000d95 	.word	0x08000d95
 8000378:	08000da5 	.word	0x08000da5
 800037c:	08000db5 	.word	0x08000db5
 8000380:	08000dc5 	.word	0x08000dc5
 8000384:	08000dd5 	.word	0x08000dd5
 8000388:	08000de5 	.word	0x08000de5
 800038c:	08000df5 	.word	0x08000df5
 8000390:	08000e05 	.word	0x08000e05
 8000394:	08000e15 	.word	0x08000e15
 8000398:	08000e25 	.word	0x08000e25
 800039c:	08000e35 	.word	0x08000e35
 80003a0:	08000e45 	.word	0x08000e45
 80003a4:	08000e55 	.word	0x08000e55
 80003a8:	08000e65 	.word	0x08000e65
 80003ac:	08000e75 	.word	0x08000e75
 80003b0:	08000e85 	.word	0x08000e85
 80003b4:	08000e95 	.word	0x08000e95
 80003b8:	08000ea5 	.word	0x08000ea5
 80003bc:	08000eb5 	.word	0x08000eb5
 80003c0:	08000ec5 	.word	0x08000ec5
 80003c4:	08000ed5 	.word	0x08000ed5
 80003c8:	08000ee5 	.word	0x08000ee5
 80003cc:	08000ef5 	.word	0x08000ef5
 80003d0:	08000f05 	.word	0x08000f05
 80003d4:	08000f19 	.word	0x08000f19
 80003d8:	08000f29 	.word	0x08000f29
 80003dc:	08000f39 	.word	0x08000f39
 80003e0:	08000f49 	.word	0x08000f49
 80003e4:	08000f59 	.word	0x08000f59
 80003e8:	08000f69 	.word	0x08000f69
 80003ec:	08000f79 	.word	0x08000f79
 80003f0:	08000f89 	.word	0x08000f89
 80003f4:	08000f99 	.word	0x08000f99
 80003f8:	08000fa9 	.word	0x08000fa9
 80003fc:	08000fb9 	.word	0x08000fb9
 8000400:	08000fc9 	.word	0x08000fc9
 8000404:	08000fd9 	.word	0x08000fd9
 8000408:	08000fe9 	.word	0x08000fe9
 800040c:	08000ff9 	.word	0x08000ff9
 8000410:	08001009 	.word	0x08001009
 8000414:	08001019 	.word	0x08001019
 8000418:	08001029 	.word	0x08001029
 800041c:	08001039 	.word	0x08001039
 8000420:	08001049 	.word	0x08001049
 8000424:	08001059 	.word	0x08001059
 8000428:	08001069 	.word	0x08001069
 800042c:	08001079 	.word	0x08001079
 8000430:	08001089 	.word	0x08001089
 8000434:	08001099 	.word	0x08001099
 8000438:	080010a9 	.word	0x080010a9
 800043c:	080010b9 	.word	0x080010b9
 8000440:	080010c9 	.word	0x080010c9
 8000444:	080010d9 	.word	0x080010d9
 8000448:	080010e9 	.word	0x080010e9
 800044c:	080010f9 	.word	0x080010f9
 8000450:	08001109 	.word	0x08001109
 8000454:	08001119 	.word	0x08001119
 8000458:	08001129 	.word	0x08001129
 800045c:	08001139 	.word	0x08001139
 8000460:	08001149 	.word	0x08001149
 8000464:	08001159 	.word	0x08001159
 8000468:	08001169 	.word	0x08001169
 800046c:	08001179 	.word	0x08001179
 8000470:	0800118d 	.word	0x0800118d
 8000474:	0800119d 	.word	0x0800119d
 8000478:	080011ad 	.word	0x080011ad
 800047c:	080011bd 	.word	0x080011bd
 8000480:	080011cd 	.word	0x080011cd
 8000484:	080011dd 	.word	0x080011dd
 8000488:	080011ed 	.word	0x080011ed
 800048c:	080011fd 	.word	0x080011fd
 8000490:	0800120d 	.word	0x0800120d
 8000494:	0800121d 	.word	0x0800121d
 8000498:	0800122d 	.word	0x0800122d
 800049c:	0800123d 	.word	0x0800123d
 80004a0:	0800124d 	.word	0x0800124d
	  	{
	  		case 1:report[0]|=0x01;break;//LeftCtrl
 80004a4:	4baf      	ldr	r3, [pc, #700]	@ (8000764 <ifkey+0x618>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	4bad      	ldr	r3, [pc, #692]	@ (8000764 <ifkey+0x618>)
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	f000 bed3 	b.w	800125c <ifkey+0x1110>
	  		case 2:report[0]&=(~0x01);break;
 80004b6:	4bab      	ldr	r3, [pc, #684]	@ (8000764 <ifkey+0x618>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4ba8      	ldr	r3, [pc, #672]	@ (8000764 <ifkey+0x618>)
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	f000 beca 	b.w	800125c <ifkey+0x1110>
	  		case 3:report[0]|=0x02;break;//LeftShift
 80004c8:	4ba6      	ldr	r3, [pc, #664]	@ (8000764 <ifkey+0x618>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4ba4      	ldr	r3, [pc, #656]	@ (8000764 <ifkey+0x618>)
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	f000 bec1 	b.w	800125c <ifkey+0x1110>
	  		case 4:report[0]&=(~0x02);break;
 80004da:	4ba2      	ldr	r3, [pc, #648]	@ (8000764 <ifkey+0x618>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f023 0302 	bic.w	r3, r3, #2
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b9f      	ldr	r3, [pc, #636]	@ (8000764 <ifkey+0x618>)
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	f000 beb8 	b.w	800125c <ifkey+0x1110>
	  		case 5:report[0]|=0x04;break;//LeftAlt
 80004ec:	4b9d      	ldr	r3, [pc, #628]	@ (8000764 <ifkey+0x618>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b9b      	ldr	r3, [pc, #620]	@ (8000764 <ifkey+0x618>)
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	f000 beaf 	b.w	800125c <ifkey+0x1110>
	  		case 6:report[0]&=(~0x04);break;
 80004fe:	4b99      	ldr	r3, [pc, #612]	@ (8000764 <ifkey+0x618>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	f023 0304 	bic.w	r3, r3, #4
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b96      	ldr	r3, [pc, #600]	@ (8000764 <ifkey+0x618>)
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	f000 bea6 	b.w	800125c <ifkey+0x1110>
	  		case 7:report[0]|=0x08;break;//LeftGUI
 8000510:	4b94      	ldr	r3, [pc, #592]	@ (8000764 <ifkey+0x618>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b92      	ldr	r3, [pc, #584]	@ (8000764 <ifkey+0x618>)
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	f000 be9d 	b.w	800125c <ifkey+0x1110>
	  		case 8:report[0]&=(~0x08);break;
 8000522:	4b90      	ldr	r3, [pc, #576]	@ (8000764 <ifkey+0x618>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f023 0308 	bic.w	r3, r3, #8
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b8d      	ldr	r3, [pc, #564]	@ (8000764 <ifkey+0x618>)
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	f000 be94 	b.w	800125c <ifkey+0x1110>
	  		case 9:report[0]|=0x10;break;//RightCtrl
 8000534:	4b8b      	ldr	r3, [pc, #556]	@ (8000764 <ifkey+0x618>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b89      	ldr	r3, [pc, #548]	@ (8000764 <ifkey+0x618>)
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	f000 be8b 	b.w	800125c <ifkey+0x1110>
	  		case 10:report[0]&=(~0x10);break;
 8000546:	4b87      	ldr	r3, [pc, #540]	@ (8000764 <ifkey+0x618>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0310 	bic.w	r3, r3, #16
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b84      	ldr	r3, [pc, #528]	@ (8000764 <ifkey+0x618>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	f000 be82 	b.w	800125c <ifkey+0x1110>
	  		case 11:report[0]|=0x20;break;//RightShift
 8000558:	4b82      	ldr	r3, [pc, #520]	@ (8000764 <ifkey+0x618>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b80      	ldr	r3, [pc, #512]	@ (8000764 <ifkey+0x618>)
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	f000 be79 	b.w	800125c <ifkey+0x1110>
	  		case 12:report[0]&=(~0x20);break;
 800056a:	4b7e      	ldr	r3, [pc, #504]	@ (8000764 <ifkey+0x618>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f023 0320 	bic.w	r3, r3, #32
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b7b      	ldr	r3, [pc, #492]	@ (8000764 <ifkey+0x618>)
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	f000 be70 	b.w	800125c <ifkey+0x1110>
	  		case 13:report[0]|=0x40;break;//RightAlt
 800057c:	4b79      	ldr	r3, [pc, #484]	@ (8000764 <ifkey+0x618>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b77      	ldr	r3, [pc, #476]	@ (8000764 <ifkey+0x618>)
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	f000 be67 	b.w	800125c <ifkey+0x1110>
	  		case 14:report[0]&=(~0x40);break;
 800058e:	4b75      	ldr	r3, [pc, #468]	@ (8000764 <ifkey+0x618>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b72      	ldr	r3, [pc, #456]	@ (8000764 <ifkey+0x618>)
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	f000 be5e 	b.w	800125c <ifkey+0x1110>
	  		case 15:report[0]|=0x80;break;//RightGUI
 80005a0:	4b70      	ldr	r3, [pc, #448]	@ (8000764 <ifkey+0x618>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000764 <ifkey+0x618>)
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	f000 be55 	b.w	800125c <ifkey+0x1110>
	  		case 16:report[0]&=(~0x80);break;
 80005b2:	4b6c      	ldr	r3, [pc, #432]	@ (8000764 <ifkey+0x618>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b69      	ldr	r3, [pc, #420]	@ (8000764 <ifkey+0x618>)
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	f000 be4c 	b.w	800125c <ifkey+0x1110>
	  		case 17:report[2]|=0x01;break;//a按下
 80005c4:	4b67      	ldr	r3, [pc, #412]	@ (8000764 <ifkey+0x618>)
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b65      	ldr	r3, [pc, #404]	@ (8000764 <ifkey+0x618>)
 80005d0:	709a      	strb	r2, [r3, #2]
 80005d2:	f000 be43 	b.w	800125c <ifkey+0x1110>
	  		case 18:report[2]&=(~0x01);break;//a释放
 80005d6:	4b63      	ldr	r3, [pc, #396]	@ (8000764 <ifkey+0x618>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	f023 0301 	bic.w	r3, r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b60      	ldr	r3, [pc, #384]	@ (8000764 <ifkey+0x618>)
 80005e2:	709a      	strb	r2, [r3, #2]
 80005e4:	f000 be3a 	b.w	800125c <ifkey+0x1110>
	  		case 19:report[2]|=0x02;break;//b
 80005e8:	4b5e      	ldr	r3, [pc, #376]	@ (8000764 <ifkey+0x618>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b5c      	ldr	r3, [pc, #368]	@ (8000764 <ifkey+0x618>)
 80005f4:	709a      	strb	r2, [r3, #2]
 80005f6:	f000 be31 	b.w	800125c <ifkey+0x1110>
	  		case 20:report[2]&=(~0x02);break;
 80005fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000764 <ifkey+0x618>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	f023 0302 	bic.w	r3, r3, #2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b57      	ldr	r3, [pc, #348]	@ (8000764 <ifkey+0x618>)
 8000606:	709a      	strb	r2, [r3, #2]
 8000608:	f000 be28 	b.w	800125c <ifkey+0x1110>
	  		case 21:report[2]|=0x04;break;//c
 800060c:	4b55      	ldr	r3, [pc, #340]	@ (8000764 <ifkey+0x618>)
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b53      	ldr	r3, [pc, #332]	@ (8000764 <ifkey+0x618>)
 8000618:	709a      	strb	r2, [r3, #2]
 800061a:	f000 be1f 	b.w	800125c <ifkey+0x1110>
	  		case 22:report[2]&=(~0x04);break;
 800061e:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <ifkey+0x618>)
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b4e      	ldr	r3, [pc, #312]	@ (8000764 <ifkey+0x618>)
 800062a:	709a      	strb	r2, [r3, #2]
 800062c:	f000 be16 	b.w	800125c <ifkey+0x1110>
	  		case 23:report[2]|=0x08;break;//d
 8000630:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <ifkey+0x618>)
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b4a      	ldr	r3, [pc, #296]	@ (8000764 <ifkey+0x618>)
 800063c:	709a      	strb	r2, [r3, #2]
 800063e:	f000 be0d 	b.w	800125c <ifkey+0x1110>
	  		case 24:report[2]&=(~0x08);break;
 8000642:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <ifkey+0x618>)
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	f023 0308 	bic.w	r3, r3, #8
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <ifkey+0x618>)
 800064e:	709a      	strb	r2, [r3, #2]
 8000650:	f000 be04 	b.w	800125c <ifkey+0x1110>
	  		case 25:report[2]|=0x10;break;//e
 8000654:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <ifkey+0x618>)
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <ifkey+0x618>)
 8000660:	709a      	strb	r2, [r3, #2]
 8000662:	f000 bdfb 	b.w	800125c <ifkey+0x1110>
	  		case 26:report[2]&=(~0x10);break;
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <ifkey+0x618>)
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	f023 0310 	bic.w	r3, r3, #16
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <ifkey+0x618>)
 8000672:	709a      	strb	r2, [r3, #2]
 8000674:	f000 bdf2 	b.w	800125c <ifkey+0x1110>
	  		case 27:report[2]|=0x20;break;//f
 8000678:	4b3a      	ldr	r3, [pc, #232]	@ (8000764 <ifkey+0x618>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b38      	ldr	r3, [pc, #224]	@ (8000764 <ifkey+0x618>)
 8000684:	709a      	strb	r2, [r3, #2]
 8000686:	f000 bde9 	b.w	800125c <ifkey+0x1110>
	  		case 28:report[2]&=(~0x20);break;
 800068a:	4b36      	ldr	r3, [pc, #216]	@ (8000764 <ifkey+0x618>)
 800068c:	789b      	ldrb	r3, [r3, #2]
 800068e:	f023 0320 	bic.w	r3, r3, #32
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <ifkey+0x618>)
 8000696:	709a      	strb	r2, [r3, #2]
 8000698:	f000 bde0 	b.w	800125c <ifkey+0x1110>
	  		case 29:report[2]|=0x40;break;//g
 800069c:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <ifkey+0x618>)
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <ifkey+0x618>)
 80006a8:	709a      	strb	r2, [r3, #2]
 80006aa:	f000 bdd7 	b.w	800125c <ifkey+0x1110>
	  		case 30:report[2]&=(~0x40);break;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <ifkey+0x618>)
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <ifkey+0x618>)
 80006ba:	709a      	strb	r2, [r3, #2]
 80006bc:	f000 bdce 	b.w	800125c <ifkey+0x1110>
	  		case 31:report[2]|=0x80;break;//h
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <ifkey+0x618>)
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <ifkey+0x618>)
 80006cc:	709a      	strb	r2, [r3, #2]
 80006ce:	f000 bdc5 	b.w	800125c <ifkey+0x1110>
	  		case 32:report[2]&=(~0x80);break;
 80006d2:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <ifkey+0x618>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <ifkey+0x618>)
 80006de:	709a      	strb	r2, [r3, #2]
 80006e0:	f000 bdbc 	b.w	800125c <ifkey+0x1110>
	  		case 33:report[3]|=0x01;break;//i
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <ifkey+0x618>)
 80006e6:	78db      	ldrb	r3, [r3, #3]
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <ifkey+0x618>)
 80006f0:	70da      	strb	r2, [r3, #3]
 80006f2:	f000 bdb3 	b.w	800125c <ifkey+0x1110>
	  		case 34:report[3]&=(~0x01);break;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <ifkey+0x618>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	f023 0301 	bic.w	r3, r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <ifkey+0x618>)
 8000702:	70da      	strb	r2, [r3, #3]
 8000704:	f000 bdaa 	b.w	800125c <ifkey+0x1110>
	  		case 35:report[3]|=0x02;break;//j
 8000708:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <ifkey+0x618>)
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <ifkey+0x618>)
 8000714:	70da      	strb	r2, [r3, #3]
 8000716:	f000 bda1 	b.w	800125c <ifkey+0x1110>
	  		case 36:report[3]&=(~0x02);break;
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <ifkey+0x618>)
 800071c:	78db      	ldrb	r3, [r3, #3]
 800071e:	f023 0302 	bic.w	r3, r3, #2
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <ifkey+0x618>)
 8000726:	70da      	strb	r2, [r3, #3]
 8000728:	f000 bd98 	b.w	800125c <ifkey+0x1110>
	  		case 37:report[3]|=0x04;break;//k
 800072c:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <ifkey+0x618>)
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <ifkey+0x618>)
 8000738:	70da      	strb	r2, [r3, #3]
 800073a:	f000 bd8f 	b.w	800125c <ifkey+0x1110>
	  		case 38:report[3]&=(~0x04);break;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <ifkey+0x618>)
 8000740:	78db      	ldrb	r3, [r3, #3]
 8000742:	f023 0304 	bic.w	r3, r3, #4
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <ifkey+0x618>)
 800074a:	70da      	strb	r2, [r3, #3]
 800074c:	f000 bd86 	b.w	800125c <ifkey+0x1110>
	  		case 39:report[3]|=0x08;break;//l
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <ifkey+0x618>)
 8000752:	78db      	ldrb	r3, [r3, #3]
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <ifkey+0x618>)
 800075c:	70da      	strb	r2, [r3, #3]
 800075e:	f000 bd7d 	b.w	800125c <ifkey+0x1110>
 8000762:	bf00      	nop
 8000764:	200001a8 	.word	0x200001a8
	  		case 40:report[3]&=(~0x08);break;
 8000768:	4baf      	ldr	r3, [pc, #700]	@ (8000a28 <ifkey+0x8dc>)
 800076a:	78db      	ldrb	r3, [r3, #3]
 800076c:	f023 0308 	bic.w	r3, r3, #8
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4bad      	ldr	r3, [pc, #692]	@ (8000a28 <ifkey+0x8dc>)
 8000774:	70da      	strb	r2, [r3, #3]
 8000776:	f000 bd71 	b.w	800125c <ifkey+0x1110>
	  		case 41:report[3]|=0x10;break;//m
 800077a:	4bab      	ldr	r3, [pc, #684]	@ (8000a28 <ifkey+0x8dc>)
 800077c:	78db      	ldrb	r3, [r3, #3]
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4ba8      	ldr	r3, [pc, #672]	@ (8000a28 <ifkey+0x8dc>)
 8000786:	70da      	strb	r2, [r3, #3]
 8000788:	f000 bd68 	b.w	800125c <ifkey+0x1110>
	  		case 42:report[3]&=(~0x10);break;
 800078c:	4ba6      	ldr	r3, [pc, #664]	@ (8000a28 <ifkey+0x8dc>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	f023 0310 	bic.w	r3, r3, #16
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4ba4      	ldr	r3, [pc, #656]	@ (8000a28 <ifkey+0x8dc>)
 8000798:	70da      	strb	r2, [r3, #3]
 800079a:	f000 bd5f 	b.w	800125c <ifkey+0x1110>
	  		case 43:report[3]|=0x20;break;//n
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <ifkey+0x8dc>)
 80007a0:	78db      	ldrb	r3, [r3, #3]
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b9f      	ldr	r3, [pc, #636]	@ (8000a28 <ifkey+0x8dc>)
 80007aa:	70da      	strb	r2, [r3, #3]
 80007ac:	f000 bd56 	b.w	800125c <ifkey+0x1110>
	  		case 44:report[3]&=(~0x20);break;
 80007b0:	4b9d      	ldr	r3, [pc, #628]	@ (8000a28 <ifkey+0x8dc>)
 80007b2:	78db      	ldrb	r3, [r3, #3]
 80007b4:	f023 0320 	bic.w	r3, r3, #32
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b9b      	ldr	r3, [pc, #620]	@ (8000a28 <ifkey+0x8dc>)
 80007bc:	70da      	strb	r2, [r3, #3]
 80007be:	f000 bd4d 	b.w	800125c <ifkey+0x1110>
	  		case 45:report[3]|=0x40;break;//o
 80007c2:	4b99      	ldr	r3, [pc, #612]	@ (8000a28 <ifkey+0x8dc>)
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b96      	ldr	r3, [pc, #600]	@ (8000a28 <ifkey+0x8dc>)
 80007ce:	70da      	strb	r2, [r3, #3]
 80007d0:	f000 bd44 	b.w	800125c <ifkey+0x1110>
	  		case 46:report[3]&=(~0x40);break;
 80007d4:	4b94      	ldr	r3, [pc, #592]	@ (8000a28 <ifkey+0x8dc>)
 80007d6:	78db      	ldrb	r3, [r3, #3]
 80007d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b92      	ldr	r3, [pc, #584]	@ (8000a28 <ifkey+0x8dc>)
 80007e0:	70da      	strb	r2, [r3, #3]
 80007e2:	f000 bd3b 	b.w	800125c <ifkey+0x1110>
	  		case 47:report[3]|=0x80;break;//p
 80007e6:	4b90      	ldr	r3, [pc, #576]	@ (8000a28 <ifkey+0x8dc>)
 80007e8:	78db      	ldrb	r3, [r3, #3]
 80007ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b8d      	ldr	r3, [pc, #564]	@ (8000a28 <ifkey+0x8dc>)
 80007f2:	70da      	strb	r2, [r3, #3]
 80007f4:	f000 bd32 	b.w	800125c <ifkey+0x1110>
	  		case 48:report[3]&=(~0x80);break;
 80007f8:	4b8b      	ldr	r3, [pc, #556]	@ (8000a28 <ifkey+0x8dc>)
 80007fa:	78db      	ldrb	r3, [r3, #3]
 80007fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b89      	ldr	r3, [pc, #548]	@ (8000a28 <ifkey+0x8dc>)
 8000804:	70da      	strb	r2, [r3, #3]
 8000806:	f000 bd29 	b.w	800125c <ifkey+0x1110>
	  		case 49:report[4]|=0x01;break;//q
 800080a:	4b87      	ldr	r3, [pc, #540]	@ (8000a28 <ifkey+0x8dc>)
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b84      	ldr	r3, [pc, #528]	@ (8000a28 <ifkey+0x8dc>)
 8000816:	711a      	strb	r2, [r3, #4]
 8000818:	f000 bd20 	b.w	800125c <ifkey+0x1110>
	  		case 50:report[4]&=(~0x01);break;
 800081c:	4b82      	ldr	r3, [pc, #520]	@ (8000a28 <ifkey+0x8dc>)
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b80      	ldr	r3, [pc, #512]	@ (8000a28 <ifkey+0x8dc>)
 8000828:	711a      	strb	r2, [r3, #4]
 800082a:	f000 bd17 	b.w	800125c <ifkey+0x1110>
	  		case 51:report[4]|=0x02;break;//r
 800082e:	4b7e      	ldr	r3, [pc, #504]	@ (8000a28 <ifkey+0x8dc>)
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b7b      	ldr	r3, [pc, #492]	@ (8000a28 <ifkey+0x8dc>)
 800083a:	711a      	strb	r2, [r3, #4]
 800083c:	f000 bd0e 	b.w	800125c <ifkey+0x1110>
	  		case 52:report[4]&=(~0x02);break;
 8000840:	4b79      	ldr	r3, [pc, #484]	@ (8000a28 <ifkey+0x8dc>)
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	f023 0302 	bic.w	r3, r3, #2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b77      	ldr	r3, [pc, #476]	@ (8000a28 <ifkey+0x8dc>)
 800084c:	711a      	strb	r2, [r3, #4]
 800084e:	f000 bd05 	b.w	800125c <ifkey+0x1110>
	  		case 53:report[4]|=0x04;break;//s
 8000852:	4b75      	ldr	r3, [pc, #468]	@ (8000a28 <ifkey+0x8dc>)
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b72      	ldr	r3, [pc, #456]	@ (8000a28 <ifkey+0x8dc>)
 800085e:	711a      	strb	r2, [r3, #4]
 8000860:	f000 bcfc 	b.w	800125c <ifkey+0x1110>
	  		case 54:report[4]&=(~0x04);break;
 8000864:	4b70      	ldr	r3, [pc, #448]	@ (8000a28 <ifkey+0x8dc>)
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	f023 0304 	bic.w	r3, r3, #4
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a28 <ifkey+0x8dc>)
 8000870:	711a      	strb	r2, [r3, #4]
 8000872:	f000 bcf3 	b.w	800125c <ifkey+0x1110>
	  		case 55:report[4]|=0x08;break;//t
 8000876:	4b6c      	ldr	r3, [pc, #432]	@ (8000a28 <ifkey+0x8dc>)
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b69      	ldr	r3, [pc, #420]	@ (8000a28 <ifkey+0x8dc>)
 8000882:	711a      	strb	r2, [r3, #4]
 8000884:	f000 bcea 	b.w	800125c <ifkey+0x1110>
	  		case 56:report[4]&=(~0x08);break;
 8000888:	4b67      	ldr	r3, [pc, #412]	@ (8000a28 <ifkey+0x8dc>)
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	f023 0308 	bic.w	r3, r3, #8
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b65      	ldr	r3, [pc, #404]	@ (8000a28 <ifkey+0x8dc>)
 8000894:	711a      	strb	r2, [r3, #4]
 8000896:	f000 bce1 	b.w	800125c <ifkey+0x1110>
	  		case 57:report[4]|=0x10;break;//u
 800089a:	4b63      	ldr	r3, [pc, #396]	@ (8000a28 <ifkey+0x8dc>)
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b60      	ldr	r3, [pc, #384]	@ (8000a28 <ifkey+0x8dc>)
 80008a6:	711a      	strb	r2, [r3, #4]
 80008a8:	f000 bcd8 	b.w	800125c <ifkey+0x1110>
	  		case 58:report[4]&=(~0x10);break;
 80008ac:	4b5e      	ldr	r3, [pc, #376]	@ (8000a28 <ifkey+0x8dc>)
 80008ae:	791b      	ldrb	r3, [r3, #4]
 80008b0:	f023 0310 	bic.w	r3, r3, #16
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a28 <ifkey+0x8dc>)
 80008b8:	711a      	strb	r2, [r3, #4]
 80008ba:	f000 bccf 	b.w	800125c <ifkey+0x1110>
	  		case 59:report[4]|=0x20;break;//v
 80008be:	4b5a      	ldr	r3, [pc, #360]	@ (8000a28 <ifkey+0x8dc>)
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b57      	ldr	r3, [pc, #348]	@ (8000a28 <ifkey+0x8dc>)
 80008ca:	711a      	strb	r2, [r3, #4]
 80008cc:	f000 bcc6 	b.w	800125c <ifkey+0x1110>
	  		case 60:report[4]&=(~0x20);break;
 80008d0:	4b55      	ldr	r3, [pc, #340]	@ (8000a28 <ifkey+0x8dc>)
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f023 0320 	bic.w	r3, r3, #32
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <ifkey+0x8dc>)
 80008dc:	711a      	strb	r2, [r3, #4]
 80008de:	f000 bcbd 	b.w	800125c <ifkey+0x1110>
	  		case 61:report[4]|=0x40;break;//w
 80008e2:	4b51      	ldr	r3, [pc, #324]	@ (8000a28 <ifkey+0x8dc>)
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000a28 <ifkey+0x8dc>)
 80008ee:	711a      	strb	r2, [r3, #4]
 80008f0:	f000 bcb4 	b.w	800125c <ifkey+0x1110>
	  		case 62:report[4]&=(~0x40);break;
 80008f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000a28 <ifkey+0x8dc>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <ifkey+0x8dc>)
 8000900:	711a      	strb	r2, [r3, #4]
 8000902:	f000 bcab 	b.w	800125c <ifkey+0x1110>
	  		case 63:report[4]|=0x80;break;//x
 8000906:	4b48      	ldr	r3, [pc, #288]	@ (8000a28 <ifkey+0x8dc>)
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b45      	ldr	r3, [pc, #276]	@ (8000a28 <ifkey+0x8dc>)
 8000912:	711a      	strb	r2, [r3, #4]
 8000914:	f000 bca2 	b.w	800125c <ifkey+0x1110>
	  		case 64:report[4]&=(~0x80);break;
 8000918:	4b43      	ldr	r3, [pc, #268]	@ (8000a28 <ifkey+0x8dc>)
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b41      	ldr	r3, [pc, #260]	@ (8000a28 <ifkey+0x8dc>)
 8000924:	711a      	strb	r2, [r3, #4]
 8000926:	f000 bc99 	b.w	800125c <ifkey+0x1110>
	  		case 65:report[5]|=0x01;break;//y
 800092a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <ifkey+0x8dc>)
 800092c:	795b      	ldrb	r3, [r3, #5]
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b3c      	ldr	r3, [pc, #240]	@ (8000a28 <ifkey+0x8dc>)
 8000936:	715a      	strb	r2, [r3, #5]
 8000938:	f000 bc90 	b.w	800125c <ifkey+0x1110>
	  		case 66:report[5]&=(~0x01);break;
 800093c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a28 <ifkey+0x8dc>)
 800093e:	795b      	ldrb	r3, [r3, #5]
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b38      	ldr	r3, [pc, #224]	@ (8000a28 <ifkey+0x8dc>)
 8000948:	715a      	strb	r2, [r3, #5]
 800094a:	f000 bc87 	b.w	800125c <ifkey+0x1110>
	  		case 67:report[5]|=0x02;break;//z
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <ifkey+0x8dc>)
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <ifkey+0x8dc>)
 800095a:	715a      	strb	r2, [r3, #5]
 800095c:	f000 bc7e 	b.w	800125c <ifkey+0x1110>
	  		case 68:report[5]&=(~0x02);break;
 8000960:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <ifkey+0x8dc>)
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	f023 0302 	bic.w	r3, r3, #2
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <ifkey+0x8dc>)
 800096c:	715a      	strb	r2, [r3, #5]
 800096e:	f000 bc75 	b.w	800125c <ifkey+0x1110>
	  		case 69:report[5]|=0x04;break;//上键盘数字1
 8000972:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <ifkey+0x8dc>)
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <ifkey+0x8dc>)
 800097e:	715a      	strb	r2, [r3, #5]
 8000980:	f000 bc6c 	b.w	800125c <ifkey+0x1110>
	  		case 70:report[5]&=(~0x04);break;
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <ifkey+0x8dc>)
 8000986:	795b      	ldrb	r3, [r3, #5]
 8000988:	f023 0304 	bic.w	r3, r3, #4
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <ifkey+0x8dc>)
 8000990:	715a      	strb	r2, [r3, #5]
 8000992:	f000 bc63 	b.w	800125c <ifkey+0x1110>
	  		case 71:report[5]|=0x08;break;//2
 8000996:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <ifkey+0x8dc>)
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <ifkey+0x8dc>)
 80009a2:	715a      	strb	r2, [r3, #5]
 80009a4:	f000 bc5a 	b.w	800125c <ifkey+0x1110>
	  		case 72:report[5]&=(~0x08);break;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <ifkey+0x8dc>)
 80009aa:	795b      	ldrb	r3, [r3, #5]
 80009ac:	f023 0308 	bic.w	r3, r3, #8
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <ifkey+0x8dc>)
 80009b4:	715a      	strb	r2, [r3, #5]
 80009b6:	f000 bc51 	b.w	800125c <ifkey+0x1110>
	  		case 73:report[5]|=0x10;break;//3
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <ifkey+0x8dc>)
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <ifkey+0x8dc>)
 80009c6:	715a      	strb	r2, [r3, #5]
 80009c8:	f000 bc48 	b.w	800125c <ifkey+0x1110>
	  		case 74:report[5]&=(~0x10);break;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <ifkey+0x8dc>)
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	f023 0310 	bic.w	r3, r3, #16
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <ifkey+0x8dc>)
 80009d8:	715a      	strb	r2, [r3, #5]
 80009da:	f000 bc3f 	b.w	800125c <ifkey+0x1110>
	  		case 75:report[5]|=0x20;break;//4
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <ifkey+0x8dc>)
 80009e0:	795b      	ldrb	r3, [r3, #5]
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <ifkey+0x8dc>)
 80009ea:	715a      	strb	r2, [r3, #5]
 80009ec:	f000 bc36 	b.w	800125c <ifkey+0x1110>
	  		case 76:report[5]&=(~0x20);break;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <ifkey+0x8dc>)
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	f023 0320 	bic.w	r3, r3, #32
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <ifkey+0x8dc>)
 80009fc:	715a      	strb	r2, [r3, #5]
 80009fe:	f000 bc2d 	b.w	800125c <ifkey+0x1110>
	  		case 77:report[5]|=0x40;break;//5
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <ifkey+0x8dc>)
 8000a04:	795b      	ldrb	r3, [r3, #5]
 8000a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <ifkey+0x8dc>)
 8000a0e:	715a      	strb	r2, [r3, #5]
 8000a10:	f000 bc24 	b.w	800125c <ifkey+0x1110>
	  		case 78:report[5]&=(~0x40);break;
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <ifkey+0x8dc>)
 8000a16:	795b      	ldrb	r3, [r3, #5]
 8000a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <ifkey+0x8dc>)
 8000a20:	715a      	strb	r2, [r3, #5]
 8000a22:	f000 bc1b 	b.w	800125c <ifkey+0x1110>
 8000a26:	bf00      	nop
 8000a28:	200001a8 	.word	0x200001a8
	  		case 79:report[5]|=0x80;break;//6
 8000a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8000ca0 <ifkey+0xb54>)
 8000a2e:	795b      	ldrb	r3, [r3, #5]
 8000a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b9a      	ldr	r3, [pc, #616]	@ (8000ca0 <ifkey+0xb54>)
 8000a38:	715a      	strb	r2, [r3, #5]
 8000a3a:	f000 bc0f 	b.w	800125c <ifkey+0x1110>
	  		case 80:report[5]&=(~0x80);break;
 8000a3e:	4b98      	ldr	r3, [pc, #608]	@ (8000ca0 <ifkey+0xb54>)
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b95      	ldr	r3, [pc, #596]	@ (8000ca0 <ifkey+0xb54>)
 8000a4a:	715a      	strb	r2, [r3, #5]
 8000a4c:	f000 bc06 	b.w	800125c <ifkey+0x1110>
	  		case 81:report[6]|=0x01;break;//7
 8000a50:	4b93      	ldr	r3, [pc, #588]	@ (8000ca0 <ifkey+0xb54>)
 8000a52:	799b      	ldrb	r3, [r3, #6]
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b91      	ldr	r3, [pc, #580]	@ (8000ca0 <ifkey+0xb54>)
 8000a5c:	719a      	strb	r2, [r3, #6]
 8000a5e:	e3fd      	b.n	800125c <ifkey+0x1110>
	  		case 82:report[6]&=(~0x01);break;
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <ifkey+0xb54>)
 8000a62:	799b      	ldrb	r3, [r3, #6]
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8000ca0 <ifkey+0xb54>)
 8000a6c:	719a      	strb	r2, [r3, #6]
 8000a6e:	e3f5      	b.n	800125c <ifkey+0x1110>
	  		case 83:report[6]|=0x02;break;//8
 8000a70:	4b8b      	ldr	r3, [pc, #556]	@ (8000ca0 <ifkey+0xb54>)
 8000a72:	799b      	ldrb	r3, [r3, #6]
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b89      	ldr	r3, [pc, #548]	@ (8000ca0 <ifkey+0xb54>)
 8000a7c:	719a      	strb	r2, [r3, #6]
 8000a7e:	e3ed      	b.n	800125c <ifkey+0x1110>
	  		case 84:report[6]&=(~0x02);break;
 8000a80:	4b87      	ldr	r3, [pc, #540]	@ (8000ca0 <ifkey+0xb54>)
 8000a82:	799b      	ldrb	r3, [r3, #6]
 8000a84:	f023 0302 	bic.w	r3, r3, #2
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b85      	ldr	r3, [pc, #532]	@ (8000ca0 <ifkey+0xb54>)
 8000a8c:	719a      	strb	r2, [r3, #6]
 8000a8e:	e3e5      	b.n	800125c <ifkey+0x1110>
	  		case 85:report[6]|=0x04;break;//9
 8000a90:	4b83      	ldr	r3, [pc, #524]	@ (8000ca0 <ifkey+0xb54>)
 8000a92:	799b      	ldrb	r3, [r3, #6]
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b81      	ldr	r3, [pc, #516]	@ (8000ca0 <ifkey+0xb54>)
 8000a9c:	719a      	strb	r2, [r3, #6]
 8000a9e:	e3dd      	b.n	800125c <ifkey+0x1110>
	  		case 86:report[6]&=(~0x04);break;
 8000aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8000ca0 <ifkey+0xb54>)
 8000aa2:	799b      	ldrb	r3, [r3, #6]
 8000aa4:	f023 0304 	bic.w	r3, r3, #4
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8000ca0 <ifkey+0xb54>)
 8000aac:	719a      	strb	r2, [r3, #6]
 8000aae:	e3d5      	b.n	800125c <ifkey+0x1110>
	  		case 87:report[6]|=0x08;break;//0
 8000ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8000ca0 <ifkey+0xb54>)
 8000ab2:	799b      	ldrb	r3, [r3, #6]
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b79      	ldr	r3, [pc, #484]	@ (8000ca0 <ifkey+0xb54>)
 8000abc:	719a      	strb	r2, [r3, #6]
 8000abe:	e3cd      	b.n	800125c <ifkey+0x1110>
	  		case 88:report[6]&=(~0x08);break;
 8000ac0:	4b77      	ldr	r3, [pc, #476]	@ (8000ca0 <ifkey+0xb54>)
 8000ac2:	799b      	ldrb	r3, [r3, #6]
 8000ac4:	f023 0308 	bic.w	r3, r3, #8
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b75      	ldr	r3, [pc, #468]	@ (8000ca0 <ifkey+0xb54>)
 8000acc:	719a      	strb	r2, [r3, #6]
 8000ace:	e3c5      	b.n	800125c <ifkey+0x1110>
	  		case 89:report[6]|=0x10;break;//enter
 8000ad0:	4b73      	ldr	r3, [pc, #460]	@ (8000ca0 <ifkey+0xb54>)
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b71      	ldr	r3, [pc, #452]	@ (8000ca0 <ifkey+0xb54>)
 8000adc:	719a      	strb	r2, [r3, #6]
 8000ade:	e3bd      	b.n	800125c <ifkey+0x1110>
	  		case 90:report[6]&=(~0x10);break;
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8000ca0 <ifkey+0xb54>)
 8000ae2:	799b      	ldrb	r3, [r3, #6]
 8000ae4:	f023 0310 	bic.w	r3, r3, #16
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b6d      	ldr	r3, [pc, #436]	@ (8000ca0 <ifkey+0xb54>)
 8000aec:	719a      	strb	r2, [r3, #6]
 8000aee:	e3b5      	b.n	800125c <ifkey+0x1110>
	  		case 91:report[6]|=0x20;break;//esc
 8000af0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ca0 <ifkey+0xb54>)
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b69      	ldr	r3, [pc, #420]	@ (8000ca0 <ifkey+0xb54>)
 8000afc:	719a      	strb	r2, [r3, #6]
 8000afe:	e3ad      	b.n	800125c <ifkey+0x1110>
	  		case 92:report[6]&=(~0x20);break;
 8000b00:	4b67      	ldr	r3, [pc, #412]	@ (8000ca0 <ifkey+0xb54>)
 8000b02:	799b      	ldrb	r3, [r3, #6]
 8000b04:	f023 0320 	bic.w	r3, r3, #32
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b65      	ldr	r3, [pc, #404]	@ (8000ca0 <ifkey+0xb54>)
 8000b0c:	719a      	strb	r2, [r3, #6]
 8000b0e:	e3a5      	b.n	800125c <ifkey+0x1110>
	  		case 93:report[6]|=0x40;break;//backspace
 8000b10:	4b63      	ldr	r3, [pc, #396]	@ (8000ca0 <ifkey+0xb54>)
 8000b12:	799b      	ldrb	r3, [r3, #6]
 8000b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b61      	ldr	r3, [pc, #388]	@ (8000ca0 <ifkey+0xb54>)
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e39d      	b.n	800125c <ifkey+0x1110>
	  		case 94:report[6]&=(~0x40);break;
 8000b20:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca0 <ifkey+0xb54>)
 8000b22:	799b      	ldrb	r3, [r3, #6]
 8000b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca0 <ifkey+0xb54>)
 8000b2c:	719a      	strb	r2, [r3, #6]
 8000b2e:	e395      	b.n	800125c <ifkey+0x1110>
	  		case 95:report[6]|=0x80;break;//tab
 8000b30:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca0 <ifkey+0xb54>)
 8000b32:	799b      	ldrb	r3, [r3, #6]
 8000b34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b59      	ldr	r3, [pc, #356]	@ (8000ca0 <ifkey+0xb54>)
 8000b3c:	719a      	strb	r2, [r3, #6]
 8000b3e:	e38d      	b.n	800125c <ifkey+0x1110>
	  		case 96:report[6]&=(~0x80);break;
 8000b40:	4b57      	ldr	r3, [pc, #348]	@ (8000ca0 <ifkey+0xb54>)
 8000b42:	799b      	ldrb	r3, [r3, #6]
 8000b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b55      	ldr	r3, [pc, #340]	@ (8000ca0 <ifkey+0xb54>)
 8000b4c:	719a      	strb	r2, [r3, #6]
 8000b4e:	e385      	b.n	800125c <ifkey+0x1110>
	  		case 97:report[7]|=0x01;break;//space
 8000b50:	4b53      	ldr	r3, [pc, #332]	@ (8000ca0 <ifkey+0xb54>)
 8000b52:	79db      	ldrb	r3, [r3, #7]
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ca0 <ifkey+0xb54>)
 8000b5c:	71da      	strb	r2, [r3, #7]
 8000b5e:	e37d      	b.n	800125c <ifkey+0x1110>
	  		case 98:report[7]&=(~0x01);break;
 8000b60:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca0 <ifkey+0xb54>)
 8000b62:	79db      	ldrb	r3, [r3, #7]
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca0 <ifkey+0xb54>)
 8000b6c:	71da      	strb	r2, [r3, #7]
 8000b6e:	e375      	b.n	800125c <ifkey+0x1110>
	  		case 99:report[7]|=0x02;break;//-和_
 8000b70:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca0 <ifkey+0xb54>)
 8000b72:	79db      	ldrb	r3, [r3, #7]
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b49      	ldr	r3, [pc, #292]	@ (8000ca0 <ifkey+0xb54>)
 8000b7c:	71da      	strb	r2, [r3, #7]
 8000b7e:	e36d      	b.n	800125c <ifkey+0x1110>
	  		case 100:report[7]&=(~0x02);break;
 8000b80:	4b47      	ldr	r3, [pc, #284]	@ (8000ca0 <ifkey+0xb54>)
 8000b82:	79db      	ldrb	r3, [r3, #7]
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b45      	ldr	r3, [pc, #276]	@ (8000ca0 <ifkey+0xb54>)
 8000b8c:	71da      	strb	r2, [r3, #7]
 8000b8e:	e365      	b.n	800125c <ifkey+0x1110>
	  		case 101:report[7]|=0x04;break;//=和+
 8000b90:	4b43      	ldr	r3, [pc, #268]	@ (8000ca0 <ifkey+0xb54>)
 8000b92:	79db      	ldrb	r3, [r3, #7]
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <ifkey+0xb54>)
 8000b9c:	71da      	strb	r2, [r3, #7]
 8000b9e:	e35d      	b.n	800125c <ifkey+0x1110>
	  		case 102:report[7]&=(~0x04);break;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca0 <ifkey+0xb54>)
 8000ba2:	79db      	ldrb	r3, [r3, #7]
 8000ba4:	f023 0304 	bic.w	r3, r3, #4
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca0 <ifkey+0xb54>)
 8000bac:	71da      	strb	r2, [r3, #7]
 8000bae:	e355      	b.n	800125c <ifkey+0x1110>
	  		case 103:report[7]|=0x08;break;//[和{
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <ifkey+0xb54>)
 8000bb2:	79db      	ldrb	r3, [r3, #7]
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b39      	ldr	r3, [pc, #228]	@ (8000ca0 <ifkey+0xb54>)
 8000bbc:	71da      	strb	r2, [r3, #7]
 8000bbe:	e34d      	b.n	800125c <ifkey+0x1110>
	  		case 104:report[7]&=(~0x08);break;
 8000bc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ca0 <ifkey+0xb54>)
 8000bc2:	79db      	ldrb	r3, [r3, #7]
 8000bc4:	f023 0308 	bic.w	r3, r3, #8
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <ifkey+0xb54>)
 8000bcc:	71da      	strb	r2, [r3, #7]
 8000bce:	e345      	b.n	800125c <ifkey+0x1110>
	  		case 105:report[7]|=0x10;break;//]和}
 8000bd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <ifkey+0xb54>)
 8000bd2:	79db      	ldrb	r3, [r3, #7]
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <ifkey+0xb54>)
 8000bdc:	71da      	strb	r2, [r3, #7]
 8000bde:	e33d      	b.n	800125c <ifkey+0x1110>
	  		case 106:report[7]&=(~0x10);break;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <ifkey+0xb54>)
 8000be2:	79db      	ldrb	r3, [r3, #7]
 8000be4:	f023 0310 	bic.w	r3, r3, #16
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <ifkey+0xb54>)
 8000bec:	71da      	strb	r2, [r3, #7]
 8000bee:	e335      	b.n	800125c <ifkey+0x1110>
	  		case 107:report[7]|=0x20;break;//'\'和|
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <ifkey+0xb54>)
 8000bf2:	79db      	ldrb	r3, [r3, #7]
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <ifkey+0xb54>)
 8000bfc:	71da      	strb	r2, [r3, #7]
 8000bfe:	e32d      	b.n	800125c <ifkey+0x1110>
	  		case 108:report[7]&=(~0x20);break;
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <ifkey+0xb54>)
 8000c02:	79db      	ldrb	r3, [r3, #7]
 8000c04:	f023 0320 	bic.w	r3, r3, #32
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <ifkey+0xb54>)
 8000c0c:	71da      	strb	r2, [r3, #7]
 8000c0e:	e325      	b.n	800125c <ifkey+0x1110>
	  		case 109:report[7]|=0x40;break;//'\'和|
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <ifkey+0xb54>)
 8000c12:	79db      	ldrb	r3, [r3, #7]
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <ifkey+0xb54>)
 8000c1c:	71da      	strb	r2, [r3, #7]
 8000c1e:	e31d      	b.n	800125c <ifkey+0x1110>
	  		case 110:report[7]&=(~0x40);break;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <ifkey+0xb54>)
 8000c22:	79db      	ldrb	r3, [r3, #7]
 8000c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <ifkey+0xb54>)
 8000c2c:	71da      	strb	r2, [r3, #7]
 8000c2e:	e315      	b.n	800125c <ifkey+0x1110>
	  		case 111:report[7]|=0x80;break;//;和:
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <ifkey+0xb54>)
 8000c32:	79db      	ldrb	r3, [r3, #7]
 8000c34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <ifkey+0xb54>)
 8000c3c:	71da      	strb	r2, [r3, #7]
 8000c3e:	e30d      	b.n	800125c <ifkey+0x1110>
	  		case 112:report[7]&=(~0x80);break;
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <ifkey+0xb54>)
 8000c42:	79db      	ldrb	r3, [r3, #7]
 8000c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <ifkey+0xb54>)
 8000c4c:	71da      	strb	r2, [r3, #7]
 8000c4e:	e305      	b.n	800125c <ifkey+0x1110>
	  		case 113:report[8]|=0x01;break;//'和"
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <ifkey+0xb54>)
 8000c52:	7a1b      	ldrb	r3, [r3, #8]
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <ifkey+0xb54>)
 8000c5c:	721a      	strb	r2, [r3, #8]
 8000c5e:	e2fd      	b.n	800125c <ifkey+0x1110>
	  		case 114:report[8]&=(~0x01);break;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <ifkey+0xb54>)
 8000c62:	7a1b      	ldrb	r3, [r3, #8]
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <ifkey+0xb54>)
 8000c6c:	721a      	strb	r2, [r3, #8]
 8000c6e:	e2f5      	b.n	800125c <ifkey+0x1110>
	  		case 115:report[8]|=0x02;break;//`和~
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <ifkey+0xb54>)
 8000c72:	7a1b      	ldrb	r3, [r3, #8]
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <ifkey+0xb54>)
 8000c7c:	721a      	strb	r2, [r3, #8]
 8000c7e:	e2ed      	b.n	800125c <ifkey+0x1110>
	  		case 116:report[8]&=(~0x02);break;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <ifkey+0xb54>)
 8000c82:	7a1b      	ldrb	r3, [r3, #8]
 8000c84:	f023 0302 	bic.w	r3, r3, #2
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <ifkey+0xb54>)
 8000c8c:	721a      	strb	r2, [r3, #8]
 8000c8e:	e2e5      	b.n	800125c <ifkey+0x1110>
	  		case 117:report[8]|=0x04;break;//,和<
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <ifkey+0xb54>)
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b01      	ldr	r3, [pc, #4]	@ (8000ca0 <ifkey+0xb54>)
 8000c9c:	721a      	strb	r2, [r3, #8]
 8000c9e:	e2dd      	b.n	800125c <ifkey+0x1110>
 8000ca0:	200001a8 	.word	0x200001a8
	  		case 118:report[8]&=(~0x04);break;
 8000ca4:	4b9b      	ldr	r3, [pc, #620]	@ (8000f14 <ifkey+0xdc8>)
 8000ca6:	7a1b      	ldrb	r3, [r3, #8]
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b99      	ldr	r3, [pc, #612]	@ (8000f14 <ifkey+0xdc8>)
 8000cb0:	721a      	strb	r2, [r3, #8]
 8000cb2:	e2d3      	b.n	800125c <ifkey+0x1110>
	  		case 119:report[8]|=0x08;break;//.和>
 8000cb4:	4b97      	ldr	r3, [pc, #604]	@ (8000f14 <ifkey+0xdc8>)
 8000cb6:	7a1b      	ldrb	r3, [r3, #8]
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b95      	ldr	r3, [pc, #596]	@ (8000f14 <ifkey+0xdc8>)
 8000cc0:	721a      	strb	r2, [r3, #8]
 8000cc2:	e2cb      	b.n	800125c <ifkey+0x1110>
	  		case 120:report[8]&=(~0x08);break;
 8000cc4:	4b93      	ldr	r3, [pc, #588]	@ (8000f14 <ifkey+0xdc8>)
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	f023 0308 	bic.w	r3, r3, #8
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b91      	ldr	r3, [pc, #580]	@ (8000f14 <ifkey+0xdc8>)
 8000cd0:	721a      	strb	r2, [r3, #8]
 8000cd2:	e2c3      	b.n	800125c <ifkey+0x1110>
	  		case 121:report[8]|=0x10;break;///和?
 8000cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8000f14 <ifkey+0xdc8>)
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b8d      	ldr	r3, [pc, #564]	@ (8000f14 <ifkey+0xdc8>)
 8000ce0:	721a      	strb	r2, [r3, #8]
 8000ce2:	e2bb      	b.n	800125c <ifkey+0x1110>
	  		case 122:report[8]&=(~0x10);break;
 8000ce4:	4b8b      	ldr	r3, [pc, #556]	@ (8000f14 <ifkey+0xdc8>)
 8000ce6:	7a1b      	ldrb	r3, [r3, #8]
 8000ce8:	f023 0310 	bic.w	r3, r3, #16
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b89      	ldr	r3, [pc, #548]	@ (8000f14 <ifkey+0xdc8>)
 8000cf0:	721a      	strb	r2, [r3, #8]
 8000cf2:	e2b3      	b.n	800125c <ifkey+0x1110>
	  		case 123:report[8]|=0x20;break;//大写锁定
 8000cf4:	4b87      	ldr	r3, [pc, #540]	@ (8000f14 <ifkey+0xdc8>)
 8000cf6:	7a1b      	ldrb	r3, [r3, #8]
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b85      	ldr	r3, [pc, #532]	@ (8000f14 <ifkey+0xdc8>)
 8000d00:	721a      	strb	r2, [r3, #8]
 8000d02:	e2ab      	b.n	800125c <ifkey+0x1110>
	  		case 124:report[8]&=(~0x20);break;
 8000d04:	4b83      	ldr	r3, [pc, #524]	@ (8000f14 <ifkey+0xdc8>)
 8000d06:	7a1b      	ldrb	r3, [r3, #8]
 8000d08:	f023 0320 	bic.w	r3, r3, #32
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b81      	ldr	r3, [pc, #516]	@ (8000f14 <ifkey+0xdc8>)
 8000d10:	721a      	strb	r2, [r3, #8]
 8000d12:	e2a3      	b.n	800125c <ifkey+0x1110>
	  		case 125:report[8]|=0x40;break;//F1
 8000d14:	4b7f      	ldr	r3, [pc, #508]	@ (8000f14 <ifkey+0xdc8>)
 8000d16:	7a1b      	ldrb	r3, [r3, #8]
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f14 <ifkey+0xdc8>)
 8000d20:	721a      	strb	r2, [r3, #8]
 8000d22:	e29b      	b.n	800125c <ifkey+0x1110>
	  		case 126:report[8]&=(~0x40);break;
 8000d24:	4b7b      	ldr	r3, [pc, #492]	@ (8000f14 <ifkey+0xdc8>)
 8000d26:	7a1b      	ldrb	r3, [r3, #8]
 8000d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b79      	ldr	r3, [pc, #484]	@ (8000f14 <ifkey+0xdc8>)
 8000d30:	721a      	strb	r2, [r3, #8]
 8000d32:	e293      	b.n	800125c <ifkey+0x1110>
	  		case 127:report[8]|=0x80;break;//F2
 8000d34:	4b77      	ldr	r3, [pc, #476]	@ (8000f14 <ifkey+0xdc8>)
 8000d36:	7a1b      	ldrb	r3, [r3, #8]
 8000d38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b75      	ldr	r3, [pc, #468]	@ (8000f14 <ifkey+0xdc8>)
 8000d40:	721a      	strb	r2, [r3, #8]
 8000d42:	e28b      	b.n	800125c <ifkey+0x1110>
	  		case 128:report[8]&=(~0x80);break;
 8000d44:	4b73      	ldr	r3, [pc, #460]	@ (8000f14 <ifkey+0xdc8>)
 8000d46:	7a1b      	ldrb	r3, [r3, #8]
 8000d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b71      	ldr	r3, [pc, #452]	@ (8000f14 <ifkey+0xdc8>)
 8000d50:	721a      	strb	r2, [r3, #8]
 8000d52:	e283      	b.n	800125c <ifkey+0x1110>
	  		case 129:report[9]|=0x01;break;//F3
 8000d54:	4b6f      	ldr	r3, [pc, #444]	@ (8000f14 <ifkey+0xdc8>)
 8000d56:	7a5b      	ldrb	r3, [r3, #9]
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f14 <ifkey+0xdc8>)
 8000d60:	725a      	strb	r2, [r3, #9]
 8000d62:	e27b      	b.n	800125c <ifkey+0x1110>
	  		case 130:report[9]&=(~0x01);break;
 8000d64:	4b6b      	ldr	r3, [pc, #428]	@ (8000f14 <ifkey+0xdc8>)
 8000d66:	7a5b      	ldrb	r3, [r3, #9]
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b69      	ldr	r3, [pc, #420]	@ (8000f14 <ifkey+0xdc8>)
 8000d70:	725a      	strb	r2, [r3, #9]
 8000d72:	e273      	b.n	800125c <ifkey+0x1110>
	  		case 131:report[9]|=0x02;break;//F4
 8000d74:	4b67      	ldr	r3, [pc, #412]	@ (8000f14 <ifkey+0xdc8>)
 8000d76:	7a5b      	ldrb	r3, [r3, #9]
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b65      	ldr	r3, [pc, #404]	@ (8000f14 <ifkey+0xdc8>)
 8000d80:	725a      	strb	r2, [r3, #9]
 8000d82:	e26b      	b.n	800125c <ifkey+0x1110>
	  		case 132:report[9]&=(~0x02);break;
 8000d84:	4b63      	ldr	r3, [pc, #396]	@ (8000f14 <ifkey+0xdc8>)
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
 8000d88:	f023 0302 	bic.w	r3, r3, #2
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b61      	ldr	r3, [pc, #388]	@ (8000f14 <ifkey+0xdc8>)
 8000d90:	725a      	strb	r2, [r3, #9]
 8000d92:	e263      	b.n	800125c <ifkey+0x1110>
	  		case 133:report[9]|=0x04;break;//F5
 8000d94:	4b5f      	ldr	r3, [pc, #380]	@ (8000f14 <ifkey+0xdc8>)
 8000d96:	7a5b      	ldrb	r3, [r3, #9]
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f14 <ifkey+0xdc8>)
 8000da0:	725a      	strb	r2, [r3, #9]
 8000da2:	e25b      	b.n	800125c <ifkey+0x1110>
	  		case 134:report[9]&=(~0x04);break;
 8000da4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f14 <ifkey+0xdc8>)
 8000da6:	7a5b      	ldrb	r3, [r3, #9]
 8000da8:	f023 0304 	bic.w	r3, r3, #4
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b59      	ldr	r3, [pc, #356]	@ (8000f14 <ifkey+0xdc8>)
 8000db0:	725a      	strb	r2, [r3, #9]
 8000db2:	e253      	b.n	800125c <ifkey+0x1110>
	  		case 135:report[9]|=0x08;break;//F6
 8000db4:	4b57      	ldr	r3, [pc, #348]	@ (8000f14 <ifkey+0xdc8>)
 8000db6:	7a5b      	ldrb	r3, [r3, #9]
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b55      	ldr	r3, [pc, #340]	@ (8000f14 <ifkey+0xdc8>)
 8000dc0:	725a      	strb	r2, [r3, #9]
 8000dc2:	e24b      	b.n	800125c <ifkey+0x1110>
	  		case 136:report[9]&=(~0x08);break;
 8000dc4:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <ifkey+0xdc8>)
 8000dc6:	7a5b      	ldrb	r3, [r3, #9]
 8000dc8:	f023 0308 	bic.w	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <ifkey+0xdc8>)
 8000dd0:	725a      	strb	r2, [r3, #9]
 8000dd2:	e243      	b.n	800125c <ifkey+0x1110>
	  		case 137:report[9]|=0x10;break;//F7
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f14 <ifkey+0xdc8>)
 8000dd6:	7a5b      	ldrb	r3, [r3, #9]
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b4d      	ldr	r3, [pc, #308]	@ (8000f14 <ifkey+0xdc8>)
 8000de0:	725a      	strb	r2, [r3, #9]
 8000de2:	e23b      	b.n	800125c <ifkey+0x1110>
	  		case 138:report[9]&=(~0x10);break;
 8000de4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f14 <ifkey+0xdc8>)
 8000de6:	7a5b      	ldrb	r3, [r3, #9]
 8000de8:	f023 0310 	bic.w	r3, r3, #16
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b49      	ldr	r3, [pc, #292]	@ (8000f14 <ifkey+0xdc8>)
 8000df0:	725a      	strb	r2, [r3, #9]
 8000df2:	e233      	b.n	800125c <ifkey+0x1110>
	  		case 139:report[9]|=0x20;break;//F8
 8000df4:	4b47      	ldr	r3, [pc, #284]	@ (8000f14 <ifkey+0xdc8>)
 8000df6:	7a5b      	ldrb	r3, [r3, #9]
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b45      	ldr	r3, [pc, #276]	@ (8000f14 <ifkey+0xdc8>)
 8000e00:	725a      	strb	r2, [r3, #9]
 8000e02:	e22b      	b.n	800125c <ifkey+0x1110>
	  		case 140:report[9]&=(~0x20);break;
 8000e04:	4b43      	ldr	r3, [pc, #268]	@ (8000f14 <ifkey+0xdc8>)
 8000e06:	7a5b      	ldrb	r3, [r3, #9]
 8000e08:	f023 0320 	bic.w	r3, r3, #32
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <ifkey+0xdc8>)
 8000e10:	725a      	strb	r2, [r3, #9]
 8000e12:	e223      	b.n	800125c <ifkey+0x1110>
	  		case 141:report[9]|=0x40;break;//F9
 8000e14:	4b3f      	ldr	r3, [pc, #252]	@ (8000f14 <ifkey+0xdc8>)
 8000e16:	7a5b      	ldrb	r3, [r3, #9]
 8000e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <ifkey+0xdc8>)
 8000e20:	725a      	strb	r2, [r3, #9]
 8000e22:	e21b      	b.n	800125c <ifkey+0x1110>
	  		case 142:report[9]&=(~0x40);break;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <ifkey+0xdc8>)
 8000e26:	7a5b      	ldrb	r3, [r3, #9]
 8000e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <ifkey+0xdc8>)
 8000e30:	725a      	strb	r2, [r3, #9]
 8000e32:	e213      	b.n	800125c <ifkey+0x1110>
	  		case 143:report[9]|=0x80;break;//F10
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <ifkey+0xdc8>)
 8000e36:	7a5b      	ldrb	r3, [r3, #9]
 8000e38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <ifkey+0xdc8>)
 8000e40:	725a      	strb	r2, [r3, #9]
 8000e42:	e20b      	b.n	800125c <ifkey+0x1110>
	  		case 144:report[9]&=(~0x80);break;
 8000e44:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <ifkey+0xdc8>)
 8000e46:	7a5b      	ldrb	r3, [r3, #9]
 8000e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <ifkey+0xdc8>)
 8000e50:	725a      	strb	r2, [r3, #9]
 8000e52:	e203      	b.n	800125c <ifkey+0x1110>
	  		case 145:report[10]|=0x01;break;//F11
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <ifkey+0xdc8>)
 8000e56:	7a9b      	ldrb	r3, [r3, #10]
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <ifkey+0xdc8>)
 8000e60:	729a      	strb	r2, [r3, #10]
 8000e62:	e1fb      	b.n	800125c <ifkey+0x1110>
	  		case 146:report[10]&=(~0x01);break;
 8000e64:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <ifkey+0xdc8>)
 8000e66:	7a9b      	ldrb	r3, [r3, #10]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <ifkey+0xdc8>)
 8000e70:	729a      	strb	r2, [r3, #10]
 8000e72:	e1f3      	b.n	800125c <ifkey+0x1110>
	  		case 147:report[10]|=0x02;break;//F12
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <ifkey+0xdc8>)
 8000e76:	7a9b      	ldrb	r3, [r3, #10]
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <ifkey+0xdc8>)
 8000e80:	729a      	strb	r2, [r3, #10]
 8000e82:	e1eb      	b.n	800125c <ifkey+0x1110>
	  		case 148:report[10]&=(~0x02);break;
 8000e84:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <ifkey+0xdc8>)
 8000e86:	7a9b      	ldrb	r3, [r3, #10]
 8000e88:	f023 0302 	bic.w	r3, r3, #2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <ifkey+0xdc8>)
 8000e90:	729a      	strb	r2, [r3, #10]
 8000e92:	e1e3      	b.n	800125c <ifkey+0x1110>
	  		case 149:report[10]|=0x04;break;//PrtSc屏幕截图
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <ifkey+0xdc8>)
 8000e96:	7a9b      	ldrb	r3, [r3, #10]
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <ifkey+0xdc8>)
 8000ea0:	729a      	strb	r2, [r3, #10]
 8000ea2:	e1db      	b.n	800125c <ifkey+0x1110>
	  		case 150:report[10]&=(~0x04);break;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <ifkey+0xdc8>)
 8000ea6:	7a9b      	ldrb	r3, [r3, #10]
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <ifkey+0xdc8>)
 8000eb0:	729a      	strb	r2, [r3, #10]
 8000eb2:	e1d3      	b.n	800125c <ifkey+0x1110>
	  		case 151:report[10]|=0x08;break;//ScroIILOCK
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <ifkey+0xdc8>)
 8000eb6:	7a9b      	ldrb	r3, [r3, #10]
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <ifkey+0xdc8>)
 8000ec0:	729a      	strb	r2, [r3, #10]
 8000ec2:	e1cb      	b.n	800125c <ifkey+0x1110>
	  		case 152:report[10]&=(~0x08);break;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <ifkey+0xdc8>)
 8000ec6:	7a9b      	ldrb	r3, [r3, #10]
 8000ec8:	f023 0308 	bic.w	r3, r3, #8
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <ifkey+0xdc8>)
 8000ed0:	729a      	strb	r2, [r3, #10]
 8000ed2:	e1c3      	b.n	800125c <ifkey+0x1110>
	  		case 153:report[10]|=0x10;break;//Pause
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <ifkey+0xdc8>)
 8000ed6:	7a9b      	ldrb	r3, [r3, #10]
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <ifkey+0xdc8>)
 8000ee0:	729a      	strb	r2, [r3, #10]
 8000ee2:	e1bb      	b.n	800125c <ifkey+0x1110>
	  		case 154:report[10]&=(~0x10);break;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <ifkey+0xdc8>)
 8000ee6:	7a9b      	ldrb	r3, [r3, #10]
 8000ee8:	f023 0310 	bic.w	r3, r3, #16
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <ifkey+0xdc8>)
 8000ef0:	729a      	strb	r2, [r3, #10]
 8000ef2:	e1b3      	b.n	800125c <ifkey+0x1110>
	  		case 155:report[10]|=0x20;break;//Insert
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <ifkey+0xdc8>)
 8000ef6:	7a9b      	ldrb	r3, [r3, #10]
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <ifkey+0xdc8>)
 8000f00:	729a      	strb	r2, [r3, #10]
 8000f02:	e1ab      	b.n	800125c <ifkey+0x1110>
	  		case 156:report[10]&=(~0x20);break;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <ifkey+0xdc8>)
 8000f06:	7a9b      	ldrb	r3, [r3, #10]
 8000f08:	f023 0320 	bic.w	r3, r3, #32
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b01      	ldr	r3, [pc, #4]	@ (8000f14 <ifkey+0xdc8>)
 8000f10:	729a      	strb	r2, [r3, #10]
 8000f12:	e1a3      	b.n	800125c <ifkey+0x1110>
 8000f14:	200001a8 	.word	0x200001a8
	  		case 157:report[10]|=0x40;break;//Home
 8000f18:	4b9b      	ldr	r3, [pc, #620]	@ (8001188 <ifkey+0x103c>)
 8000f1a:	7a9b      	ldrb	r3, [r3, #10]
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b99      	ldr	r3, [pc, #612]	@ (8001188 <ifkey+0x103c>)
 8000f24:	729a      	strb	r2, [r3, #10]
 8000f26:	e199      	b.n	800125c <ifkey+0x1110>
	  		case 158:report[10]&=(~0x40);break;
 8000f28:	4b97      	ldr	r3, [pc, #604]	@ (8001188 <ifkey+0x103c>)
 8000f2a:	7a9b      	ldrb	r3, [r3, #10]
 8000f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b95      	ldr	r3, [pc, #596]	@ (8001188 <ifkey+0x103c>)
 8000f34:	729a      	strb	r2, [r3, #10]
 8000f36:	e191      	b.n	800125c <ifkey+0x1110>
	  		case 159:report[10]|=0x80;break;//Pgup
 8000f38:	4b93      	ldr	r3, [pc, #588]	@ (8001188 <ifkey+0x103c>)
 8000f3a:	7a9b      	ldrb	r3, [r3, #10]
 8000f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b91      	ldr	r3, [pc, #580]	@ (8001188 <ifkey+0x103c>)
 8000f44:	729a      	strb	r2, [r3, #10]
 8000f46:	e189      	b.n	800125c <ifkey+0x1110>
	  		case 160:report[10]&=(~0x80);break;
 8000f48:	4b8f      	ldr	r3, [pc, #572]	@ (8001188 <ifkey+0x103c>)
 8000f4a:	7a9b      	ldrb	r3, [r3, #10]
 8000f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b8d      	ldr	r3, [pc, #564]	@ (8001188 <ifkey+0x103c>)
 8000f54:	729a      	strb	r2, [r3, #10]
 8000f56:	e181      	b.n	800125c <ifkey+0x1110>
	  		case 161:report[11]|=0x01;break;//DEL
 8000f58:	4b8b      	ldr	r3, [pc, #556]	@ (8001188 <ifkey+0x103c>)
 8000f5a:	7adb      	ldrb	r3, [r3, #11]
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b89      	ldr	r3, [pc, #548]	@ (8001188 <ifkey+0x103c>)
 8000f64:	72da      	strb	r2, [r3, #11]
 8000f66:	e179      	b.n	800125c <ifkey+0x1110>
	  		case 162:report[11]&=(~0x01);break;
 8000f68:	4b87      	ldr	r3, [pc, #540]	@ (8001188 <ifkey+0x103c>)
 8000f6a:	7adb      	ldrb	r3, [r3, #11]
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b85      	ldr	r3, [pc, #532]	@ (8001188 <ifkey+0x103c>)
 8000f74:	72da      	strb	r2, [r3, #11]
 8000f76:	e171      	b.n	800125c <ifkey+0x1110>
	  		case 163:report[11]|=0x02;break;//END
 8000f78:	4b83      	ldr	r3, [pc, #524]	@ (8001188 <ifkey+0x103c>)
 8000f7a:	7adb      	ldrb	r3, [r3, #11]
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b81      	ldr	r3, [pc, #516]	@ (8001188 <ifkey+0x103c>)
 8000f84:	72da      	strb	r2, [r3, #11]
 8000f86:	e169      	b.n	800125c <ifkey+0x1110>
	  		case 164:report[11]&=(~0x02);break;
 8000f88:	4b7f      	ldr	r3, [pc, #508]	@ (8001188 <ifkey+0x103c>)
 8000f8a:	7adb      	ldrb	r3, [r3, #11]
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b7d      	ldr	r3, [pc, #500]	@ (8001188 <ifkey+0x103c>)
 8000f94:	72da      	strb	r2, [r3, #11]
 8000f96:	e161      	b.n	800125c <ifkey+0x1110>
	  		case 165:report[11]|=0x04;break;//Pgdn
 8000f98:	4b7b      	ldr	r3, [pc, #492]	@ (8001188 <ifkey+0x103c>)
 8000f9a:	7adb      	ldrb	r3, [r3, #11]
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b79      	ldr	r3, [pc, #484]	@ (8001188 <ifkey+0x103c>)
 8000fa4:	72da      	strb	r2, [r3, #11]
 8000fa6:	e159      	b.n	800125c <ifkey+0x1110>
	  		case 166:report[11]&=(~0x04);break;
 8000fa8:	4b77      	ldr	r3, [pc, #476]	@ (8001188 <ifkey+0x103c>)
 8000faa:	7adb      	ldrb	r3, [r3, #11]
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <ifkey+0x103c>)
 8000fb4:	72da      	strb	r2, [r3, #11]
 8000fb6:	e151      	b.n	800125c <ifkey+0x1110>
	  		case 167:report[11]|=0x08;break;//方向键右
 8000fb8:	4b73      	ldr	r3, [pc, #460]	@ (8001188 <ifkey+0x103c>)
 8000fba:	7adb      	ldrb	r3, [r3, #11]
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <ifkey+0x103c>)
 8000fc4:	72da      	strb	r2, [r3, #11]
 8000fc6:	e149      	b.n	800125c <ifkey+0x1110>
	  		case 168:report[11]&=(~0x08);break;
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001188 <ifkey+0x103c>)
 8000fca:	7adb      	ldrb	r3, [r3, #11]
 8000fcc:	f023 0308 	bic.w	r3, r3, #8
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001188 <ifkey+0x103c>)
 8000fd4:	72da      	strb	r2, [r3, #11]
 8000fd6:	e141      	b.n	800125c <ifkey+0x1110>
	  		case 169:report[11]|=0x10;break;//方向键左
 8000fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001188 <ifkey+0x103c>)
 8000fda:	7adb      	ldrb	r3, [r3, #11]
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b69      	ldr	r3, [pc, #420]	@ (8001188 <ifkey+0x103c>)
 8000fe4:	72da      	strb	r2, [r3, #11]
 8000fe6:	e139      	b.n	800125c <ifkey+0x1110>
	  		case 170:report[11]&=(~0x10);break;
 8000fe8:	4b67      	ldr	r3, [pc, #412]	@ (8001188 <ifkey+0x103c>)
 8000fea:	7adb      	ldrb	r3, [r3, #11]
 8000fec:	f023 0310 	bic.w	r3, r3, #16
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b65      	ldr	r3, [pc, #404]	@ (8001188 <ifkey+0x103c>)
 8000ff4:	72da      	strb	r2, [r3, #11]
 8000ff6:	e131      	b.n	800125c <ifkey+0x1110>
	  		case 171:report[11]|=0x20;break;//方向键下
 8000ff8:	4b63      	ldr	r3, [pc, #396]	@ (8001188 <ifkey+0x103c>)
 8000ffa:	7adb      	ldrb	r3, [r3, #11]
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b61      	ldr	r3, [pc, #388]	@ (8001188 <ifkey+0x103c>)
 8001004:	72da      	strb	r2, [r3, #11]
 8001006:	e129      	b.n	800125c <ifkey+0x1110>
	  		case 172:report[11]&=(~0x20);break;
 8001008:	4b5f      	ldr	r3, [pc, #380]	@ (8001188 <ifkey+0x103c>)
 800100a:	7adb      	ldrb	r3, [r3, #11]
 800100c:	f023 0320 	bic.w	r3, r3, #32
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b5d      	ldr	r3, [pc, #372]	@ (8001188 <ifkey+0x103c>)
 8001014:	72da      	strb	r2, [r3, #11]
 8001016:	e121      	b.n	800125c <ifkey+0x1110>
	  		case 173:report[11]|=0x40;break;//方向键上
 8001018:	4b5b      	ldr	r3, [pc, #364]	@ (8001188 <ifkey+0x103c>)
 800101a:	7adb      	ldrb	r3, [r3, #11]
 800101c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b59      	ldr	r3, [pc, #356]	@ (8001188 <ifkey+0x103c>)
 8001024:	72da      	strb	r2, [r3, #11]
 8001026:	e119      	b.n	800125c <ifkey+0x1110>
	  		case 174:report[11]&=(~0x40);break;
 8001028:	4b57      	ldr	r3, [pc, #348]	@ (8001188 <ifkey+0x103c>)
 800102a:	7adb      	ldrb	r3, [r3, #11]
 800102c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b55      	ldr	r3, [pc, #340]	@ (8001188 <ifkey+0x103c>)
 8001034:	72da      	strb	r2, [r3, #11]
 8001036:	e111      	b.n	800125c <ifkey+0x1110>
	  		case 175:report[11]|=0x80;break;//小键盘数字锁定
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <ifkey+0x103c>)
 800103a:	7adb      	ldrb	r3, [r3, #11]
 800103c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <ifkey+0x103c>)
 8001044:	72da      	strb	r2, [r3, #11]
 8001046:	e109      	b.n	800125c <ifkey+0x1110>
	  		case 176:report[11]&=(~0x80);break;
 8001048:	4b4f      	ldr	r3, [pc, #316]	@ (8001188 <ifkey+0x103c>)
 800104a:	7adb      	ldrb	r3, [r3, #11]
 800104c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b4d      	ldr	r3, [pc, #308]	@ (8001188 <ifkey+0x103c>)
 8001054:	72da      	strb	r2, [r3, #11]
 8001056:	e101      	b.n	800125c <ifkey+0x1110>
	  		case 177:report[12]|=0x01;break;//小键盘/
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <ifkey+0x103c>)
 800105a:	7b1b      	ldrb	r3, [r3, #12]
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b49      	ldr	r3, [pc, #292]	@ (8001188 <ifkey+0x103c>)
 8001064:	731a      	strb	r2, [r3, #12]
 8001066:	e0f9      	b.n	800125c <ifkey+0x1110>
	  		case 178:report[12]&=(~0x01);break;
 8001068:	4b47      	ldr	r3, [pc, #284]	@ (8001188 <ifkey+0x103c>)
 800106a:	7b1b      	ldrb	r3, [r3, #12]
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <ifkey+0x103c>)
 8001074:	731a      	strb	r2, [r3, #12]
 8001076:	e0f1      	b.n	800125c <ifkey+0x1110>
	  		case 179:report[12]|=0x02;break;//小键盘*
 8001078:	4b43      	ldr	r3, [pc, #268]	@ (8001188 <ifkey+0x103c>)
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <ifkey+0x103c>)
 8001084:	731a      	strb	r2, [r3, #12]
 8001086:	e0e9      	b.n	800125c <ifkey+0x1110>
	  		case 180:report[12]&=(~0x02);break;
 8001088:	4b3f      	ldr	r3, [pc, #252]	@ (8001188 <ifkey+0x103c>)
 800108a:	7b1b      	ldrb	r3, [r3, #12]
 800108c:	f023 0302 	bic.w	r3, r3, #2
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <ifkey+0x103c>)
 8001094:	731a      	strb	r2, [r3, #12]
 8001096:	e0e1      	b.n	800125c <ifkey+0x1110>
	  		case 181:report[12]|=0x04;break;//小键盘-
 8001098:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <ifkey+0x103c>)
 800109a:	7b1b      	ldrb	r3, [r3, #12]
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <ifkey+0x103c>)
 80010a4:	731a      	strb	r2, [r3, #12]
 80010a6:	e0d9      	b.n	800125c <ifkey+0x1110>
	  		case 182:report[12]&=(~0x04);break;
 80010a8:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <ifkey+0x103c>)
 80010aa:	7b1b      	ldrb	r3, [r3, #12]
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <ifkey+0x103c>)
 80010b4:	731a      	strb	r2, [r3, #12]
 80010b6:	e0d1      	b.n	800125c <ifkey+0x1110>
	  		case 183:report[12]|=0x08;break;//小键盘+
 80010b8:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <ifkey+0x103c>)
 80010ba:	7b1b      	ldrb	r3, [r3, #12]
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <ifkey+0x103c>)
 80010c4:	731a      	strb	r2, [r3, #12]
 80010c6:	e0c9      	b.n	800125c <ifkey+0x1110>
	  		case 184:report[12]&=(~0x08);break;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <ifkey+0x103c>)
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	f023 0308 	bic.w	r3, r3, #8
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <ifkey+0x103c>)
 80010d4:	731a      	strb	r2, [r3, #12]
 80010d6:	e0c1      	b.n	800125c <ifkey+0x1110>
	  		case 185:report[12]|=0x10;break;//小键盘Enter回车
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <ifkey+0x103c>)
 80010da:	7b1b      	ldrb	r3, [r3, #12]
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <ifkey+0x103c>)
 80010e4:	731a      	strb	r2, [r3, #12]
 80010e6:	e0b9      	b.n	800125c <ifkey+0x1110>
	  		case 186:report[12]&=(~0x10);break;
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <ifkey+0x103c>)
 80010ea:	7b1b      	ldrb	r3, [r3, #12]
 80010ec:	f023 0310 	bic.w	r3, r3, #16
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <ifkey+0x103c>)
 80010f4:	731a      	strb	r2, [r3, #12]
 80010f6:	e0b1      	b.n	800125c <ifkey+0x1110>
	  		case 187:report[12]|=0x20;break;//小键盘数字1
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <ifkey+0x103c>)
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <ifkey+0x103c>)
 8001104:	731a      	strb	r2, [r3, #12]
 8001106:	e0a9      	b.n	800125c <ifkey+0x1110>
	  		case 188:report[12]&=(~0x20);break;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <ifkey+0x103c>)
 800110a:	7b1b      	ldrb	r3, [r3, #12]
 800110c:	f023 0320 	bic.w	r3, r3, #32
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <ifkey+0x103c>)
 8001114:	731a      	strb	r2, [r3, #12]
 8001116:	e0a1      	b.n	800125c <ifkey+0x1110>
	  		case 189:report[12]|=0x40;break;//小键盘数字2
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <ifkey+0x103c>)
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <ifkey+0x103c>)
 8001124:	731a      	strb	r2, [r3, #12]
 8001126:	e099      	b.n	800125c <ifkey+0x1110>
	  		case 190:report[12]&=(~0x40);break;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <ifkey+0x103c>)
 800112a:	7b1b      	ldrb	r3, [r3, #12]
 800112c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <ifkey+0x103c>)
 8001134:	731a      	strb	r2, [r3, #12]
 8001136:	e091      	b.n	800125c <ifkey+0x1110>
	  		case 191:report[12]|=0x80;break;//小键盘数字3
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <ifkey+0x103c>)
 800113a:	7b1b      	ldrb	r3, [r3, #12]
 800113c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <ifkey+0x103c>)
 8001144:	731a      	strb	r2, [r3, #12]
 8001146:	e089      	b.n	800125c <ifkey+0x1110>
	  		case 192:report[12]&=(~0x80);break;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <ifkey+0x103c>)
 800114a:	7b1b      	ldrb	r3, [r3, #12]
 800114c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <ifkey+0x103c>)
 8001154:	731a      	strb	r2, [r3, #12]
 8001156:	e081      	b.n	800125c <ifkey+0x1110>
	  		case 193:report[13]|=0x01;break;//小键盘数字4
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <ifkey+0x103c>)
 800115a:	7b5b      	ldrb	r3, [r3, #13]
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <ifkey+0x103c>)
 8001164:	735a      	strb	r2, [r3, #13]
 8001166:	e079      	b.n	800125c <ifkey+0x1110>
      		case 194:report[13]&=(~0x01);break;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <ifkey+0x103c>)
 800116a:	7b5b      	ldrb	r3, [r3, #13]
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <ifkey+0x103c>)
 8001174:	735a      	strb	r2, [r3, #13]
 8001176:	e071      	b.n	800125c <ifkey+0x1110>
      		case 195:report[13]|=0x02;break;//小键盘数字5
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <ifkey+0x103c>)
 800117a:	7b5b      	ldrb	r3, [r3, #13]
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b01      	ldr	r3, [pc, #4]	@ (8001188 <ifkey+0x103c>)
 8001184:	735a      	strb	r2, [r3, #13]
 8001186:	e069      	b.n	800125c <ifkey+0x1110>
 8001188:	200001a8 	.word	0x200001a8
      		case 196:report[13]&=(~0x02);break;
 800118c:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <ifkey+0x111c>)
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	f023 0302 	bic.w	r3, r3, #2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <ifkey+0x111c>)
 8001198:	735a      	strb	r2, [r3, #13]
 800119a:	e05f      	b.n	800125c <ifkey+0x1110>
      		case 197:report[13]|=0x04;break;//小键盘数字6
 800119c:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <ifkey+0x111c>)
 800119e:	7b5b      	ldrb	r3, [r3, #13]
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <ifkey+0x111c>)
 80011a8:	735a      	strb	r2, [r3, #13]
 80011aa:	e057      	b.n	800125c <ifkey+0x1110>
      		case 198:report[13]&=(~0x04);break;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <ifkey+0x111c>)
 80011ae:	7b5b      	ldrb	r3, [r3, #13]
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <ifkey+0x111c>)
 80011b8:	735a      	strb	r2, [r3, #13]
 80011ba:	e04f      	b.n	800125c <ifkey+0x1110>
      		case 199:report[13]|=0x08;break;//小键盘数字7
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <ifkey+0x111c>)
 80011be:	7b5b      	ldrb	r3, [r3, #13]
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <ifkey+0x111c>)
 80011c8:	735a      	strb	r2, [r3, #13]
 80011ca:	e047      	b.n	800125c <ifkey+0x1110>
      		case 200:report[13]&=(~0x08);break;
 80011cc:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <ifkey+0x111c>)
 80011ce:	7b5b      	ldrb	r3, [r3, #13]
 80011d0:	f023 0308 	bic.w	r3, r3, #8
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <ifkey+0x111c>)
 80011d8:	735a      	strb	r2, [r3, #13]
 80011da:	e03f      	b.n	800125c <ifkey+0x1110>
      		case 201:report[13]|=0x10;break;//小键盘数字8
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <ifkey+0x111c>)
 80011de:	7b5b      	ldrb	r3, [r3, #13]
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <ifkey+0x111c>)
 80011e8:	735a      	strb	r2, [r3, #13]
 80011ea:	e037      	b.n	800125c <ifkey+0x1110>
      		case 202:report[13]&=(~0x10);break;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <ifkey+0x111c>)
 80011ee:	7b5b      	ldrb	r3, [r3, #13]
 80011f0:	f023 0310 	bic.w	r3, r3, #16
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <ifkey+0x111c>)
 80011f8:	735a      	strb	r2, [r3, #13]
 80011fa:	e02f      	b.n	800125c <ifkey+0x1110>
      		case 203:report[13]|=0x20;break;//小键盘数字9
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <ifkey+0x111c>)
 80011fe:	7b5b      	ldrb	r3, [r3, #13]
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <ifkey+0x111c>)
 8001208:	735a      	strb	r2, [r3, #13]
 800120a:	e027      	b.n	800125c <ifkey+0x1110>
      		case 204:report[13]&=(~0x20);break;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <ifkey+0x111c>)
 800120e:	7b5b      	ldrb	r3, [r3, #13]
 8001210:	f023 0320 	bic.w	r3, r3, #32
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <ifkey+0x111c>)
 8001218:	735a      	strb	r2, [r3, #13]
 800121a:	e01f      	b.n	800125c <ifkey+0x1110>
      		case 205:report[13]|=0x40;break;//小键盘数字0
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <ifkey+0x111c>)
 800121e:	7b5b      	ldrb	r3, [r3, #13]
 8001220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <ifkey+0x111c>)
 8001228:	735a      	strb	r2, [r3, #13]
 800122a:	e017      	b.n	800125c <ifkey+0x1110>
      		case 206:report[13]&=(~0x40);break;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <ifkey+0x111c>)
 800122e:	7b5b      	ldrb	r3, [r3, #13]
 8001230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <ifkey+0x111c>)
 8001238:	735a      	strb	r2, [r3, #13]
 800123a:	e00f      	b.n	800125c <ifkey+0x1110>
      		case 207:report[13]|=0x80;break;//小键盘数字.
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <ifkey+0x111c>)
 800123e:	7b5b      	ldrb	r3, [r3, #13]
 8001240:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <ifkey+0x111c>)
 8001248:	735a      	strb	r2, [r3, #13]
 800124a:	e007      	b.n	800125c <ifkey+0x1110>
      		case 208:report[13]&=(~0x80);break;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <ifkey+0x111c>)
 800124e:	7b5b      	ldrb	r3, [r3, #13]
 8001250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <ifkey+0x111c>)
 8001258:	735a      	strb	r2, [r3, #13]
 800125a:	bf00      	nop
      	}
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200001a8 	.word	0x200001a8

0800126c <HIDSend>:
void HIDSend(int command)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	ifkey(command);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7fe ff69 	bl	800014c <ifkey>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report,sizeof(report));
 800127a:	220f      	movs	r2, #15
 800127c:	4903      	ldr	r1, [pc, #12]	@ (800128c <HIDSend+0x20>)
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <HIDSend+0x24>)
 8001280:	f005 fc4a 	bl	8006b18 <USBD_CUSTOM_HID_SendReport>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001a8 	.word	0x200001a8
 8001290:	200001c0 	.word	0x200001c0

08001294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <MX_GPIO_Init+0x98>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <MX_GPIO_Init+0x98>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <MX_GPIO_Init+0x98>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <MX_GPIO_Init+0x98>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <MX_GPIO_Init+0x98>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_GPIO_Init+0x98>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <MX_GPIO_Init+0x98>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <MX_GPIO_Init+0x98>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_GPIO_Init+0x98>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin BT4_Pin
                           SERVER_Pin TEST_Pin HOME_Pin BT8_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|BT4_Pin
 80012f0:	f24f 0378 	movw	r3, #61560	@ 0xf078
 80012f4:	613b      	str	r3, [r7, #16]
                          |SERVER_Pin|TEST_Pin|HOME_Pin|BT8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480a      	ldr	r0, [pc, #40]	@ (8001330 <MX_GPIO_Init+0x9c>)
 8001306:	f000 fb8b 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT5_Pin BT6_Pin BT7_Pin COIN_Pin */
  GPIO_InitStruct.Pin = BT5_Pin|BT6_Pin|BT7_Pin|COIN_Pin;
 800130a:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_GPIO_Init+0xa0>)
 8001320:	f000 fb7e 	bl	8001a20 <HAL_GPIO_Init>

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	40010c00 	.word	0x40010c00
 8001334:	40010800 	.word	0x40010800

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 fa00 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f90a 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f7ff ffa6 	bl	8001294 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001348:	f006 fd46 	bl	8007dd8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin)==BT_TRIG_STATE){HIDSend(61);}if(HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin)!=BT_TRIG_STATE){HIDSend(62);}//W
 800134c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001350:	487f      	ldr	r0, [pc, #508]	@ (8001550 <main+0x218>)
 8001352:	f000 fce9 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <main+0x2a>
 800135c:	203d      	movs	r0, #61	@ 0x3d
 800135e:	f7ff ff85 	bl	800126c <HIDSend>
 8001362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001366:	487a      	ldr	r0, [pc, #488]	@ (8001550 <main+0x218>)
 8001368:	f000 fcde 	bl	8001d28 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d002      	beq.n	8001378 <main+0x40>
 8001372:	203e      	movs	r0, #62	@ 0x3e
 8001374:	f7ff ff7a 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin)==BT_TRIG_STATE){HIDSend(25);}if(HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin)!=BT_TRIG_STATE){HIDSend(26);}//E
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4874      	ldr	r0, [pc, #464]	@ (8001550 <main+0x218>)
 800137e:	f000 fcd3 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <main+0x56>
 8001388:	2019      	movs	r0, #25
 800138a:	f7ff ff6f 	bl	800126c <HIDSend>
 800138e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001392:	486f      	ldr	r0, [pc, #444]	@ (8001550 <main+0x218>)
 8001394:	f000 fcc8 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d002      	beq.n	80013a4 <main+0x6c>
 800139e:	201a      	movs	r0, #26
 80013a0:	f7ff ff64 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin)==BT_TRIG_STATE){HIDSend(23);}if(HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin)!=BT_TRIG_STATE){HIDSend(24);}//D
 80013a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013a8:	4869      	ldr	r0, [pc, #420]	@ (8001550 <main+0x218>)
 80013aa:	f000 fcbd 	bl	8001d28 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <main+0x82>
 80013b4:	2017      	movs	r0, #23
 80013b6:	f7ff ff59 	bl	800126c <HIDSend>
 80013ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013be:	4864      	ldr	r0, [pc, #400]	@ (8001550 <main+0x218>)
 80013c0:	f000 fcb2 	bl	8001d28 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d002      	beq.n	80013d0 <main+0x98>
 80013ca:	2018      	movs	r0, #24
 80013cc:	f7ff ff4e 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin)==BT_TRIG_STATE){HIDSend(21);}if(HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin)!=BT_TRIG_STATE){HIDSend(22);}//C
 80013d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d4:	485e      	ldr	r0, [pc, #376]	@ (8001550 <main+0x218>)
 80013d6:	f000 fca7 	bl	8001d28 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <main+0xae>
 80013e0:	2015      	movs	r0, #21
 80013e2:	f7ff ff43 	bl	800126c <HIDSend>
 80013e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ea:	4859      	ldr	r0, [pc, #356]	@ (8001550 <main+0x218>)
 80013ec:	f000 fc9c 	bl	8001d28 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d002      	beq.n	80013fc <main+0xc4>
 80013f6:	2016      	movs	r0, #22
 80013f8:	f7ff ff38 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT5_GPIO_Port, BT5_Pin)==BT_TRIG_STATE){HIDSend(63);}if(HAL_GPIO_ReadPin(BT5_GPIO_Port, BT5_Pin)!=BT_TRIG_STATE){HIDSend(64);}//X
 80013fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001400:	4854      	ldr	r0, [pc, #336]	@ (8001554 <main+0x21c>)
 8001402:	f000 fc91 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <main+0xda>
 800140c:	203f      	movs	r0, #63	@ 0x3f
 800140e:	f7ff ff2d 	bl	800126c <HIDSend>
 8001412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001416:	484f      	ldr	r0, [pc, #316]	@ (8001554 <main+0x21c>)
 8001418:	f000 fc86 	bl	8001d28 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d002      	beq.n	8001428 <main+0xf0>
 8001422:	2040      	movs	r0, #64	@ 0x40
 8001424:	f7ff ff22 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT6_GPIO_Port, BT6_Pin)==BT_TRIG_STATE){HIDSend(67);}if(HAL_GPIO_ReadPin(BT6_GPIO_Port, BT6_Pin)!=BT_TRIG_STATE){HIDSend(68);}//Z
 8001428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800142c:	4849      	ldr	r0, [pc, #292]	@ (8001554 <main+0x21c>)
 800142e:	f000 fc7b 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <main+0x106>
 8001438:	2043      	movs	r0, #67	@ 0x43
 800143a:	f7ff ff17 	bl	800126c <HIDSend>
 800143e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001442:	4844      	ldr	r0, [pc, #272]	@ (8001554 <main+0x21c>)
 8001444:	f000 fc70 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d002      	beq.n	8001454 <main+0x11c>
 800144e:	2044      	movs	r0, #68	@ 0x44
 8001450:	f7ff ff0c 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT7_GPIO_Port, BT7_Pin)==BT_TRIG_STATE){HIDSend(17);}if(HAL_GPIO_ReadPin(BT7_GPIO_Port, BT7_Pin)!=BT_TRIG_STATE){HIDSend(18);}//A
 8001454:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001458:	483e      	ldr	r0, [pc, #248]	@ (8001554 <main+0x21c>)
 800145a:	f000 fc65 	bl	8001d28 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d102      	bne.n	800146a <main+0x132>
 8001464:	2011      	movs	r0, #17
 8001466:	f7ff ff01 	bl	800126c <HIDSend>
 800146a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800146e:	4839      	ldr	r0, [pc, #228]	@ (8001554 <main+0x21c>)
 8001470:	f000 fc5a 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d002      	beq.n	8001480 <main+0x148>
 800147a:	2012      	movs	r0, #18
 800147c:	f7ff fef6 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT8_GPIO_Port, BT8_Pin)==BT_TRIG_STATE){HIDSend(49);}if(HAL_GPIO_ReadPin(BT8_GPIO_Port, BT8_Pin)!=BT_TRIG_STATE){HIDSend(50);}//Q
 8001480:	2140      	movs	r1, #64	@ 0x40
 8001482:	4833      	ldr	r0, [pc, #204]	@ (8001550 <main+0x218>)
 8001484:	f000 fc50 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <main+0x15c>
 800148e:	2031      	movs	r0, #49	@ 0x31
 8001490:	f7ff feec 	bl	800126c <HIDSend>
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	482e      	ldr	r0, [pc, #184]	@ (8001550 <main+0x218>)
 8001498:	f000 fc46 	bl	8001d28 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d002      	beq.n	80014a8 <main+0x170>
 80014a2:	2032      	movs	r0, #50	@ 0x32
 80014a4:	f7ff fee2 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(TEST_GPIO_Port, TEST_Pin)==OUTHER_KET_TRIG_STATE){HIDSend(85);}if(HAL_GPIO_ReadPin(TEST_GPIO_Port, TEST_Pin)!=OUTHER_KET_TRIG_STATE){HIDSend(86);}//上9
 80014a8:	2110      	movs	r1, #16
 80014aa:	4829      	ldr	r0, [pc, #164]	@ (8001550 <main+0x218>)
 80014ac:	f000 fc3c 	bl	8001d28 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <main+0x184>
 80014b6:	2055      	movs	r0, #85	@ 0x55
 80014b8:	f7ff fed8 	bl	800126c <HIDSend>
 80014bc:	2110      	movs	r1, #16
 80014be:	4824      	ldr	r0, [pc, #144]	@ (8001550 <main+0x218>)
 80014c0:	f000 fc32 	bl	8001d28 <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <main+0x198>
 80014ca:	2056      	movs	r0, #86	@ 0x56
 80014cc:	f7ff fece 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(SERVER_GPIO_Port, SERVER_Pin)==OUTHER_KET_TRIG_STATE){HIDSend(83);}if(HAL_GPIO_ReadPin(SERVER_GPIO_Port, SERVER_Pin)!=OUTHER_KET_TRIG_STATE){HIDSend(84);}//上8
 80014d0:	2108      	movs	r1, #8
 80014d2:	481f      	ldr	r0, [pc, #124]	@ (8001550 <main+0x218>)
 80014d4:	f000 fc28 	bl	8001d28 <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <main+0x1ac>
 80014de:	2053      	movs	r0, #83	@ 0x53
 80014e0:	f7ff fec4 	bl	800126c <HIDSend>
 80014e4:	2108      	movs	r1, #8
 80014e6:	481a      	ldr	r0, [pc, #104]	@ (8001550 <main+0x218>)
 80014e8:	f000 fc1e 	bl	8001d28 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <main+0x1c0>
 80014f2:	2054      	movs	r0, #84	@ 0x54
 80014f4:	f7ff feba 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(COIN_GPIO_Port, COIN_Pin)==OUTHER_KET_TRIG_STATE){HIDSend(73);}if(HAL_GPIO_ReadPin(COIN_GPIO_Port, COIN_Pin)!=OUTHER_KET_TRIG_STATE){HIDSend(74);}//NULL
 80014f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014fc:	4815      	ldr	r0, [pc, #84]	@ (8001554 <main+0x21c>)
 80014fe:	f000 fc13 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <main+0x1d6>
 8001508:	2049      	movs	r0, #73	@ 0x49
 800150a:	f7ff feaf 	bl	800126c <HIDSend>
 800150e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001512:	4810      	ldr	r0, [pc, #64]	@ (8001554 <main+0x21c>)
 8001514:	f000 fc08 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <main+0x1ec>
 800151e:	204a      	movs	r0, #74	@ 0x4a
 8001520:	f7ff fea4 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(HOME_GPIO_Port, HOME_Pin)==OUTHER_KET_TRIG_STATE){HIDSend(157);}if(HAL_GPIO_ReadPin(HOME_GPIO_Port, HOME_Pin)!=OUTHER_KET_TRIG_STATE){HIDSend(158);}//HOME
 8001524:	2120      	movs	r1, #32
 8001526:	480a      	ldr	r0, [pc, #40]	@ (8001550 <main+0x218>)
 8001528:	f000 fbfe 	bl	8001d28 <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <main+0x200>
 8001532:	209d      	movs	r0, #157	@ 0x9d
 8001534:	f7ff fe9a 	bl	800126c <HIDSend>
 8001538:	2120      	movs	r1, #32
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <main+0x218>)
 800153c:	f000 fbf4 	bl	8001d28 <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f43f af02 	beq.w	800134c <main+0x14>
 8001548:	209e      	movs	r0, #158	@ 0x9e
 800154a:	f7ff fe8f 	bl	800126c <HIDSend>
	  if(HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin)==BT_TRIG_STATE){HIDSend(61);}if(HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin)!=BT_TRIG_STATE){HIDSend(62);}//W
 800154e:	e6fd      	b.n	800134c <main+0x14>
 8001550:	40010c00 	.word	0x40010c00
 8001554:	40010800 	.word	0x40010800

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b094      	sub	sp, #80	@ 0x50
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001562:	2228      	movs	r2, #40	@ 0x28
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f007 f81c 	bl	80085a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001588:	2301      	movs	r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001596:	2301      	movs	r3, #1
 8001598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 f91a 	bl	80037e8 <HAL_RCC_OscConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ba:	f000 f827 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fb86 	bl	8003cec <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015e6:	f000 f811 	bl	800160c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015ea:	2310      	movs	r3, #16
 80015ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fcd5 	bl	8003fa4 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001600:	f000 f804 	bl	800160c <Error_Handler>
  }
}
 8001604:	bf00      	nop
 8001606:	3750      	adds	r7, #80	@ 0x50
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <Error_Handler+0x8>

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_MspInit+0x5c>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <HAL_MspInit+0x5c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6193      	str	r3, [r2, #24]
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_MspInit+0x5c>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <HAL_MspInit+0x5c>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a0e      	ldr	r2, [pc, #56]	@ (8001674 <HAL_MspInit+0x5c>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_MspInit+0x5c>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_MspInit+0x60>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_MspInit+0x60>)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <NMI_Handler+0x4>

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <MemManage_Handler+0x4>

08001694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f87e 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016da:	f000 fc58 	bl	8001f8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000684 	.word	0x20000684

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff fff8 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	@ (8001728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016fa:	490c      	ldr	r1, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001710:	4c09      	ldr	r4, [pc, #36]	@ (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f006 ff49 	bl	80085b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff fe09 	bl	8001338 <main>
  bx lr
 8001726:	4770      	bx	lr
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001730:	080086a0 	.word	0x080086a0
  ldr r2, =_sbss
 8001734:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001738:	20000978 	.word	0x20000978

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_Init+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_Init+0x28>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f923 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff ff5c 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f93b 	bl	8001a06 <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 f903 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	@ (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_IncTick+0x1c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_IncTick+0x20>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a03      	ldr	r2, [pc, #12]	@ (80017ec <HAL_IncTick+0x20>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20000008 	.word	0x20000008
 80017ec:	200001b8 	.word	0x200001b8

080017f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b02      	ldr	r3, [pc, #8]	@ (8001800 <HAL_GetTick+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	200001b8 	.word	0x200001b8

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	@ (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	@ (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	@ (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	@ 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff90 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff2d 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff42 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b08b      	sub	sp, #44	@ 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e169      	b.n	8001d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a34:	2201      	movs	r2, #1
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8158 	bne.w	8001d02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a9a      	ldr	r2, [pc, #616]	@ (8001cc0 <HAL_GPIO_Init+0x2a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d05e      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a5c:	4a98      	ldr	r2, [pc, #608]	@ (8001cc0 <HAL_GPIO_Init+0x2a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d875      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a62:	4a98      	ldr	r2, [pc, #608]	@ (8001cc4 <HAL_GPIO_Init+0x2a4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d058      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a68:	4a96      	ldr	r2, [pc, #600]	@ (8001cc4 <HAL_GPIO_Init+0x2a4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d86f      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a6e:	4a96      	ldr	r2, [pc, #600]	@ (8001cc8 <HAL_GPIO_Init+0x2a8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d052      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a74:	4a94      	ldr	r2, [pc, #592]	@ (8001cc8 <HAL_GPIO_Init+0x2a8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d869      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a7a:	4a94      	ldr	r2, [pc, #592]	@ (8001ccc <HAL_GPIO_Init+0x2ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04c      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a80:	4a92      	ldr	r2, [pc, #584]	@ (8001ccc <HAL_GPIO_Init+0x2ac>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d863      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a86:	4a92      	ldr	r2, [pc, #584]	@ (8001cd0 <HAL_GPIO_Init+0x2b0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d046      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a90      	ldr	r2, [pc, #576]	@ (8001cd0 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d85d      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d82a      	bhi.n	8001aec <HAL_GPIO_Init+0xcc>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d859      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa0 <HAL_GPIO_Init+0x80>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001b1b 	.word	0x08001b1b
 8001aa4:	08001af5 	.word	0x08001af5
 8001aa8:	08001b07 	.word	0x08001b07
 8001aac:	08001b49 	.word	0x08001b49
 8001ab0:	08001b4f 	.word	0x08001b4f
 8001ab4:	08001b4f 	.word	0x08001b4f
 8001ab8:	08001b4f 	.word	0x08001b4f
 8001abc:	08001b4f 	.word	0x08001b4f
 8001ac0:	08001b4f 	.word	0x08001b4f
 8001ac4:	08001b4f 	.word	0x08001b4f
 8001ac8:	08001b4f 	.word	0x08001b4f
 8001acc:	08001b4f 	.word	0x08001b4f
 8001ad0:	08001b4f 	.word	0x08001b4f
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b4f 	.word	0x08001b4f
 8001adc:	08001b4f 	.word	0x08001b4f
 8001ae0:	08001b4f 	.word	0x08001b4f
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b11 	.word	0x08001b11
 8001aec:	4a79      	ldr	r2, [pc, #484]	@ (8001cd4 <HAL_GPIO_Init+0x2b4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af2:	e02c      	b.n	8001b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e029      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	e024      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e01f      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	330c      	adds	r3, #12
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e01a      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b22:	2304      	movs	r3, #4
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e013      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	611a      	str	r2, [r3, #16]
          break;
 8001b3a:	e009      	b.n	8001b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	615a      	str	r2, [r3, #20]
          break;
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          break;
 8001b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2bff      	cmp	r3, #255	@ 0xff
 8001b54:	d801      	bhi.n	8001b5a <HAL_GPIO_Init+0x13a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_Init+0x13e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2bff      	cmp	r3, #255	@ 0xff
 8001b64:	d802      	bhi.n	8001b6c <HAL_GPIO_Init+0x14c>
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x152>
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	210f      	movs	r1, #15
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80b1 	beq.w	8001d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb8:	4a48      	ldr	r2, [pc, #288]	@ (8001cdc <HAL_GPIO_Init+0x2bc>)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a40      	ldr	r2, [pc, #256]	@ (8001ce0 <HAL_GPIO_Init+0x2c0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1ec>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce4 <HAL_GPIO_Init+0x2c4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1e8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3e      	ldr	r2, [pc, #248]	@ (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3d      	ldr	r2, [pc, #244]	@ (8001cec <HAL_GPIO_Init+0x2cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1e0>
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1e:	492f      	ldr	r1, [pc, #188]	@ (8001cdc <HAL_GPIO_Init+0x2bc>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c38:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	492c      	ldr	r1, [pc, #176]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c46:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4928      	ldr	r1, [pc, #160]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4922      	ldr	r1, [pc, #136]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	491e      	ldr	r1, [pc, #120]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4918      	ldr	r1, [pc, #96]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4914      	ldr	r1, [pc, #80]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d021      	beq.n	8001cf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	490e      	ldr	r1, [pc, #56]	@ (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e021      	b.n	8001d02 <HAL_GPIO_Init+0x2e2>
 8001cbe:	bf00      	nop
 8001cc0:	10320000 	.word	0x10320000
 8001cc4:	10310000 	.word	0x10310000
 8001cc8:	10220000 	.word	0x10220000
 8001ccc:	10210000 	.word	0x10210000
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40011400 	.word	0x40011400
 8001cf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4909      	ldr	r1, [pc, #36]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f ae8e 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	372c      	adds	r7, #44	@ 0x2c
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0e8      	b.n	8001f3a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f006 f985 	bl	800808c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 f9de 	bl	8004156 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da4:	f002 f9b4 	bl	8004110 <USB_CoreInit>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0bf      	b.n	8001f3a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 f9e2 	bl	800418a <USB_SetCurrentMode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b0      	b.n	8001f3a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e03e      	b.n	8001e5c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3311      	adds	r3, #17
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3310      	adds	r3, #16
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3313      	adds	r3, #19
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	3320      	adds	r3, #32
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3324      	adds	r3, #36	@ 0x24
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	791b      	ldrb	r3, [r3, #4]
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d3bb      	bcc.n	8001dde <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e044      	b.n	8001ef6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3b5      	bcc.n	8001e6c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0a:	f002 f94a 	bl	80041a2 <USB_DevInit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e00c      	b.n	8001f3a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fbc9 	bl	80066ca <USB_DevDisconnect>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_PCD_Start+0x16>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e016      	b.n	8001f86 <HAL_PCD_Start+0x44>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 f8e0 	bl	800412a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f006 fae2 	bl	8008536 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fb9d 	bl	80066b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fb9f 	bl	80066de <USB_ReadInterrupts>
 8001fa0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fb03 	bl	80025b8 <PCD_EP_ISR_Handler>

    return;
 8001fb2:	e119      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d013      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f006 f8d3 	bl	8008182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f905 	bl	80021ee <HAL_PCD_SetAddress>

    return;
 8001fe4:	e100      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00c      	beq.n	800200a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002002:	b292      	uxth	r2, r2
 8002004:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002008:	e0ee      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00c      	beq.n	800202e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002026:	b292      	uxth	r2, r2
 8002028:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800202c:	e0dc      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d027      	beq.n	8002088 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002040:	b29a      	uxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0204 	bic.w	r2, r2, #4
 800204a:	b292      	uxth	r2, r2
 800204c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0208 	bic.w	r2, r2, #8
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f006 f8c3 	bl	80081f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002080:	b292      	uxth	r2, r2
 8002082:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002086:	e0af      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8083 	beq.w	800219a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	77fb      	strb	r3, [r7, #31]
 8002098:	e010      	b.n	80020bc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	7ffb      	ldrb	r3, [r7, #31]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	441a      	add	r2, r3
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	8812      	ldrh	r2, [r2, #0]
 80020aa:	b292      	uxth	r2, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	3320      	adds	r3, #32
 80020b0:	443b      	add	r3, r7
 80020b2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	3301      	adds	r3, #1
 80020ba:	77fb      	strb	r3, [r7, #31]
 80020bc:	7ffb      	ldrb	r3, [r7, #31]
 80020be:	2b07      	cmp	r3, #7
 80020c0:	d9eb      	bls.n	800209a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	b292      	uxth	r2, r2
 80020d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020f2:	bf00      	nop
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f6      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002118:	b292      	uxth	r2, r2
 800211a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	77fb      	strb	r3, [r7, #31]
 8002122:	e00f      	b.n	8002144 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	4611      	mov	r1, r2
 800212c:	7ffa      	ldrb	r2, [r7, #31]
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	440a      	add	r2, r1
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	3320      	adds	r3, #32
 8002136:	443b      	add	r3, r7
 8002138:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800213c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	3301      	adds	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	7ffb      	ldrb	r3, [r7, #31]
 8002146:	2b07      	cmp	r3, #7
 8002148:	d9ec      	bls.n	8002124 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0208 	orr.w	r2, r2, #8
 800215c:	b292      	uxth	r2, r2
 800215e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002174:	b292      	uxth	r2, r2
 8002176:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0204 	orr.w	r2, r2, #4
 800218c:	b292      	uxth	r2, r2
 800218e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f006 f814 	bl	80081c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002198:	e026      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00f      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f005 ffd2 	bl	8008166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021c2:	e011      	b.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e0:	b292      	uxth	r2, r2
 80021e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021e6:	bf00      	nop
  }
}
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_PCD_SetAddress+0x1a>
 8002204:	2302      	movs	r3, #2
 8002206:	e012      	b.n	800222e <HAL_PCD_SetAddress+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fa36 	bl	8006690 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	4608      	mov	r0, r1
 8002240:	4611      	mov	r1, r2
 8002242:	461a      	mov	r2, r3
 8002244:	4603      	mov	r3, r0
 8002246:	70fb      	strb	r3, [r7, #3]
 8002248:	460b      	mov	r3, r1
 800224a:	803b      	strh	r3, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0e      	bge.n	800227a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0207 	and.w	r2, r3, #7
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3310      	adds	r3, #16
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	e00e      	b.n	8002298 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0207 	and.w	r2, r3, #7
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022a4:	883a      	ldrh	r2, [r7, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	78ba      	ldrb	r2, [r7, #2]
 80022ae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022b0:	78bb      	ldrb	r3, [r7, #2]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d102      	bne.n	80022bc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_EP_Open+0x94>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e00e      	b.n	80022e8 <HAL_PCD_EP_Open+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 ff7f 	bl	80041dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80022e6:	7afb      	ldrb	r3, [r7, #11]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da0e      	bge.n	8002322 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	3310      	adds	r3, #16
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	705a      	strb	r2, [r3, #1]
 8002320:	e00e      	b.n	8002340 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 0207 	and.w	r2, r3, #7
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	b2da      	uxtb	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_PCD_EP_Close+0x6a>
 8002356:	2302      	movs	r3, #2
 8002358:	e00e      	b.n	8002378 <HAL_PCD_EP_Close+0x88>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f002 faf7 	bl	800495c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 0207 	and.w	r2, r3, #7
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fcae 	bl	8004d34 <USB_EPStartXfer>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	460b      	mov	r3, r1
 80023f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f003 0207 	and.w	r2, r3, #7
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	3310      	adds	r3, #16
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2201      	movs	r2, #1
 800242c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	b2da      	uxtb	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6979      	ldr	r1, [r7, #20]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fc77 	bl	8004d34 <USB_EPStartXfer>

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	7912      	ldrb	r2, [r2, #4]
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e04c      	b.n	8002508 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800246e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da0e      	bge.n	8002494 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0207 	and.w	r2, r3, #7
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	3310      	adds	r3, #16
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	705a      	strb	r2, [r3, #1]
 8002492:	e00c      	b.n	80024ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_PCD_EP_SetStall+0x7e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e01c      	b.n	8002508 <HAL_PCD_EP_SetStall+0xb8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 ffda 	bl	8006496 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d108      	bne.n	80024fe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f004 f8ff 	bl	80066fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	7912      	ldrb	r2, [r2, #4]
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e040      	b.n	80025b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800252e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da0e      	bge.n	8002554 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 0207 	and.w	r2, r3, #7
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	3310      	adds	r3, #16
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	705a      	strb	r2, [r3, #1]
 8002552:	e00e      	b.n	8002572 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 0207 	and.w	r2, r3, #7
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_PCD_EP_ClrStall+0x82>
 800258e:	2302      	movs	r3, #2
 8002590:	e00e      	b.n	80025b0 <HAL_PCD_EP_ClrStall+0xa0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 ffc8 	bl	8006536 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b096      	sub	sp, #88	@ 0x58
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025c0:	e3bb      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80025dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 8175 	bne.w	80028d0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d14e      	bne.n	8002690 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002602:	81fb      	strh	r3, [r7, #14]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002612:	b29b      	uxth	r3, r3
 8002614:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3310      	adds	r3, #16
 800261a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	3302      	adds	r3, #2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4413      	add	r3, r2
 800263a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002646:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	441a      	add	r2, r3
 8002652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002654:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002656:	2100      	movs	r1, #0
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f005 fd6a 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7b5b      	ldrb	r3, [r3, #13]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8368 	beq.w	8002d3a <PCD_EP_ISR_Handler+0x782>
 800266a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 8363 	bne.w	8002d3a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b5b      	ldrb	r3, [r3, #13]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800267e:	b2da      	uxtb	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	735a      	strb	r2, [r3, #13]
 800268e:	e354      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002696:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d034      	beq.n	8002718 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	3306      	adds	r3, #6
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80026e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f004 f855 	bl	800679c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026fe:	4013      	ands	r3, r2
 8002700:	823b      	strh	r3, [r7, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	8a3a      	ldrh	r2, [r7, #16]
 8002708:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800270c:	b292      	uxth	r2, r2
 800270e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f005 fce1 	bl	80080d8 <HAL_PCD_SetupStageCallback>
 8002716:	e310      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002718:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800271c:	2b00      	cmp	r3, #0
 800271e:	f280 830c 	bge.w	8002d3a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800272e:	4013      	ands	r3, r2
 8002730:	83fb      	strh	r3, [r7, #30]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	8bfa      	ldrh	r2, [r7, #30]
 8002738:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800273c:	b292      	uxth	r2, r2
 800273e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	3306      	adds	r3, #6
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800276c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d019      	beq.n	80027a8 <PCD_EP_ISR_Handler+0x1f0>
 8002774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002782:	6959      	ldr	r1, [r3, #20]
 8002784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002786:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800278c:	b29b      	uxth	r3, r3
 800278e:	f004 f805 	bl	800679c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	441a      	add	r2, r3
 800279c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027a0:	2100      	movs	r1, #0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f005 fcaa 	bl	80080fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 82bd 	bne.w	8002d3a <PCD_EP_ISR_Handler+0x782>
 80027c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027c4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80027c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027cc:	f000 82b5 	beq.w	8002d3a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4413      	add	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b3e      	cmp	r3, #62	@ 0x3e
 8002806:	d91d      	bls.n	8002844 <PCD_EP_ISR_Handler+0x28c>
 8002808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <PCD_EP_ISR_Handler+0x26a>
 800281c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281e:	3b01      	subs	r3, #1
 8002820:	647b      	str	r3, [r7, #68]	@ 0x44
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
 8002828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282a:	b29b      	uxth	r3, r3
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	b29b      	uxth	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283c:	b29a      	uxth	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	e026      	b.n	8002892 <PCD_EP_ISR_Handler+0x2da>
 8002844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <PCD_EP_ISR_Handler+0x2aa>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285a:	b29a      	uxth	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	e017      	b.n	8002892 <PCD_EP_ISR_Handler+0x2da>
 8002862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
 800286a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <PCD_EP_ISR_Handler+0x2c4>
 8002876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002878:	3301      	adds	r3, #1
 800287a:	647b      	str	r3, [r7, #68]	@ 0x44
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29a      	uxth	r2, r3
 8002882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002884:	b29b      	uxth	r3, r3
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	b29b      	uxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b29a      	uxth	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800289e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a2:	827b      	strh	r3, [r7, #18]
 80028a4:	8a7b      	ldrh	r3, [r7, #18]
 80028a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80028aa:	827b      	strh	r3, [r7, #18]
 80028ac:	8a7b      	ldrh	r3, [r7, #18]
 80028ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028b2:	827b      	strh	r3, [r7, #18]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	8a7b      	ldrh	r3, [r7, #18]
 80028ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	8013      	strh	r3, [r2, #0]
 80028ce:	e234      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f280 80fc 	bge.w	8002ae6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002904:	4013      	ands	r3, r2
 8002906:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800291c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002920:	b292      	uxth	r2, r2
 8002922:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002924:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800293a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293c:	7b1b      	ldrb	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d125      	bne.n	800298e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	3306      	adds	r3, #6
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800296e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8092 	beq.w	8002a9c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297e:	6959      	ldr	r1, [r3, #20]
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	88da      	ldrh	r2, [r3, #6]
 8002984:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002988:	f003 ff08 	bl	800679c <USB_ReadPMA>
 800298c:	e086      	b.n	8002a9c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800298e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002990:	78db      	ldrb	r3, [r3, #3]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d10a      	bne.n	80029ac <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002996:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800299a:	461a      	mov	r2, r3
 800299c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9d9 	bl	8002d56 <HAL_PCD_EP_DB_Receive>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80029aa:	e077      	b.n	8002a9c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80029dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d024      	beq.n	8002a54 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a32:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d02e      	beq.n	8002a9c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a44:	6959      	ldr	r1, [r3, #20]
 8002a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a48:	891a      	ldrh	r2, [r3, #8]
 8002a4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a4e:	f003 fea5 	bl	800679c <USB_ReadPMA>
 8002a52:	e023      	b.n	8002a9c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	3306      	adds	r3, #6
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8e:	6959      	ldr	r1, [r3, #20]
 8002a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a92:	895a      	ldrh	r2, [r3, #10]
 8002a94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a98:	f003 fe80 	bl	800679c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002aa4:	441a      	add	r2, r3
 8002aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ab2:	441a      	add	r2, r3
 8002ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <PCD_EP_ISR_Handler+0x514>
 8002ac0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d206      	bcs.n	8002ada <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f005 fb12 	bl	80080fc <HAL_PCD_DataOutStageCallback>
 8002ad8:	e005      	b.n	8002ae6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 f927 	bl	8004d34 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ae6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8123 	beq.w	8002d3a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002af4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	3310      	adds	r3, #16
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b46:	78db      	ldrb	r3, [r3, #3]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f040 80a2 	bne.w	8002c92 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b56:	7b1b      	ldrb	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8093 	beq.w	8002c84 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d046      	beq.n	8002bf8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d126      	bne.n	8002bc0 <PCD_EP_ISR_Handler+0x608>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	4413      	add	r3, r2
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	011a      	lsls	r2, r3, #4
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	4413      	add	r3, r2
 8002b94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	801a      	strh	r2, [r3, #0]
 8002bbe:	e061      	b.n	8002c84 <PCD_EP_ISR_Handler+0x6cc>
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d15d      	bne.n	8002c84 <PCD_EP_ISR_Handler+0x6cc>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	4413      	add	r3, r2
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	011a      	lsls	r2, r3, #4
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	4413      	add	r3, r2
 8002bea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	e045      	b.n	8002c84 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d126      	bne.n	8002c54 <PCD_EP_ISR_Handler+0x69c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	4413      	add	r3, r2
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	011a      	lsls	r2, r3, #4
 8002c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c26:	4413      	add	r3, r2
 8002c28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	e017      	b.n	8002c84 <PCD_EP_ISR_Handler+0x6cc>
 8002c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d113      	bne.n	8002c84 <PCD_EP_ISR_Handler+0x6cc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	011a      	lsls	r2, r3, #4
 8002c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c76:	4413      	add	r3, r2
 8002c78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	2200      	movs	r2, #0
 8002c82:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f005 fa51 	bl	8008132 <HAL_PCD_DataInStageCallback>
 8002c90:	e053      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d146      	bne.n	8002d2c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d907      	bls.n	8002ce6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	619a      	str	r2, [r3, #24]
 8002ce4:	e002      	b.n	8002cec <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f005 fa19 	bl	8008132 <HAL_PCD_DataInStageCallback>
 8002d00:	e01b      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d18:	441a      	add	r2, r3
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 f805 	bl	8004d34 <USB_EPStartXfer>
 8002d2a:	e006      	b.n	8002d3a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d30:	461a      	mov	r2, r3
 8002d32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f91b 	bl	8002f70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f6ff ac3b 	blt.w	80025c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3758      	adds	r7, #88	@ 0x58
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b088      	sub	sp, #32
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	4613      	mov	r3, r2
 8002d62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d07e      	beq.n	8002e6c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	3302      	adds	r3, #2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	8b7b      	ldrh	r3, [r7, #26]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d306      	bcc.n	8002db0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	8b7b      	ldrh	r3, [r7, #26]
 8002da8:	1ad2      	subs	r2, r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	619a      	str	r2, [r3, #24]
 8002dae:	e002      	b.n	8002db6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d123      	bne.n	8002e06 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd8:	833b      	strh	r3, [r7, #24]
 8002dda:	8b3b      	ldrh	r3, [r7, #24]
 8002ddc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002de0:	833b      	strh	r3, [r7, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	8b3b      	ldrh	r3, [r7, #24]
 8002df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01f      	beq.n	8002e50 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2a:	82fb      	strh	r3, [r7, #22]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	441a      	add	r2, r3
 8002e3a:	8afb      	ldrh	r3, [r7, #22]
 8002e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e50:	8b7b      	ldrh	r3, [r7, #26]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6959      	ldr	r1, [r3, #20]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	891a      	ldrh	r2, [r3, #8]
 8002e64:	8b7b      	ldrh	r3, [r7, #26]
 8002e66:	f003 fc99 	bl	800679c <USB_ReadPMA>
 8002e6a:	e07c      	b.n	8002f66 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3306      	adds	r3, #6
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	8b7b      	ldrh	r3, [r7, #26]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d306      	bcc.n	8002eae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	8b7b      	ldrh	r3, [r7, #26]
 8002ea6:	1ad2      	subs	r2, r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	619a      	str	r2, [r3, #24]
 8002eac:	e002      	b.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d123      	bne.n	8002f04 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed6:	83fb      	strh	r3, [r7, #30]
 8002ed8:	8bfb      	ldrh	r3, [r7, #30]
 8002eda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ede:	83fb      	strh	r3, [r7, #30]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	8bfb      	ldrh	r3, [r7, #30]
 8002ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11f      	bne.n	8002f4e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f28:	83bb      	strh	r3, [r7, #28]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	8bbb      	ldrh	r3, [r7, #28]
 8002f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f4e:	8b7b      	ldrh	r3, [r7, #26]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6959      	ldr	r1, [r3, #20]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	895a      	ldrh	r2, [r3, #10]
 8002f60:	8b7b      	ldrh	r3, [r7, #26]
 8002f62:	f003 fc1b 	bl	800679c <USB_ReadPMA>
    }
  }

  return count;
 8002f66:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0a4      	sub	sp, #144	@ 0x90
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 81dd 	beq.w	8003344 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d907      	bls.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	619a      	str	r2, [r3, #24]
 8002fd0:	e002      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 80b9 	bne.w	8003154 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d126      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffe:	4413      	add	r3, r2
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	011a      	lsls	r2, r3, #4
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	4413      	add	r3, r2
 800300c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301c:	b29a      	uxth	r2, r3
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003030:	b29a      	uxth	r2, r3
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e01a      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d116      	bne.n	800306e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003054:	4413      	add	r3, r2
 8003056:	637b      	str	r3, [r7, #52]	@ 0x34
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003060:	4413      	add	r3, r2
 8003062:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003066:	633b      	str	r3, [r7, #48]	@ 0x30
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d126      	bne.n	80030ca <HAL_PCD_EP_DB_Transmit+0x15a>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	011a      	lsls	r2, r3, #4
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e017      	b.n	80030fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d113      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	4413      	add	r3, r2
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	011a      	lsls	r2, r3, #4
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2200      	movs	r2, #0
 80030f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f005 f816 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 82fc 	beq.w	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312c:	82fb      	strh	r3, [r7, #22]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	441a      	add	r2, r3
 800313c:	8afb      	ldrh	r3, [r7, #22]
 800313e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003146:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800314a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314e:	b29b      	uxth	r3, r3
 8003150:	8013      	strh	r3, [r2, #0]
 8003152:	e2da      	b.n	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d021      	beq.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003178:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800318e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003196:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800319a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 82ae 	bne.w	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031b6:	441a      	add	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031c4:	441a      	add	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d30b      	bcc.n	80031ee <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	621a      	str	r2, [r3, #32]
 80031ec:	e017      	b.n	800321e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003206:	e00a      	b.n	800321e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2200      	movs	r2, #0
 800321c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d165      	bne.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x382>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003234:	b29b      	uxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323a:	4413      	add	r3, r2
 800323c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	011a      	lsls	r2, r3, #4
 8003244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003246:	4413      	add	r3, r2
 8003248:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800324c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003258:	b29a      	uxth	r2, r3
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003262:	2b3e      	cmp	r3, #62	@ 0x3e
 8003264:	d91d      	bls.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x332>
 8003266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_PCD_EP_DB_Transmit+0x310>
 800327a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327c:	3b01      	subs	r3, #1
 800327e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29a      	uxth	r2, r3
 8003286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003288:	b29b      	uxth	r3, r3
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	b29b      	uxth	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800329a:	b29a      	uxth	r2, r3
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	801a      	strh	r2, [r3, #0]
 80032a0:	e044      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x350>
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	e035      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_PCD_EP_DB_Transmit+0x36a>
 80032d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d6:	3301      	adds	r3, #1
 80032d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	e01c      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	785b      	ldrb	r3, [r3, #1]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d118      	bne.n	800332c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330e:	4413      	add	r3, r2
 8003310:	647b      	str	r3, [r7, #68]	@ 0x44
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	011a      	lsls	r2, r3, #4
 8003318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800331a:	4413      	add	r3, r2
 800331c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003320:	643b      	str	r3, [r7, #64]	@ 0x40
 8003322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003326:	b29a      	uxth	r2, r3
 8003328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6959      	ldr	r1, [r3, #20]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	891a      	ldrh	r2, [r3, #8]
 8003338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333c:	b29b      	uxth	r3, r3
 800333e:	f003 f9e8 	bl	8006712 <USB_WritePMA>
 8003342:	e1e2      	b.n	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334c:	b29b      	uxth	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	3306      	adds	r3, #6
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003378:	429a      	cmp	r2, r3
 800337a:	d307      	bcc.n	800338c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	619a      	str	r2, [r3, #24]
 800338a:	e002      	b.n	8003392 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80c0 	bne.w	800351c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d126      	bne.n	80033f2 <HAL_PCD_EP_DB_Transmit+0x482>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033b8:	4413      	add	r3, r2
 80033ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	011a      	lsls	r2, r3, #4
 80033c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033c4:	4413      	add	r3, r2
 80033c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	e01a      	b.n	8003428 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d116      	bne.n	8003428 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800340e:	4413      	add	r3, r2
 8003410:	667b      	str	r3, [r7, #100]	@ 0x64
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	011a      	lsls	r2, r3, #4
 8003418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800341a:	4413      	add	r3, r2
 800341c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003420:	663b      	str	r3, [r7, #96]	@ 0x60
 8003422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	677b      	str	r3, [r7, #116]	@ 0x74
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12b      	bne.n	800348e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344a:	4413      	add	r3, r2
 800344c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	011a      	lsls	r2, r3, #4
 8003454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003456:	4413      	add	r3, r2
 8003458:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800345c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346c:	b29a      	uxth	r2, r3
 800346e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29a      	uxth	r2, r3
 8003486:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	e017      	b.n	80034be <HAL_PCD_EP_DB_Transmit+0x54e>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d113      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x54e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a4:	4413      	add	r3, r2
 80034a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	011a      	lsls	r2, r3, #4
 80034ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ba:	2200      	movs	r2, #0
 80034bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	4619      	mov	r1, r3
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f004 fe34 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 811a 	bne.w	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800350a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800350e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]
 800351a:	e0f6      	b.n	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d121      	bne.n	800356a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003540:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800355a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800355e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003566:	b29b      	uxth	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003570:	2b01      	cmp	r3, #1
 8003572:	f040 80ca 	bne.w	800370a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800357e:	441a      	add	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800358c:	441a      	add	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	429a      	cmp	r2, r3
 800359c:	d30b      	bcc.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6a1a      	ldr	r2, [r3, #32]
 80035aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	e017      	b.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80035be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035ce:	e00a      	b.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d165      	bne.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x750>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003602:	b29b      	uxth	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003608:	4413      	add	r3, r2
 800360a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	011a      	lsls	r2, r3, #4
 8003612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003614:	4413      	add	r3, r2
 8003616:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800361a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800361c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003626:	b29a      	uxth	r2, r3
 8003628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800362a:	801a      	strh	r2, [r3, #0]
 800362c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003630:	2b3e      	cmp	r3, #62	@ 0x3e
 8003632:	d91d      	bls.n	8003670 <HAL_PCD_EP_DB_Transmit+0x700>
 8003634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800363c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800364a:	3b01      	subs	r3, #1
 800364c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800364e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29a      	uxth	r2, r3
 8003654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003656:	b29b      	uxth	r3, r3
 8003658:	029b      	lsls	r3, r3, #10
 800365a:	b29b      	uxth	r3, r3
 800365c:	4313      	orrs	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003668:	b29a      	uxth	r2, r3
 800366a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	e041      	b.n	80036f4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003678:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003686:	b29a      	uxth	r2, r3
 8003688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	e032      	b.n	80036f4 <HAL_PCD_EP_DB_Transmit+0x784>
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x738>
 80036a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036a4:	3301      	adds	r3, #1
 80036a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	029b      	lsls	r3, r3, #10
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036bc:	801a      	strh	r2, [r3, #0]
 80036be:	e019      	b.n	80036f4 <HAL_PCD_EP_DB_Transmit+0x784>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d115      	bne.n	80036f4 <HAL_PCD_EP_DB_Transmit+0x784>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d6:	4413      	add	r3, r2
 80036d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	011a      	lsls	r2, r3, #4
 80036e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e2:	4413      	add	r3, r2
 80036e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6959      	ldr	r1, [r3, #20]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	895a      	ldrh	r2, [r3, #10]
 8003700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003704:	b29b      	uxth	r3, r3
 8003706:	f003 f804 	bl	8006712 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003724:	82bb      	strh	r3, [r7, #20]
 8003726:	8abb      	ldrh	r3, [r7, #20]
 8003728:	f083 0310 	eor.w	r3, r3, #16
 800372c:	82bb      	strh	r3, [r7, #20]
 800372e:	8abb      	ldrh	r3, [r7, #20]
 8003730:	f083 0320 	eor.w	r3, r3, #32
 8003734:	82bb      	strh	r3, [r7, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	8abb      	ldrh	r3, [r7, #20]
 8003746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800374a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800374e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003756:	b29b      	uxth	r3, r3
 8003758:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3790      	adds	r7, #144	@ 0x90
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	4613      	mov	r3, r2
 8003774:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3310      	adds	r3, #16
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e009      	b.n	80037ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800379a:	897a      	ldrh	r2, [r7, #10]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037ae:	893b      	ldrh	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2200      	movs	r2, #0
 80037b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	80da      	strh	r2, [r3, #6]
 80037c2:	e00b      	b.n	80037dc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2201      	movs	r2, #1
 80037c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e272      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8087 	beq.w	8003916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003808:	4b92      	ldr	r3, [pc, #584]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00c      	beq.n	800382e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003814:	4b8f      	ldr	r3, [pc, #572]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d112      	bne.n	8003846 <HAL_RCC_OscConfig+0x5e>
 8003820:	4b8c      	ldr	r3, [pc, #560]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d10b      	bne.n	8003846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382e:	4b89      	ldr	r3, [pc, #548]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d06c      	beq.n	8003914 <HAL_RCC_OscConfig+0x12c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d168      	bne.n	8003914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e24c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x76>
 8003850:	4b80      	ldr	r3, [pc, #512]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7f      	ldr	r2, [pc, #508]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	e02e      	b.n	80038bc <HAL_RCC_OscConfig+0xd4>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x98>
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7a      	ldr	r2, [pc, #488]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b78      	ldr	r3, [pc, #480]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a77      	ldr	r2, [pc, #476]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xd4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0xbc>
 800388a:	4b72      	ldr	r3, [pc, #456]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a71      	ldr	r2, [pc, #452]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6f      	ldr	r3, [pc, #444]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6e      	ldr	r2, [pc, #440]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xd4>
 80038a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b68      	ldr	r3, [pc, #416]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a67      	ldr	r2, [pc, #412]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd ff94 	bl	80017f0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fd ff90 	bl	80017f0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e200      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b5d      	ldr	r3, [pc, #372]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xe4>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd ff80 	bl	80017f0 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd ff7c 	bl	80017f0 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1ec      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b53      	ldr	r3, [pc, #332]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x10c>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003922:	4b4c      	ldr	r3, [pc, #304]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800392e:	4b49      	ldr	r3, [pc, #292]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x18c>
 800393a:	4b46      	ldr	r3, [pc, #280]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b43      	ldr	r3, [pc, #268]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x176>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1c0      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4939      	ldr	r1, [pc, #228]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b36      	ldr	r3, [pc, #216]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fd ff35 	bl	80017f0 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7fd ff31 	bl	80017f0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1a1      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4927      	ldr	r1, [pc, #156]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fd ff14 	bl	80017f0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fd ff10 	bl	80017f0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e180      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d03a      	beq.n	8003a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d019      	beq.n	8003a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <HAL_RCC_OscConfig+0x274>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7fd fef4 	bl	80017f0 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd fef0 	bl	80017f0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e160      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f000 fa9c 	bl	8003f68 <RCC_Delay>
 8003a30:	e01c      	b.n	8003a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_RCC_OscConfig+0x274>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fd feda 	bl	80017f0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3e:	e00f      	b.n	8003a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd fed6 	bl	80017f0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d908      	bls.n	8003a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e146      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	42420000 	.word	0x42420000
 8003a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	4b92      	ldr	r3, [pc, #584]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e9      	bne.n	8003a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a6 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b88      	ldr	r3, [pc, #544]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a87      	ldr	r2, [pc, #540]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	61d3      	str	r3, [r2, #28]
 8003a96:	4b85      	ldr	r3, [pc, #532]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	4b82      	ldr	r3, [pc, #520]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d118      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abe:	f7fd fe97 	bl	80017f0 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fd fe93 	bl	80017f0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	@ 0x64
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e103      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b75      	ldr	r3, [pc, #468]	@ (8003cb0 <HAL_RCC_OscConfig+0x4c8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x312>
 8003aec:	4b6f      	ldr	r3, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	e02d      	b.n	8003b56 <HAL_RCC_OscConfig+0x36e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x334>
 8003b02:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a69      	ldr	r2, [pc, #420]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6213      	str	r3, [r2, #32]
 8003b0e:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a66      	ldr	r2, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	6213      	str	r3, [r2, #32]
 8003b1a:	e01c      	b.n	8003b56 <HAL_RCC_OscConfig+0x36e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b05      	cmp	r3, #5
 8003b22:	d10c      	bne.n	8003b3e <HAL_RCC_OscConfig+0x356>
 8003b24:	4b61      	ldr	r3, [pc, #388]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4a60      	ldr	r2, [pc, #384]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	f043 0304 	orr.w	r3, r3, #4
 8003b2e:	6213      	str	r3, [r2, #32]
 8003b30:	4b5e      	ldr	r3, [pc, #376]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a5d      	ldr	r2, [pc, #372]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6213      	str	r3, [r2, #32]
 8003b3c:	e00b      	b.n	8003b56 <HAL_RCC_OscConfig+0x36e>
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4a5a      	ldr	r2, [pc, #360]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6213      	str	r3, [r2, #32]
 8003b4a:	4b58      	ldr	r3, [pc, #352]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4a57      	ldr	r2, [pc, #348]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d015      	beq.n	8003b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fe47 	bl	80017f0 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fe43 	bl	80017f0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0b1      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ee      	beq.n	8003b66 <HAL_RCC_OscConfig+0x37e>
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fe31 	bl	80017f0 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd fe2d 	bl	80017f0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e09b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ee      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d105      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bba:	4b3c      	ldr	r3, [pc, #240]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8087 	beq.w	8003cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd0:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d061      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d146      	bne.n	8003c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b33      	ldr	r3, [pc, #204]	@ (8003cb4 <HAL_RCC_OscConfig+0x4cc>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fd fe01 	bl	80017f0 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fd fdfd 	bl	80017f0 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e06d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c04:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d108      	bne.n	8003c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4921      	ldr	r1, [pc, #132]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a19      	ldr	r1, [r3, #32]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	491b      	ldr	r1, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fdd1 	bl	80017f0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fdcd 	bl	80017f0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e03d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x46a>
 8003c70:	e035      	b.n	8003cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_RCC_OscConfig+0x4cc>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fd fdba 	bl	80017f0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fdb6 	bl	80017f0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e026      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x498>
 8003c9e:	e01e      	b.n	8003cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e019      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_RCC_OscConfig+0x500>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000

08003cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0d0      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b6a      	ldr	r3, [pc, #424]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d910      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b67      	ldr	r3, [pc, #412]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	4965      	ldr	r1, [pc, #404]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b63      	ldr	r3, [pc, #396]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0b8      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d48:	4b59      	ldr	r3, [pc, #356]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a58      	ldr	r2, [pc, #352]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	494d      	ldr	r1, [pc, #308]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d040      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b47      	ldr	r3, [pc, #284]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d115      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07f      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e073      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06b      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b39      	ldr	r3, [pc, #228]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4936      	ldr	r1, [pc, #216]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fd08 	bl	80017f0 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fd fd04 	bl	80017f0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e053      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d210      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 0207 	bic.w	r2, r3, #7
 8003e22:	4922      	ldr	r1, [pc, #136]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b20      	ldr	r3, [pc, #128]	@ (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e032      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4916      	ldr	r1, [pc, #88]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e66:	4b12      	ldr	r3, [pc, #72]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	490e      	ldr	r1, [pc, #56]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7a:	f000 f821 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	490a      	ldr	r1, [pc, #40]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e96:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_RCC_ClockConfig+0x1d0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fc66 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08008674 	.word	0x08008674
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	20000004 	.word	0x20000004

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eda:	4b1e      	ldr	r3, [pc, #120]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8003eee:	e027      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ef2:	613b      	str	r3, [r7, #16]
      break;
 8003ef4:	e027      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	0c9b      	lsrs	r3, r3, #18
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a17      	ldr	r2, [pc, #92]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f0e:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0c5b      	lsrs	r3, r3, #17
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	4a11      	ldr	r2, [pc, #68]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f22:	fb03 f202 	mul.w	r2, r3, r2
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e004      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f34:	fb02 f303 	mul.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	613b      	str	r3, [r7, #16]
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	613b      	str	r3, [r7, #16]
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	693b      	ldr	r3, [r7, #16]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	007a1200 	.word	0x007a1200
 8003f5c:	08008684 	.word	0x08008684
 8003f60:	08008694 	.word	0x08008694
 8003f64:	003d0900 	.word	0x003d0900

08003f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <RCC_Delay+0x34>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <RCC_Delay+0x38>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0a5b      	lsrs	r3, r3, #9
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f84:	bf00      	nop
  }
  while (Delay --);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	60fa      	str	r2, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <RCC_Delay+0x1c>
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	10624dd3 	.word	0x10624dd3

08003fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d07d      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	61d3      	str	r3, [r2, #28]
 8003fdc:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	4b46      	ldr	r3, [pc, #280]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d118      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a42      	ldr	r2, [pc, #264]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004004:	f7fd fbf4 	bl	80017f0 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400a:	e008      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400c:	f7fd fbf0 	bl	80017f0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e06d      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401e:	4b3a      	ldr	r3, [pc, #232]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800402a:	4b36      	ldr	r3, [pc, #216]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004032:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02e      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	429a      	cmp	r2, r3
 8004046:	d027      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004048:	4b2e      	ldr	r3, [pc, #184]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004050:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004052:	4b2e      	ldr	r3, [pc, #184]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004058:	4b2c      	ldr	r3, [pc, #176]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800405e:	4a29      	ldr	r2, [pc, #164]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d014      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fd fbbf 	bl	80017f0 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd fbbb 	bl	80017f0 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e036      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ee      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004098:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4917      	ldr	r1, [pc, #92]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b0:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	490b      	ldr	r1, [pc, #44]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4904      	ldr	r1, [pc, #16]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	42420440 	.word	0x42420440

08004110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4638      	mov	r0, r7
 800411a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800413a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800413e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800415e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004162:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	b29b      	uxth	r3, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	b29b      	uxth	r3, r3
 8004174:	4013      	ands	r3, r2
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	4638      	mov	r0, r7
 80041ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041dc:	b480      	push	{r7}
 80041de:	b09d      	sub	sp, #116	@ 0x74
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d81f      	bhi.n	800424e <USB_ActivateEndpoint+0x72>
 800420e:	a201      	add	r2, pc, #4	@ (adr r2, 8004214 <USB_ActivateEndpoint+0x38>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004225 	.word	0x08004225
 8004218:	08004241 	.word	0x08004241
 800421c:	08004257 	.word	0x08004257
 8004220:	08004233 	.word	0x08004233
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004228:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800422c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004230:	e012      	b.n	8004258 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004232:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004236:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800423a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800423e:	e00b      	b.n	8004258 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004240:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004248:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800424c:	e004      	b.n	8004258 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004254:	e000      	b.n	8004258 <USB_ActivateEndpoint+0x7c>
      break;
 8004256:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800426a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800426e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004290:	b29b      	uxth	r3, r3
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80042aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	7b1b      	ldrb	r3, [r3, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 8178 	bne.w	80045b8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8084 	beq.w	80043da <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	011a      	lsls	r2, r3, #4
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	88db      	ldrh	r3, [r3, #6]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	827b      	strh	r3, [r7, #18]
 8004314:	8a7b      	ldrh	r3, [r7, #18]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01b      	beq.n	8004356 <USB_ActivateEndpoint+0x17a>
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004334:	823b      	strh	r3, [r7, #16]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	8a3b      	ldrh	r3, [r7, #16]
 8004342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800434e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004352:	b29b      	uxth	r3, r3
 8004354:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	78db      	ldrb	r3, [r3, #3]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d020      	beq.n	80043a0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004374:	81bb      	strh	r3, [r7, #12]
 8004376:	89bb      	ldrh	r3, [r7, #12]
 8004378:	f083 0320 	eor.w	r3, r3, #32
 800437c:	81bb      	strh	r3, [r7, #12]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	89bb      	ldrh	r3, [r7, #12]
 800438a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]
 800439e:	e2d5      	b.n	800494c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b6:	81fb      	strh	r3, [r7, #14]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	89fb      	ldrh	r3, [r7, #14]
 80043c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	8013      	strh	r3, [r2, #0]
 80043d8:	e2b8      	b.n	800494c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	4413      	add	r3, r2
 80043ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011a      	lsls	r2, r3, #4
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	88db      	ldrh	r3, [r3, #6]
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	b29b      	uxth	r3, r3
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004418:	b29b      	uxth	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	4413      	add	r3, r2
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	011a      	lsls	r2, r3, #4
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	4413      	add	r3, r2
 800442c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443c:	b29a      	uxth	r2, r3
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b3e      	cmp	r3, #62	@ 0x3e
 8004448:	d91d      	bls.n	8004486 <USB_ActivateEndpoint+0x2aa>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <USB_ActivateEndpoint+0x288>
 800445e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004460:	3b01      	subs	r3, #1
 8004462:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800446c:	b29b      	uxth	r3, r3
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	b29b      	uxth	r3, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	b29b      	uxth	r3, r3
 8004476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447e:	b29a      	uxth	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e026      	b.n	80044d4 <USB_ActivateEndpoint+0x2f8>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <USB_ActivateEndpoint+0x2c8>
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449c:	b29a      	uxth	r2, r3
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	e017      	b.n	80044d4 <USB_ActivateEndpoint+0x2f8>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <USB_ActivateEndpoint+0x2e2>
 80044b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044ba:	3301      	adds	r3, #1
 80044bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <USB_ActivateEndpoint+0x348>
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	843b      	strh	r3, [r7, #32]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	8c3b      	ldrh	r3, [r7, #32]
 8004510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800451c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004520:	b29b      	uxth	r3, r3
 8004522:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d124      	bne.n	8004576 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	83bb      	strh	r3, [r7, #28]
 8004544:	8bbb      	ldrh	r3, [r7, #28]
 8004546:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800454a:	83bb      	strh	r3, [r7, #28]
 800454c:	8bbb      	ldrh	r3, [r7, #28]
 800454e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004552:	83bb      	strh	r3, [r7, #28]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	8bbb      	ldrh	r3, [r7, #28]
 8004560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004570:	b29b      	uxth	r3, r3
 8004572:	8013      	strh	r3, [r2, #0]
 8004574:	e1ea      	b.n	800494c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458c:	83fb      	strh	r3, [r7, #30]
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004594:	83fb      	strh	r3, [r7, #30]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	8bfb      	ldrh	r3, [r7, #30]
 80045a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	8013      	strh	r3, [r2, #0]
 80045b6:	e1c9      	b.n	800494c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	78db      	ldrb	r3, [r3, #3]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d11e      	bne.n	80045fe <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	441a      	add	r2, r3
 80045e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80045e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80045f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8013      	strh	r3, [r2, #0]
 80045fc:	e01d      	b.n	800463a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004614:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800462a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800462e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004636:	b29b      	uxth	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004644:	b29b      	uxth	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800464a:	4413      	add	r3, r2
 800464c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	011a      	lsls	r2, r3, #4
 8004654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004656:	4413      	add	r3, r2
 8004658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800465c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	891b      	ldrh	r3, [r3, #8]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	657b      	str	r3, [r7, #84]	@ 0x54
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	4413      	add	r3, r2
 8004680:	657b      	str	r3, [r7, #84]	@ 0x54
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	011a      	lsls	r2, r3, #4
 8004688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468a:	4413      	add	r3, r2
 800468c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004690:	653b      	str	r3, [r7, #80]	@ 0x50
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	895b      	ldrh	r3, [r3, #10]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 8093 	bne.w	80047d2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80046bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <USB_ActivateEndpoint+0x524>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800470e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <USB_ActivateEndpoint+0x574>
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800472a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	441a      	add	r2, r3
 800473a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800473c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004748:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004766:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004768:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800476a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800476e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004770:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004772:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004776:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800478c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
 80047d0:	e0bc      	b.n	800494c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01d      	beq.n	800482a <USB_ActivateEndpoint+0x64e>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004804:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800481e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800483a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800483e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01d      	beq.n	8004882 <USB_ActivateEndpoint+0x6a6>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800486e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800487a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	78db      	ldrb	r3, [r3, #3]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d024      	beq.n	80048d4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80048a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80048a8:	f083 0320 	eor.w	r3, r3, #32
 80048ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
 80048d2:	e01d      	b.n	8004910 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	441a      	add	r2, r3
 8004934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800493c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004948:	b29b      	uxth	r3, r3
 800494a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800494c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004950:	4618      	mov	r0, r3
 8004952:	3774      	adds	r7, #116	@ 0x74
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop

0800495c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800495c:	b480      	push	{r7}
 800495e:	b08d      	sub	sp, #52	@ 0x34
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	7b1b      	ldrb	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 808e 	bne.w	8004a8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d044      	beq.n	8004a02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	81bb      	strh	r3, [r7, #12]
 8004986:	89bb      	ldrh	r3, [r7, #12]
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <USB_DeactivateEndpoint+0x6c>
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a6:	817b      	strh	r3, [r7, #10]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049de:	813b      	strh	r3, [r7, #8]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	893b      	ldrh	r3, [r7, #8]
 80049ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8013      	strh	r3, [r2, #0]
 8004a00:	e192      	b.n	8004d28 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	827b      	strh	r3, [r7, #18]
 8004a10:	8a7b      	ldrh	r3, [r7, #18]
 8004a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <USB_DeactivateEndpoint+0xf6>
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a30:	823b      	strh	r3, [r7, #16]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8a3b      	ldrh	r3, [r7, #16]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a68:	81fb      	strh	r3, [r7, #14]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
 8004a8a:	e14d      	b.n	8004d28 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f040 80a5 	bne.w	8004be0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	843b      	strh	r3, [r7, #32]
 8004aa4:	8c3b      	ldrh	r3, [r7, #32]
 8004aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01b      	beq.n	8004ae6 <USB_DeactivateEndpoint+0x18a>
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac4:	83fb      	strh	r3, [r7, #30]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	8bfb      	ldrh	r3, [r7, #30]
 8004ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ada:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	83bb      	strh	r3, [r7, #28]
 8004af4:	8bbb      	ldrh	r3, [r7, #28]
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <USB_DeactivateEndpoint+0x1da>
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b14:	837b      	strh	r3, [r7, #26]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8b7b      	ldrh	r3, [r7, #26]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4c:	833b      	strh	r3, [r7, #24]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8b3b      	ldrh	r3, [r7, #24]
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b84:	82fb      	strh	r3, [r7, #22]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	8afb      	ldrh	r3, [r7, #22]
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bbc:	82bb      	strh	r3, [r7, #20]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	8abb      	ldrh	r3, [r7, #20]
 8004bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8013      	strh	r3, [r2, #0]
 8004bde:	e0a3      	b.n	8004d28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004bee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <USB_DeactivateEndpoint+0x2d4>
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004c3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <USB_DeactivateEndpoint+0x324>
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3734      	adds	r7, #52	@ 0x34
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b0c2      	sub	sp, #264	@ 0x108
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d42:	6018      	str	r0, [r3, #0]
 8004d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d4c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	f040 86b7 	bne.w	8005ace <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d908      	bls.n	8004d8e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d8c:	e007      	b.n	8004d9e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	7b1b      	ldrb	r3, [r3, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d13a      	bne.n	8004e24 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6959      	ldr	r1, [r3, #20]
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	88da      	ldrh	r2, [r3, #6]
 8004dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004dd0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004dd4:	6800      	ldr	r0, [r0, #0]
 8004dd6:	f001 fc9c 	bl	8006712 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	011a      	lsls	r2, r3, #4
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	f000 be1f 	b.w	8005a62 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	78db      	ldrb	r3, [r3, #3]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f040 8462 	bne.w	80056fa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f240 83df 	bls.w	8005612 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	1ad2      	subs	r2, r2, r3
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 81c7 	beq.w	8005284 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d177      	bne.n	8005002 <USB_EPStartXfer+0x2ce>
 8004f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	4413      	add	r3, r2
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	011a      	lsls	r2, r3, #4
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	4413      	add	r3, r2
 8004f48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f62:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f64:	d921      	bls.n	8004faa <USB_EPStartXfer+0x276>
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <USB_EPStartXfer+0x252>
 8004f7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f80:	3b01      	subs	r3, #1
 8004f82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	e050      	b.n	800504c <USB_EPStartXfer+0x318>
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <USB_EPStartXfer+0x294>
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	e041      	b.n	800504c <USB_EPStartXfer+0x318>
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <USB_EPStartXfer+0x2b4>
 8004fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e024      	b.n	800504c <USB_EPStartXfer+0x318>
 8005002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d11c      	bne.n	800504c <USB_EPStartXfer+0x318>
 8005012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	4413      	add	r3, r2
 8005028:	633b      	str	r3, [r7, #48]	@ 0x30
 800502a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800502e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	011a      	lsls	r2, r3, #4
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	4413      	add	r3, r2
 800503c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005046:	b29a      	uxth	r2, r3
 8005048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800504c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	895b      	ldrh	r3, [r3, #10]
 8005058:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800505c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6959      	ldr	r1, [r3, #20]
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506c:	b29b      	uxth	r3, r3
 800506e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005072:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005076:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	f001 fb49 	bl	8006712 <USB_WritePMA>
            ep->xfer_buff += len;
 8005080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	441a      	add	r2, r3
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800509e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d90f      	bls.n	80050da <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	621a      	str	r2, [r3, #32]
 80050d8:	e00e      	b.n	80050f8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80050da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80050ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d177      	bne.n	80051f8 <USB_EPStartXfer+0x4c4>
 8005108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005122:	b29b      	uxth	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	011a      	lsls	r2, r3, #4
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4413      	add	r3, r2
 800513e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514e:	b29a      	uxth	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005158:	2b3e      	cmp	r3, #62	@ 0x3e
 800515a:	d921      	bls.n	80051a0 <USB_EPStartXfer+0x46c>
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <USB_EPStartXfer+0x448>
 8005172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005176:	3b01      	subs	r3, #1
 8005178:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29a      	uxth	r2, r3
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005186:	b29b      	uxth	r3, r3
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	b29b      	uxth	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b29b      	uxth	r3, r3
 8005190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005198:	b29a      	uxth	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e056      	b.n	800524e <USB_EPStartXfer+0x51a>
 80051a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <USB_EPStartXfer+0x48a>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e047      	b.n	800524e <USB_EPStartXfer+0x51a>
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <USB_EPStartXfer+0x4aa>
 80051d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d8:	3301      	adds	r3, #1
 80051da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	029b      	lsls	r3, r3, #10
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e02a      	b.n	800524e <USB_EPStartXfer+0x51a>
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d122      	bne.n	800524e <USB_EPStartXfer+0x51a>
 8005208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005222:	b29b      	uxth	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	4413      	add	r3, r2
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	011a      	lsls	r2, r3, #4
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	4413      	add	r3, r2
 800523e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005248:	b29a      	uxth	r2, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800524e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	891b      	ldrh	r3, [r3, #8]
 800525a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800525e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6959      	ldr	r1, [r3, #20]
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526e:	b29b      	uxth	r3, r3
 8005270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005274:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005278:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f001 fa48 	bl	8006712 <USB_WritePMA>
 8005282:	e3ee      	b.n	8005a62 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d177      	bne.n	8005384 <USB_EPStartXfer+0x650>
 8005294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052b4:	4413      	add	r3, r2
 80052b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052c8:	4413      	add	r3, r2
 80052ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052da:	b29a      	uxth	r2, r3
 80052dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052e6:	d921      	bls.n	800532c <USB_EPStartXfer+0x5f8>
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <USB_EPStartXfer+0x5d4>
 80052fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005302:	3b01      	subs	r3, #1
 8005304:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29a      	uxth	r2, r3
 800530e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005312:	b29b      	uxth	r3, r3
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	b29b      	uxth	r3, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005324:	b29a      	uxth	r2, r3
 8005326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	e056      	b.n	80053da <USB_EPStartXfer+0x6a6>
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <USB_EPStartXfer+0x616>
 8005334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29a      	uxth	r2, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e047      	b.n	80053da <USB_EPStartXfer+0x6a6>
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <USB_EPStartXfer+0x636>
 8005360:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005364:	3301      	adds	r3, #1
 8005366:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800536a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005374:	b29b      	uxth	r3, r3
 8005376:	029b      	lsls	r3, r3, #10
 8005378:	b29b      	uxth	r3, r3
 800537a:	4313      	orrs	r3, r2
 800537c:	b29a      	uxth	r2, r3
 800537e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	e02a      	b.n	80053da <USB_EPStartXfer+0x6a6>
 8005384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d122      	bne.n	80053da <USB_EPStartXfer+0x6a6>
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	4413      	add	r3, r2
 80053b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	011a      	lsls	r2, r3, #4
 80053c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	891b      	ldrh	r3, [r3, #8]
 80053e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005400:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005404:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005408:	6800      	ldr	r0, [r0, #0]
 800540a:	f001 f982 	bl	8006712 <USB_WritePMA>
            ep->xfer_buff += len;
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541e:	441a      	add	r2, r3
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800542c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	429a      	cmp	r2, r3
 8005446:	d90f      	bls.n	8005468 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005458:	1ad2      	subs	r2, r2, r3
 800545a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	621a      	str	r2, [r3, #32]
 8005466:	e00e      	b.n	8005486 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	643b      	str	r3, [r7, #64]	@ 0x40
 8005492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d177      	bne.n	8005592 <USB_EPStartXfer+0x85e>
 80054a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	4413      	add	r3, r2
 80054c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	011a      	lsls	r2, r3, #4
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	4413      	add	r3, r2
 80054d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80054f4:	d921      	bls.n	800553a <USB_EPStartXfer+0x806>
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <USB_EPStartXfer+0x7e2>
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005510:	3b01      	subs	r3, #1
 8005512:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29a      	uxth	r2, r3
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	b29b      	uxth	r3, r3
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	b29b      	uxth	r3, r3
 8005526:	4313      	orrs	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e050      	b.n	80055dc <USB_EPStartXfer+0x8a8>
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <USB_EPStartXfer+0x824>
 8005542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005550:	b29a      	uxth	r2, r3
 8005552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e041      	b.n	80055dc <USB_EPStartXfer+0x8a8>
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d004      	beq.n	8005578 <USB_EPStartXfer+0x844>
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005572:	3301      	adds	r3, #1
 8005574:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	4313      	orrs	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e024      	b.n	80055dc <USB_EPStartXfer+0x8a8>
 8005592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d11c      	bne.n	80055dc <USB_EPStartXfer+0x8a8>
 80055a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b6:	4413      	add	r3, r2
 80055b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	011a      	lsls	r2, r3, #4
 80055c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ca:	4413      	add	r3, r2
 80055cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	895b      	ldrh	r3, [r3, #10]
 80055e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6959      	ldr	r1, [r3, #20]
 80055f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005602:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005606:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	f001 f881 	bl	8006712 <USB_WritePMA>
 8005610:	e227      	b.n	8005a62 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005648:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800564c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800567e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800569e:	4413      	add	r3, r2
 80056a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	011a      	lsls	r2, r3, #4
 80056b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	b29a      	uxth	r2, r3
 80056c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	891b      	ldrh	r3, [r3, #8]
 80056d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6959      	ldr	r1, [r3, #20]
 80056e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056f2:	6800      	ldr	r0, [r0, #0]
 80056f4:	f001 f80d 	bl	8006712 <USB_WritePMA>
 80056f8:	e1b3      	b.n	8005a62 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80c6 	beq.w	80058cc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	673b      	str	r3, [r7, #112]	@ 0x70
 800574c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d177      	bne.n	800584c <USB_EPStartXfer+0xb18>
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005776:	b29b      	uxth	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800577c:	4413      	add	r3, r2
 800577e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005790:	4413      	add	r3, r2
 8005792:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005796:	667b      	str	r3, [r7, #100]	@ 0x64
 8005798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80057ae:	d921      	bls.n	80057f4 <USB_EPStartXfer+0xac0>
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <USB_EPStartXfer+0xa9c>
 80057c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057ca:	3b01      	subs	r3, #1
 80057cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057da:	b29b      	uxth	r3, r3
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e050      	b.n	8005896 <USB_EPStartXfer+0xb62>
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <USB_EPStartXfer+0xade>
 80057fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580a:	b29a      	uxth	r2, r3
 800580c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e041      	b.n	8005896 <USB_EPStartXfer+0xb62>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <USB_EPStartXfer+0xafe>
 8005828:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800582c:	3301      	adds	r3, #1
 800582e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800583c:	b29b      	uxth	r3, r3
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	b29b      	uxth	r3, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	b29a      	uxth	r2, r3
 8005846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e024      	b.n	8005896 <USB_EPStartXfer+0xb62>
 800584c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d11c      	bne.n	8005896 <USB_EPStartXfer+0xb62>
 800585c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005870:	4413      	add	r3, r2
 8005872:	673b      	str	r3, [r7, #112]	@ 0x70
 8005874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005884:	4413      	add	r3, r2
 8005886:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800588a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005890:	b29a      	uxth	r2, r3
 8005892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	895b      	ldrh	r3, [r3, #10]
 80058a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f000 ff24 	bl	8006712 <USB_WritePMA>
 80058ca:	e0ca      	b.n	8005a62 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d177      	bne.n	80059cc <USB_EPStartXfer+0xc98>
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058fc:	4413      	add	r3, r2
 80058fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	011a      	lsls	r2, r3, #4
 800590e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005910:	4413      	add	r3, r2
 8005912:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005916:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005922:	b29a      	uxth	r2, r3
 8005924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592c:	2b3e      	cmp	r3, #62	@ 0x3e
 800592e:	d921      	bls.n	8005974 <USB_EPStartXfer+0xc40>
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USB_EPStartXfer+0xc1c>
 8005946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800594a:	3b01      	subs	r3, #1
 800594c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29a      	uxth	r2, r3
 8005956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800595a:	b29b      	uxth	r3, r3
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	b29b      	uxth	r3, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e05c      	b.n	8005a2e <USB_EPStartXfer+0xcfa>
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <USB_EPStartXfer+0xc5e>
 800597c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598a:	b29a      	uxth	r2, r3
 800598c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e04d      	b.n	8005a2e <USB_EPStartXfer+0xcfa>
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <USB_EPStartXfer+0xc7e>
 80059a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059bc:	b29b      	uxth	r3, r3
 80059be:	029b      	lsls	r3, r3, #10
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e030      	b.n	8005a2e <USB_EPStartXfer+0xcfa>
 80059cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d128      	bne.n	8005a2e <USB_EPStartXfer+0xcfa>
 80059dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a00:	4413      	add	r3, r2
 8005a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	011a      	lsls	r2, r3, #4
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a18:	4413      	add	r3, r2
 8005a1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	891b      	ldrh	r3, [r3, #8]
 8005a3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6959      	ldr	r1, [r3, #20]
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a5c:	6800      	ldr	r0, [r0, #0]
 8005a5e:	f000 fe58 	bl	8006712 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a88:	817b      	strh	r3, [r7, #10]
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	f083 0310 	eor.w	r3, r3, #16
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	897b      	ldrh	r3, [r7, #10]
 8005a94:	f083 0320 	eor.w	r3, r3, #32
 8005a98:	817b      	strh	r3, [r7, #10]
 8005a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	897b      	ldrh	r3, [r7, #10]
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]
 8005aca:	f000 bcde 	b.w	800648a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	7b1b      	ldrb	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 80bb 	bne.w	8005c56 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d917      	bls.n	8005b2c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1c:	1ad2      	subs	r2, r2, r3
 8005b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	e00e      	b.n	8005b4a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b6e:	4413      	add	r3, r2
 8005b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	011a      	lsls	r2, r3, #4
 8005b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b86:	4413      	add	r3, r2
 8005b88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005baa:	d924      	bls.n	8005bf6 <USB_EPStartXfer+0xec2>
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <USB_EPStartXfer+0xe98>
 8005bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	f000 bc10 	b.w	8006416 <USB_EPStartXfer+0x16e2>
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10c      	bne.n	8005c18 <USB_EPStartXfer+0xee4>
 8005bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e3fe      	b.n	8006416 <USB_EPStartXfer+0x16e2>
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <USB_EPStartXfer+0xf04>
 8005c2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c32:	3301      	adds	r3, #1
 8005c34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e3df      	b.n	8006416 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	78db      	ldrb	r3, [r3, #3]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	f040 8218 	bne.w	8006098 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 809d 	bne.w	8005db4 <USB_EPStartXfer+0x1080>
 8005c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	011a      	lsls	r2, r3, #4
 8005cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ce2:	d92b      	bls.n	8005d3c <USB_EPStartXfer+0x1008>
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <USB_EPStartXfer+0xfe0>
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	029b      	lsls	r3, r3, #10
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4313      	orrs	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e070      	b.n	8005e1e <USB_EPStartXfer+0x10ea>
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10c      	bne.n	8005d66 <USB_EPStartXfer+0x1032>
 8005d4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e05b      	b.n	8005e1e <USB_EPStartXfer+0x10ea>
 8005d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <USB_EPStartXfer+0x1062>
 8005d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d90:	3301      	adds	r3, #1
 8005d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e034      	b.n	8005e1e <USB_EPStartXfer+0x10ea>
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d12c      	bne.n	8005e1e <USB_EPStartXfer+0x10ea>
 8005dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005de8:	4413      	add	r3, r2
 8005dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	011a      	lsls	r2, r3, #4
 8005dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e00:	4413      	add	r3, r2
 8005e02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 809d 	bne.w	8005f78 <USB_EPStartXfer+0x1244>
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e62:	4413      	add	r3, r2
 8005e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	011a      	lsls	r2, r3, #4
 8005e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea6:	d92b      	bls.n	8005f00 <USB_EPStartXfer+0x11cc>
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <USB_EPStartXfer+0x11a4>
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	029b      	lsls	r3, r3, #10
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	4313      	orrs	r3, r2
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e069      	b.n	8005fd4 <USB_EPStartXfer+0x12a0>
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <USB_EPStartXfer+0x11f6>
 8005f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e054      	b.n	8005fd4 <USB_EPStartXfer+0x12a0>
 8005f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <USB_EPStartXfer+0x1226>
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f54:	3301      	adds	r3, #1
 8005f56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	e02d      	b.n	8005fd4 <USB_EPStartXfer+0x12a0>
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d125      	bne.n	8005fd4 <USB_EPStartXfer+0x12a0>
 8005f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	011a      	lsls	r2, r3, #4
 8005fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fd2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8218 	beq.w	8006416 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006006:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800600a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <USB_EPStartXfer+0x12ea>
 8006012:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10d      	bne.n	800603a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800601e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006026:	2b00      	cmp	r3, #0
 8006028:	f040 81f5 	bne.w	8006416 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800602c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 81ee 	bne.w	8006416 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006060:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
 8006096:	e1be      	b.n	8006416 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	78db      	ldrb	r3, [r3, #3]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 81b4 	bne.w	8006412 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d917      	bls.n	80060f6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	619a      	str	r2, [r3, #24]
 80060f4:	e00e      	b.n	8006114 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80060f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f040 8085 	bne.w	8006230 <USB_EPStartXfer+0x14fc>
 8006126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800614a:	4413      	add	r3, r2
 800614c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	011a      	lsls	r2, r3, #4
 800615e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006162:	4413      	add	r3, r2
 8006164:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800616c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006184:	2b3e      	cmp	r3, #62	@ 0x3e
 8006186:	d923      	bls.n	80061d0 <USB_EPStartXfer+0x149c>
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <USB_EPStartXfer+0x1474>
 800619e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a2:	3b01      	subs	r3, #1
 80061a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	029b      	lsls	r3, r3, #10
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	e060      	b.n	8006292 <USB_EPStartXfer+0x155e>
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <USB_EPStartXfer+0x14be>
 80061d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e04f      	b.n	8006292 <USB_EPStartXfer+0x155e>
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <USB_EPStartXfer+0x14de>
 8006208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800620c:	3301      	adds	r3, #1
 800620e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800621e:	b29b      	uxth	r3, r3
 8006220:	029b      	lsls	r3, r3, #10
 8006222:	b29b      	uxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e030      	b.n	8006292 <USB_EPStartXfer+0x155e>
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d128      	bne.n	8006292 <USB_EPStartXfer+0x155e>
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800624e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006264:	4413      	add	r3, r2
 8006266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	011a      	lsls	r2, r3, #4
 8006278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800627c:	4413      	add	r3, r2
 800627e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006282:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 8085 	bne.w	80063bc <USB_EPStartXfer+0x1688>
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062d6:	4413      	add	r3, r2
 80062d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	011a      	lsls	r2, r3, #4
 80062ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062ee:	4413      	add	r3, r2
 80062f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006304:	b29a      	uxth	r2, r3
 8006306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006310:	2b3e      	cmp	r3, #62	@ 0x3e
 8006312:	d923      	bls.n	800635c <USB_EPStartXfer+0x1628>
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <USB_EPStartXfer+0x1600>
 800632a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800632e:	3b01      	subs	r3, #1
 8006330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	e05c      	b.n	8006416 <USB_EPStartXfer+0x16e2>
 800635c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10c      	bne.n	800637e <USB_EPStartXfer+0x164a>
 8006364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006374:	b29a      	uxth	r2, r3
 8006376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	e04b      	b.n	8006416 <USB_EPStartXfer+0x16e2>
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <USB_EPStartXfer+0x166a>
 8006394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006398:	3301      	adds	r3, #1
 800639a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800639e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e02c      	b.n	8006416 <USB_EPStartXfer+0x16e2>
 80063bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d124      	bne.n	8006416 <USB_EPStartXfer+0x16e2>
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063e2:	4413      	add	r3, r2
 80063e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	011a      	lsls	r2, r3, #4
 80063f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006408:	b29a      	uxth	r2, r3
 800640a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	e001      	b.n	8006416 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e03a      	b.n	800648c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006444:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006448:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800644c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006450:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006454:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064be:	81bb      	strh	r3, [r7, #12]
 80064c0:	89bb      	ldrh	r3, [r7, #12]
 80064c2:	f083 0310 	eor.w	r3, r3, #16
 80064c6:	81bb      	strh	r3, [r7, #12]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	89bb      	ldrh	r3, [r7, #12]
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]
 80064e8:	e01f      	b.n	800652a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006500:	81fb      	strh	r3, [r7, #14]
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006508:	81fb      	strh	r3, [r7, #14]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	7b1b      	ldrb	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 809d 	bne.w	8006684 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d04c      	beq.n	80065ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	823b      	strh	r3, [r7, #16]
 8006560:	8a3b      	ldrh	r3, [r7, #16]
 8006562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01b      	beq.n	80065a2 <USB_EPClearStall+0x6c>
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006580:	81fb      	strh	r3, [r7, #14]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	441a      	add	r2, r3
 800658c:	89fb      	ldrh	r3, [r7, #14]
 800658e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800659e:	b29b      	uxth	r3, r3
 80065a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	78db      	ldrb	r3, [r3, #3]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d06c      	beq.n	8006684 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c0:	81bb      	strh	r3, [r7, #12]
 80065c2:	89bb      	ldrh	r3, [r7, #12]
 80065c4:	f083 0320 	eor.w	r3, r3, #32
 80065c8:	81bb      	strh	r3, [r7, #12]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	89bb      	ldrh	r3, [r7, #12]
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
 80065ea:	e04b      	b.n	8006684 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	82fb      	strh	r3, [r7, #22]
 80065fa:	8afb      	ldrh	r3, [r7, #22]
 80065fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01b      	beq.n	800663c <USB_EPClearStall+0x106>
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	82bb      	strh	r3, [r7, #20]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	8abb      	ldrh	r3, [r7, #20]
 8006628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	827b      	strh	r3, [r7, #18]
 8006654:	8a7b      	ldrh	r3, [r7, #18]
 8006656:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800665a:	827b      	strh	r3, [r7, #18]
 800665c:	8a7b      	ldrh	r3, [r7, #18]
 800665e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006662:	827b      	strh	r3, [r7, #18]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	8a7b      	ldrh	r3, [r7, #18]
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800667c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2280      	movs	r2, #128	@ 0x80
 80066a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006712:	b480      	push	{r7}
 8006714:	b08b      	sub	sp, #44	@ 0x2c
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	4611      	mov	r1, r2
 800671e:	461a      	mov	r2, r3
 8006720:	460b      	mov	r3, r1
 8006722:	80fb      	strh	r3, [r7, #6]
 8006724:	4613      	mov	r3, r2
 8006726:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006728:	88bb      	ldrh	r3, [r7, #4]
 800672a:	3301      	adds	r3, #1
 800672c:	085b      	lsrs	r3, r3, #1
 800672e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	005a      	lsls	r2, r3, #1
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006744:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
 800674a:	e01e      	b.n	800678a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3301      	adds	r3, #1
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	b21a      	sxth	r2, r3
 800675c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006760:	4313      	orrs	r3, r2
 8006762:	b21b      	sxth	r3, r3
 8006764:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	8a7a      	ldrh	r2, [r7, #18]
 800676a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	3302      	adds	r3, #2
 8006770:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	3302      	adds	r3, #2
 8006776:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3301      	adds	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3301      	adds	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	3b01      	subs	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1dd      	bne.n	800674c <USB_WritePMA+0x3a>
  }
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	372c      	adds	r7, #44	@ 0x2c
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800679c:	b480      	push	{r7}
 800679e:	b08b      	sub	sp, #44	@ 0x2c
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4611      	mov	r1, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	460b      	mov	r3, r1
 80067ac:	80fb      	strh	r3, [r7, #6]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067b2:	88bb      	ldrh	r3, [r7, #4]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	005a      	lsls	r2, r3, #1
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d4:	e01b      	b.n	800680e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	3302      	adds	r3, #2
 80067e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	3302      	adds	r3, #2
 8006806:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	3b01      	subs	r3, #1
 800680c:	627b      	str	r3, [r7, #36]	@ 0x24
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e0      	bne.n	80067d6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006814:	88bb      	ldrh	r3, [r7, #4]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	701a      	strb	r2, [r3, #0]
  }
}
 8006830:	bf00      	nop
 8006832:	372c      	adds	r7, #44	@ 0x2c
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800684a:	2302      	movs	r3, #2
 800684c:	2203      	movs	r2, #3
 800684e:	2181      	movs	r1, #129	@ 0x81
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fd48 	bl	80082e6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800685c:	2302      	movs	r3, #2
 800685e:	2203      	movs	r2, #3
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fd3f 	bl	80082e6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006870:	2018      	movs	r0, #24
 8006872:	f001 fe4b 	bl	800850c <USBD_static_malloc>
 8006876:	4602      	mov	r2, r0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
 800688c:	e011      	b.n	80068b2 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006894:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	2302      	movs	r3, #2
 80068aa:	2101      	movs	r1, #1
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fe0a 	bl	80084c6 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80068c8:	2181      	movs	r1, #129	@ 0x81
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fd31 	bl	8008332 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80068d6:	2101      	movs	r1, #1
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fd2a 	bl	8008332 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006900:	4618      	mov	r0, r3
 8006902:	f001 fe0f 	bl	8008524 <USBD_static_free>
    pdev->pClassData = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006928:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006942:	2b00      	cmp	r3, #0
 8006944:	d051      	beq.n	80069ea <USBD_CUSTOM_HID_Setup+0xd2>
 8006946:	2b20      	cmp	r3, #32
 8006948:	f040 80d8 	bne.w	8006afc <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	3b02      	subs	r3, #2
 8006952:	2b09      	cmp	r3, #9
 8006954:	d841      	bhi.n	80069da <USBD_CUSTOM_HID_Setup+0xc2>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <USBD_CUSTOM_HID_Setup+0x44>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	080069b5 	.word	0x080069b5
 8006960:	08006993 	.word	0x08006993
 8006964:	080069db 	.word	0x080069db
 8006968:	080069db 	.word	0x080069db
 800696c:	080069db 	.word	0x080069db
 8006970:	080069db 	.word	0x080069db
 8006974:	080069db 	.word	0x080069db
 8006978:	080069c5 	.word	0x080069c5
 800697c:	080069a3 	.word	0x080069a3
 8006980:	08006985 	.word	0x08006985
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	885b      	ldrh	r3, [r3, #2]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	461a      	mov	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	605a      	str	r2, [r3, #4]
          break;
 8006990:	e02a      	b.n	80069e8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	3304      	adds	r3, #4
 8006996:	2201      	movs	r2, #1
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 f998 	bl	8007cd0 <USBD_CtlSendData>
          break;
 80069a0:	e022      	b.n	80069e8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	609a      	str	r2, [r3, #8]
          break;
 80069b2:	e019      	b.n	80069e8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3308      	adds	r3, #8
 80069b8:	2201      	movs	r2, #1
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 f987 	bl	8007cd0 <USBD_CtlSendData>
          break;
 80069c2:	e011      	b.n	80069e8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2201      	movs	r2, #1
 80069c8:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80069ca:	6939      	ldr	r1, [r7, #16]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	88db      	ldrh	r3, [r3, #6]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 f9aa 	bl	8007d2c <USBD_CtlPrepareRx>
          break;
 80069d8:	e006      	b.n	80069e8 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f90d 	bl	8007bfc <USBD_CtlError>
          ret = USBD_FAIL;
 80069e2:	2302      	movs	r3, #2
 80069e4:	75fb      	strb	r3, [r7, #23]
          break;
 80069e6:	bf00      	nop
      }
      break;
 80069e8:	e08f      	b.n	8006b0a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b0b      	cmp	r3, #11
 80069f0:	d87c      	bhi.n	8006aec <USBD_CUSTOM_HID_Setup+0x1d4>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <USBD_CUSTOM_HID_Setup+0xe0>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006aed 	.word	0x08006aed
 8006a00:	08006aed 	.word	0x08006aed
 8006a04:	08006aed 	.word	0x08006aed
 8006a08:	08006aed 	.word	0x08006aed
 8006a0c:	08006aed 	.word	0x08006aed
 8006a10:	08006a51 	.word	0x08006a51
 8006a14:	08006aed 	.word	0x08006aed
 8006a18:	08006aed 	.word	0x08006aed
 8006a1c:	08006aed 	.word	0x08006aed
 8006a20:	08006a9f 	.word	0x08006a9f
 8006a24:	08006ac7 	.word	0x08006ac7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d107      	bne.n	8006a42 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a32:	f107 030e 	add.w	r3, r7, #14
 8006a36:	2202      	movs	r2, #2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f948 	bl	8007cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a40:	e05b      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 f8d9 	bl	8007bfc <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a4e:	e054      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	885b      	ldrh	r3, [r3, #2]
 8006a54:	0a1b      	lsrs	r3, r3, #8
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b22      	cmp	r3, #34	@ 0x22
 8006a5a:	d10b      	bne.n	8006a74 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	2b49      	cmp	r3, #73	@ 0x49
 8006a62:	bf28      	it	cs
 8006a64:	2349      	movcs	r3, #73	@ 0x49
 8006a66:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e00d      	b.n	8006a90 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	885b      	ldrh	r3, [r3, #2]
 8006a78:	0a1b      	lsrs	r3, r3, #8
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b21      	cmp	r3, #33	@ 0x21
 8006a7e:	d107      	bne.n	8006a90 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006a80:	4b24      	ldr	r3, [pc, #144]	@ (8006b14 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8006a82:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	88db      	ldrh	r3, [r3, #6]
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	bf28      	it	cs
 8006a8c:	2309      	movcs	r3, #9
 8006a8e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	461a      	mov	r2, r3
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 f91a 	bl	8007cd0 <USBD_CtlSendData>
          break;
 8006a9c:	e02d      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d107      	bne.n	8006ab8 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	2201      	movs	r2, #1
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f90d 	bl	8007cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab6:	e020      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 f89e 	bl	8007bfc <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac4:	e019      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d106      	bne.n	8006ade <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006adc:	e00d      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 f88b 	bl	8007bfc <USBD_CtlError>
            ret = USBD_FAIL;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aea:	e006      	b.n	8006afa <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 f884 	bl	8007bfc <USBD_CtlError>
          ret = USBD_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	75fb      	strb	r3, [r7, #23]
          break;
 8006af8:	bf00      	nop
      }
      break;
 8006afa:	e006      	b.n	8006b0a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 f87c 	bl	8007bfc <USBD_CtlError>
      ret = USBD_FAIL;
 8006b04:	2302      	movs	r3, #2
 8006b06:	75fb      	strb	r3, [r7, #23]
      break;
 8006b08:	bf00      	nop
  }
  return ret;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	200000c8 	.word	0x200000c8

08006b18 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b2c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d10f      	bne.n	8006b58 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2201      	movs	r2, #1
 8006b44:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	2181      	movs	r1, #129	@ 0x81
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f001 fc97 	bl	8008480 <USBD_LL_Transmit>
 8006b52:	e001      	b.n	8006b58 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2229      	movs	r2, #41	@ 0x29
 8006b70:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8006b72:	4b03      	ldr	r3, [pc, #12]	@ (8006b80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000044 	.word	0x20000044

08006b84 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2229      	movs	r2, #41	@ 0x29
 8006b90:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8006b92:	4b03      	ldr	r3, [pc, #12]	@ (8006ba0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000070 	.word	0x20000070

08006ba4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2229      	movs	r2, #41	@ 0x29
 8006bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	@ (8006bc0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	2000009c 	.word	0x2000009c

08006bc4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr

08006be6 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bf8:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	7810      	ldrb	r0, [r2, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	7852      	ldrb	r2, [r2, #1]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	2302      	movs	r3, #2
 8006c12:	2101      	movs	r1, #1
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fc56 	bl	80084c6 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c32:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d10c      	bne.n	8006c56 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	7810      	ldrb	r0, [r2, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	7852      	ldrb	r2, [r2, #1]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	220a      	movs	r2, #10
 8006c6c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006c6e:	4b03      	ldr	r3, [pc, #12]	@ (8006c7c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	200000d4 	.word	0x200000d4

08006c80 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e01a      	b.n	8006cfa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f001 fa8c 	bl	8008210 <USBD_LL_Init>

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	e001      	b.n	8006d28 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d24:	2302      	movs	r3, #2
 8006d26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fab7 	bl	80082b0 <USBD_LL_Start>

  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	4611      	mov	r1, r2
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	4611      	mov	r1, r2
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fed7 	bl	8007b8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d016      	beq.n	8006e2e <USBD_LL_SetupStage+0x6a>
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d81c      	bhi.n	8006e3e <USBD_LL_SetupStage+0x7a>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <USBD_LL_SetupStage+0x4a>
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d008      	beq.n	8006e1e <USBD_LL_SetupStage+0x5a>
 8006e0c:	e017      	b.n	8006e3e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9ca 	bl	80071b0 <USBD_StdDevReq>
      break;
 8006e1c:	e01a      	b.n	8006e54 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa2c 	bl	8007284 <USBD_StdItfReq>
      break;
 8006e2c:	e012      	b.n	8006e54 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa6c 	bl	8007314 <USBD_StdEPReq>
      break;
 8006e3c:	e00a      	b.n	8006e54 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006e44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 fa8f 	bl	8008370 <USBD_LL_StallEP>
      break;
 8006e52:	bf00      	nop
  }

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	460b      	mov	r3, r1
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d14b      	bne.n	8006f0a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d134      	bne.n	8006eee <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d919      	bls.n	8006ec4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d203      	bcs.n	8006eb2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	e002      	b.n	8006eb8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 ff53 	bl	8007d68 <USBD_CtlContinueRx>
 8006ec2:	e038      	b.n	8006f36 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d105      	bne.n	8006ee6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 ff50 	bl	8007d8c <USBD_CtlSendStatus>
 8006eec:	e023      	b.n	8006f36 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d11e      	bne.n	8006f36 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f00:	2100      	movs	r1, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f001 fa34 	bl	8008370 <USBD_LL_StallEP>
 8006f08:	e015      	b.n	8006f36 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d108      	bne.n	8006f32 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	7afa      	ldrb	r2, [r7, #11]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	4798      	blx	r3
 8006f30:	e001      	b.n	8006f36 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f32:	2302      	movs	r3, #2
 8006f34:	e000      	b.n	8006f38 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d17f      	bne.n	8007054 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3314      	adds	r3, #20
 8006f58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d15c      	bne.n	800701e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d915      	bls.n	8006f9c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 febd 	bl	8007d08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2200      	movs	r2, #0
 8006f92:	2100      	movs	r1, #0
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f001 fa96 	bl	80084c6 <USBD_LL_PrepareReceive>
 8006f9a:	e04e      	b.n	800703a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	6912      	ldr	r2, [r2, #16]
 8006fa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fa8:	fb01 f202 	mul.w	r2, r1, r2
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d11c      	bne.n	8006fec <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d316      	bcc.n	8006fec <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d20f      	bcs.n	8006fec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 fe99 	bl	8007d08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f001 fa6e 	bl	80084c6 <USBD_LL_PrepareReceive>
 8006fea:	e026      	b.n	800703a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d105      	bne.n	800700e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800700e:	2180      	movs	r1, #128	@ 0x80
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 f9ad 	bl	8008370 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fecb 	bl	8007db2 <USBD_CtlReceiveStatus>
 800701c:	e00d      	b.n	800703a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007024:	2b04      	cmp	r3, #4
 8007026:	d004      	beq.n	8007032 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800702e:	2b00      	cmp	r3, #0
 8007030:	d103      	bne.n	800703a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007032:	2180      	movs	r1, #128	@ 0x80
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f001 f99b 	bl	8008370 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d11d      	bne.n	8007080 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff fe81 	bl	8006d4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007052:	e015      	b.n	8007080 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00d      	beq.n	800707c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007066:	2b03      	cmp	r3, #3
 8007068:	d108      	bne.n	800707c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	7afa      	ldrb	r2, [r7, #11]
 8007074:	4611      	mov	r1, r2
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	4798      	blx	r3
 800707a:	e001      	b.n	8007080 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	e000      	b.n	8007082 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007092:	2340      	movs	r3, #64	@ 0x40
 8007094:	2200      	movs	r2, #0
 8007096:	2100      	movs	r1, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 f924 	bl	80082e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2240      	movs	r2, #64	@ 0x40
 80070aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ae:	2340      	movs	r3, #64	@ 0x40
 80070b0:	2200      	movs	r2, #0
 80070b2:	2180      	movs	r1, #128	@ 0x80
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f916 	bl	80082e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2240      	movs	r2, #64	@ 0x40
 80070c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6852      	ldr	r2, [r2, #4]
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	4611      	mov	r1, r2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
  }

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2204      	movs	r2, #4
 8007142:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007160:	2b04      	cmp	r3, #4
 8007162:	d105      	bne.n	8007170 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800718a:	2b03      	cmp	r3, #3
 800718c:	d10b      	bne.n	80071a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071c6:	2b40      	cmp	r3, #64	@ 0x40
 80071c8:	d005      	beq.n	80071d6 <USBD_StdDevReq+0x26>
 80071ca:	2b40      	cmp	r3, #64	@ 0x40
 80071cc:	d84f      	bhi.n	800726e <USBD_StdDevReq+0xbe>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <USBD_StdDevReq+0x36>
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d14b      	bne.n	800726e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      break;
 80071e4:	e048      	b.n	8007278 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d839      	bhi.n	8007262 <USBD_StdDevReq+0xb2>
 80071ee:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <USBD_StdDevReq+0x44>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007245 	.word	0x08007245
 80071f8:	08007259 	.word	0x08007259
 80071fc:	08007263 	.word	0x08007263
 8007200:	0800724f 	.word	0x0800724f
 8007204:	08007263 	.word	0x08007263
 8007208:	08007227 	.word	0x08007227
 800720c:	0800721d 	.word	0x0800721d
 8007210:	08007263 	.word	0x08007263
 8007214:	0800723b 	.word	0x0800723b
 8007218:	08007231 	.word	0x08007231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9dc 	bl	80075dc <USBD_GetDescriptor>
          break;
 8007224:	e022      	b.n	800726c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb3f 	bl	80078ac <USBD_SetAddress>
          break;
 800722e:	e01d      	b.n	800726c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb7e 	bl	8007934 <USBD_SetConfig>
          break;
 8007238:	e018      	b.n	800726c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc07 	bl	8007a50 <USBD_GetConfig>
          break;
 8007242:	e013      	b.n	800726c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fc37 	bl	8007aba <USBD_GetStatus>
          break;
 800724c:	e00e      	b.n	800726c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fc65 	bl	8007b20 <USBD_SetFeature>
          break;
 8007256:	e009      	b.n	800726c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fc74 	bl	8007b48 <USBD_ClrFeature>
          break;
 8007260:	e004      	b.n	800726c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fcc9 	bl	8007bfc <USBD_CtlError>
          break;
 800726a:	bf00      	nop
      }
      break;
 800726c:	e004      	b.n	8007278 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fcc3 	bl	8007bfc <USBD_CtlError>
      break;
 8007276:	bf00      	nop
  }

  return ret;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop

08007284 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d005      	beq.n	80072aa <USBD_StdItfReq+0x26>
 800729e:	2b40      	cmp	r3, #64	@ 0x40
 80072a0:	d82e      	bhi.n	8007300 <USBD_StdItfReq+0x7c>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBD_StdItfReq+0x26>
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d12a      	bne.n	8007300 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b0:	3b01      	subs	r3, #1
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d81d      	bhi.n	80072f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	889b      	ldrh	r3, [r3, #4]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d813      	bhi.n	80072e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	88db      	ldrh	r3, [r3, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d110      	bne.n	80072fc <USBD_StdItfReq+0x78>
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10d      	bne.n	80072fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fd53 	bl	8007d8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072e6:	e009      	b.n	80072fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fc86 	bl	8007bfc <USBD_CtlError>
          break;
 80072f0:	e004      	b.n	80072fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fc81 	bl	8007bfc <USBD_CtlError>
          break;
 80072fa:	e000      	b.n	80072fe <USBD_StdItfReq+0x7a>
          break;
 80072fc:	bf00      	nop
      }
      break;
 80072fe:	e004      	b.n	800730a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fc7a 	bl	8007bfc <USBD_CtlError>
      break;
 8007308:	bf00      	nop
  }

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	889b      	ldrh	r3, [r3, #4]
 8007326:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007330:	2b40      	cmp	r3, #64	@ 0x40
 8007332:	d007      	beq.n	8007344 <USBD_StdEPReq+0x30>
 8007334:	2b40      	cmp	r3, #64	@ 0x40
 8007336:	f200 8146 	bhi.w	80075c6 <USBD_StdEPReq+0x2b2>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <USBD_StdEPReq+0x40>
 800733e:	2b20      	cmp	r3, #32
 8007340:	f040 8141 	bne.w	80075c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
      break;
 8007352:	e13d      	b.n	80075d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800735c:	2b20      	cmp	r3, #32
 800735e:	d10a      	bne.n	8007376 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	e12d      	b.n	80075d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d007      	beq.n	800738e <USBD_StdEPReq+0x7a>
 800737e:	2b03      	cmp	r3, #3
 8007380:	f300 811b 	bgt.w	80075ba <USBD_StdEPReq+0x2a6>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d072      	beq.n	800746e <USBD_StdEPReq+0x15a>
 8007388:	2b01      	cmp	r3, #1
 800738a:	d03a      	beq.n	8007402 <USBD_StdEPReq+0xee>
 800738c:	e115      	b.n	80075ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007394:	2b02      	cmp	r3, #2
 8007396:	d002      	beq.n	800739e <USBD_StdEPReq+0x8a>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d015      	beq.n	80073c8 <USBD_StdEPReq+0xb4>
 800739c:	e02b      	b.n	80073f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00c      	beq.n	80073be <USBD_StdEPReq+0xaa>
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b80      	cmp	r3, #128	@ 0x80
 80073a8:	d009      	beq.n	80073be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 ffde 	bl	8008370 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073b4:	2180      	movs	r1, #128	@ 0x80
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 ffda 	bl	8008370 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073bc:	e020      	b.n	8007400 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fc1b 	bl	8007bfc <USBD_CtlError>
              break;
 80073c6:	e01b      	b.n	8007400 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	885b      	ldrh	r3, [r3, #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10e      	bne.n	80073ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <USBD_StdEPReq+0xda>
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b80      	cmp	r3, #128	@ 0x80
 80073da:	d008      	beq.n	80073ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 ffc1 	bl	8008370 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fccc 	bl	8007d8c <USBD_CtlSendStatus>

              break;
 80073f4:	e004      	b.n	8007400 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fbff 	bl	8007bfc <USBD_CtlError>
              break;
 80073fe:	bf00      	nop
          }
          break;
 8007400:	e0e0      	b.n	80075c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007408:	2b02      	cmp	r3, #2
 800740a:	d002      	beq.n	8007412 <USBD_StdEPReq+0xfe>
 800740c:	2b03      	cmp	r3, #3
 800740e:	d015      	beq.n	800743c <USBD_StdEPReq+0x128>
 8007410:	e026      	b.n	8007460 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <USBD_StdEPReq+0x11e>
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b80      	cmp	r3, #128	@ 0x80
 800741c:	d009      	beq.n	8007432 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 ffa4 	bl	8008370 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007428:	2180      	movs	r1, #128	@ 0x80
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 ffa0 	bl	8008370 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007430:	e01c      	b.n	800746c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fbe1 	bl	8007bfc <USBD_CtlError>
              break;
 800743a:	e017      	b.n	800746c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	885b      	ldrh	r3, [r3, #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d112      	bne.n	800746a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 ffab 	bl	80083ae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fc97 	bl	8007d8c <USBD_CtlSendStatus>
              }
              break;
 800745e:	e004      	b.n	800746a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fbca 	bl	8007bfc <USBD_CtlError>
              break;
 8007468:	e000      	b.n	800746c <USBD_StdEPReq+0x158>
              break;
 800746a:	bf00      	nop
          }
          break;
 800746c:	e0aa      	b.n	80075c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007474:	2b02      	cmp	r3, #2
 8007476:	d002      	beq.n	800747e <USBD_StdEPReq+0x16a>
 8007478:	2b03      	cmp	r3, #3
 800747a:	d032      	beq.n	80074e2 <USBD_StdEPReq+0x1ce>
 800747c:	e097      	b.n	80075ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <USBD_StdEPReq+0x180>
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	2b80      	cmp	r3, #128	@ 0x80
 8007488:	d004      	beq.n	8007494 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fbb5 	bl	8007bfc <USBD_CtlError>
                break;
 8007492:	e091      	b.n	80075b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	da0b      	bge.n	80074b4 <USBD_StdEPReq+0x1a0>
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	3310      	adds	r3, #16
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4413      	add	r3, r2
 80074b0:	3304      	adds	r3, #4
 80074b2:	e00b      	b.n	80074cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	3304      	adds	r3, #4
 80074cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2202      	movs	r2, #2
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fbf8 	bl	8007cd0 <USBD_CtlSendData>
              break;
 80074e0:	e06a      	b.n	80075b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da11      	bge.n	800750e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	f003 020f 	and.w	r2, r3, #15
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3318      	adds	r3, #24
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d117      	bne.n	8007534 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb78 	bl	8007bfc <USBD_CtlError>
                  break;
 800750c:	e054      	b.n	80075b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fb65 	bl	8007bfc <USBD_CtlError>
                  break;
 8007532:	e041      	b.n	80075b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	da0b      	bge.n	8007554 <USBD_StdEPReq+0x240>
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	3310      	adds	r3, #16
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	e00b      	b.n	800756c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <USBD_StdEPReq+0x266>
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b80      	cmp	r3, #128	@ 0x80
 8007578:	d103      	bne.n	8007582 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e00e      	b.n	80075a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 ff30 	bl	80083ec <USBD_LL_IsStallEP>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e002      	b.n	80075a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2202      	movs	r2, #2
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb92 	bl	8007cd0 <USBD_CtlSendData>
              break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fb23 	bl	8007bfc <USBD_CtlError>
              break;
 80075b6:	bf00      	nop
          }
          break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb1d 	bl	8007bfc <USBD_CtlError>
          break;
 80075c2:	bf00      	nop
      }
      break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fb17 	bl	8007bfc <USBD_CtlError>
      break;
 80075ce:	bf00      	nop
  }

  return ret;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	f200 8128 	bhi.w	8007852 <USBD_GetDescriptor+0x276>
 8007602:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <USBD_GetDescriptor+0x2c>)
 8007604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007608:	08007625 	.word	0x08007625
 800760c:	0800763d 	.word	0x0800763d
 8007610:	0800767d 	.word	0x0800767d
 8007614:	08007853 	.word	0x08007853
 8007618:	08007853 	.word	0x08007853
 800761c:	080077f3 	.word	0x080077f3
 8007620:	0800781f 	.word	0x0800781f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7c12      	ldrb	r2, [r2, #16]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	60f8      	str	r0, [r7, #12]
      break;
 800763a:	e112      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	7c1b      	ldrb	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764c:	f107 0208 	add.w	r2, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	2202      	movs	r2, #2
 800765c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800765e:	e100      	b.n	8007862 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	f107 0208 	add.w	r2, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	2202      	movs	r2, #2
 8007678:	701a      	strb	r2, [r3, #0]
      break;
 800767a:	e0f2      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	885b      	ldrh	r3, [r3, #2]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b05      	cmp	r3, #5
 8007684:	f200 80ac 	bhi.w	80077e0 <USBD_GetDescriptor+0x204>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <USBD_GetDescriptor+0xb4>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076dd 	.word	0x080076dd
 8007698:	08007711 	.word	0x08007711
 800769c:	08007745 	.word	0x08007745
 80076a0:	08007779 	.word	0x08007779
 80076a4:	080077ad 	.word	0x080077ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ca:	e091      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa94 	bl	8007bfc <USBD_CtlError>
            err++;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	3301      	adds	r3, #1
 80076d8:	72fb      	strb	r3, [r7, #11]
          break;
 80076da:	e089      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	7c12      	ldrb	r2, [r2, #16]
 80076f4:	f107 0108 	add.w	r1, r7, #8
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
 80076fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fe:	e077      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa7a 	bl	8007bfc <USBD_CtlError>
            err++;
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	3301      	adds	r3, #1
 800770c:	72fb      	strb	r3, [r7, #11]
          break;
 800770e:	e06f      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 0108 	add.w	r1, r7, #8
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007732:	e05d      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fa60 	bl	8007bfc <USBD_CtlError>
            err++;
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	3301      	adds	r3, #1
 8007740:	72fb      	strb	r3, [r7, #11]
          break;
 8007742:	e055      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007766:	e043      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa46 	bl	8007bfc <USBD_CtlError>
            err++;
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	3301      	adds	r3, #1
 8007774:	72fb      	strb	r3, [r7, #11]
          break;
 8007776:	e03b      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7c12      	ldrb	r2, [r2, #16]
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779a:	e029      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa2c 	bl	8007bfc <USBD_CtlError>
            err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
          break;
 80077aa:	e021      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ce:	e00f      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa12 	bl	8007bfc <USBD_CtlError>
            err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
          break;
 80077de:	e007      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa0a 	bl	8007bfc <USBD_CtlError>
          err++;
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	3301      	adds	r3, #1
 80077ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077ee:	e038      	b.n	8007862 <USBD_GetDescriptor+0x286>
 80077f0:	e037      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7c1b      	ldrb	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007802:	f107 0208 	add.w	r2, r7, #8
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
 800780a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800780c:	e029      	b.n	8007862 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f9f3 	bl	8007bfc <USBD_CtlError>
        err++;
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	3301      	adds	r3, #1
 800781a:	72fb      	strb	r3, [r7, #11]
      break;
 800781c:	e021      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7c1b      	ldrb	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782e:	f107 0208 	add.w	r2, r7, #8
 8007832:	4610      	mov	r0, r2
 8007834:	4798      	blx	r3
 8007836:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	2207      	movs	r2, #7
 800783e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007840:	e00f      	b.n	8007862 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9d9 	bl	8007bfc <USBD_CtlError>
        err++;
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	3301      	adds	r3, #1
 800784e:	72fb      	strb	r3, [r7, #11]
      break;
 8007850:	e007      	b.n	8007862 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f9d1 	bl	8007bfc <USBD_CtlError>
      err++;
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	3301      	adds	r3, #1
 800785e:	72fb      	strb	r3, [r7, #11]
      break;
 8007860:	bf00      	nop
  }

  if (err != 0U)
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11c      	bne.n	80078a2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d011      	beq.n	8007892 <USBD_GetDescriptor+0x2b6>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88da      	ldrh	r2, [r3, #6]
 800787a:	893b      	ldrh	r3, [r7, #8]
 800787c:	4293      	cmp	r3, r2
 800787e:	bf28      	it	cs
 8007880:	4613      	movcs	r3, r2
 8007882:	b29b      	uxth	r3, r3
 8007884:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007886:	893b      	ldrh	r3, [r7, #8]
 8007888:	461a      	mov	r2, r3
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa1f 	bl	8007cd0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	88db      	ldrh	r3, [r3, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa76 	bl	8007d8c <USBD_CtlSendStatus>
 80078a0:	e000      	b.n	80078a4 <USBD_GetDescriptor+0x2c8>
    return;
 80078a2:	bf00      	nop
    }
  }
}
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d130      	bne.n	8007920 <USBD_SetAddress+0x74>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d12c      	bne.n	8007920 <USBD_SetAddress+0x74>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80078cc:	d828      	bhi.n	8007920 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d104      	bne.n	80078ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f988 	bl	8007bfc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ec:	e01d      	b.n	800792a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7bfa      	ldrb	r2, [r7, #15]
 80078f2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fda1 	bl	8008442 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa43 	bl	8007d8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007914:	e009      	b.n	800792a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	e004      	b.n	800792a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f96a 	bl	8007bfc <USBD_CtlError>
  }
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	885b      	ldrh	r3, [r3, #2]
 8007942:	b2da      	uxtb	r2, r3
 8007944:	4b41      	ldr	r3, [pc, #260]	@ (8007a4c <USBD_SetConfig+0x118>)
 8007946:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007948:	4b40      	ldr	r3, [pc, #256]	@ (8007a4c <USBD_SetConfig+0x118>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d904      	bls.n	800795a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f952 	bl	8007bfc <USBD_CtlError>
 8007958:	e075      	b.n	8007a46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007960:	2b02      	cmp	r3, #2
 8007962:	d002      	beq.n	800796a <USBD_SetConfig+0x36>
 8007964:	2b03      	cmp	r3, #3
 8007966:	d023      	beq.n	80079b0 <USBD_SetConfig+0x7c>
 8007968:	e062      	b.n	8007a30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800796a:	4b38      	ldr	r3, [pc, #224]	@ (8007a4c <USBD_SetConfig+0x118>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01a      	beq.n	80079a8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007972:	4b36      	ldr	r3, [pc, #216]	@ (8007a4c <USBD_SetConfig+0x118>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2203      	movs	r2, #3
 8007980:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007984:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <USBD_SetConfig+0x118>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff f9e8 	bl	8006d60 <USBD_SetClassConfig>
 8007990:	4603      	mov	r3, r0
 8007992:	2b02      	cmp	r3, #2
 8007994:	d104      	bne.n	80079a0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f92f 	bl	8007bfc <USBD_CtlError>
            return;
 800799e:	e052      	b.n	8007a46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9f3 	bl	8007d8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079a6:	e04e      	b.n	8007a46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9ef 	bl	8007d8c <USBD_CtlSendStatus>
        break;
 80079ae:	e04a      	b.n	8007a46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079b0:	4b26      	ldr	r3, [pc, #152]	@ (8007a4c <USBD_SetConfig+0x118>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d112      	bne.n	80079de <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80079c0:	4b22      	ldr	r3, [pc, #136]	@ (8007a4c <USBD_SetConfig+0x118>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079ca:	4b20      	ldr	r3, [pc, #128]	@ (8007a4c <USBD_SetConfig+0x118>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff f9e4 	bl	8006d9e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9d8 	bl	8007d8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079dc:	e033      	b.n	8007a46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079de:	4b1b      	ldr	r3, [pc, #108]	@ (8007a4c <USBD_SetConfig+0x118>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d01d      	beq.n	8007a28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff f9d2 	bl	8006d9e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079fa:	4b14      	ldr	r3, [pc, #80]	@ (8007a4c <USBD_SetConfig+0x118>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a04:	4b11      	ldr	r3, [pc, #68]	@ (8007a4c <USBD_SetConfig+0x118>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff f9a8 	bl	8006d60 <USBD_SetClassConfig>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d104      	bne.n	8007a20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f8ef 	bl	8007bfc <USBD_CtlError>
            return;
 8007a1e:	e012      	b.n	8007a46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9b3 	bl	8007d8c <USBD_CtlSendStatus>
        break;
 8007a26:	e00e      	b.n	8007a46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f9af 	bl	8007d8c <USBD_CtlSendStatus>
        break;
 8007a2e:	e00a      	b.n	8007a46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f8e2 	bl	8007bfc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a38:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <USBD_SetConfig+0x118>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff f9ad 	bl	8006d9e <USBD_ClrClassConfig>
        break;
 8007a44:	bf00      	nop
    }
  }
}
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200001bc 	.word	0x200001bc

08007a50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	88db      	ldrh	r3, [r3, #6]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d004      	beq.n	8007a6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8c9 	bl	8007bfc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a6a:	e022      	b.n	8007ab2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	dc02      	bgt.n	8007a7c <USBD_GetConfig+0x2c>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc03      	bgt.n	8007a82 <USBD_GetConfig+0x32>
 8007a7a:	e015      	b.n	8007aa8 <USBD_GetConfig+0x58>
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetConfig+0x48>
 8007a80:	e012      	b.n	8007aa8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f91d 	bl	8007cd0 <USBD_CtlSendData>
        break;
 8007a96:	e00c      	b.n	8007ab2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f915 	bl	8007cd0 <USBD_CtlSendData>
        break;
 8007aa6:	e004      	b.n	8007ab2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8a6 	bl	8007bfc <USBD_CtlError>
        break;
 8007ab0:	bf00      	nop
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aca:	3b01      	subs	r3, #1
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d81e      	bhi.n	8007b0e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	88db      	ldrh	r3, [r3, #6]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d004      	beq.n	8007ae2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f88e 	bl	8007bfc <USBD_CtlError>
        break;
 8007ae0:	e01a      	b.n	8007b18 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f043 0202 	orr.w	r2, r3, #2
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	330c      	adds	r3, #12
 8007b02:	2202      	movs	r2, #2
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f8e2 	bl	8007cd0 <USBD_CtlSendData>
      break;
 8007b0c:	e004      	b.n	8007b18 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f873 	bl	8007bfc <USBD_CtlError>
      break;
 8007b16:	bf00      	nop
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d106      	bne.n	8007b40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f926 	bl	8007d8c <USBD_CtlSendStatus>
  }
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d80b      	bhi.n	8007b76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	885b      	ldrh	r3, [r3, #2]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10c      	bne.n	8007b80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f90c 	bl	8007d8c <USBD_CtlSendStatus>
      }
      break;
 8007b74:	e004      	b.n	8007b80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f83f 	bl	8007bfc <USBD_CtlError>
      break;
 8007b7e:	e000      	b.n	8007b82 <USBD_ClrFeature+0x3a>
      break;
 8007b80:	bf00      	nop
  }
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	785a      	ldrb	r2, [r3, #1]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	3303      	adds	r3, #3
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	3305      	adds	r3, #5
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	3306      	adds	r3, #6
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	3307      	adds	r3, #7
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	80da      	strh	r2, [r3, #6]

}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c06:	2180      	movs	r1, #128	@ 0x80
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fbb1 	bl	8008370 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fbad 	bl	8008370 <USBD_LL_StallEP>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d032      	beq.n	8007c9a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f834 	bl	8007ca2 <USBD_GetLen>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	75fa      	strb	r2, [r7, #23]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4413      	add	r3, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	75fa      	strb	r2, [r7, #23]
 8007c60:	461a      	mov	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4413      	add	r3, r2
 8007c66:	2203      	movs	r2, #3
 8007c68:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c6a:	e012      	b.n	8007c92 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	60fa      	str	r2, [r7, #12]
 8007c72:	7dfa      	ldrb	r2, [r7, #23]
 8007c74:	1c51      	adds	r1, r2, #1
 8007c76:	75f9      	strb	r1, [r7, #23]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	75fa      	strb	r2, [r7, #23]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e8      	bne.n	8007c6c <USBD_GetString+0x4e>
    }
  }
}
 8007c9a:	bf00      	nop
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cae:	e005      	b.n	8007cbc <USBD_GetLen+0x1a>
  {
    len++;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f5      	bne.n	8007cb0 <USBD_GetLen+0xe>
  }

  return len;
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr

08007cd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ce6:	88fa      	ldrh	r2, [r7, #6]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cec:	88fa      	ldrh	r2, [r7, #6]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fbc1 	bl	8008480 <USBD_LL_Transmit>

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fbaf 	bl	8008480 <USBD_LL_Transmit>

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d4a:	88fa      	ldrh	r2, [r7, #6]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	2100      	movs	r1, #0
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fbb4 	bl	80084c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fba2 	bl	80084c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2204      	movs	r2, #4
 8007d98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb6c 	bl	8008480 <USBD_LL_Transmit>

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fb7c 	bl	80084c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4912      	ldr	r1, [pc, #72]	@ (8007e28 <MX_USB_DEVICE_Init+0x50>)
 8007de0:	4812      	ldr	r0, [pc, #72]	@ (8007e2c <MX_USB_DEVICE_Init+0x54>)
 8007de2:	f7fe ff63 	bl	8006cac <USBD_Init>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dec:	f7f9 fc0e 	bl	800160c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007df0:	490f      	ldr	r1, [pc, #60]	@ (8007e30 <MX_USB_DEVICE_Init+0x58>)
 8007df2:	480e      	ldr	r0, [pc, #56]	@ (8007e2c <MX_USB_DEVICE_Init+0x54>)
 8007df4:	f7fe ff85 	bl	8006d02 <USBD_RegisterClass>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dfe:	f7f9 fc05 	bl	800160c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007e02:	490c      	ldr	r1, [pc, #48]	@ (8007e34 <MX_USB_DEVICE_Init+0x5c>)
 8007e04:	4809      	ldr	r0, [pc, #36]	@ (8007e2c <MX_USB_DEVICE_Init+0x54>)
 8007e06:	f7fe ff3b 	bl	8006c80 <USBD_CUSTOM_HID_RegisterInterface>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e10:	f7f9 fbfc 	bl	800160c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e14:	4805      	ldr	r0, [pc, #20]	@ (8007e2c <MX_USB_DEVICE_Init+0x54>)
 8007e16:	f7fe ff8d 	bl	8006d34 <USBD_Start>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e20:	f7f9 fbf4 	bl	800160c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e24:	bf00      	nop
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	2000013c 	.word	0x2000013c
 8007e2c:	200001c0 	.word	0x200001c0
 8007e30:	2000000c 	.word	0x2000000c
 8007e34:	2000012c 	.word	0x2000012c

08007e38 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr

08007e46 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007e46:	b480      	push	{r7}
 8007e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007e4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	71fb      	strb	r3, [r7, #7]
 8007e60:	4613      	mov	r3, r2
 8007e62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007e64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr

08007e70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2212      	movs	r2, #18
 8007e80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e82:	4b03      	ldr	r3, [pc, #12]	@ (8007e90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000158 	.word	0x20000158

08007e94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ea6:	4b03      	ldr	r3, [pc, #12]	@ (8007eb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	2000016c 	.word	0x2000016c

08007eb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4907      	ldr	r1, [pc, #28]	@ (8007eec <USBD_FS_ProductStrDescriptor+0x34>)
 8007ece:	4808      	ldr	r0, [pc, #32]	@ (8007ef0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ed0:	f7ff fea5 	bl	8007c1e <USBD_GetString>
 8007ed4:	e004      	b.n	8007ee0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4904      	ldr	r1, [pc, #16]	@ (8007eec <USBD_FS_ProductStrDescriptor+0x34>)
 8007eda:	4805      	ldr	r0, [pc, #20]	@ (8007ef0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007edc:	f7ff fe9f 	bl	8007c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	@ (8007eec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000484 	.word	0x20000484
 8007ef0:	08008614 	.word	0x08008614

08007ef4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	4904      	ldr	r1, [pc, #16]	@ (8007f14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f04:	4804      	ldr	r0, [pc, #16]	@ (8007f18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f06:	f7ff fe8a 	bl	8007c1e <USBD_GetString>
  return USBD_StrDesc;
 8007f0a:	4b02      	ldr	r3, [pc, #8]	@ (8007f14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000484 	.word	0x20000484
 8007f18:	08008634 	.word	0x08008634

08007f1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	221a      	movs	r2, #26
 8007f2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f2e:	f000 f843 	bl	8007fb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f32:	4b02      	ldr	r3, [pc, #8]	@ (8007f3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000170 	.word	0x20000170

08007f40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4907      	ldr	r1, [pc, #28]	@ (8007f74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f56:	4808      	ldr	r0, [pc, #32]	@ (8007f78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f58:	f7ff fe61 	bl	8007c1e <USBD_GetString>
 8007f5c:	e004      	b.n	8007f68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	4904      	ldr	r1, [pc, #16]	@ (8007f74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f62:	4805      	ldr	r0, [pc, #20]	@ (8007f78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f64:	f7ff fe5b 	bl	8007c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f68:	4b02      	ldr	r3, [pc, #8]	@ (8007f74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000484 	.word	0x20000484
 8007f78:	08008648 	.word	0x08008648

08007f7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4907      	ldr	r1, [pc, #28]	@ (8007fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f92:	4808      	ldr	r0, [pc, #32]	@ (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f94:	f7ff fe43 	bl	8007c1e <USBD_GetString>
 8007f98:	e004      	b.n	8007fa4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4904      	ldr	r1, [pc, #16]	@ (8007fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f9e:	4805      	ldr	r0, [pc, #20]	@ (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fa0:	f7ff fe3d 	bl	8007c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fa4:	4b02      	ldr	r3, [pc, #8]	@ (8007fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000484 	.word	0x20000484
 8007fb4:	0800865c 	.word	0x0800865c

08007fb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007ffc <Get_SerialNum+0x44>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008000 <Get_SerialNum+0x48>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fca:	4b0e      	ldr	r3, [pc, #56]	@ (8008004 <Get_SerialNum+0x4c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fde:	2208      	movs	r2, #8
 8007fe0:	4909      	ldr	r1, [pc, #36]	@ (8008008 <Get_SerialNum+0x50>)
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f814 	bl	8008010 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fe8:	2204      	movs	r2, #4
 8007fea:	4908      	ldr	r1, [pc, #32]	@ (800800c <Get_SerialNum+0x54>)
 8007fec:	68b8      	ldr	r0, [r7, #8]
 8007fee:	f000 f80f 	bl	8008010 <IntToUnicode>
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	1ffff7e8 	.word	0x1ffff7e8
 8008000:	1ffff7ec 	.word	0x1ffff7ec
 8008004:	1ffff7f0 	.word	0x1ffff7f0
 8008008:	20000172 	.word	0x20000172
 800800c:	20000182 	.word	0x20000182

08008010 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008022:	2300      	movs	r3, #0
 8008024:	75fb      	strb	r3, [r7, #23]
 8008026:	e027      	b.n	8008078 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	0f1b      	lsrs	r3, r3, #28
 800802c:	2b09      	cmp	r3, #9
 800802e:	d80b      	bhi.n	8008048 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	0f1b      	lsrs	r3, r3, #28
 8008034:	b2da      	uxtb	r2, r3
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	4619      	mov	r1, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	440b      	add	r3, r1
 8008040:	3230      	adds	r2, #48	@ 0x30
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e00a      	b.n	800805e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	440b      	add	r3, r1
 8008058:	3237      	adds	r2, #55	@ 0x37
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	3301      	adds	r3, #1
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	4413      	add	r3, r2
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	3301      	adds	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
 8008078:	7dfa      	ldrb	r2, [r7, #23]
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d3d3      	bcc.n	8008028 <IntToUnicode+0x18>
  }
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	bc80      	pop	{r7}
 800808a:	4770      	bx	lr

0800808c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a0d      	ldr	r2, [pc, #52]	@ (80080d0 <HAL_PCD_MspInit+0x44>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d113      	bne.n	80080c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <HAL_PCD_MspInit+0x48>)
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <HAL_PCD_MspInit+0x48>)
 80080a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080a8:	61d3      	str	r3, [r2, #28]
 80080aa:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <HAL_PCD_MspInit+0x48>)
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80080b6:	2200      	movs	r2, #0
 80080b8:	2100      	movs	r1, #0
 80080ba:	2014      	movs	r0, #20
 80080bc:	f7f9 fc79 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80080c0:	2014      	movs	r0, #20
 80080c2:	f7f9 fc92 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40005c00 	.word	0x40005c00
 80080d4:	40021000 	.word	0x40021000

080080d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fe68 	bl	8006dc4 <USBD_LL_SetupStage>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	440b      	add	r3, r1
 800811c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	4619      	mov	r1, r3
 8008126:	f7fe fe9a 	bl	8006e5e <USBD_LL_DataOutStage>
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	440b      	add	r3, r1
 8008152:	3324      	adds	r3, #36	@ 0x24
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	4619      	mov	r1, r3
 800815a:	f7fe fef1 	bl	8006f40 <USBD_LL_DataInStage>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff f801 	bl	800717c <USBD_LL_SOF>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	799b      	ldrb	r3, [r3, #6]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d001      	beq.n	800819a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008196:	f7f9 fa39 	bl	800160c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081a0:	7bfa      	ldrb	r2, [r7, #15]
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe ffb1 	bl	800710c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ff6a 	bl	800708a <USBD_LL_Reset>
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe ffab 	bl	800712a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7a9b      	ldrb	r3, [r3, #10]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <HAL_PCD_SuspendCallback+0x30>)
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	4a03      	ldr	r2, [pc, #12]	@ (80081f0 <HAL_PCD_SuspendCallback+0x30>)
 80081e2:	f043 0306 	orr.w	r3, r3, #6
 80081e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	e000ed00 	.word	0xe000ed00

080081f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe ffa5 	bl	8007152 <USBD_LL_Resume>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008218:	4a23      	ldr	r2, [pc, #140]	@ (80082a8 <USBD_LL_Init+0x98>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a21      	ldr	r2, [pc, #132]	@ (80082a8 <USBD_LL_Init+0x98>)
 8008224:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008228:	4b1f      	ldr	r3, [pc, #124]	@ (80082a8 <USBD_LL_Init+0x98>)
 800822a:	4a20      	ldr	r2, [pc, #128]	@ (80082ac <USBD_LL_Init+0x9c>)
 800822c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800822e:	4b1e      	ldr	r3, [pc, #120]	@ (80082a8 <USBD_LL_Init+0x98>)
 8008230:	2208      	movs	r2, #8
 8008232:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008234:	4b1c      	ldr	r3, [pc, #112]	@ (80082a8 <USBD_LL_Init+0x98>)
 8008236:	2202      	movs	r2, #2
 8008238:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800823a:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <USBD_LL_Init+0x98>)
 800823c:	2200      	movs	r2, #0
 800823e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008240:	4b19      	ldr	r3, [pc, #100]	@ (80082a8 <USBD_LL_Init+0x98>)
 8008242:	2200      	movs	r2, #0
 8008244:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008246:	4b18      	ldr	r3, [pc, #96]	@ (80082a8 <USBD_LL_Init+0x98>)
 8008248:	2200      	movs	r2, #0
 800824a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800824c:	4816      	ldr	r0, [pc, #88]	@ (80082a8 <USBD_LL_Init+0x98>)
 800824e:	f7f9 fd82 	bl	8001d56 <HAL_PCD_Init>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008258:	f7f9 f9d8 	bl	800160c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008262:	2318      	movs	r3, #24
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	f7fb fa7c 	bl	8003764 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008272:	2358      	movs	r3, #88	@ 0x58
 8008274:	2200      	movs	r2, #0
 8008276:	2180      	movs	r1, #128	@ 0x80
 8008278:	f7fb fa74 	bl	8003764 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008282:	2398      	movs	r3, #152	@ 0x98
 8008284:	2200      	movs	r2, #0
 8008286:	2181      	movs	r1, #129	@ 0x81
 8008288:	f7fb fa6c 	bl	8003764 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008292:	23d8      	movs	r3, #216	@ 0xd8
 8008294:	2200      	movs	r2, #0
 8008296:	2101      	movs	r1, #1
 8008298:	f7fb fa64 	bl	8003764 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000684 	.word	0x20000684
 80082ac:	40005c00 	.word	0x40005c00

080082b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7f9 fe3b 	bl	8001f42 <HAL_PCD_Start>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f93a 	bl	800854c <USBD_Get_USB_Status>
 80082d8:	4603      	mov	r3, r0
 80082da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	4608      	mov	r0, r1
 80082f0:	4611      	mov	r1, r2
 80082f2:	461a      	mov	r2, r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	70fb      	strb	r3, [r7, #3]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70bb      	strb	r3, [r7, #2]
 80082fc:	4613      	mov	r3, r2
 80082fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800830e:	78bb      	ldrb	r3, [r7, #2]
 8008310:	883a      	ldrh	r2, [r7, #0]
 8008312:	78f9      	ldrb	r1, [r7, #3]
 8008314:	f7f9 ff8f 	bl	8002236 <HAL_PCD_EP_Open>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f914 	bl	800854c <USBD_Get_USB_Status>
 8008324:	4603      	mov	r3, r0
 8008326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008328:	7bbb      	ldrb	r3, [r7, #14]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f7f9 ffcd 	bl	80022f0 <HAL_PCD_EP_Close>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f8f5 	bl	800854c <USBD_Get_USB_Status>
 8008362:	4603      	mov	r3, r0
 8008364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008366:	7bbb      	ldrb	r3, [r7, #14]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7fa f85e 	bl	8002450 <HAL_PCD_EP_SetStall>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f8d6 	bl	800854c <USBD_Get_USB_Status>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fa f89f 	bl	8002510 <HAL_PCD_EP_ClrStall>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 f8b7 	bl	800854c <USBD_Get_USB_Status>
 80083de:	4603      	mov	r3, r0
 80083e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008404:	2b00      	cmp	r3, #0
 8008406:	da0b      	bge.n	8008420 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	440b      	add	r3, r1
 800841a:	3312      	adds	r3, #18
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	e00b      	b.n	8008438 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	440b      	add	r3, r1
 8008432:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008436:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr

08008442 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f7f9 fec4 	bl	80021ee <HAL_PCD_SetAddress>
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 f86d 	bl	800854c <USBD_Get_USB_Status>
 8008472:	4603      	mov	r3, r0
 8008474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008476:	7bbb      	ldrb	r3, [r7, #14]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	607a      	str	r2, [r7, #4]
 800848a:	461a      	mov	r2, r3
 800848c:	460b      	mov	r3, r1
 800848e:	72fb      	strb	r3, [r7, #11]
 8008490:	4613      	mov	r3, r2
 8008492:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084a2:	893b      	ldrh	r3, [r7, #8]
 80084a4:	7af9      	ldrb	r1, [r7, #11]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	f7f9 ff9b 	bl	80023e2 <HAL_PCD_EP_Transmit>
 80084ac:	4603      	mov	r3, r0
 80084ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f84a 	bl	800854c <USBD_Get_USB_Status>
 80084b8:	4603      	mov	r3, r0
 80084ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b086      	sub	sp, #24
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	461a      	mov	r2, r3
 80084d2:	460b      	mov	r3, r1
 80084d4:	72fb      	strb	r3, [r7, #11]
 80084d6:	4613      	mov	r3, r2
 80084d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084e8:	893b      	ldrh	r3, [r7, #8]
 80084ea:	7af9      	ldrb	r1, [r7, #11]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	f7f9 ff47 	bl	8002380 <HAL_PCD_EP_Receive>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 f827 	bl	800854c <USBD_Get_USB_Status>
 80084fe:	4603      	mov	r3, r0
 8008500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008502:	7dbb      	ldrb	r3, [r7, #22]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008514:	4b02      	ldr	r3, [pc, #8]	@ (8008520 <USBD_static_malloc+0x14>)
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr
 8008520:	2000095c 	.word	0x2000095c

08008524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr

08008536 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr

0800854c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d817      	bhi.n	8008590 <USBD_Get_USB_Status+0x44>
 8008560:	a201      	add	r2, pc, #4	@ (adr r2, 8008568 <USBD_Get_USB_Status+0x1c>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	08008579 	.word	0x08008579
 800856c:	0800857f 	.word	0x0800857f
 8008570:	08008585 	.word	0x08008585
 8008574:	0800858b 	.word	0x0800858b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	e00b      	b.n	8008596 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800857e:	2302      	movs	r3, #2
 8008580:	73fb      	strb	r3, [r7, #15]
    break;
 8008582:	e008      	b.n	8008596 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008584:	2301      	movs	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	e005      	b.n	8008596 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800858a:	2302      	movs	r3, #2
 800858c:	73fb      	strb	r3, [r7, #15]
    break;
 800858e:	e002      	b.n	8008596 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008590:	2302      	movs	r3, #2
 8008592:	73fb      	strb	r3, [r7, #15]
    break;
 8008594:	bf00      	nop
  }
  return usb_status;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <memset>:
 80085a4:	4603      	mov	r3, r0
 80085a6:	4402      	add	r2, r0
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d100      	bne.n	80085ae <memset+0xa>
 80085ac:	4770      	bx	lr
 80085ae:	f803 1b01 	strb.w	r1, [r3], #1
 80085b2:	e7f9      	b.n	80085a8 <memset+0x4>

080085b4 <__libc_init_array>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	2600      	movs	r6, #0
 80085b8:	4d0c      	ldr	r5, [pc, #48]	@ (80085ec <__libc_init_array+0x38>)
 80085ba:	4c0d      	ldr	r4, [pc, #52]	@ (80085f0 <__libc_init_array+0x3c>)
 80085bc:	1b64      	subs	r4, r4, r5
 80085be:	10a4      	asrs	r4, r4, #2
 80085c0:	42a6      	cmp	r6, r4
 80085c2:	d109      	bne.n	80085d8 <__libc_init_array+0x24>
 80085c4:	f000 f81a 	bl	80085fc <_init>
 80085c8:	2600      	movs	r6, #0
 80085ca:	4d0a      	ldr	r5, [pc, #40]	@ (80085f4 <__libc_init_array+0x40>)
 80085cc:	4c0a      	ldr	r4, [pc, #40]	@ (80085f8 <__libc_init_array+0x44>)
 80085ce:	1b64      	subs	r4, r4, r5
 80085d0:	10a4      	asrs	r4, r4, #2
 80085d2:	42a6      	cmp	r6, r4
 80085d4:	d105      	bne.n	80085e2 <__libc_init_array+0x2e>
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085dc:	4798      	blx	r3
 80085de:	3601      	adds	r6, #1
 80085e0:	e7ee      	b.n	80085c0 <__libc_init_array+0xc>
 80085e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e6:	4798      	blx	r3
 80085e8:	3601      	adds	r6, #1
 80085ea:	e7f2      	b.n	80085d2 <__libc_init_array+0x1e>
 80085ec:	08008698 	.word	0x08008698
 80085f0:	08008698 	.word	0x08008698
 80085f4:	08008698 	.word	0x08008698
 80085f8:	0800869c 	.word	0x0800869c

080085fc <_init>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr

08008608 <_fini>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	bf00      	nop
 800860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860e:	bc08      	pop	{r3}
 8008610:	469e      	mov	lr, r3
 8008612:	4770      	bx	lr
