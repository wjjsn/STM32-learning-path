
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006774  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006888  08006888  00007888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  00008c38  2**0
                  CONTENTS
  4 .ARM          00000008  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c48  08006c48  00008c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c38  20000000  08006c50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000c38  08007888  00008c38  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  08007888  00008e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008c38  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007731  00000000  00000000  00008c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afe  00000000  00000000  00010392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00011e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000651  00000000  00000000  00012700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187e7  00000000  00000000  00012d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5fa  00000000  00000000  0002b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008423c  00000000  00000000  00037b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbd6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c0  00000000  00000000  000bbdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000bef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000c38 	.word	0x20000c38
 800012c:	00000000 	.word	0x00000000
 8000130:	0800686c 	.word	0x0800686c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000c3c 	.word	0x20000c3c
 800014c:	0800686c 	.word	0x0800686c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MPU6050_Init>:
		HAL_Delay(20); // 短延时避免总线冲突
	}
}

void MPU6050_Init()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	//writeRegister(PWR_MGMT_1, 0x80);//重置
	while( readRegister8(PWR_MGMT_1)>>7 )//等待重置完成
 8000b2c:	e003      	b.n	8000b36 <MPU6050_Init+0xe>
	writeRegister(PWR_MGMT_1, 0x01);//关闭睡眠模式，不启用循环模式，不禁用温度传感器，时钟源来自x轴陀螺仪
 8000b2e:	2101      	movs	r1, #1
 8000b30:	206b      	movs	r0, #107	@ 0x6b
 8000b32:	f000 fb0f 	bl	8001154 <writeRegister>
	while( readRegister8(PWR_MGMT_1)>>7 )//等待重置完成
 8000b36:	206b      	movs	r0, #107	@ 0x6b
 8000b38:	f000 fae2 	bl	8001100 <readRegister8>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dbf4      	blt.n	8000b2e <MPU6050_Init+0x6>
	writeRegister(PWR_MGMT_2, 0x00);//不设置唤醒频率，不设置待机
 8000b44:	2100      	movs	r1, #0
 8000b46:	206c      	movs	r0, #108	@ 0x6c
 8000b48:	f000 fb04 	bl	8001154 <writeRegister>
	writeRegister(SMPLRT_DIV, 0x00);//采样率分频：对数据输出速率进行分频（减速）
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2019      	movs	r0, #25
 8000b50:	f000 fb00 	bl	8001154 <writeRegister>
	writeRegister(CONFIG, 0x06);//配置外部同步和低通滤波
 8000b54:	2106      	movs	r1, #6
 8000b56:	201a      	movs	r0, #26
 8000b58:	f000 fafc 	bl	8001154 <writeRegister>
	configGYRO_and_ACCEL(GYRO2000, ACCEL2g);//配置量程
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2018      	movs	r0, #24
 8000b60:	f000 f802 	bl	8000b68 <configGYRO_and_ACCEL>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <configGYRO_and_ACCEL>:

void configGYRO_and_ACCEL(uint8_t GYRO_RANGE, uint8_t ACCEL_RANGE)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	4613      	mov	r3, r2
 8000b76:	71bb      	strb	r3, [r7, #6]
	writeRegister(GYRO_CONFIG, GYRO_RANGE);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	201b      	movs	r0, #27
 8000b7e:	f000 fae9 	bl	8001154 <writeRegister>
	writeRegister(ACCEL_CONFIG, ACCEL_RANGE);
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	4619      	mov	r1, r3
 8000b86:	201c      	movs	r0, #28
 8000b88:	f000 fae4 	bl	8001154 <writeRegister>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <getMPU6050RAWData>:

MPU6050_Data_framework getMPU6050RAWData()
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	MPU6050_Data_framework MPU6050_Data;
	MPU6050_Data.ACCEL_XOUT = readRegister8(ACCEL_XOUT_H)<<8 | readRegister8(ACCEL_XOUT_L);
 8000b9c:	203b      	movs	r0, #59	@ 0x3b
 8000b9e:	f000 faaf 	bl	8001100 <readRegister8>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	b21c      	sxth	r4, r3
 8000ba8:	203c      	movs	r0, #60	@ 0x3c
 8000baa:	f000 faa9 	bl	8001100 <readRegister8>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	813b      	strh	r3, [r7, #8]
	MPU6050_Data.ACCEL_YOUT = readRegister8(ACCEL_YOUT_H)<<8 | readRegister8(ACCEL_YOUT_L);
 8000bb8:	203d      	movs	r0, #61	@ 0x3d
 8000bba:	f000 faa1 	bl	8001100 <readRegister8>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21c      	sxth	r4, r3
 8000bc4:	203e      	movs	r0, #62	@ 0x3e
 8000bc6:	f000 fa9b 	bl	8001100 <readRegister8>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	817b      	strh	r3, [r7, #10]
	MPU6050_Data.ACCEL_ZOUT = readRegister8(ACCEL_ZOUT_H)<<8 | readRegister8(ACCEL_ZOUT_L);
 8000bd4:	203f      	movs	r0, #63	@ 0x3f
 8000bd6:	f000 fa93 	bl	8001100 <readRegister8>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21c      	sxth	r4, r3
 8000be0:	2040      	movs	r0, #64	@ 0x40
 8000be2:	f000 fa8d 	bl	8001100 <readRegister8>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4323      	orrs	r3, r4
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	81bb      	strh	r3, [r7, #12]
	MPU6050_Data.GYRO_XOUT = readRegister8(GYRO_XOUT_H)<<8 | readRegister8(GYRO_XOUT_L);
 8000bf0:	2043      	movs	r0, #67	@ 0x43
 8000bf2:	f000 fa85 	bl	8001100 <readRegister8>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21c      	sxth	r4, r3
 8000bfc:	2044      	movs	r0, #68	@ 0x44
 8000bfe:	f000 fa7f 	bl	8001100 <readRegister8>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4323      	orrs	r3, r4
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	81fb      	strh	r3, [r7, #14]
	MPU6050_Data.GYRO_YOUT = readRegister8(GYRO_YOUT_H)<<8 | readRegister8(GYRO_YOUT_L);
 8000c0c:	2045      	movs	r0, #69	@ 0x45
 8000c0e:	f000 fa77 	bl	8001100 <readRegister8>
 8000c12:	4603      	mov	r3, r0
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	b21c      	sxth	r4, r3
 8000c18:	2046      	movs	r0, #70	@ 0x46
 8000c1a:	f000 fa71 	bl	8001100 <readRegister8>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4323      	orrs	r3, r4
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	823b      	strh	r3, [r7, #16]
	MPU6050_Data.GYRO_ZOUT = readRegister8(GYRO_ZOUT_H)<<8 | readRegister8(GYRO_ZOUT_L);
 8000c28:	2047      	movs	r0, #71	@ 0x47
 8000c2a:	f000 fa69 	bl	8001100 <readRegister8>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21c      	sxth	r4, r3
 8000c34:	2048      	movs	r0, #72	@ 0x48
 8000c36:	f000 fa63 	bl	8001100 <readRegister8>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	827b      	strh	r3, [r7, #18]
	MPU6050_Data.Temperature = readRegister8(TEMP_OUT_H)<<8 | readRegister8(TEMP_OUT_L);
 8000c44:	2041      	movs	r0, #65	@ 0x41
 8000c46:	f000 fa5b 	bl	8001100 <readRegister8>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b21c      	sxth	r4, r3
 8000c50:	2042      	movs	r0, #66	@ 0x42
 8000c52:	f000 fa55 	bl	8001100 <readRegister8>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4323      	orrs	r3, r4
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	82bb      	strh	r3, [r7, #20]
	return MPU6050_Data;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	461c      	mov	r4, r3
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c6a:	6020      	str	r0, [r4, #0]
 8000c6c:	6061      	str	r1, [r4, #4]
 8000c6e:	60a2      	str	r2, [r4, #8]
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	81a3      	strh	r3, [r4, #12]
}
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	0000      	movs	r0, r0
	...

08000c80 <getMPU6050WorkedData>:

MPU6050_float_Data_framework getMPU6050WorkedData()
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b08e      	sub	sp, #56	@ 0x38
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	MPU6050_Data_framework MPU6050_RAW_Data_result = getMPU6050RAWData();
 8000c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff81 	bl	8000b94 <getMPU6050RAWData>
	MPU6050_float_Data_framework MPU6050_Worked_Data;
	uint8_t GYRO_RANGE = ( readRegister8(GYRO_CONFIG) & 0x18 ) >>3;
 8000c92:	201b      	movs	r0, #27
 8000c94:	f000 fa34 	bl	8001100 <readRegister8>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	10db      	asrs	r3, r3, #3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t ACCEL_RANGE = ( readRegister8(ACCEL_CONFIG) & 0x18 ) >>3;
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f000 fa2a 	bl	8001100 <readRegister8>
 8000cac:	4603      	mov	r3, r0
 8000cae:	10db      	asrs	r3, r3, #3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	switch(GYRO_RANGE)//根据量程计算
 8000cba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	f200 80e8 	bhi.w	8000e94 <getMPU6050WorkedData+0x214>
 8000cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ccc <getMPU6050WorkedData+0x4c>)
 8000cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cca:	bf00      	nop
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000d4b 	.word	0x08000d4b
 8000cd4:	08000db9 	.word	0x08000db9
 8000cd8:	08000e27 	.word	0x08000e27
	{
	case 0:	MPU6050_Worked_Data.GYRO_XOUT = MPU6050_RAW_Data_result.GYRO_XOUT / 131.07;//250量程，量程计算公式为：32768（int16总共有32768*2个数，因为量程是250+-，所以除以2再除以正的量程所得到的就是一个LSB对应的实际物理量值）/250
 8000cdc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fb8f 	bl	8000404 <__aeabi_i2d>
 8000ce6:	a3c6      	add	r3, pc, #792	@ (adr r3, 8001000 <getMPU6050WorkedData+0x380>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fd1e 	bl	800072c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fec6 	bl	8000a88 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	61bb      	str	r3, [r7, #24]
			MPU6050_Worked_Data.GYRO_YOUT = MPU6050_RAW_Data_result.GYRO_YOUT / 131.07;
 8000d00:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fb7d 	bl	8000404 <__aeabi_i2d>
 8000d0a:	a3bd      	add	r3, pc, #756	@ (adr r3, 8001000 <getMPU6050WorkedData+0x380>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fd0c 	bl	800072c <__aeabi_ddiv>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff feb4 	bl	8000a88 <__aeabi_d2f>
 8000d20:	4603      	mov	r3, r0
 8000d22:	61fb      	str	r3, [r7, #28]
			MPU6050_Worked_Data.GYRO_ZOUT = MPU6050_RAW_Data_result.GYRO_ZOUT / 131.07;break;
 8000d24:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb6b 	bl	8000404 <__aeabi_i2d>
 8000d2e:	a3b4      	add	r3, pc, #720	@ (adr r3, 8001000 <getMPU6050WorkedData+0x380>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff fcfa 	bl	800072c <__aeabi_ddiv>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff fea2 	bl	8000a88 <__aeabi_d2f>
 8000d44:	4603      	mov	r3, r0
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	e0a4      	b.n	8000e94 <getMPU6050WorkedData+0x214>
	case 1:	MPU6050_Worked_Data.GYRO_XOUT = MPU6050_RAW_Data_result.GYRO_XOUT / 65.536;
 8000d4a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb58 	bl	8000404 <__aeabi_i2d>
 8000d54:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001008 <getMPU6050WorkedData+0x388>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	f7ff fce7 	bl	800072c <__aeabi_ddiv>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fe8f 	bl	8000a88 <__aeabi_d2f>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	61bb      	str	r3, [r7, #24]
			MPU6050_Worked_Data.GYRO_YOUT = MPU6050_RAW_Data_result.GYRO_YOUT / 65.536;
 8000d6e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fb46 	bl	8000404 <__aeabi_i2d>
 8000d78:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001008 <getMPU6050WorkedData+0x388>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fcd5 	bl	800072c <__aeabi_ddiv>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fe7d 	bl	8000a88 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	61fb      	str	r3, [r7, #28]
			MPU6050_Worked_Data.GYRO_ZOUT = MPU6050_RAW_Data_result.GYRO_ZOUT / 65.536;break;
 8000d92:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fb34 	bl	8000404 <__aeabi_i2d>
 8000d9c:	a39a      	add	r3, pc, #616	@ (adr r3, 8001008 <getMPU6050WorkedData+0x388>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fcc3 	bl	800072c <__aeabi_ddiv>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	f7ff fe6b 	bl	8000a88 <__aeabi_d2f>
 8000db2:	4603      	mov	r3, r0
 8000db4:	623b      	str	r3, [r7, #32]
 8000db6:	e06d      	b.n	8000e94 <getMPU6050WorkedData+0x214>
	case 2:	MPU6050_Worked_Data.GYRO_XOUT = MPU6050_RAW_Data_result.GYRO_XOUT / 32.768;
 8000db8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fb21 	bl	8000404 <__aeabi_i2d>
 8000dc2:	a393      	add	r3, pc, #588	@ (adr r3, 8001010 <getMPU6050WorkedData+0x390>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fcb0 	bl	800072c <__aeabi_ddiv>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f7ff fe58 	bl	8000a88 <__aeabi_d2f>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	61bb      	str	r3, [r7, #24]
			MPU6050_Worked_Data.GYRO_YOUT = MPU6050_RAW_Data_result.GYRO_YOUT / 32.768;
 8000ddc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fb0f 	bl	8000404 <__aeabi_i2d>
 8000de6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001010 <getMPU6050WorkedData+0x390>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fc9e 	bl	800072c <__aeabi_ddiv>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fe46 	bl	8000a88 <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	61fb      	str	r3, [r7, #28]
			MPU6050_Worked_Data.GYRO_ZOUT = MPU6050_RAW_Data_result.GYRO_ZOUT / 32.768;break;
 8000e00:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fafd 	bl	8000404 <__aeabi_i2d>
 8000e0a:	a381      	add	r3, pc, #516	@ (adr r3, 8001010 <getMPU6050WorkedData+0x390>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fc8c 	bl	800072c <__aeabi_ddiv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fe34 	bl	8000a88 <__aeabi_d2f>
 8000e20:	4603      	mov	r3, r0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	e036      	b.n	8000e94 <getMPU6050WorkedData+0x214>
	case 3:	MPU6050_Worked_Data.GYRO_XOUT = MPU6050_RAW_Data_result.GYRO_XOUT / 16.384;
 8000e26:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff faea 	bl	8000404 <__aeabi_i2d>
 8000e30:	a379      	add	r3, pc, #484	@ (adr r3, 8001018 <getMPU6050WorkedData+0x398>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fc79 	bl	800072c <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fe21 	bl	8000a88 <__aeabi_d2f>
 8000e46:	4603      	mov	r3, r0
 8000e48:	61bb      	str	r3, [r7, #24]
			MPU6050_Worked_Data.GYRO_YOUT = MPU6050_RAW_Data_result.GYRO_YOUT / 16.384;
 8000e4a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad8 	bl	8000404 <__aeabi_i2d>
 8000e54:	a370      	add	r3, pc, #448	@ (adr r3, 8001018 <getMPU6050WorkedData+0x398>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff fc67 	bl	800072c <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fe0f 	bl	8000a88 <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	61fb      	str	r3, [r7, #28]
			MPU6050_Worked_Data.GYRO_ZOUT = MPU6050_RAW_Data_result.GYRO_ZOUT / 16.384;break;
 8000e6e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fac6 	bl	8000404 <__aeabi_i2d>
 8000e78:	a367      	add	r3, pc, #412	@ (adr r3, 8001018 <getMPU6050WorkedData+0x398>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fc55 	bl	800072c <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fdfd 	bl	8000a88 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	623b      	str	r3, [r7, #32]
 8000e92:	bf00      	nop
	}
	switch(ACCEL_RANGE)
 8000e94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	f200 80fe 	bhi.w	800109a <getMPU6050WorkedData+0x41a>
 8000e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <getMPU6050WorkedData+0x224>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000f91 	.word	0x08000f91
 8000eb0:	0800102d 	.word	0x0800102d
	{
	case 0:	MPU6050_Worked_Data.ACCEL_XOUT = MPU6050_RAW_Data_result.ACCEL_XOUT / 16384.0;
 8000eb4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa3 	bl	8000404 <__aeabi_i2d>
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b57      	ldr	r3, [pc, #348]	@ (8001020 <getMPU6050WorkedData+0x3a0>)
 8000ec4:	f7ff fc32 	bl	800072c <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fdda 	bl	8000a88 <__aeabi_d2f>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60fb      	str	r3, [r7, #12]
			MPU6050_Worked_Data.ACCEL_YOUT = MPU6050_RAW_Data_result.ACCEL_YOUT / 16384.0;
 8000ed8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fa91 	bl	8000404 <__aeabi_i2d>
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <getMPU6050WorkedData+0x3a0>)
 8000ee8:	f7ff fc20 	bl	800072c <__aeabi_ddiv>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fdc8 	bl	8000a88 <__aeabi_d2f>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	613b      	str	r3, [r7, #16]
			MPU6050_Worked_Data.ACCEL_ZOUT = MPU6050_RAW_Data_result.ACCEL_ZOUT / 16384.0;break;
 8000efc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fa7f 	bl	8000404 <__aeabi_i2d>
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <getMPU6050WorkedData+0x3a0>)
 8000f0c:	f7ff fc0e 	bl	800072c <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff fdb6 	bl	8000a88 <__aeabi_d2f>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e0bb      	b.n	800109a <getMPU6050WorkedData+0x41a>
	case 1:	MPU6050_Worked_Data.ACCEL_XOUT = MPU6050_RAW_Data_result.ACCEL_XOUT / 8192.0;
 8000f22:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6c 	bl	8000404 <__aeabi_i2d>
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b3c      	ldr	r3, [pc, #240]	@ (8001024 <getMPU6050WorkedData+0x3a4>)
 8000f32:	f7ff fbfb 	bl	800072c <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fda3 	bl	8000a88 <__aeabi_d2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	60fb      	str	r3, [r7, #12]
			MPU6050_Worked_Data.ACCEL_YOUT = MPU6050_RAW_Data_result.ACCEL_YOUT / 8192.0;
 8000f46:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fa5a 	bl	8000404 <__aeabi_i2d>
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b33      	ldr	r3, [pc, #204]	@ (8001024 <getMPU6050WorkedData+0x3a4>)
 8000f56:	f7ff fbe9 	bl	800072c <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fd91 	bl	8000a88 <__aeabi_d2f>
 8000f66:	4603      	mov	r3, r0
 8000f68:	613b      	str	r3, [r7, #16]
			MPU6050_Worked_Data.ACCEL_ZOUT = MPU6050_RAW_Data_result.ACCEL_ZOUT / 8192.0;break;
 8000f6a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa48 	bl	8000404 <__aeabi_i2d>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <getMPU6050WorkedData+0x3a4>)
 8000f7a:	f7ff fbd7 	bl	800072c <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f7ff fd7f 	bl	8000a88 <__aeabi_d2f>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e084      	b.n	800109a <getMPU6050WorkedData+0x41a>
	case 2:	MPU6050_Worked_Data.ACCEL_XOUT = MPU6050_RAW_Data_result.ACCEL_XOUT / 4096.0;
 8000f90:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa35 	bl	8000404 <__aeabi_i2d>
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <getMPU6050WorkedData+0x3a8>)
 8000fa0:	f7ff fbc4 	bl	800072c <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fd6c 	bl	8000a88 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
			MPU6050_Worked_Data.ACCEL_YOUT = MPU6050_RAW_Data_result.ACCEL_YOUT / 4096.0;
 8000fb4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fa23 	bl	8000404 <__aeabi_i2d>
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <getMPU6050WorkedData+0x3a8>)
 8000fc4:	f7ff fbb2 	bl	800072c <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fd5a 	bl	8000a88 <__aeabi_d2f>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	613b      	str	r3, [r7, #16]
			MPU6050_Worked_Data.ACCEL_ZOUT = MPU6050_RAW_Data_result.ACCEL_ZOUT / 4096.0;break;
 8000fd8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa11 	bl	8000404 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <getMPU6050WorkedData+0x3a8>)
 8000fe8:	f7ff fba0 	bl	800072c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd48 	bl	8000a88 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e04d      	b.n	800109a <getMPU6050WorkedData+0x41a>
 8000ffe:	bf00      	nop
 8001000:	70a3d70a 	.word	0x70a3d70a
 8001004:	4060623d 	.word	0x4060623d
 8001008:	d2f1a9fc 	.word	0xd2f1a9fc
 800100c:	4050624d 	.word	0x4050624d
 8001010:	d2f1a9fc 	.word	0xd2f1a9fc
 8001014:	4040624d 	.word	0x4040624d
 8001018:	d2f1a9fc 	.word	0xd2f1a9fc
 800101c:	4030624d 	.word	0x4030624d
 8001020:	40d00000 	.word	0x40d00000
 8001024:	40c00000 	.word	0x40c00000
 8001028:	40b00000 	.word	0x40b00000
	case 3:	MPU6050_Worked_Data.ACCEL_XOUT = MPU6050_RAW_Data_result.ACCEL_XOUT / 2048.0;
 800102c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f9e7 	bl	8000404 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <getMPU6050WorkedData+0x478>)
 800103c:	f7ff fb76 	bl	800072c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fd1e 	bl	8000a88 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	60fb      	str	r3, [r7, #12]
			MPU6050_Worked_Data.ACCEL_YOUT = MPU6050_RAW_Data_result.ACCEL_YOUT / 2048.0;
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f9d5 	bl	8000404 <__aeabi_i2d>
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <getMPU6050WorkedData+0x478>)
 8001060:	f7ff fb64 	bl	800072c <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd0c 	bl	8000a88 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	613b      	str	r3, [r7, #16]
			MPU6050_Worked_Data.ACCEL_ZOUT = MPU6050_RAW_Data_result.ACCEL_ZOUT / 2048.0;break;
 8001074:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f9c3 	bl	8000404 <__aeabi_i2d>
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <getMPU6050WorkedData+0x478>)
 8001084:	f7ff fb52 	bl	800072c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fcfa 	bl	8000a88 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	bf00      	nop
	}
	MPU6050_Worked_Data.Temperature = 36.53 + MPU6050_RAW_Data_result.Temperature/340.0;
 800109a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9b0 	bl	8000404 <__aeabi_i2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <getMPU6050WorkedData+0x47c>)
 80010aa:	f7ff fb3f 	bl	800072c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80010f0 <getMPU6050WorkedData+0x470>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f856 	bl	800016c <__adddf3>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fcde 	bl	8000a88 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
	return MPU6050_Worked_Data;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	461d      	mov	r5, r3
 80010d4:	f107 040c 	add.w	r4, r7, #12
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	3738      	adds	r7, #56	@ 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bdb0      	pop	{r4, r5, r7, pc}
 80010ec:	f3af 8000 	nop.w
 80010f0:	0a3d70a4 	.word	0x0a3d70a4
 80010f4:	404243d7 	.word	0x404243d7
 80010f8:	40a00000 	.word	0x40a00000
 80010fc:	40754000 	.word	0x40754000

08001100 <readRegister8>:

uint8_t readRegister8(uint8_t reg)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af04      	add	r7, sp, #16
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	uint8_t readedBuffer=0;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2CADDR, reg, I2C_MEMADD_SIZE_8BIT, &readedBuffer, 1, HAL_MAX_DELAY);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	b29a      	uxth	r2, r3
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 030f 	add.w	r3, r7, #15
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	21d0      	movs	r1, #208	@ 0xd0
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <readRegister8+0x4c>)
 8001128:	f001 faa8 	bl	800267c <HAL_I2C_Mem_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <readRegister8+0x50>)
 8001132:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return 1;}
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <readRegister8+0x50>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <readRegister8+0x40>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <readRegister8+0x42>
	return readedBuffer;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000c54 	.word	0x20000c54
 8001150:	20000ca8 	.word	0x20000ca8

08001154 <writeRegister>:

void writeRegister(uint8_t reg, uint8_t value)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af04      	add	r7, sp, #16
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
	if( readRegister8(PWR_MGMT_1)>>6 & 1 )//检测sleep位是否为1，若是则清零
 8001164:	206b      	movs	r0, #107	@ 0x6b
 8001166:	f7ff ffcb 	bl	8001100 <readRegister8>
 800116a:	4603      	mov	r3, r0
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01d      	beq.n	80011b4 <writeRegister+0x60>
	{
		uint8_t value = readRegister8(PWR_MGMT_1) & 0xBF;//sleep位为bit6
 8001178:	206b      	movs	r0, #107	@ 0x6b
 800117a:	f7ff ffc1 	bl	8001100 <readRegister8>
 800117e:	4603      	mov	r3, r0
 8001180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001184:	b2db      	uxtb	r3, r3
 8001186:	73fb      	strb	r3, [r7, #15]
		status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2CADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);//清除sleep位
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030f 	add.w	r3, r7, #15
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	226b      	movs	r2, #107	@ 0x6b
 800119c:	21d0      	movs	r1, #208	@ 0xd0
 800119e:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <writeRegister+0x94>)
 80011a0:	f001 f972 	bl	8002488 <HAL_I2C_Mem_Write>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <writeRegister+0x98>)
 80011aa:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <writeRegister+0x98>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d115      	bne.n	80011e0 <writeRegister+0x8c>
	}
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2CADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);//开始写入目标寄存器
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	1dbb      	adds	r3, r7, #6
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	21d0      	movs	r1, #208	@ 0xd0
 80011ca:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <writeRegister+0x94>)
 80011cc:	f001 f95c 	bl	8002488 <HAL_I2C_Mem_Write>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <writeRegister+0x98>)
 80011d6:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return;}
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <writeRegister+0x98>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	e000      	b.n	80011e2 <writeRegister+0x8e>
		if (status != HAL_OK){return;}
 80011e0:	bf00      	nop

}
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000c54 	.word	0x20000c54
 80011ec:	20000ca8 	.word	0x20000ca8

080011f0 <OLED_WriteCommand>:
#define OLED_CHN_CHAR_WIDTH 3



void OLED_WriteCommand(uint8_t cmd)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 8001202:	f107 020c 	add.w	r2, r7, #12
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2302      	movs	r3, #2
 800120e:	2178      	movs	r1, #120	@ 0x78
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <OLED_WriteCommand+0x30>)
 8001212:	f001 f83b 	bl	800228c <HAL_I2C_Master_Transmit>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000c54 	.word	0x20000c54

08001224 <OLED_WriteData>:

void OLED_WriteData(uint8_t dat)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x40;
 800122e:	2340      	movs	r3, #64	@ 0x40
 8001230:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=dat;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2302      	movs	r3, #2
 8001242:	2178      	movs	r1, #120	@ 0x78
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <OLED_WriteData+0x30>)
 8001246:	f001 f821 	bl	800228c <HAL_I2C_Master_Transmit>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000c54 	.word	0x20000c54

08001258 <OLED_SetCursor>:

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffbd 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffb4 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffad 	bl	80011f0 <OLED_WriteCommand>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <OLED_init>:

void OLED_init(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f000 fc22 	bl	8001aec <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 80012a8:	20ae      	movs	r0, #174	@ 0xae
 80012aa:	f7ff ffa1 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80012ae:	20d5      	movs	r0, #213	@ 0xd5
 80012b0:	f7ff ff9e 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 80012b4:	2080      	movs	r0, #128	@ 0x80
 80012b6:	f7ff ff9b 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 80012ba:	20a8      	movs	r0, #168	@ 0xa8
 80012bc:	f7ff ff98 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 80012c0:	203f      	movs	r0, #63	@ 0x3f
 80012c2:	f7ff ff95 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 80012c6:	20d3      	movs	r0, #211	@ 0xd3
 80012c8:	f7ff ff92 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ff8f 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 80012d2:	2040      	movs	r0, #64	@ 0x40
 80012d4:	f7ff ff8c 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 80012d8:	20a1      	movs	r0, #161	@ 0xa1
 80012da:	f7ff ff89 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 80012de:	20c8      	movs	r0, #200	@ 0xc8
 80012e0:	f7ff ff86 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 80012e4:	20da      	movs	r0, #218	@ 0xda
 80012e6:	f7ff ff83 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 80012ea:	2012      	movs	r0, #18
 80012ec:	f7ff ff80 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 80012f0:	2081      	movs	r0, #129	@ 0x81
 80012f2:	f7ff ff7d 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 80012f6:	20cf      	movs	r0, #207	@ 0xcf
 80012f8:	f7ff ff7a 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 80012fc:	20d9      	movs	r0, #217	@ 0xd9
 80012fe:	f7ff ff77 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8001302:	20f1      	movs	r0, #241	@ 0xf1
 8001304:	f7ff ff74 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8001308:	20db      	movs	r0, #219	@ 0xdb
 800130a:	f7ff ff71 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800130e:	2030      	movs	r0, #48	@ 0x30
 8001310:	f7ff ff6e 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8001314:	20a4      	movs	r0, #164	@ 0xa4
 8001316:	f7ff ff6b 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 800131a:	20a6      	movs	r0, #166	@ 0xa6
 800131c:	f7ff ff68 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8001320:	208d      	movs	r0, #141	@ 0x8d
 8001322:	f7ff ff65 	bl	80011f0 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8001326:	2014      	movs	r0, #20
 8001328:	f7ff ff62 	bl	80011f0 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800132c:	20af      	movs	r0, #175	@ 0xaf
 800132e:	f7ff ff5f 	bl	80011f0 <OLED_WriteCommand>
	OLED_chear();
 8001332:	f000 f802 	bl	800133a <OLED_chear>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}

0800133a <OLED_chear>:

void OLED_chear(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	e014      	b.n	8001370 <OLED_chear+0x36>
	{
		OLED_SetCursor(i, 0);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff83 	bl	8001258 <OLED_SetCursor>
		for (int j = 0; j < 128; ++j)
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	e005      	b.n	8001364 <OLED_chear+0x2a>
		{
			OLED_WriteData(0x00);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff ff63 	bl	8001224 <OLED_WriteData>
		for (int j = 0; j < 128; ++j)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b7f      	cmp	r3, #127	@ 0x7f
 8001368:	ddf6      	ble.n	8001358 <OLED_chear+0x1e>
	for (int i = 0; i < 8; ++i)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b07      	cmp	r3, #7
 8001374:	dde7      	ble.n	8001346 <OLED_chear+0xc>
		}
	}
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <OLED_showChar>:

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	4604      	mov	r4, r0
 8001388:	4608      	mov	r0, r1
 800138a:	4611      	mov	r1, r2
 800138c:	461a      	mov	r2, r3
 800138e:	4623      	mov	r3, r4
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	4603      	mov	r3, r0
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	460b      	mov	r3, r1
 8001398:	717b      	strb	r3, [r7, #5]
 800139a:	4613      	mov	r3, r2
 800139c:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 800139e:	79ba      	ldrb	r2, [r7, #6]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff57 	bl	8001258 <OLED_SetCursor>
	if (fontSize == 8)
 80013aa:	793b      	ldrb	r3, [r7, #4]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d134      	bne.n	800141a <OLED_showChar+0x9a>
	{
		for (int i = 0; i < fontSize; ++i)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00d      	b.n	80013d2 <OLED_showChar+0x52>
		{
			OLED_WriteData(EN8_16[ a - ' ' ][i]);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	3b20      	subs	r3, #32
 80013ba:	4a39      	ldr	r2, [pc, #228]	@ (80014a0 <OLED_showChar+0x120>)
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	441a      	add	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff2c 	bl	8001224 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	793b      	ldrb	r3, [r7, #4]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbed      	blt.n	80013b6 <OLED_showChar+0x36>
		}
		OLED_SetCursor(Page+1, X);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff37 	bl	8001258 <OLED_SetCursor>
		for (int i = 0; i < fontSize; ++i)
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	e00f      	b.n	8001410 <OLED_showChar+0x90>
		{
			OLED_WriteData(EN8_16[ a - ' ' ][i+8]);
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	f1a3 0220 	sub.w	r2, r3, #32
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	3308      	adds	r3, #8
 80013fa:	4929      	ldr	r1, [pc, #164]	@ (80014a0 <OLED_showChar+0x120>)
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	440a      	add	r2, r1
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff0d 	bl	8001224 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	3301      	adds	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	793b      	ldrb	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbeb      	blt.n	80013f0 <OLED_showChar+0x70>
		for (int i = 0; i < fontSize; ++i)
		{
			OLED_WriteData(EN6_12[ a - ' ' ][i+6]);
		}
	}
}
 8001418:	e03d      	b.n	8001496 <OLED_showChar+0x116>
	else if (fontSize == 6)
 800141a:	793b      	ldrb	r3, [r7, #4]
 800141c:	2b06      	cmp	r3, #6
 800141e:	d13a      	bne.n	8001496 <OLED_showChar+0x116>
		for (int i = 0; i < fontSize; ++i)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e011      	b.n	800144a <OLED_showChar+0xca>
			OLED_WriteData(EN6_12[ a - ' ' ][i]);
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	f1a3 0220 	sub.w	r2, r3, #32
 800142c:	491d      	ldr	r1, [pc, #116]	@ (80014a4 <OLED_showChar+0x124>)
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	18ca      	adds	r2, r1, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fef0 	bl	8001224 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbe9      	blt.n	8001426 <OLED_showChar+0xa6>
		OLED_SetCursor(Page+1, X);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	79ba      	ldrb	r2, [r7, #6]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fefb 	bl	8001258 <OLED_SetCursor>
		for (int i = 0; i < fontSize; ++i)
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	e012      	b.n	800148e <OLED_showChar+0x10e>
			OLED_WriteData(EN6_12[ a - ' ' ][i+6]);
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	f1a3 0220 	sub.w	r2, r3, #32
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1d99      	adds	r1, r3, #6
 8001472:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <OLED_showChar+0x124>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4403      	add	r3, r0
 800147e:	440b      	add	r3, r1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fece 	bl	8001224 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3301      	adds	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	793b      	ldrb	r3, [r7, #4]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbe8      	blt.n	8001468 <OLED_showChar+0xe8>
}
 8001496:	bf00      	nop
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	200005f0 	.word	0x200005f0

080014a8 <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	603a      	str	r2, [r7, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	460b      	mov	r3, r1
 80014b8:	71bb      	strb	r3, [r7, #6]
 80014ba:	4613      	mov	r3, r2
 80014bc:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e013      	b.n	80014ec <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	797a      	ldrb	r2, [r7, #5]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	4413      	add	r3, r2
 80014d4:	b2d9      	uxtb	r1, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	79f8      	ldrb	r0, [r7, #7]
 80014e2:	f7ff ff4d 	bl	8001380 <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e5      	bne.n	80014c4 <OLED_showString+0x1c>
	}
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <OLED_showSignedFlout>:
	sprintf(buffer, "%ld", num);
	OLED_showString(Page, X, buffer, fontSize);
}

void OLED_showSignedFlout(uint8_t Page, uint8_t X, float num, uint8_t fontSize)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	603a      	str	r2, [r7, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	460b      	mov	r3, r1
 8001514:	71bb      	strb	r3, [r7, #6]
 8001516:	4613      	mov	r3, r2
 8001518:	717b      	strb	r3, [r7, #5]
	char buffer[6];
	sprintf(buffer, "%5.2f", num);
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f7fe ff84 	bl	8000428 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	f107 0008 	add.w	r0, r7, #8
 8001528:	4906      	ldr	r1, [pc, #24]	@ (8001544 <OLED_showSignedFlout+0x40>)
 800152a:	f003 f86b 	bl	8004604 <siprintf>
	OLED_showString(Page, X, buffer, fontSize);
 800152e:	797b      	ldrb	r3, [r7, #5]
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	79b9      	ldrb	r1, [r7, #6]
 8001536:	79f8      	ldrb	r0, [r7, #7]
 8001538:	f7ff ffb6 	bl	80014a8 <OLED_showString>
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	08006894 	.word	0x08006894

08001548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <MX_GPIO_Init+0x58>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a13      	ldr	r2, [pc, #76]	@ (80015a0 <MX_GPIO_Init+0x58>)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <MX_GPIO_Init+0x58>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <MX_GPIO_Init+0x58>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <MX_GPIO_Init+0x58>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <MX_GPIO_Init+0x58>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <MX_GPIO_Init+0x58>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <MX_GPIO_Init+0x58>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <MX_GPIO_Init+0x58>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f000 fd0f 	bl	8002004 <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f000 f8ca 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000c54 	.word	0x20000c54
 80015f8:	40005400 	.word	0x40005400
 80015fc:	00061a80 	.word	0x00061a80

08001600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1d      	ldr	r2, [pc, #116]	@ (8001690 <HAL_I2C_MspInit+0x90>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d132      	bne.n	8001686 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_I2C_MspInit+0x94>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <HAL_I2C_MspInit+0x94>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_I2C_MspInit+0x94>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001638:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163e:	2312      	movs	r3, #18
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4812      	ldr	r0, [pc, #72]	@ (8001698 <HAL_I2C_MspInit+0x98>)
 800164e:	f000 fb55 	bl	8001cfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_I2C_MspInit+0x9c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
 8001668:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <HAL_I2C_MspInit+0x9c>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_I2C_MspInit+0x94>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_I2C_MspInit+0x94>)
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_I2C_MspInit+0x94>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	@ 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40005400 	.word	0x40005400
 8001694:	40021000 	.word	0x40021000
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40010000 	.word	0x40010000

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f000 f9bf 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f826 	bl	80016fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f7ff ff4b 	bl	8001548 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b2:	f7ff ff77 	bl	80015a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 80016b6:	f7ff fdf2 	bl	800129e <OLED_init>
  MPU6050_Init();
 80016ba:	f7ff fa35 	bl	8000b28 <MPU6050_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Find_I2C_Device();
//	  HAL_Delay(20);
	  MPU6050_Data_result = getMPU6050WorkedData();
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fadd 	bl	8000c80 <getMPU6050WorkedData>
	  OLED_showSignedFlout(0, 0, MPU6050_Data_result.ACCEL_XOUT, 8);
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	2308      	movs	r3, #8
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff ff19 	bl	8001504 <OLED_showSignedFlout>
	  OLED_showSignedFlout(2, 0, MPU6050_Data_result.ACCEL_YOUT, 8);
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	2308      	movs	r3, #8
 80016d6:	2100      	movs	r1, #0
 80016d8:	2002      	movs	r0, #2
 80016da:	f7ff ff13 	bl	8001504 <OLED_showSignedFlout>
	  OLED_showSignedFlout(4, 0, MPU6050_Data_result.ACCEL_ZOUT, 8);
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	2308      	movs	r3, #8
 80016e2:	2100      	movs	r1, #0
 80016e4:	2004      	movs	r0, #4
 80016e6:	f7ff ff0d 	bl	8001504 <OLED_showSignedFlout>
	  OLED_showSignedFlout(6, 0, MPU6050_Data_result.Temperature, 8);
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	2308      	movs	r3, #8
 80016ee:	2100      	movs	r1, #0
 80016f0:	2006      	movs	r0, #6
 80016f2:	f7ff ff07 	bl	8001504 <OLED_showSignedFlout>
	  MPU6050_Data_result = getMPU6050WorkedData();
 80016f6:	bf00      	nop
 80016f8:	e7e1      	b.n	80016be <main+0x1e>

080016fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b090      	sub	sp, #64	@ 0x40
 80016fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	2228      	movs	r2, #40	@ 0x28
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f002 ffde 	bl	80046ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001724:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172a:	2301      	movs	r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001738:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fe44 	bl	80033d0 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800174e:	f000 f819 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2102      	movs	r1, #2
 800176c:	4618      	mov	r0, r3
 800176e:	f002 f8b1 	bl	80038d4 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001778:	f000 f804 	bl	8001784 <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3740      	adds	r7, #64	@ 0x40
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <HAL_MspInit+0x5c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <HAL_MspInit+0x5c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_MspInit+0x60>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_MspInit+0x60>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 f936 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <_kill>:

int _kill(int pid, int sig)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001864:	f002 ff84 	bl	8004770 <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	2216      	movs	r2, #22
 800186c:	601a      	str	r2, [r3, #0]
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_exit>:

void _exit (int status)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001882:	f04f 31ff 	mov.w	r1, #4294967295
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffe7 	bl	800185a <_kill>
  while (1) {}    /* Make sure we hang here */
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <_exit+0x12>

08001890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001928:	605a      	str	r2, [r3, #4]
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <_isatty>:

int _isatty(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f002 feec 	bl	8004770 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20005000 	.word	0x20005000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	20000cac 	.word	0x20000cac
 80019cc:	20000e00 	.word	0x20000e00

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff fff8 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019e2:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f8:	4c09      	ldr	r4, [pc, #36]	@ (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f002 feb9 	bl	800477c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fe49 	bl	80016a0 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000c38 	.word	0x20000c38
  ldr r2, =_sidata
 8001a18:	08006c50 	.word	0x08006c50
  ldr r2, =_sbss
 8001a1c:	20000c38 	.word	0x20000c38
  ldr r4, =_ebss
 8001a20:	20000e00 	.word	0x20000e00

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f92b 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fea4 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f935 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f90b 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000a64 	.word	0x20000a64
 8001aac:	20000a6c 	.word	0x20000a6c
 8001ab0:	20000a68 	.word	0x20000a68

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000a6c 	.word	0x20000a6c
 8001ad4:	20000cb0 	.word	0x20000cb0

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000cb0 	.word	0x20000cb0

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000a6c 	.word	0x20000a6c

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff90 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff49 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff5e 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffb0 	bl	8001c50 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b08b      	sub	sp, #44	@ 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	e169      	b.n	8001fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d10:	2201      	movs	r2, #1
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8158 	bne.w	8001fde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a9a      	ldr	r2, [pc, #616]	@ (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d38:	4a98      	ldr	r2, [pc, #608]	@ (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d875      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d3e:	4a98      	ldr	r2, [pc, #608]	@ (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d058      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d44:	4a96      	ldr	r2, [pc, #600]	@ (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d86f      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d4a:	4a96      	ldr	r2, [pc, #600]	@ (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d052      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d50:	4a94      	ldr	r2, [pc, #592]	@ (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d869      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d56:	4a94      	ldr	r2, [pc, #592]	@ (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04c      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a92      	ldr	r2, [pc, #584]	@ (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d863      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d62:	4a92      	ldr	r2, [pc, #584]	@ (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d046      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d68:	4a90      	ldr	r2, [pc, #576]	@ (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d85d      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d82a      	bhi.n	8001dc8 <HAL_GPIO_Init+0xcc>
 8001d72:	2b12      	cmp	r3, #18
 8001d74:	d859      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <HAL_GPIO_Init+0x80>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001df7 	.word	0x08001df7
 8001d80:	08001dd1 	.word	0x08001dd1
 8001d84:	08001de3 	.word	0x08001de3
 8001d88:	08001e25 	.word	0x08001e25
 8001d8c:	08001e2b 	.word	0x08001e2b
 8001d90:	08001e2b 	.word	0x08001e2b
 8001d94:	08001e2b 	.word	0x08001e2b
 8001d98:	08001e2b 	.word	0x08001e2b
 8001d9c:	08001e2b 	.word	0x08001e2b
 8001da0:	08001e2b 	.word	0x08001e2b
 8001da4:	08001e2b 	.word	0x08001e2b
 8001da8:	08001e2b 	.word	0x08001e2b
 8001dac:	08001e2b 	.word	0x08001e2b
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e2b 	.word	0x08001e2b
 8001db8:	08001e2b 	.word	0x08001e2b
 8001dbc:	08001e2b 	.word	0x08001e2b
 8001dc0:	08001dd9 	.word	0x08001dd9
 8001dc4:	08001ded 	.word	0x08001ded
 8001dc8:	4a79      	ldr	r2, [pc, #484]	@ (8001fb0 <HAL_GPIO_Init+0x2b4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dce:	e02c      	b.n	8001e2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e029      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e024      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	3308      	adds	r3, #8
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e01f      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	330c      	adds	r3, #12
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e01a      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e013      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	611a      	str	r2, [r3, #16]
          break;
 8001e16:	e009      	b.n	8001e2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	615a      	str	r2, [r3, #20]
          break;
 8001e22:	e003      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          break;
 8001e2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2bff      	cmp	r3, #255	@ 0xff
 8001e30:	d801      	bhi.n	8001e36 <HAL_GPIO_Init+0x13a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_Init+0x13e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2bff      	cmp	r3, #255	@ 0xff
 8001e40:	d802      	bhi.n	8001e48 <HAL_GPIO_Init+0x14c>
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x152>
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	3b08      	subs	r3, #8
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	210f      	movs	r1, #15
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80b1 	beq.w	8001fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e94:	4a48      	ldr	r2, [pc, #288]	@ (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a40      	ldr	r2, [pc, #256]	@ (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_GPIO_Init+0x1ec>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc0 <HAL_GPIO_Init+0x2c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3e      	ldr	r2, [pc, #248]	@ (8001fc4 <HAL_GPIO_Init+0x2c8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1e4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3d      	ldr	r2, [pc, #244]	@ (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1e0>
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e006      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efa:	492f      	ldr	r1, [pc, #188]	@ (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f14:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	492c      	ldr	r1, [pc, #176]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4928      	ldr	r1, [pc, #160]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f3c:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4922      	ldr	r1, [pc, #136]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	491e      	ldr	r1, [pc, #120]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4918      	ldr	r1, [pc, #96]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f72:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4914      	ldr	r1, [pc, #80]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d021      	beq.n	8001fd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	490e      	ldr	r1, [pc, #56]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e021      	b.n	8001fde <HAL_GPIO_Init+0x2e2>
 8001f9a:	bf00      	nop
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10310000 	.word	0x10310000
 8001fa4:	10220000 	.word	0x10220000
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4909      	ldr	r1, [pc, #36]	@ (8002000 <HAL_GPIO_Init+0x304>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f47f ae8e 	bne.w	8001d10 <HAL_GPIO_Init+0x14>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	372c      	adds	r7, #44	@ 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e12b      	b.n	800226e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fae8 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	@ 0x24
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002068:	f001 fd7c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 800206c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a81      	ldr	r2, [pc, #516]	@ (8002278 <HAL_I2C_Init+0x274>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d807      	bhi.n	8002088 <HAL_I2C_Init+0x84>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a80      	ldr	r2, [pc, #512]	@ (800227c <HAL_I2C_Init+0x278>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e006      	b.n	8002096 <HAL_I2C_Init+0x92>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a7d      	ldr	r2, [pc, #500]	@ (8002280 <HAL_I2C_Init+0x27c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	bf94      	ite	ls
 8002090:	2301      	movls	r3, #1
 8002092:	2300      	movhi	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0e7      	b.n	800226e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a78      	ldr	r2, [pc, #480]	@ (8002284 <HAL_I2C_Init+0x280>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002278 <HAL_I2C_Init+0x274>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d802      	bhi.n	80020d8 <HAL_I2C_Init+0xd4>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	e009      	b.n	80020ec <HAL_I2C_Init+0xe8>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	4a69      	ldr	r2, [pc, #420]	@ (8002288 <HAL_I2C_Init+0x284>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	3301      	adds	r3, #1
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	495c      	ldr	r1, [pc, #368]	@ (8002278 <HAL_I2C_Init+0x274>)
 8002108:	428b      	cmp	r3, r1
 800210a:	d819      	bhi.n	8002140 <HAL_I2C_Init+0x13c>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e59      	subs	r1, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fbb1 f3f3 	udiv	r3, r1, r3
 800211a:	1c59      	adds	r1, r3, #1
 800211c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002120:	400b      	ands	r3, r1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_I2C_Init+0x138>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e59      	subs	r1, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fbb1 f3f3 	udiv	r3, r1, r3
 8002134:	3301      	adds	r3, #1
 8002136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213a:	e051      	b.n	80021e0 <HAL_I2C_Init+0x1dc>
 800213c:	2304      	movs	r3, #4
 800213e:	e04f      	b.n	80021e0 <HAL_I2C_Init+0x1dc>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d111      	bne.n	800216c <HAL_I2C_Init+0x168>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	e012      	b.n	8002192 <HAL_I2C_Init+0x18e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e58      	subs	r0, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	0099      	lsls	r1, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Init+0x196>
 8002196:	2301      	movs	r3, #1
 8002198:	e022      	b.n	80021e0 <HAL_I2C_Init+0x1dc>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10e      	bne.n	80021c0 <HAL_I2C_Init+0x1bc>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1e58      	subs	r0, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	440b      	add	r3, r1
 80021b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021be:	e00f      	b.n	80021e0 <HAL_I2C_Init+0x1dc>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e58      	subs	r0, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	0099      	lsls	r1, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	6809      	ldr	r1, [r1, #0]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800220e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6911      	ldr	r1, [r2, #16]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68d2      	ldr	r2, [r2, #12]
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	000186a0 	.word	0x000186a0
 800227c:	001e847f 	.word	0x001e847f
 8002280:	003d08ff 	.word	0x003d08ff
 8002284:	431bde83 	.word	0x431bde83
 8002288:	10624dd3 	.word	0x10624dd3

0800228c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	817b      	strh	r3, [r7, #10]
 800229c:	4613      	mov	r3, r2
 800229e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff fc1a 	bl	8001ad8 <HAL_GetTick>
 80022a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 80e0 	bne.w	8002474 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	4970      	ldr	r1, [pc, #448]	@ (8002480 <HAL_I2C_Master_Transmit+0x1f4>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fe50 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0d3      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Master_Transmit+0x50>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0cc      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d007      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002310:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2221      	movs	r2, #33	@ 0x21
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2210      	movs	r2, #16
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a50      	ldr	r2, [pc, #320]	@ (8002484 <HAL_I2C_Master_Transmit+0x1f8>)
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fc0a 	bl	8002b64 <I2C_MasterRequestWrite>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e08d      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002370:	e066      	b.n	8002440 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	6a39      	ldr	r1, [r7, #32]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 ff0e 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2b04      	cmp	r3, #4
 8002388:	d107      	bne.n	800239a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002398:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d11b      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x188>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d017      	beq.n	8002414 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 ff05 	bl	8003228 <I2C_WaitOnBTFFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e01a      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d194      	bne.n	8002372 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	00100002 	.word	0x00100002
 8002484:	ffff0000 	.word	0xffff0000

08002488 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4603      	mov	r3, r0
 8002498:	817b      	strh	r3, [r7, #10]
 800249a:	460b      	mov	r3, r1
 800249c:	813b      	strh	r3, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a2:	f7ff fb19 	bl	8001ad8 <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80d9 	bne.w	8002668 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2319      	movs	r3, #25
 80024bc:	2201      	movs	r2, #1
 80024be:	496d      	ldr	r1, [pc, #436]	@ (8002674 <HAL_I2C_Mem_Write+0x1ec>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fd4f 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0cc      	b.n	800266a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_I2C_Mem_Write+0x56>
 80024da:	2302      	movs	r3, #2
 80024dc:	e0c5      	b.n	800266a <HAL_I2C_Mem_Write+0x1e2>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d007      	beq.n	8002504 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2221      	movs	r2, #33	@ 0x21
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2240      	movs	r2, #64	@ 0x40
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a4d      	ldr	r2, [pc, #308]	@ (8002678 <HAL_I2C_Mem_Write+0x1f0>)
 8002544:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002546:	88f8      	ldrh	r0, [r7, #6]
 8002548:	893a      	ldrh	r2, [r7, #8]
 800254a:	8979      	ldrh	r1, [r7, #10]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	4603      	mov	r3, r0
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fb86 	bl	8002c68 <I2C_RequestMemoryWrite>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d052      	beq.n	8002608 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e081      	b.n	800266a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fe14 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	2b04      	cmp	r3, #4
 800257c:	d107      	bne.n	800258e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d11b      	bne.n	8002608 <HAL_I2C_Mem_Write+0x180>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d017      	beq.n	8002608 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1aa      	bne.n	8002566 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fe07 	bl	8003228 <I2C_WaitOnBTFFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002636:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e016      	b.n	800266a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	00100002 	.word	0x00100002
 8002678:	ffff0000 	.word	0xffff0000

0800267c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	@ 0x30
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	4608      	mov	r0, r1
 8002686:	4611      	mov	r1, r2
 8002688:	461a      	mov	r2, r3
 800268a:	4603      	mov	r3, r0
 800268c:	817b      	strh	r3, [r7, #10]
 800268e:	460b      	mov	r3, r1
 8002690:	813b      	strh	r3, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800269a:	f7ff fa1d 	bl	8001ad8 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	f040 8250 	bne.w	8002b4e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2319      	movs	r3, #25
 80026b4:	2201      	movs	r2, #1
 80026b6:	4982      	ldr	r1, [pc, #520]	@ (80028c0 <HAL_I2C_Mem_Read+0x244>)
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fc53 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	e243      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x5a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e23c      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d007      	beq.n	80026fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800270a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2222      	movs	r2, #34	@ 0x22
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2240      	movs	r2, #64	@ 0x40
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a62      	ldr	r2, [pc, #392]	@ (80028c4 <HAL_I2C_Mem_Read+0x248>)
 800273c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800273e:	88f8      	ldrh	r0, [r7, #6]
 8002740:	893a      	ldrh	r2, [r7, #8]
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4603      	mov	r3, r0
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb20 	bl	8002d94 <I2C_RequestMemoryRead>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1f8      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d113      	bne.n	800278e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e1cc      	b.n	8002b28 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002792:	2b01      	cmp	r3, #1
 8002794:	d11e      	bne.n	80027d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027a6:	b672      	cpsid	i
}
 80027a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027d0:	b662      	cpsie	i
}
 80027d2:	e035      	b.n	8002840 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d11e      	bne.n	800281a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002814:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002816:	b662      	cpsie	i
}
 8002818:	e012      	b.n	8002840 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002828:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002840:	e172      	b.n	8002b28 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002846:	2b03      	cmp	r3, #3
 8002848:	f200 811f 	bhi.w	8002a8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b01      	cmp	r3, #1
 8002852:	d123      	bne.n	800289c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002856:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fd2d 	bl	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e173      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800289a:	e145      	b.n	8002b28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d152      	bne.n	800294a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028aa:	2200      	movs	r2, #0
 80028ac:	4906      	ldr	r1, [pc, #24]	@ (80028c8 <HAL_I2C_Mem_Read+0x24c>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fb58 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e148      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000
 80028c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
}
 80028ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002912:	b662      	cpsie	i
}
 8002914:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002948:	e0ee      	b.n	8002b28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002950:	2200      	movs	r2, #0
 8002952:	4981      	ldr	r1, [pc, #516]	@ (8002b58 <HAL_I2C_Mem_Read+0x4dc>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fb05 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0f5      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002972:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002974:	b672      	cpsid	i
}
 8002976:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029aa:	4b6c      	ldr	r3, [pc, #432]	@ (8002b5c <HAL_I2C_Mem_Read+0x4e0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	08db      	lsrs	r3, r3, #3
 80029b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002b60 <HAL_I2C_Mem_Read+0x4e4>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a1a      	lsrs	r2, r3, #8
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00da      	lsls	r2, r3, #3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d118      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029f2:	b662      	cpsie	i
}
 80029f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0a6      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d1d9      	bne.n	80029c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a52:	b662      	cpsie	i
}
 8002a54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a88:	e04e      	b.n	8002b28 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fc12 	bl	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e058      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d124      	bne.n	8002b28 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f ae88 	bne.w	8002842 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	00010004 	.word	0x00010004
 8002b5c:	20000a64 	.word	0x20000a64
 8002b60:	14f8b589 	.word	0x14f8b589

08002b64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	460b      	mov	r3, r1
 8002b72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d006      	beq.n	8002b8e <I2C_MasterRequestWrite+0x2a>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d003      	beq.n	8002b8e <I2C_MasterRequestWrite+0x2a>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b8c:	d108      	bne.n	8002ba0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e00b      	b.n	8002bb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	2b12      	cmp	r3, #18
 8002ba6:	d107      	bne.n	8002bb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f9cd 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bde:	d103      	bne.n	8002be8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e035      	b.n	8002c58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bf4:	d108      	bne.n	8002c08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c04:	611a      	str	r2, [r3, #16]
 8002c06:	e01b      	b.n	8002c40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c08:	897b      	ldrh	r3, [r7, #10]
 8002c0a:	11db      	asrs	r3, r3, #7
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 0306 	and.w	r3, r3, #6
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f063 030f 	orn	r3, r3, #15
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	490e      	ldr	r1, [pc, #56]	@ (8002c60 <I2C_MasterRequestWrite+0xfc>)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fa16 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e010      	b.n	8002c58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4907      	ldr	r1, [pc, #28]	@ (8002c64 <I2C_MasterRequestWrite+0x100>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa06 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	00010008 	.word	0x00010008
 8002c64:	00010002 	.word	0x00010002

08002c68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f960 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb8:	d103      	bne.n	8002cc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e05f      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
 8002cda:	492d      	ldr	r1, [pc, #180]	@ (8002d90 <I2C_RequestMemoryWrite+0x128>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f9bb 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e04c      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa46 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e02b      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	e021      	b.n	8002d84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fa20 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d107      	bne.n	8002d76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e005      	b.n	8002d86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	00010002 	.word	0x00010002

08002d94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	460b      	mov	r3, r1
 8002da8:	813b      	strh	r3, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8c2 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df4:	d103      	bne.n	8002dfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0aa      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	4952      	ldr	r1, [pc, #328]	@ (8002f60 <I2C_RequestMemoryRead+0x1cc>)
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f91d 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e097      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9a8 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e076      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e70:	893b      	ldrh	r3, [r7, #8]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]
 8002e7a:	e021      	b.n	8002ec0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8c:	6a39      	ldr	r1, [r7, #32]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f982 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d107      	bne.n	8002eb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e050      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb6:	893b      	ldrh	r3, [r7, #8]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec2:	6a39      	ldr	r1, [r7, #32]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f967 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d107      	bne.n	8002ee8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e035      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f82b 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f22:	d103      	bne.n	8002f2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e013      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f30:	897b      	ldrh	r3, [r7, #10]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	4906      	ldr	r1, [pc, #24]	@ (8002f60 <I2C_RequestMemoryRead+0x1cc>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f886 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	00010002 	.word	0x00010002

08002f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f74:	e048      	b.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d044      	beq.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe fdab 	bl	8001ad8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d139      	bne.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10d      	bne.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	e00c      	b.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d116      	bne.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e023      	b.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10d      	bne.n	800302e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	43da      	mvns	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	e00c      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	429a      	cmp	r2, r3
 800304c:	d093      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003066:	e071      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003076:	d123      	bne.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003086:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0204 	orr.w	r2, r3, #4
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e067      	b.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d041      	beq.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fe fd06 	bl	8001ad8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d136      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10c      	bne.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e00b      	b.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	43da      	mvns	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e021      	b.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10c      	bne.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e00b      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f af6d 	bne.w	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a4:	e034      	b.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f8e3 	bl	8003372 <I2C_IsAcknowledgeFailed>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e034      	b.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d028      	beq.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fe fc8b 	bl	8001ad8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11d      	bne.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b80      	cmp	r3, #128	@ 0x80
 80031e0:	d016      	beq.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e007      	b.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321a:	2b80      	cmp	r3, #128	@ 0x80
 800321c:	d1c3      	bne.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003234:	e034      	b.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f89b 	bl	8003372 <I2C_IsAcknowledgeFailed>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e034      	b.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d028      	beq.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fe fc43 	bl	8001ad8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11d      	bne.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d016      	beq.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d1c3      	bne.n	8003236 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c4:	e049      	b.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d119      	bne.n	8003308 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0210 	mvn.w	r2, #16
 80032dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e030      	b.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003308:	f7fe fbe6 	bl	8001ad8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11d      	bne.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d016      	beq.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e007      	b.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d1ae      	bne.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003388:	d11b      	bne.n	80033c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003392:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e272      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8087 	beq.w	80034fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f0:	4b92      	ldr	r3, [pc, #584]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d00c      	beq.n	8003416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033fc:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d112      	bne.n	800342e <HAL_RCC_OscConfig+0x5e>
 8003408:	4b8c      	ldr	r3, [pc, #560]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003414:	d10b      	bne.n	800342e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003416:	4b89      	ldr	r3, [pc, #548]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06c      	beq.n	80034fc <HAL_RCC_OscConfig+0x12c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d168      	bne.n	80034fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e24c      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x76>
 8003438:	4b80      	ldr	r3, [pc, #512]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7f      	ldr	r2, [pc, #508]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e02e      	b.n	80034a4 <HAL_RCC_OscConfig+0xd4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b7b      	ldr	r3, [pc, #492]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7a      	ldr	r2, [pc, #488]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b78      	ldr	r3, [pc, #480]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a77      	ldr	r2, [pc, #476]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003460:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xd4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0xbc>
 8003472:	4b72      	ldr	r3, [pc, #456]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a71      	ldr	r2, [pc, #452]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6f      	ldr	r3, [pc, #444]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6e      	ldr	r2, [pc, #440]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xd4>
 800348c:	4b6b      	ldr	r3, [pc, #428]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6a      	ldr	r2, [pc, #424]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b68      	ldr	r3, [pc, #416]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a67      	ldr	r2, [pc, #412]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fb14 	bl	8001ad8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fb10 	bl	8001ad8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e200      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5d      	ldr	r3, [pc, #372]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe4>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fb00 	bl	8001ad8 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fafc 	bl	8001ad8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1ec      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b53      	ldr	r3, [pc, #332]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x10c>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b4c      	ldr	r3, [pc, #304]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003516:	4b49      	ldr	r3, [pc, #292]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x18c>
 8003522:	4b46      	ldr	r3, [pc, #280]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b43      	ldr	r3, [pc, #268]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x176>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c0      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3d      	ldr	r3, [pc, #244]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4939      	ldr	r1, [pc, #228]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <HAL_RCC_OscConfig+0x270>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fab5 	bl	8001ad8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe fab1 	bl	8001ad8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a1      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2d      	ldr	r3, [pc, #180]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b2a      	ldr	r3, [pc, #168]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4927      	ldr	r1, [pc, #156]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b26      	ldr	r3, [pc, #152]	@ (8003640 <HAL_RCC_OscConfig+0x270>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe fa94 	bl	8001ad8 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe fa90 	bl	8001ad8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e180      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d03a      	beq.n	8003654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d019      	beq.n	800361a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <HAL_RCC_OscConfig+0x274>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe fa74 	bl	8001ad8 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fa70 	bl	8001ad8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e160      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003612:	2001      	movs	r0, #1
 8003614:	f000 faba 	bl	8003b8c <RCC_Delay>
 8003618:	e01c      	b.n	8003654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <HAL_RCC_OscConfig+0x274>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003620:	f7fe fa5a 	bl	8001ad8 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003626:	e00f      	b.n	8003648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe fa56 	bl	8001ad8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d908      	bls.n	8003648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e146      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	42420000 	.word	0x42420000
 8003644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b92      	ldr	r3, [pc, #584]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e9      	bne.n	8003628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a6 	beq.w	80037ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003666:	4b8b      	ldr	r3, [pc, #556]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b88      	ldr	r3, [pc, #544]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a87      	ldr	r2, [pc, #540]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]
 800367e:	4b85      	ldr	r3, [pc, #532]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b82      	ldr	r3, [pc, #520]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b7f      	ldr	r3, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7e      	ldr	r2, [pc, #504]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe fa17 	bl	8001ad8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe fa13 	bl	8001ad8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	@ 0x64
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e103      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b75      	ldr	r3, [pc, #468]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x312>
 80036d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	e02d      	b.n	800373e <HAL_RCC_OscConfig+0x36e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x334>
 80036ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4a69      	ldr	r2, [pc, #420]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6213      	str	r3, [r2, #32]
 80036f6:	4b67      	ldr	r3, [pc, #412]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4a66      	ldr	r2, [pc, #408]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	e01c      	b.n	800373e <HAL_RCC_OscConfig+0x36e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x356>
 800370c:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a60      	ldr	r2, [pc, #384]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	4b5e      	ldr	r3, [pc, #376]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a5d      	ldr	r2, [pc, #372]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6213      	str	r3, [r2, #32]
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0x36e>
 8003726:	4b5b      	ldr	r3, [pc, #364]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a5a      	ldr	r2, [pc, #360]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	4b58      	ldr	r3, [pc, #352]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a57      	ldr	r2, [pc, #348]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d015      	beq.n	8003772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7fe f9c7 	bl	8001ad8 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe f9c3 	bl	8001ad8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e0b1      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	4b4b      	ldr	r3, [pc, #300]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ee      	beq.n	800374e <HAL_RCC_OscConfig+0x37e>
 8003770:	e014      	b.n	800379c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe f9b1 	bl	8001ad8 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe f9ad 	bl	8001ad8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e09b      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	4b40      	ldr	r3, [pc, #256]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ee      	bne.n	800377a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8087 	beq.w	80038c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b8:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d061      	beq.n	8003888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d146      	bne.n	800385a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b33      	ldr	r3, [pc, #204]	@ (800389c <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe f981 	bl	8001ad8 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe f97d 	bl	8001ad8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e06d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ec:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d108      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4921      	ldr	r1, [pc, #132]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003814:	4b1f      	ldr	r3, [pc, #124]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a19      	ldr	r1, [r3, #32]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	430b      	orrs	r3, r1
 8003826:	491b      	ldr	r1, [pc, #108]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_RCC_OscConfig+0x4cc>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fe f951 	bl	8001ad8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe f94d 	bl	8001ad8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x46a>
 8003858:	e035      	b.n	80038c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCC_OscConfig+0x4cc>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe f93a 	bl	8001ad8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe f936 	bl	8001ad8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e026      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x498>
 8003886:	e01e      	b.n	80038c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e019      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
 800389c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_OscConfig+0x500>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000

080038d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d0      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d910      	bls.n	8003918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b67      	ldr	r3, [pc, #412]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 0207 	bic.w	r2, r3, #7
 80038fe:	4965      	ldr	r1, [pc, #404]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0b8      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003930:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a58      	ldr	r2, [pc, #352]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800393a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003948:	4b53      	ldr	r3, [pc, #332]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a52      	ldr	r2, [pc, #328]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	494d      	ldr	r1, [pc, #308]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d040      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b47      	ldr	r3, [pc, #284]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d115      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e073      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06b      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b39      	ldr	r3, [pc, #228]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4936      	ldr	r1, [pc, #216]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7fe f888 	bl	8001ad8 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe f884 	bl	8001ad8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e053      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d210      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	4922      	ldr	r1, [pc, #136]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4916      	ldr	r1, [pc, #88]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	490e      	ldr	r1, [pc, #56]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a62:	f000 f821 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	490a      	ldr	r1, [pc, #40]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	5ccb      	ldrb	r3, [r1, r3]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a7e:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd ffe6 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	080068a4 	.word	0x080068a4
 8003aa0:	20000a64 	.word	0x20000a64
 8003aa4:	20000a68 	.word	0x20000a68

08003aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x36>
 8003ad6:	e027      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ada:	613b      	str	r3, [r7, #16]
      break;
 8003adc:	e027      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0c9b      	lsrs	r3, r3, #18
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	4a17      	ldr	r2, [pc, #92]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ae8:	5cd3      	ldrb	r3, [r2, r3]
 8003aea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003af6:	4b11      	ldr	r3, [pc, #68]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0c5b      	lsrs	r3, r3, #17
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0a:	fb03 f202 	mul.w	r2, r3, r2
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e004      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	613b      	str	r3, [r7, #16]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b2a:	613b      	str	r3, [r7, #16]
      break;
 8003b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2e:	693b      	ldr	r3, [r7, #16]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	007a1200 	.word	0x007a1200
 8003b44:	080068bc 	.word	0x080068bc
 8003b48:	080068cc 	.word	0x080068cc
 8003b4c:	003d0900 	.word	0x003d0900

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b02      	ldr	r3, [pc, #8]	@ (8003b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	20000a64 	.word	0x20000a64

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b68:	f7ff fff2 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	@ (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	080068b4 	.word	0x080068b4

08003b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <RCC_Delay+0x34>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <RCC_Delay+0x38>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba8:	bf00      	nop
  }
  while (Delay --);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <RCC_Delay+0x1c>
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	20000a64 	.word	0x20000a64
 8003bc4:	10624dd3 	.word	0x10624dd3

08003bc8 <__cvt>:
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bce:	461d      	mov	r5, r3
 8003bd0:	bfbb      	ittet	lt
 8003bd2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003bd6:	461d      	movlt	r5, r3
 8003bd8:	2300      	movge	r3, #0
 8003bda:	232d      	movlt	r3, #45	@ 0x2d
 8003bdc:	b088      	sub	sp, #32
 8003bde:	4614      	mov	r4, r2
 8003be0:	bfb8      	it	lt
 8003be2:	4614      	movlt	r4, r2
 8003be4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003be6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003be8:	7013      	strb	r3, [r2, #0]
 8003bea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003bec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003bf0:	f023 0820 	bic.w	r8, r3, #32
 8003bf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bf8:	d005      	beq.n	8003c06 <__cvt+0x3e>
 8003bfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003bfe:	d100      	bne.n	8003c02 <__cvt+0x3a>
 8003c00:	3601      	adds	r6, #1
 8003c02:	2302      	movs	r3, #2
 8003c04:	e000      	b.n	8003c08 <__cvt+0x40>
 8003c06:	2303      	movs	r3, #3
 8003c08:	aa07      	add	r2, sp, #28
 8003c0a:	9204      	str	r2, [sp, #16]
 8003c0c:	aa06      	add	r2, sp, #24
 8003c0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c12:	e9cd 3600 	strd	r3, r6, [sp]
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	f000 fe6d 	bl	80048f8 <_dtoa_r>
 8003c1e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c22:	4607      	mov	r7, r0
 8003c24:	d119      	bne.n	8003c5a <__cvt+0x92>
 8003c26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003c28:	07db      	lsls	r3, r3, #31
 8003c2a:	d50e      	bpl.n	8003c4a <__cvt+0x82>
 8003c2c:	eb00 0906 	add.w	r9, r0, r6
 8003c30:	2200      	movs	r2, #0
 8003c32:	2300      	movs	r3, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	f7fc feb6 	bl	80009a8 <__aeabi_dcmpeq>
 8003c3c:	b108      	cbz	r0, 8003c42 <__cvt+0x7a>
 8003c3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c42:	2230      	movs	r2, #48	@ 0x30
 8003c44:	9b07      	ldr	r3, [sp, #28]
 8003c46:	454b      	cmp	r3, r9
 8003c48:	d31e      	bcc.n	8003c88 <__cvt+0xc0>
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	9b07      	ldr	r3, [sp, #28]
 8003c4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003c50:	1bdb      	subs	r3, r3, r7
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	b008      	add	sp, #32
 8003c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c5e:	eb00 0906 	add.w	r9, r0, r6
 8003c62:	d1e5      	bne.n	8003c30 <__cvt+0x68>
 8003c64:	7803      	ldrb	r3, [r0, #0]
 8003c66:	2b30      	cmp	r3, #48	@ 0x30
 8003c68:	d10a      	bne.n	8003c80 <__cvt+0xb8>
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4620      	mov	r0, r4
 8003c70:	4629      	mov	r1, r5
 8003c72:	f7fc fe99 	bl	80009a8 <__aeabi_dcmpeq>
 8003c76:	b918      	cbnz	r0, 8003c80 <__cvt+0xb8>
 8003c78:	f1c6 0601 	rsb	r6, r6, #1
 8003c7c:	f8ca 6000 	str.w	r6, [sl]
 8003c80:	f8da 3000 	ldr.w	r3, [sl]
 8003c84:	4499      	add	r9, r3
 8003c86:	e7d3      	b.n	8003c30 <__cvt+0x68>
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	9107      	str	r1, [sp, #28]
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e7d9      	b.n	8003c44 <__cvt+0x7c>

08003c90 <__exponent>:
 8003c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c92:	2900      	cmp	r1, #0
 8003c94:	bfb6      	itet	lt
 8003c96:	232d      	movlt	r3, #45	@ 0x2d
 8003c98:	232b      	movge	r3, #43	@ 0x2b
 8003c9a:	4249      	neglt	r1, r1
 8003c9c:	2909      	cmp	r1, #9
 8003c9e:	7002      	strb	r2, [r0, #0]
 8003ca0:	7043      	strb	r3, [r0, #1]
 8003ca2:	dd29      	ble.n	8003cf8 <__exponent+0x68>
 8003ca4:	f10d 0307 	add.w	r3, sp, #7
 8003ca8:	461d      	mov	r5, r3
 8003caa:	270a      	movs	r7, #10
 8003cac:	fbb1 f6f7 	udiv	r6, r1, r7
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	fb07 1416 	mls	r4, r7, r6, r1
 8003cb6:	3430      	adds	r4, #48	@ 0x30
 8003cb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	2c63      	cmp	r4, #99	@ 0x63
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cc6:	dcf1      	bgt.n	8003cac <__exponent+0x1c>
 8003cc8:	3130      	adds	r1, #48	@ 0x30
 8003cca:	1e94      	subs	r4, r2, #2
 8003ccc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	1c41      	adds	r1, r0, #1
 8003cd4:	42ab      	cmp	r3, r5
 8003cd6:	d30a      	bcc.n	8003cee <__exponent+0x5e>
 8003cd8:	f10d 0309 	add.w	r3, sp, #9
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	42ac      	cmp	r4, r5
 8003ce0:	bf88      	it	hi
 8003ce2:	2300      	movhi	r3, #0
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	4403      	add	r3, r0
 8003ce8:	1a18      	subs	r0, r3, r0
 8003cea:	b003      	add	sp, #12
 8003cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003cf2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003cf6:	e7ed      	b.n	8003cd4 <__exponent+0x44>
 8003cf8:	2330      	movs	r3, #48	@ 0x30
 8003cfa:	3130      	adds	r1, #48	@ 0x30
 8003cfc:	7083      	strb	r3, [r0, #2]
 8003cfe:	70c1      	strb	r1, [r0, #3]
 8003d00:	1d03      	adds	r3, r0, #4
 8003d02:	e7f1      	b.n	8003ce8 <__exponent+0x58>

08003d04 <_printf_float>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	b091      	sub	sp, #68	@ 0x44
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003d10:	4616      	mov	r6, r2
 8003d12:	461f      	mov	r7, r3
 8003d14:	4605      	mov	r5, r0
 8003d16:	f000 fce1 	bl	80046dc <_localeconv_r>
 8003d1a:	6803      	ldr	r3, [r0, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	9308      	str	r3, [sp, #32]
 8003d20:	f7fc fa16 	bl	8000150 <strlen>
 8003d24:	2300      	movs	r3, #0
 8003d26:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d28:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003d2e:	3307      	adds	r3, #7
 8003d30:	f023 0307 	bic.w	r3, r3, #7
 8003d34:	f103 0208 	add.w	r2, r3, #8
 8003d38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8003d40:	f8c8 2000 	str.w	r2, [r8]
 8003d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d4e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8003fd0 <_printf_float+0x2cc>)
 8003d60:	f7fc fe54 	bl	8000a0c <__aeabi_dcmpun>
 8003d64:	bb70      	cbnz	r0, 8003dc4 <_printf_float+0xc0>
 8003d66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6e:	4b98      	ldr	r3, [pc, #608]	@ (8003fd0 <_printf_float+0x2cc>)
 8003d70:	f7fc fe2e 	bl	80009d0 <__aeabi_dcmple>
 8003d74:	bb30      	cbnz	r0, 8003dc4 <_printf_float+0xc0>
 8003d76:	2200      	movs	r2, #0
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	f7fc fe1d 	bl	80009bc <__aeabi_dcmplt>
 8003d82:	b110      	cbz	r0, 8003d8a <_printf_float+0x86>
 8003d84:	232d      	movs	r3, #45	@ 0x2d
 8003d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d8a:	4a92      	ldr	r2, [pc, #584]	@ (8003fd4 <_printf_float+0x2d0>)
 8003d8c:	4b92      	ldr	r3, [pc, #584]	@ (8003fd8 <_printf_float+0x2d4>)
 8003d8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d92:	bf94      	ite	ls
 8003d94:	4690      	movls	r8, r2
 8003d96:	4698      	movhi	r8, r3
 8003d98:	2303      	movs	r3, #3
 8003d9a:	f04f 0900 	mov.w	r9, #0
 8003d9e:	6123      	str	r3, [r4, #16]
 8003da0:	f02b 0304 	bic.w	r3, fp, #4
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	4633      	mov	r3, r6
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	9700      	str	r7, [sp, #0]
 8003dae:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003db0:	f000 f9d4 	bl	800415c <_printf_common>
 8003db4:	3001      	adds	r0, #1
 8003db6:	f040 8090 	bne.w	8003eda <_printf_float+0x1d6>
 8003dba:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbe:	b011      	add	sp, #68	@ 0x44
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	4640      	mov	r0, r8
 8003dca:	4649      	mov	r1, r9
 8003dcc:	f7fc fe1e 	bl	8000a0c <__aeabi_dcmpun>
 8003dd0:	b148      	cbz	r0, 8003de6 <_printf_float+0xe2>
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bfb8      	it	lt
 8003dd8:	232d      	movlt	r3, #45	@ 0x2d
 8003dda:	4a80      	ldr	r2, [pc, #512]	@ (8003fdc <_printf_float+0x2d8>)
 8003ddc:	bfb8      	it	lt
 8003dde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003de2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe0 <_printf_float+0x2dc>)
 8003de4:	e7d3      	b.n	8003d8e <_printf_float+0x8a>
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	d13f      	bne.n	8003e70 <_printf_float+0x16c>
 8003df0:	2306      	movs	r3, #6
 8003df2:	6063      	str	r3, [r4, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	9206      	str	r2, [sp, #24]
 8003dfe:	aa0e      	add	r2, sp, #56	@ 0x38
 8003e00:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003e04:	aa0d      	add	r2, sp, #52	@ 0x34
 8003e06:	9203      	str	r2, [sp, #12]
 8003e08:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003e0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	4642      	mov	r2, r8
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	4628      	mov	r0, r5
 8003e18:	464b      	mov	r3, r9
 8003e1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003e1c:	f7ff fed4 	bl	8003bc8 <__cvt>
 8003e20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e22:	4680      	mov	r8, r0
 8003e24:	2947      	cmp	r1, #71	@ 0x47
 8003e26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003e28:	d128      	bne.n	8003e7c <_printf_float+0x178>
 8003e2a:	1cc8      	adds	r0, r1, #3
 8003e2c:	db02      	blt.n	8003e34 <_printf_float+0x130>
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	4299      	cmp	r1, r3
 8003e32:	dd40      	ble.n	8003eb6 <_printf_float+0x1b2>
 8003e34:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e38:	fa5f fa8a 	uxtb.w	sl, sl
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	3901      	subs	r1, #1
 8003e40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e44:	910d      	str	r1, [sp, #52]	@ 0x34
 8003e46:	f7ff ff23 	bl	8003c90 <__exponent>
 8003e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e4c:	4681      	mov	r9, r0
 8003e4e:	1813      	adds	r3, r2, r0
 8003e50:	2a01      	cmp	r2, #1
 8003e52:	6123      	str	r3, [r4, #16]
 8003e54:	dc02      	bgt.n	8003e5c <_printf_float+0x158>
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	07d2      	lsls	r2, r2, #31
 8003e5a:	d501      	bpl.n	8003e60 <_printf_float+0x15c>
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	6123      	str	r3, [r4, #16]
 8003e60:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d09e      	beq.n	8003da6 <_printf_float+0xa2>
 8003e68:	232d      	movs	r3, #45	@ 0x2d
 8003e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e6e:	e79a      	b.n	8003da6 <_printf_float+0xa2>
 8003e70:	2947      	cmp	r1, #71	@ 0x47
 8003e72:	d1bf      	bne.n	8003df4 <_printf_float+0xf0>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1bd      	bne.n	8003df4 <_printf_float+0xf0>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e7ba      	b.n	8003df2 <_printf_float+0xee>
 8003e7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e80:	d9dc      	bls.n	8003e3c <_printf_float+0x138>
 8003e82:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e86:	d118      	bne.n	8003eba <_printf_float+0x1b6>
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	dd0b      	ble.n	8003ea6 <_printf_float+0x1a2>
 8003e8e:	6121      	str	r1, [r4, #16]
 8003e90:	b913      	cbnz	r3, 8003e98 <_printf_float+0x194>
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	07d0      	lsls	r0, r2, #31
 8003e96:	d502      	bpl.n	8003e9e <_printf_float+0x19a>
 8003e98:	3301      	adds	r3, #1
 8003e9a:	440b      	add	r3, r1
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	f04f 0900 	mov.w	r9, #0
 8003ea2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ea4:	e7dc      	b.n	8003e60 <_printf_float+0x15c>
 8003ea6:	b913      	cbnz	r3, 8003eae <_printf_float+0x1aa>
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	07d2      	lsls	r2, r2, #31
 8003eac:	d501      	bpl.n	8003eb2 <_printf_float+0x1ae>
 8003eae:	3302      	adds	r3, #2
 8003eb0:	e7f4      	b.n	8003e9c <_printf_float+0x198>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e7f2      	b.n	8003e9c <_printf_float+0x198>
 8003eb6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ebc:	4299      	cmp	r1, r3
 8003ebe:	db05      	blt.n	8003ecc <_printf_float+0x1c8>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	6121      	str	r1, [r4, #16]
 8003ec4:	07d8      	lsls	r0, r3, #31
 8003ec6:	d5ea      	bpl.n	8003e9e <_printf_float+0x19a>
 8003ec8:	1c4b      	adds	r3, r1, #1
 8003eca:	e7e7      	b.n	8003e9c <_printf_float+0x198>
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	bfcc      	ite	gt
 8003ed0:	2201      	movgt	r2, #1
 8003ed2:	f1c1 0202 	rsble	r2, r1, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	e7e0      	b.n	8003e9c <_printf_float+0x198>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	055a      	lsls	r2, r3, #21
 8003ede:	d407      	bmi.n	8003ef0 <_printf_float+0x1ec>
 8003ee0:	6923      	ldr	r3, [r4, #16]
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	d12b      	bne.n	8003f46 <_printf_float+0x242>
 8003eee:	e764      	b.n	8003dba <_printf_float+0xb6>
 8003ef0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ef4:	f240 80dc 	bls.w	80040b0 <_printf_float+0x3ac>
 8003ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003efc:	2200      	movs	r2, #0
 8003efe:	2300      	movs	r3, #0
 8003f00:	f7fc fd52 	bl	80009a8 <__aeabi_dcmpeq>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d033      	beq.n	8003f70 <_printf_float+0x26c>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	4a35      	ldr	r2, [pc, #212]	@ (8003fe4 <_printf_float+0x2e0>)
 8003f10:	47b8      	blx	r7
 8003f12:	3001      	adds	r0, #1
 8003f14:	f43f af51 	beq.w	8003dba <_printf_float+0xb6>
 8003f18:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003f1c:	4543      	cmp	r3, r8
 8003f1e:	db02      	blt.n	8003f26 <_printf_float+0x222>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	07d8      	lsls	r0, r3, #31
 8003f24:	d50f      	bpl.n	8003f46 <_printf_float+0x242>
 8003f26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b8      	blx	r7
 8003f30:	3001      	adds	r0, #1
 8003f32:	f43f af42 	beq.w	8003dba <_printf_float+0xb6>
 8003f36:	f04f 0900 	mov.w	r9, #0
 8003f3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f3e:	f104 0a1a 	add.w	sl, r4, #26
 8003f42:	45c8      	cmp	r8, r9
 8003f44:	dc09      	bgt.n	8003f5a <_printf_float+0x256>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	079b      	lsls	r3, r3, #30
 8003f4a:	f100 8102 	bmi.w	8004152 <_printf_float+0x44e>
 8003f4e:	68e0      	ldr	r0, [r4, #12]
 8003f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f52:	4298      	cmp	r0, r3
 8003f54:	bfb8      	it	lt
 8003f56:	4618      	movlt	r0, r3
 8003f58:	e731      	b.n	8003dbe <_printf_float+0xba>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f af28 	beq.w	8003dba <_printf_float+0xb6>
 8003f6a:	f109 0901 	add.w	r9, r9, #1
 8003f6e:	e7e8      	b.n	8003f42 <_printf_float+0x23e>
 8003f70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	dc38      	bgt.n	8003fe8 <_printf_float+0x2e4>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	4a19      	ldr	r2, [pc, #100]	@ (8003fe4 <_printf_float+0x2e0>)
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f af1a 	beq.w	8003dba <_printf_float+0xb6>
 8003f86:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003f8a:	ea59 0303 	orrs.w	r3, r9, r3
 8003f8e:	d102      	bne.n	8003f96 <_printf_float+0x292>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	d5d7      	bpl.n	8003f46 <_printf_float+0x242>
 8003f96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b8      	blx	r7
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f43f af0a 	beq.w	8003dba <_printf_float+0xb6>
 8003fa6:	f04f 0a00 	mov.w	sl, #0
 8003faa:	f104 0b1a 	add.w	fp, r4, #26
 8003fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	4553      	cmp	r3, sl
 8003fb4:	dc01      	bgt.n	8003fba <_printf_float+0x2b6>
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	e793      	b.n	8003ee2 <_printf_float+0x1de>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	465a      	mov	r2, fp
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	47b8      	blx	r7
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	f43f aef8 	beq.w	8003dba <_printf_float+0xb6>
 8003fca:	f10a 0a01 	add.w	sl, sl, #1
 8003fce:	e7ee      	b.n	8003fae <_printf_float+0x2aa>
 8003fd0:	7fefffff 	.word	0x7fefffff
 8003fd4:	080068ce 	.word	0x080068ce
 8003fd8:	080068d2 	.word	0x080068d2
 8003fdc:	080068d6 	.word	0x080068d6
 8003fe0:	080068da 	.word	0x080068da
 8003fe4:	080068de 	.word	0x080068de
 8003fe8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003fee:	4553      	cmp	r3, sl
 8003ff0:	bfa8      	it	ge
 8003ff2:	4653      	movge	r3, sl
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	dc36      	bgt.n	8004068 <_printf_float+0x364>
 8003ffa:	f04f 0b00 	mov.w	fp, #0
 8003ffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004002:	f104 021a 	add.w	r2, r4, #26
 8004006:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004008:	930a      	str	r3, [sp, #40]	@ 0x28
 800400a:	eba3 0309 	sub.w	r3, r3, r9
 800400e:	455b      	cmp	r3, fp
 8004010:	dc31      	bgt.n	8004076 <_printf_float+0x372>
 8004012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004014:	459a      	cmp	sl, r3
 8004016:	dc3a      	bgt.n	800408e <_printf_float+0x38a>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	07da      	lsls	r2, r3, #31
 800401c:	d437      	bmi.n	800408e <_printf_float+0x38a>
 800401e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004020:	ebaa 0903 	sub.w	r9, sl, r3
 8004024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004026:	ebaa 0303 	sub.w	r3, sl, r3
 800402a:	4599      	cmp	r9, r3
 800402c:	bfa8      	it	ge
 800402e:	4699      	movge	r9, r3
 8004030:	f1b9 0f00 	cmp.w	r9, #0
 8004034:	dc33      	bgt.n	800409e <_printf_float+0x39a>
 8004036:	f04f 0800 	mov.w	r8, #0
 800403a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800403e:	f104 0b1a 	add.w	fp, r4, #26
 8004042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004044:	ebaa 0303 	sub.w	r3, sl, r3
 8004048:	eba3 0309 	sub.w	r3, r3, r9
 800404c:	4543      	cmp	r3, r8
 800404e:	f77f af7a 	ble.w	8003f46 <_printf_float+0x242>
 8004052:	2301      	movs	r3, #1
 8004054:	465a      	mov	r2, fp
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	f43f aeac 	beq.w	8003dba <_printf_float+0xb6>
 8004062:	f108 0801 	add.w	r8, r8, #1
 8004066:	e7ec      	b.n	8004042 <_printf_float+0x33e>
 8004068:	4642      	mov	r2, r8
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	d1c2      	bne.n	8003ffa <_printf_float+0x2f6>
 8004074:	e6a1      	b.n	8003dba <_printf_float+0xb6>
 8004076:	2301      	movs	r3, #1
 8004078:	4631      	mov	r1, r6
 800407a:	4628      	mov	r0, r5
 800407c:	920a      	str	r2, [sp, #40]	@ 0x28
 800407e:	47b8      	blx	r7
 8004080:	3001      	adds	r0, #1
 8004082:	f43f ae9a 	beq.w	8003dba <_printf_float+0xb6>
 8004086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004088:	f10b 0b01 	add.w	fp, fp, #1
 800408c:	e7bb      	b.n	8004006 <_printf_float+0x302>
 800408e:	4631      	mov	r1, r6
 8004090:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	d1c0      	bne.n	800401e <_printf_float+0x31a>
 800409c:	e68d      	b.n	8003dba <_printf_float+0xb6>
 800409e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040a0:	464b      	mov	r3, r9
 80040a2:	4631      	mov	r1, r6
 80040a4:	4628      	mov	r0, r5
 80040a6:	4442      	add	r2, r8
 80040a8:	47b8      	blx	r7
 80040aa:	3001      	adds	r0, #1
 80040ac:	d1c3      	bne.n	8004036 <_printf_float+0x332>
 80040ae:	e684      	b.n	8003dba <_printf_float+0xb6>
 80040b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80040b4:	f1ba 0f01 	cmp.w	sl, #1
 80040b8:	dc01      	bgt.n	80040be <_printf_float+0x3ba>
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d536      	bpl.n	800412c <_printf_float+0x428>
 80040be:	2301      	movs	r3, #1
 80040c0:	4642      	mov	r2, r8
 80040c2:	4631      	mov	r1, r6
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f ae76 	beq.w	8003dba <_printf_float+0xb6>
 80040ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f ae6e 	beq.w	8003dba <_printf_float+0xb6>
 80040de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040ea:	f7fc fc5d 	bl	80009a8 <__aeabi_dcmpeq>
 80040ee:	b9c0      	cbnz	r0, 8004122 <_printf_float+0x41e>
 80040f0:	4653      	mov	r3, sl
 80040f2:	f108 0201 	add.w	r2, r8, #1
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b8      	blx	r7
 80040fc:	3001      	adds	r0, #1
 80040fe:	d10c      	bne.n	800411a <_printf_float+0x416>
 8004100:	e65b      	b.n	8003dba <_printf_float+0xb6>
 8004102:	2301      	movs	r3, #1
 8004104:	465a      	mov	r2, fp
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	f43f ae54 	beq.w	8003dba <_printf_float+0xb6>
 8004112:	f108 0801 	add.w	r8, r8, #1
 8004116:	45d0      	cmp	r8, sl
 8004118:	dbf3      	blt.n	8004102 <_printf_float+0x3fe>
 800411a:	464b      	mov	r3, r9
 800411c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004120:	e6e0      	b.n	8003ee4 <_printf_float+0x1e0>
 8004122:	f04f 0800 	mov.w	r8, #0
 8004126:	f104 0b1a 	add.w	fp, r4, #26
 800412a:	e7f4      	b.n	8004116 <_printf_float+0x412>
 800412c:	2301      	movs	r3, #1
 800412e:	4642      	mov	r2, r8
 8004130:	e7e1      	b.n	80040f6 <_printf_float+0x3f2>
 8004132:	2301      	movs	r3, #1
 8004134:	464a      	mov	r2, r9
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	f43f ae3c 	beq.w	8003dba <_printf_float+0xb6>
 8004142:	f108 0801 	add.w	r8, r8, #1
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800414a:	1a5b      	subs	r3, r3, r1
 800414c:	4543      	cmp	r3, r8
 800414e:	dcf0      	bgt.n	8004132 <_printf_float+0x42e>
 8004150:	e6fd      	b.n	8003f4e <_printf_float+0x24a>
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	f104 0919 	add.w	r9, r4, #25
 800415a:	e7f4      	b.n	8004146 <_printf_float+0x442>

0800415c <_printf_common>:
 800415c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	4616      	mov	r6, r2
 8004162:	4698      	mov	r8, r3
 8004164:	688a      	ldr	r2, [r1, #8]
 8004166:	690b      	ldr	r3, [r1, #16]
 8004168:	4607      	mov	r7, r0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfb8      	it	lt
 800416e:	4613      	movlt	r3, r2
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004176:	460c      	mov	r4, r1
 8004178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800417c:	b10a      	cbz	r2, 8004182 <_printf_common+0x26>
 800417e:	3301      	adds	r3, #1
 8004180:	6033      	str	r3, [r6, #0]
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	0699      	lsls	r1, r3, #26
 8004186:	bf42      	ittt	mi
 8004188:	6833      	ldrmi	r3, [r6, #0]
 800418a:	3302      	addmi	r3, #2
 800418c:	6033      	strmi	r3, [r6, #0]
 800418e:	6825      	ldr	r5, [r4, #0]
 8004190:	f015 0506 	ands.w	r5, r5, #6
 8004194:	d106      	bne.n	80041a4 <_printf_common+0x48>
 8004196:	f104 0a19 	add.w	sl, r4, #25
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	6832      	ldr	r2, [r6, #0]
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	42ab      	cmp	r3, r5
 80041a2:	dc2b      	bgt.n	80041fc <_printf_common+0xa0>
 80041a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	3b00      	subs	r3, #0
 80041ac:	bf18      	it	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	0692      	lsls	r2, r2, #26
 80041b2:	d430      	bmi.n	8004216 <_printf_common+0xba>
 80041b4:	4641      	mov	r1, r8
 80041b6:	4638      	mov	r0, r7
 80041b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041bc:	47c8      	blx	r9
 80041be:	3001      	adds	r0, #1
 80041c0:	d023      	beq.n	800420a <_printf_common+0xae>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	6922      	ldr	r2, [r4, #16]
 80041c6:	f003 0306 	and.w	r3, r3, #6
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	bf14      	ite	ne
 80041ce:	2500      	movne	r5, #0
 80041d0:	6833      	ldreq	r3, [r6, #0]
 80041d2:	f04f 0600 	mov.w	r6, #0
 80041d6:	bf08      	it	eq
 80041d8:	68e5      	ldreq	r5, [r4, #12]
 80041da:	f104 041a 	add.w	r4, r4, #26
 80041de:	bf08      	it	eq
 80041e0:	1aed      	subeq	r5, r5, r3
 80041e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80041e6:	bf08      	it	eq
 80041e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041ec:	4293      	cmp	r3, r2
 80041ee:	bfc4      	itt	gt
 80041f0:	1a9b      	subgt	r3, r3, r2
 80041f2:	18ed      	addgt	r5, r5, r3
 80041f4:	42b5      	cmp	r5, r6
 80041f6:	d11a      	bne.n	800422e <_printf_common+0xd2>
 80041f8:	2000      	movs	r0, #0
 80041fa:	e008      	b.n	800420e <_printf_common+0xb2>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4652      	mov	r2, sl
 8004200:	4641      	mov	r1, r8
 8004202:	4638      	mov	r0, r7
 8004204:	47c8      	blx	r9
 8004206:	3001      	adds	r0, #1
 8004208:	d103      	bne.n	8004212 <_printf_common+0xb6>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295
 800420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004212:	3501      	adds	r5, #1
 8004214:	e7c1      	b.n	800419a <_printf_common+0x3e>
 8004216:	2030      	movs	r0, #48	@ 0x30
 8004218:	18e1      	adds	r1, r4, r3
 800421a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004224:	4422      	add	r2, r4
 8004226:	3302      	adds	r3, #2
 8004228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800422c:	e7c2      	b.n	80041b4 <_printf_common+0x58>
 800422e:	2301      	movs	r3, #1
 8004230:	4622      	mov	r2, r4
 8004232:	4641      	mov	r1, r8
 8004234:	4638      	mov	r0, r7
 8004236:	47c8      	blx	r9
 8004238:	3001      	adds	r0, #1
 800423a:	d0e6      	beq.n	800420a <_printf_common+0xae>
 800423c:	3601      	adds	r6, #1
 800423e:	e7d9      	b.n	80041f4 <_printf_common+0x98>

08004240 <_printf_i>:
 8004240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	7e0f      	ldrb	r7, [r1, #24]
 8004246:	4691      	mov	r9, r2
 8004248:	2f78      	cmp	r7, #120	@ 0x78
 800424a:	4680      	mov	r8, r0
 800424c:	460c      	mov	r4, r1
 800424e:	469a      	mov	sl, r3
 8004250:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004256:	d807      	bhi.n	8004268 <_printf_i+0x28>
 8004258:	2f62      	cmp	r7, #98	@ 0x62
 800425a:	d80a      	bhi.n	8004272 <_printf_i+0x32>
 800425c:	2f00      	cmp	r7, #0
 800425e:	f000 80d3 	beq.w	8004408 <_printf_i+0x1c8>
 8004262:	2f58      	cmp	r7, #88	@ 0x58
 8004264:	f000 80ba 	beq.w	80043dc <_printf_i+0x19c>
 8004268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800426c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004270:	e03a      	b.n	80042e8 <_printf_i+0xa8>
 8004272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004276:	2b15      	cmp	r3, #21
 8004278:	d8f6      	bhi.n	8004268 <_printf_i+0x28>
 800427a:	a101      	add	r1, pc, #4	@ (adr r1, 8004280 <_printf_i+0x40>)
 800427c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042ed 	.word	0x080042ed
 8004288:	08004269 	.word	0x08004269
 800428c:	08004269 	.word	0x08004269
 8004290:	08004269 	.word	0x08004269
 8004294:	08004269 	.word	0x08004269
 8004298:	080042ed 	.word	0x080042ed
 800429c:	08004269 	.word	0x08004269
 80042a0:	08004269 	.word	0x08004269
 80042a4:	08004269 	.word	0x08004269
 80042a8:	08004269 	.word	0x08004269
 80042ac:	080043ef 	.word	0x080043ef
 80042b0:	08004317 	.word	0x08004317
 80042b4:	080043a9 	.word	0x080043a9
 80042b8:	08004269 	.word	0x08004269
 80042bc:	08004269 	.word	0x08004269
 80042c0:	08004411 	.word	0x08004411
 80042c4:	08004269 	.word	0x08004269
 80042c8:	08004317 	.word	0x08004317
 80042cc:	08004269 	.word	0x08004269
 80042d0:	08004269 	.word	0x08004269
 80042d4:	080043b1 	.word	0x080043b1
 80042d8:	6833      	ldr	r3, [r6, #0]
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6032      	str	r2, [r6, #0]
 80042e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042e8:	2301      	movs	r3, #1
 80042ea:	e09e      	b.n	800442a <_printf_i+0x1ea>
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	1d19      	adds	r1, r3, #4
 80042f2:	6031      	str	r1, [r6, #0]
 80042f4:	0606      	lsls	r6, r0, #24
 80042f6:	d501      	bpl.n	80042fc <_printf_i+0xbc>
 80042f8:	681d      	ldr	r5, [r3, #0]
 80042fa:	e003      	b.n	8004304 <_printf_i+0xc4>
 80042fc:	0645      	lsls	r5, r0, #25
 80042fe:	d5fb      	bpl.n	80042f8 <_printf_i+0xb8>
 8004300:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004304:	2d00      	cmp	r5, #0
 8004306:	da03      	bge.n	8004310 <_printf_i+0xd0>
 8004308:	232d      	movs	r3, #45	@ 0x2d
 800430a:	426d      	negs	r5, r5
 800430c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004310:	230a      	movs	r3, #10
 8004312:	4859      	ldr	r0, [pc, #356]	@ (8004478 <_printf_i+0x238>)
 8004314:	e011      	b.n	800433a <_printf_i+0xfa>
 8004316:	6821      	ldr	r1, [r4, #0]
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	0608      	lsls	r0, r1, #24
 800431c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004320:	d402      	bmi.n	8004328 <_printf_i+0xe8>
 8004322:	0649      	lsls	r1, r1, #25
 8004324:	bf48      	it	mi
 8004326:	b2ad      	uxthmi	r5, r5
 8004328:	2f6f      	cmp	r7, #111	@ 0x6f
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	bf14      	ite	ne
 800432e:	230a      	movne	r3, #10
 8004330:	2308      	moveq	r3, #8
 8004332:	4851      	ldr	r0, [pc, #324]	@ (8004478 <_printf_i+0x238>)
 8004334:	2100      	movs	r1, #0
 8004336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800433a:	6866      	ldr	r6, [r4, #4]
 800433c:	2e00      	cmp	r6, #0
 800433e:	bfa8      	it	ge
 8004340:	6821      	ldrge	r1, [r4, #0]
 8004342:	60a6      	str	r6, [r4, #8]
 8004344:	bfa4      	itt	ge
 8004346:	f021 0104 	bicge.w	r1, r1, #4
 800434a:	6021      	strge	r1, [r4, #0]
 800434c:	b90d      	cbnz	r5, 8004352 <_printf_i+0x112>
 800434e:	2e00      	cmp	r6, #0
 8004350:	d04b      	beq.n	80043ea <_printf_i+0x1aa>
 8004352:	4616      	mov	r6, r2
 8004354:	fbb5 f1f3 	udiv	r1, r5, r3
 8004358:	fb03 5711 	mls	r7, r3, r1, r5
 800435c:	5dc7      	ldrb	r7, [r0, r7]
 800435e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004362:	462f      	mov	r7, r5
 8004364:	42bb      	cmp	r3, r7
 8004366:	460d      	mov	r5, r1
 8004368:	d9f4      	bls.n	8004354 <_printf_i+0x114>
 800436a:	2b08      	cmp	r3, #8
 800436c:	d10b      	bne.n	8004386 <_printf_i+0x146>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	07df      	lsls	r7, r3, #31
 8004372:	d508      	bpl.n	8004386 <_printf_i+0x146>
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	6861      	ldr	r1, [r4, #4]
 8004378:	4299      	cmp	r1, r3
 800437a:	bfde      	ittt	le
 800437c:	2330      	movle	r3, #48	@ 0x30
 800437e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004382:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004386:	1b92      	subs	r2, r2, r6
 8004388:	6122      	str	r2, [r4, #16]
 800438a:	464b      	mov	r3, r9
 800438c:	4621      	mov	r1, r4
 800438e:	4640      	mov	r0, r8
 8004390:	f8cd a000 	str.w	sl, [sp]
 8004394:	aa03      	add	r2, sp, #12
 8004396:	f7ff fee1 	bl	800415c <_printf_common>
 800439a:	3001      	adds	r0, #1
 800439c:	d14a      	bne.n	8004434 <_printf_i+0x1f4>
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	b004      	add	sp, #16
 80043a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f043 0320 	orr.w	r3, r3, #32
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	2778      	movs	r7, #120	@ 0x78
 80043b2:	4832      	ldr	r0, [pc, #200]	@ (800447c <_printf_i+0x23c>)
 80043b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	6831      	ldr	r1, [r6, #0]
 80043bc:	061f      	lsls	r7, r3, #24
 80043be:	f851 5b04 	ldr.w	r5, [r1], #4
 80043c2:	d402      	bmi.n	80043ca <_printf_i+0x18a>
 80043c4:	065f      	lsls	r7, r3, #25
 80043c6:	bf48      	it	mi
 80043c8:	b2ad      	uxthmi	r5, r5
 80043ca:	6031      	str	r1, [r6, #0]
 80043cc:	07d9      	lsls	r1, r3, #31
 80043ce:	bf44      	itt	mi
 80043d0:	f043 0320 	orrmi.w	r3, r3, #32
 80043d4:	6023      	strmi	r3, [r4, #0]
 80043d6:	b11d      	cbz	r5, 80043e0 <_printf_i+0x1a0>
 80043d8:	2310      	movs	r3, #16
 80043da:	e7ab      	b.n	8004334 <_printf_i+0xf4>
 80043dc:	4826      	ldr	r0, [pc, #152]	@ (8004478 <_printf_i+0x238>)
 80043de:	e7e9      	b.n	80043b4 <_printf_i+0x174>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	f023 0320 	bic.w	r3, r3, #32
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	e7f6      	b.n	80043d8 <_printf_i+0x198>
 80043ea:	4616      	mov	r6, r2
 80043ec:	e7bd      	b.n	800436a <_printf_i+0x12a>
 80043ee:	6833      	ldr	r3, [r6, #0]
 80043f0:	6825      	ldr	r5, [r4, #0]
 80043f2:	1d18      	adds	r0, r3, #4
 80043f4:	6961      	ldr	r1, [r4, #20]
 80043f6:	6030      	str	r0, [r6, #0]
 80043f8:	062e      	lsls	r6, r5, #24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	d501      	bpl.n	8004402 <_printf_i+0x1c2>
 80043fe:	6019      	str	r1, [r3, #0]
 8004400:	e002      	b.n	8004408 <_printf_i+0x1c8>
 8004402:	0668      	lsls	r0, r5, #25
 8004404:	d5fb      	bpl.n	80043fe <_printf_i+0x1be>
 8004406:	8019      	strh	r1, [r3, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	4616      	mov	r6, r2
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	e7bc      	b.n	800438a <_printf_i+0x14a>
 8004410:	6833      	ldr	r3, [r6, #0]
 8004412:	2100      	movs	r1, #0
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	6032      	str	r2, [r6, #0]
 8004418:	681e      	ldr	r6, [r3, #0]
 800441a:	6862      	ldr	r2, [r4, #4]
 800441c:	4630      	mov	r0, r6
 800441e:	f000 f9d4 	bl	80047ca <memchr>
 8004422:	b108      	cbz	r0, 8004428 <_printf_i+0x1e8>
 8004424:	1b80      	subs	r0, r0, r6
 8004426:	6060      	str	r0, [r4, #4]
 8004428:	6863      	ldr	r3, [r4, #4]
 800442a:	6123      	str	r3, [r4, #16]
 800442c:	2300      	movs	r3, #0
 800442e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004432:	e7aa      	b.n	800438a <_printf_i+0x14a>
 8004434:	4632      	mov	r2, r6
 8004436:	4649      	mov	r1, r9
 8004438:	4640      	mov	r0, r8
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	47d0      	blx	sl
 800443e:	3001      	adds	r0, #1
 8004440:	d0ad      	beq.n	800439e <_printf_i+0x15e>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	079b      	lsls	r3, r3, #30
 8004446:	d413      	bmi.n	8004470 <_printf_i+0x230>
 8004448:	68e0      	ldr	r0, [r4, #12]
 800444a:	9b03      	ldr	r3, [sp, #12]
 800444c:	4298      	cmp	r0, r3
 800444e:	bfb8      	it	lt
 8004450:	4618      	movlt	r0, r3
 8004452:	e7a6      	b.n	80043a2 <_printf_i+0x162>
 8004454:	2301      	movs	r3, #1
 8004456:	4632      	mov	r2, r6
 8004458:	4649      	mov	r1, r9
 800445a:	4640      	mov	r0, r8
 800445c:	47d0      	blx	sl
 800445e:	3001      	adds	r0, #1
 8004460:	d09d      	beq.n	800439e <_printf_i+0x15e>
 8004462:	3501      	adds	r5, #1
 8004464:	68e3      	ldr	r3, [r4, #12]
 8004466:	9903      	ldr	r1, [sp, #12]
 8004468:	1a5b      	subs	r3, r3, r1
 800446a:	42ab      	cmp	r3, r5
 800446c:	dcf2      	bgt.n	8004454 <_printf_i+0x214>
 800446e:	e7eb      	b.n	8004448 <_printf_i+0x208>
 8004470:	2500      	movs	r5, #0
 8004472:	f104 0619 	add.w	r6, r4, #25
 8004476:	e7f5      	b.n	8004464 <_printf_i+0x224>
 8004478:	080068e0 	.word	0x080068e0
 800447c:	080068f1 	.word	0x080068f1

08004480 <std>:
 8004480:	2300      	movs	r3, #0
 8004482:	b510      	push	{r4, lr}
 8004484:	4604      	mov	r4, r0
 8004486:	e9c0 3300 	strd	r3, r3, [r0]
 800448a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800448e:	6083      	str	r3, [r0, #8]
 8004490:	8181      	strh	r1, [r0, #12]
 8004492:	6643      	str	r3, [r0, #100]	@ 0x64
 8004494:	81c2      	strh	r2, [r0, #14]
 8004496:	6183      	str	r3, [r0, #24]
 8004498:	4619      	mov	r1, r3
 800449a:	2208      	movs	r2, #8
 800449c:	305c      	adds	r0, #92	@ 0x5c
 800449e:	f000 f914 	bl	80046ca <memset>
 80044a2:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <std+0x58>)
 80044a4:	6224      	str	r4, [r4, #32]
 80044a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80044a8:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <std+0x5c>)
 80044aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <std+0x60>)
 80044ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044b0:	4b0c      	ldr	r3, [pc, #48]	@ (80044e4 <std+0x64>)
 80044b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <std+0x68>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d006      	beq.n	80044c8 <std+0x48>
 80044ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044be:	4294      	cmp	r4, r2
 80044c0:	d002      	beq.n	80044c8 <std+0x48>
 80044c2:	33d0      	adds	r3, #208	@ 0xd0
 80044c4:	429c      	cmp	r4, r3
 80044c6:	d105      	bne.n	80044d4 <std+0x54>
 80044c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d0:	f000 b978 	b.w	80047c4 <__retarget_lock_init_recursive>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	bf00      	nop
 80044d8:	08004645 	.word	0x08004645
 80044dc:	08004667 	.word	0x08004667
 80044e0:	0800469f 	.word	0x0800469f
 80044e4:	080046c3 	.word	0x080046c3
 80044e8:	20000cb4 	.word	0x20000cb4

080044ec <stdio_exit_handler>:
 80044ec:	4a02      	ldr	r2, [pc, #8]	@ (80044f8 <stdio_exit_handler+0xc>)
 80044ee:	4903      	ldr	r1, [pc, #12]	@ (80044fc <stdio_exit_handler+0x10>)
 80044f0:	4803      	ldr	r0, [pc, #12]	@ (8004500 <stdio_exit_handler+0x14>)
 80044f2:	f000 b869 	b.w	80045c8 <_fwalk_sglue>
 80044f6:	bf00      	nop
 80044f8:	20000a70 	.word	0x20000a70
 80044fc:	08006135 	.word	0x08006135
 8004500:	20000a80 	.word	0x20000a80

08004504 <cleanup_stdio>:
 8004504:	6841      	ldr	r1, [r0, #4]
 8004506:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <cleanup_stdio+0x34>)
 8004508:	b510      	push	{r4, lr}
 800450a:	4299      	cmp	r1, r3
 800450c:	4604      	mov	r4, r0
 800450e:	d001      	beq.n	8004514 <cleanup_stdio+0x10>
 8004510:	f001 fe10 	bl	8006134 <_fflush_r>
 8004514:	68a1      	ldr	r1, [r4, #8]
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <cleanup_stdio+0x38>)
 8004518:	4299      	cmp	r1, r3
 800451a:	d002      	beq.n	8004522 <cleanup_stdio+0x1e>
 800451c:	4620      	mov	r0, r4
 800451e:	f001 fe09 	bl	8006134 <_fflush_r>
 8004522:	68e1      	ldr	r1, [r4, #12]
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <cleanup_stdio+0x3c>)
 8004526:	4299      	cmp	r1, r3
 8004528:	d004      	beq.n	8004534 <cleanup_stdio+0x30>
 800452a:	4620      	mov	r0, r4
 800452c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004530:	f001 be00 	b.w	8006134 <_fflush_r>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	bf00      	nop
 8004538:	20000cb4 	.word	0x20000cb4
 800453c:	20000d1c 	.word	0x20000d1c
 8004540:	20000d84 	.word	0x20000d84

08004544 <global_stdio_init.part.0>:
 8004544:	b510      	push	{r4, lr}
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <global_stdio_init.part.0+0x30>)
 8004548:	4c0b      	ldr	r4, [pc, #44]	@ (8004578 <global_stdio_init.part.0+0x34>)
 800454a:	4a0c      	ldr	r2, [pc, #48]	@ (800457c <global_stdio_init.part.0+0x38>)
 800454c:	4620      	mov	r0, r4
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	2104      	movs	r1, #4
 8004552:	2200      	movs	r2, #0
 8004554:	f7ff ff94 	bl	8004480 <std>
 8004558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800455c:	2201      	movs	r2, #1
 800455e:	2109      	movs	r1, #9
 8004560:	f7ff ff8e 	bl	8004480 <std>
 8004564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004568:	2202      	movs	r2, #2
 800456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456e:	2112      	movs	r1, #18
 8004570:	f7ff bf86 	b.w	8004480 <std>
 8004574:	20000dec 	.word	0x20000dec
 8004578:	20000cb4 	.word	0x20000cb4
 800457c:	080044ed 	.word	0x080044ed

08004580 <__sfp_lock_acquire>:
 8004580:	4801      	ldr	r0, [pc, #4]	@ (8004588 <__sfp_lock_acquire+0x8>)
 8004582:	f000 b920 	b.w	80047c6 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	20000df5 	.word	0x20000df5

0800458c <__sfp_lock_release>:
 800458c:	4801      	ldr	r0, [pc, #4]	@ (8004594 <__sfp_lock_release+0x8>)
 800458e:	f000 b91b 	b.w	80047c8 <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	20000df5 	.word	0x20000df5

08004598 <__sinit>:
 8004598:	b510      	push	{r4, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	f7ff fff0 	bl	8004580 <__sfp_lock_acquire>
 80045a0:	6a23      	ldr	r3, [r4, #32]
 80045a2:	b11b      	cbz	r3, 80045ac <__sinit+0x14>
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a8:	f7ff bff0 	b.w	800458c <__sfp_lock_release>
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <__sinit+0x28>)
 80045ae:	6223      	str	r3, [r4, #32]
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <__sinit+0x2c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f5      	bne.n	80045a4 <__sinit+0xc>
 80045b8:	f7ff ffc4 	bl	8004544 <global_stdio_init.part.0>
 80045bc:	e7f2      	b.n	80045a4 <__sinit+0xc>
 80045be:	bf00      	nop
 80045c0:	08004505 	.word	0x08004505
 80045c4:	20000dec 	.word	0x20000dec

080045c8 <_fwalk_sglue>:
 80045c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045cc:	4607      	mov	r7, r0
 80045ce:	4688      	mov	r8, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	2600      	movs	r6, #0
 80045d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045d8:	f1b9 0901 	subs.w	r9, r9, #1
 80045dc:	d505      	bpl.n	80045ea <_fwalk_sglue+0x22>
 80045de:	6824      	ldr	r4, [r4, #0]
 80045e0:	2c00      	cmp	r4, #0
 80045e2:	d1f7      	bne.n	80045d4 <_fwalk_sglue+0xc>
 80045e4:	4630      	mov	r0, r6
 80045e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ea:	89ab      	ldrh	r3, [r5, #12]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d907      	bls.n	8004600 <_fwalk_sglue+0x38>
 80045f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f4:	3301      	adds	r3, #1
 80045f6:	d003      	beq.n	8004600 <_fwalk_sglue+0x38>
 80045f8:	4629      	mov	r1, r5
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c0      	blx	r8
 80045fe:	4306      	orrs	r6, r0
 8004600:	3568      	adds	r5, #104	@ 0x68
 8004602:	e7e9      	b.n	80045d8 <_fwalk_sglue+0x10>

08004604 <siprintf>:
 8004604:	b40e      	push	{r1, r2, r3}
 8004606:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800460a:	b500      	push	{lr}
 800460c:	b09c      	sub	sp, #112	@ 0x70
 800460e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004610:	9002      	str	r0, [sp, #8]
 8004612:	9006      	str	r0, [sp, #24]
 8004614:	9107      	str	r1, [sp, #28]
 8004616:	9104      	str	r1, [sp, #16]
 8004618:	4808      	ldr	r0, [pc, #32]	@ (800463c <siprintf+0x38>)
 800461a:	4909      	ldr	r1, [pc, #36]	@ (8004640 <siprintf+0x3c>)
 800461c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004620:	9105      	str	r1, [sp, #20]
 8004622:	6800      	ldr	r0, [r0, #0]
 8004624:	a902      	add	r1, sp, #8
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	f001 fc08 	bl	8005e3c <_svfiprintf_r>
 800462c:	2200      	movs	r2, #0
 800462e:	9b02      	ldr	r3, [sp, #8]
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	b01c      	add	sp, #112	@ 0x70
 8004634:	f85d eb04 	ldr.w	lr, [sp], #4
 8004638:	b003      	add	sp, #12
 800463a:	4770      	bx	lr
 800463c:	20000a7c 	.word	0x20000a7c
 8004640:	ffff0208 	.word	0xffff0208

08004644 <__sread>:
 8004644:	b510      	push	{r4, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464c:	f000 f86c 	bl	8004728 <_read_r>
 8004650:	2800      	cmp	r0, #0
 8004652:	bfab      	itete	ge
 8004654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004656:	89a3      	ldrhlt	r3, [r4, #12]
 8004658:	181b      	addge	r3, r3, r0
 800465a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800465e:	bfac      	ite	ge
 8004660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004662:	81a3      	strhlt	r3, [r4, #12]
 8004664:	bd10      	pop	{r4, pc}

08004666 <__swrite>:
 8004666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800466a:	461f      	mov	r7, r3
 800466c:	898b      	ldrh	r3, [r1, #12]
 800466e:	4605      	mov	r5, r0
 8004670:	05db      	lsls	r3, r3, #23
 8004672:	460c      	mov	r4, r1
 8004674:	4616      	mov	r6, r2
 8004676:	d505      	bpl.n	8004684 <__swrite+0x1e>
 8004678:	2302      	movs	r3, #2
 800467a:	2200      	movs	r2, #0
 800467c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004680:	f000 f840 	bl	8004704 <_lseek_r>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	4632      	mov	r2, r6
 8004688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	4628      	mov	r0, r5
 8004690:	463b      	mov	r3, r7
 8004692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800469a:	f000 b857 	b.w	800474c <_write_r>

0800469e <__sseek>:
 800469e:	b510      	push	{r4, lr}
 80046a0:	460c      	mov	r4, r1
 80046a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a6:	f000 f82d 	bl	8004704 <_lseek_r>
 80046aa:	1c43      	adds	r3, r0, #1
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	bf15      	itete	ne
 80046b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046ba:	81a3      	strheq	r3, [r4, #12]
 80046bc:	bf18      	it	ne
 80046be:	81a3      	strhne	r3, [r4, #12]
 80046c0:	bd10      	pop	{r4, pc}

080046c2 <__sclose>:
 80046c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c6:	f000 b80d 	b.w	80046e4 <_close_r>

080046ca <memset>:
 80046ca:	4603      	mov	r3, r0
 80046cc:	4402      	add	r2, r0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d100      	bne.n	80046d4 <memset+0xa>
 80046d2:	4770      	bx	lr
 80046d4:	f803 1b01 	strb.w	r1, [r3], #1
 80046d8:	e7f9      	b.n	80046ce <memset+0x4>
	...

080046dc <_localeconv_r>:
 80046dc:	4800      	ldr	r0, [pc, #0]	@ (80046e0 <_localeconv_r+0x4>)
 80046de:	4770      	bx	lr
 80046e0:	20000bbc 	.word	0x20000bbc

080046e4 <_close_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	2300      	movs	r3, #0
 80046e8:	4d05      	ldr	r5, [pc, #20]	@ (8004700 <_close_r+0x1c>)
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	f7fd f907 	bl	8001902 <_close>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d102      	bne.n	80046fe <_close_r+0x1a>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	b103      	cbz	r3, 80046fe <_close_r+0x1a>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	20000df0 	.word	0x20000df0

08004704 <_lseek_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	2200      	movs	r2, #0
 800470e:	4d05      	ldr	r5, [pc, #20]	@ (8004724 <_lseek_r+0x20>)
 8004710:	602a      	str	r2, [r5, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	f7fd f919 	bl	800194a <_lseek>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_lseek_r+0x1e>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_lseek_r+0x1e>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	20000df0 	.word	0x20000df0

08004728 <_read_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	2200      	movs	r2, #0
 8004732:	4d05      	ldr	r5, [pc, #20]	@ (8004748 <_read_r+0x20>)
 8004734:	602a      	str	r2, [r5, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fd f8aa 	bl	8001890 <_read>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_read_r+0x1e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_read_r+0x1e>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	20000df0 	.word	0x20000df0

0800474c <_write_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	2200      	movs	r2, #0
 8004756:	4d05      	ldr	r5, [pc, #20]	@ (800476c <_write_r+0x20>)
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fd f8b5 	bl	80018ca <_write>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_write_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_write_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20000df0 	.word	0x20000df0

08004770 <__errno>:
 8004770:	4b01      	ldr	r3, [pc, #4]	@ (8004778 <__errno+0x8>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000a7c 	.word	0x20000a7c

0800477c <__libc_init_array>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	2600      	movs	r6, #0
 8004780:	4d0c      	ldr	r5, [pc, #48]	@ (80047b4 <__libc_init_array+0x38>)
 8004782:	4c0d      	ldr	r4, [pc, #52]	@ (80047b8 <__libc_init_array+0x3c>)
 8004784:	1b64      	subs	r4, r4, r5
 8004786:	10a4      	asrs	r4, r4, #2
 8004788:	42a6      	cmp	r6, r4
 800478a:	d109      	bne.n	80047a0 <__libc_init_array+0x24>
 800478c:	f002 f86e 	bl	800686c <_init>
 8004790:	2600      	movs	r6, #0
 8004792:	4d0a      	ldr	r5, [pc, #40]	@ (80047bc <__libc_init_array+0x40>)
 8004794:	4c0a      	ldr	r4, [pc, #40]	@ (80047c0 <__libc_init_array+0x44>)
 8004796:	1b64      	subs	r4, r4, r5
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	42a6      	cmp	r6, r4
 800479c:	d105      	bne.n	80047aa <__libc_init_array+0x2e>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a4:	4798      	blx	r3
 80047a6:	3601      	adds	r6, #1
 80047a8:	e7ee      	b.n	8004788 <__libc_init_array+0xc>
 80047aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ae:	4798      	blx	r3
 80047b0:	3601      	adds	r6, #1
 80047b2:	e7f2      	b.n	800479a <__libc_init_array+0x1e>
 80047b4:	08006c48 	.word	0x08006c48
 80047b8:	08006c48 	.word	0x08006c48
 80047bc:	08006c48 	.word	0x08006c48
 80047c0:	08006c4c 	.word	0x08006c4c

080047c4 <__retarget_lock_init_recursive>:
 80047c4:	4770      	bx	lr

080047c6 <__retarget_lock_acquire_recursive>:
 80047c6:	4770      	bx	lr

080047c8 <__retarget_lock_release_recursive>:
 80047c8:	4770      	bx	lr

080047ca <memchr>:
 80047ca:	4603      	mov	r3, r0
 80047cc:	b510      	push	{r4, lr}
 80047ce:	b2c9      	uxtb	r1, r1
 80047d0:	4402      	add	r2, r0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	d101      	bne.n	80047dc <memchr+0x12>
 80047d8:	2000      	movs	r0, #0
 80047da:	e003      	b.n	80047e4 <memchr+0x1a>
 80047dc:	7804      	ldrb	r4, [r0, #0]
 80047de:	3301      	adds	r3, #1
 80047e0:	428c      	cmp	r4, r1
 80047e2:	d1f6      	bne.n	80047d2 <memchr+0x8>
 80047e4:	bd10      	pop	{r4, pc}

080047e6 <quorem>:
 80047e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6903      	ldr	r3, [r0, #16]
 80047ec:	690c      	ldr	r4, [r1, #16]
 80047ee:	4607      	mov	r7, r0
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	db7e      	blt.n	80048f2 <quorem+0x10c>
 80047f4:	3c01      	subs	r4, #1
 80047f6:	00a3      	lsls	r3, r4, #2
 80047f8:	f100 0514 	add.w	r5, r0, #20
 80047fc:	f101 0814 	add.w	r8, r1, #20
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800480c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004810:	3301      	adds	r3, #1
 8004812:	429a      	cmp	r2, r3
 8004814:	fbb2 f6f3 	udiv	r6, r2, r3
 8004818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800481c:	d32e      	bcc.n	800487c <quorem+0x96>
 800481e:	f04f 0a00 	mov.w	sl, #0
 8004822:	46c4      	mov	ip, r8
 8004824:	46ae      	mov	lr, r5
 8004826:	46d3      	mov	fp, sl
 8004828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800482c:	b298      	uxth	r0, r3
 800482e:	fb06 a000 	mla	r0, r6, r0, sl
 8004832:	0c1b      	lsrs	r3, r3, #16
 8004834:	0c02      	lsrs	r2, r0, #16
 8004836:	fb06 2303 	mla	r3, r6, r3, r2
 800483a:	f8de 2000 	ldr.w	r2, [lr]
 800483e:	b280      	uxth	r0, r0
 8004840:	b292      	uxth	r2, r2
 8004842:	1a12      	subs	r2, r2, r0
 8004844:	445a      	add	r2, fp
 8004846:	f8de 0000 	ldr.w	r0, [lr]
 800484a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800484e:	b29b      	uxth	r3, r3
 8004850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004858:	b292      	uxth	r2, r2
 800485a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800485e:	45e1      	cmp	r9, ip
 8004860:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004864:	f84e 2b04 	str.w	r2, [lr], #4
 8004868:	d2de      	bcs.n	8004828 <quorem+0x42>
 800486a:	9b00      	ldr	r3, [sp, #0]
 800486c:	58eb      	ldr	r3, [r5, r3]
 800486e:	b92b      	cbnz	r3, 800487c <quorem+0x96>
 8004870:	9b01      	ldr	r3, [sp, #4]
 8004872:	3b04      	subs	r3, #4
 8004874:	429d      	cmp	r5, r3
 8004876:	461a      	mov	r2, r3
 8004878:	d32f      	bcc.n	80048da <quorem+0xf4>
 800487a:	613c      	str	r4, [r7, #16]
 800487c:	4638      	mov	r0, r7
 800487e:	f001 f979 	bl	8005b74 <__mcmp>
 8004882:	2800      	cmp	r0, #0
 8004884:	db25      	blt.n	80048d2 <quorem+0xec>
 8004886:	4629      	mov	r1, r5
 8004888:	2000      	movs	r0, #0
 800488a:	f858 2b04 	ldr.w	r2, [r8], #4
 800488e:	f8d1 c000 	ldr.w	ip, [r1]
 8004892:	fa1f fe82 	uxth.w	lr, r2
 8004896:	fa1f f38c 	uxth.w	r3, ip
 800489a:	eba3 030e 	sub.w	r3, r3, lr
 800489e:	4403      	add	r3, r0
 80048a0:	0c12      	lsrs	r2, r2, #16
 80048a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b0:	45c1      	cmp	r9, r8
 80048b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048b6:	f841 3b04 	str.w	r3, [r1], #4
 80048ba:	d2e6      	bcs.n	800488a <quorem+0xa4>
 80048bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048c4:	b922      	cbnz	r2, 80048d0 <quorem+0xea>
 80048c6:	3b04      	subs	r3, #4
 80048c8:	429d      	cmp	r5, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	d30b      	bcc.n	80048e6 <quorem+0x100>
 80048ce:	613c      	str	r4, [r7, #16]
 80048d0:	3601      	adds	r6, #1
 80048d2:	4630      	mov	r0, r6
 80048d4:	b003      	add	sp, #12
 80048d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	3b04      	subs	r3, #4
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d1cb      	bne.n	800487a <quorem+0x94>
 80048e2:	3c01      	subs	r4, #1
 80048e4:	e7c6      	b.n	8004874 <quorem+0x8e>
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	3b04      	subs	r3, #4
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	d1ef      	bne.n	80048ce <quorem+0xe8>
 80048ee:	3c01      	subs	r4, #1
 80048f0:	e7ea      	b.n	80048c8 <quorem+0xe2>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e7ee      	b.n	80048d4 <quorem+0xee>
	...

080048f8 <_dtoa_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4614      	mov	r4, r2
 80048fe:	461d      	mov	r5, r3
 8004900:	69c7      	ldr	r7, [r0, #28]
 8004902:	b097      	sub	sp, #92	@ 0x5c
 8004904:	4683      	mov	fp, r0
 8004906:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800490a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800490c:	b97f      	cbnz	r7, 800492e <_dtoa_r+0x36>
 800490e:	2010      	movs	r0, #16
 8004910:	f000 fe02 	bl	8005518 <malloc>
 8004914:	4602      	mov	r2, r0
 8004916:	f8cb 001c 	str.w	r0, [fp, #28]
 800491a:	b920      	cbnz	r0, 8004926 <_dtoa_r+0x2e>
 800491c:	21ef      	movs	r1, #239	@ 0xef
 800491e:	4ba8      	ldr	r3, [pc, #672]	@ (8004bc0 <_dtoa_r+0x2c8>)
 8004920:	48a8      	ldr	r0, [pc, #672]	@ (8004bc4 <_dtoa_r+0x2cc>)
 8004922:	f001 fc67 	bl	80061f4 <__assert_func>
 8004926:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800492a:	6007      	str	r7, [r0, #0]
 800492c:	60c7      	str	r7, [r0, #12]
 800492e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	b159      	cbz	r1, 800494e <_dtoa_r+0x56>
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	2301      	movs	r3, #1
 800493a:	4093      	lsls	r3, r2
 800493c:	604a      	str	r2, [r1, #4]
 800493e:	608b      	str	r3, [r1, #8]
 8004940:	4658      	mov	r0, fp
 8004942:	f000 fedf 	bl	8005704 <_Bfree>
 8004946:	2200      	movs	r2, #0
 8004948:	f8db 301c 	ldr.w	r3, [fp, #28]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	1e2b      	subs	r3, r5, #0
 8004950:	bfaf      	iteee	ge
 8004952:	2300      	movge	r3, #0
 8004954:	2201      	movlt	r2, #1
 8004956:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800495a:	9303      	strlt	r3, [sp, #12]
 800495c:	bfa8      	it	ge
 800495e:	6033      	strge	r3, [r6, #0]
 8004960:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004964:	4b98      	ldr	r3, [pc, #608]	@ (8004bc8 <_dtoa_r+0x2d0>)
 8004966:	bfb8      	it	lt
 8004968:	6032      	strlt	r2, [r6, #0]
 800496a:	ea33 0308 	bics.w	r3, r3, r8
 800496e:	d112      	bne.n	8004996 <_dtoa_r+0x9e>
 8004970:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004974:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800497c:	4323      	orrs	r3, r4
 800497e:	f000 8550 	beq.w	8005422 <_dtoa_r+0xb2a>
 8004982:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004984:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004bcc <_dtoa_r+0x2d4>
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8552 	beq.w	8005432 <_dtoa_r+0xb3a>
 800498e:	f10a 0303 	add.w	r3, sl, #3
 8004992:	f000 bd4c 	b.w	800542e <_dtoa_r+0xb36>
 8004996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800499a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800499e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049a2:	2200      	movs	r2, #0
 80049a4:	2300      	movs	r3, #0
 80049a6:	f7fb ffff 	bl	80009a8 <__aeabi_dcmpeq>
 80049aa:	4607      	mov	r7, r0
 80049ac:	b158      	cbz	r0, 80049c6 <_dtoa_r+0xce>
 80049ae:	2301      	movs	r3, #1
 80049b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049b6:	b113      	cbz	r3, 80049be <_dtoa_r+0xc6>
 80049b8:	4b85      	ldr	r3, [pc, #532]	@ (8004bd0 <_dtoa_r+0x2d8>)
 80049ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004bd4 <_dtoa_r+0x2dc>
 80049c2:	f000 bd36 	b.w	8005432 <_dtoa_r+0xb3a>
 80049c6:	ab14      	add	r3, sp, #80	@ 0x50
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	ab15      	add	r3, sp, #84	@ 0x54
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4658      	mov	r0, fp
 80049d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80049d4:	f001 f97e 	bl	8005cd4 <__d2b>
 80049d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80049dc:	4681      	mov	r9, r0
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d077      	beq.n	8004ad2 <_dtoa_r+0x1da>
 80049e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80049ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80049f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80049f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80049fa:	4619      	mov	r1, r3
 80049fc:	2200      	movs	r2, #0
 80049fe:	4b76      	ldr	r3, [pc, #472]	@ (8004bd8 <_dtoa_r+0x2e0>)
 8004a00:	f7fb fbb2 	bl	8000168 <__aeabi_dsub>
 8004a04:	a368      	add	r3, pc, #416	@ (adr r3, 8004ba8 <_dtoa_r+0x2b0>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fd65 	bl	80004d8 <__aeabi_dmul>
 8004a0e:	a368      	add	r3, pc, #416	@ (adr r3, 8004bb0 <_dtoa_r+0x2b8>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fbaa 	bl	800016c <__adddf3>
 8004a18:	4604      	mov	r4, r0
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	460d      	mov	r5, r1
 8004a1e:	f7fb fcf1 	bl	8000404 <__aeabi_i2d>
 8004a22:	a365      	add	r3, pc, #404	@ (adr r3, 8004bb8 <_dtoa_r+0x2c0>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f7fb fd56 	bl	80004d8 <__aeabi_dmul>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4620      	mov	r0, r4
 8004a32:	4629      	mov	r1, r5
 8004a34:	f7fb fb9a 	bl	800016c <__adddf3>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	f7fb fffc 	bl	8000a38 <__aeabi_d2iz>
 8004a40:	2200      	movs	r2, #0
 8004a42:	4607      	mov	r7, r0
 8004a44:	2300      	movs	r3, #0
 8004a46:	4620      	mov	r0, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f7fb ffb7 	bl	80009bc <__aeabi_dcmplt>
 8004a4e:	b140      	cbz	r0, 8004a62 <_dtoa_r+0x16a>
 8004a50:	4638      	mov	r0, r7
 8004a52:	f7fb fcd7 	bl	8000404 <__aeabi_i2d>
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	f7fb ffa5 	bl	80009a8 <__aeabi_dcmpeq>
 8004a5e:	b900      	cbnz	r0, 8004a62 <_dtoa_r+0x16a>
 8004a60:	3f01      	subs	r7, #1
 8004a62:	2f16      	cmp	r7, #22
 8004a64:	d853      	bhi.n	8004b0e <_dtoa_r+0x216>
 8004a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004bdc <_dtoa_r+0x2e4>)
 8004a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb ffa2 	bl	80009bc <__aeabi_dcmplt>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d04a      	beq.n	8004b12 <_dtoa_r+0x21a>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	3f01      	subs	r7, #1
 8004a80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a84:	1b9b      	subs	r3, r3, r6
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	bf46      	itte	mi
 8004a8a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004a8e:	2300      	movmi	r3, #0
 8004a90:	f04f 0800 	movpl.w	r8, #0
 8004a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a96:	bf48      	it	mi
 8004a98:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004a9a:	2f00      	cmp	r7, #0
 8004a9c:	db3b      	blt.n	8004b16 <_dtoa_r+0x21e>
 8004a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa0:	970e      	str	r7, [sp, #56]	@ 0x38
 8004aa2:	443b      	add	r3, r7
 8004aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d866      	bhi.n	8004b7e <_dtoa_r+0x286>
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	bfc4      	itt	gt
 8004ab4:	3b04      	subgt	r3, #4
 8004ab6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004ab8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004aba:	bfc8      	it	gt
 8004abc:	2400      	movgt	r4, #0
 8004abe:	f1a3 0302 	sub.w	r3, r3, #2
 8004ac2:	bfd8      	it	le
 8004ac4:	2401      	movle	r4, #1
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d864      	bhi.n	8004b94 <_dtoa_r+0x29c>
 8004aca:	e8df f003 	tbb	[pc, r3]
 8004ace:	382b      	.short	0x382b
 8004ad0:	5636      	.short	0x5636
 8004ad2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004ad6:	441e      	add	r6, r3
 8004ad8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	bfc1      	itttt	gt
 8004ae0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ae4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ae8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004aec:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004af0:	bfd6      	itet	le
 8004af2:	f1c3 0320 	rsble	r3, r3, #32
 8004af6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004afa:	fa04 f003 	lslle.w	r0, r4, r3
 8004afe:	f7fb fc71 	bl	80003e4 <__aeabi_ui2d>
 8004b02:	2201      	movs	r2, #1
 8004b04:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b08:	3e01      	subs	r6, #1
 8004b0a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b0c:	e775      	b.n	80049fa <_dtoa_r+0x102>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e7b6      	b.n	8004a80 <_dtoa_r+0x188>
 8004b12:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b14:	e7b5      	b.n	8004a82 <_dtoa_r+0x18a>
 8004b16:	427b      	negs	r3, r7
 8004b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	eba8 0807 	sub.w	r8, r8, r7
 8004b20:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b22:	e7c2      	b.n	8004aaa <_dtoa_r+0x1b2>
 8004b24:	2300      	movs	r3, #0
 8004b26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dc35      	bgt.n	8004b9a <_dtoa_r+0x2a2>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	461a      	mov	r2, r3
 8004b32:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b36:	9221      	str	r2, [sp, #132]	@ 0x84
 8004b38:	e00b      	b.n	8004b52 <_dtoa_r+0x25a>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7f3      	b.n	8004b26 <_dtoa_r+0x22e>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	9308      	str	r3, [sp, #32]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	9307      	str	r3, [sp, #28]
 8004b4e:	bfb8      	it	lt
 8004b50:	2301      	movlt	r3, #1
 8004b52:	2100      	movs	r1, #0
 8004b54:	2204      	movs	r2, #4
 8004b56:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004b5a:	f102 0514 	add.w	r5, r2, #20
 8004b5e:	429d      	cmp	r5, r3
 8004b60:	d91f      	bls.n	8004ba2 <_dtoa_r+0x2aa>
 8004b62:	6041      	str	r1, [r0, #4]
 8004b64:	4658      	mov	r0, fp
 8004b66:	f000 fd8d 	bl	8005684 <_Balloc>
 8004b6a:	4682      	mov	sl, r0
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d139      	bne.n	8004be4 <_dtoa_r+0x2ec>
 8004b70:	4602      	mov	r2, r0
 8004b72:	f240 11af 	movw	r1, #431	@ 0x1af
 8004b76:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <_dtoa_r+0x2e8>)
 8004b78:	e6d2      	b.n	8004920 <_dtoa_r+0x28>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7e0      	b.n	8004b40 <_dtoa_r+0x248>
 8004b7e:	2401      	movs	r4, #1
 8004b80:	2300      	movs	r3, #0
 8004b82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b84:	9320      	str	r3, [sp, #128]	@ 0x80
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b90:	2312      	movs	r3, #18
 8004b92:	e7d0      	b.n	8004b36 <_dtoa_r+0x23e>
 8004b94:	2301      	movs	r3, #1
 8004b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b98:	e7f5      	b.n	8004b86 <_dtoa_r+0x28e>
 8004b9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ba0:	e7d7      	b.n	8004b52 <_dtoa_r+0x25a>
 8004ba2:	3101      	adds	r1, #1
 8004ba4:	0052      	lsls	r2, r2, #1
 8004ba6:	e7d8      	b.n	8004b5a <_dtoa_r+0x262>
 8004ba8:	636f4361 	.word	0x636f4361
 8004bac:	3fd287a7 	.word	0x3fd287a7
 8004bb0:	8b60c8b3 	.word	0x8b60c8b3
 8004bb4:	3fc68a28 	.word	0x3fc68a28
 8004bb8:	509f79fb 	.word	0x509f79fb
 8004bbc:	3fd34413 	.word	0x3fd34413
 8004bc0:	0800690f 	.word	0x0800690f
 8004bc4:	08006926 	.word	0x08006926
 8004bc8:	7ff00000 	.word	0x7ff00000
 8004bcc:	0800690b 	.word	0x0800690b
 8004bd0:	080068df 	.word	0x080068df
 8004bd4:	080068de 	.word	0x080068de
 8004bd8:	3ff80000 	.word	0x3ff80000
 8004bdc:	08006a20 	.word	0x08006a20
 8004be0:	0800697e 	.word	0x0800697e
 8004be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004be8:	6018      	str	r0, [r3, #0]
 8004bea:	9b07      	ldr	r3, [sp, #28]
 8004bec:	2b0e      	cmp	r3, #14
 8004bee:	f200 80a4 	bhi.w	8004d3a <_dtoa_r+0x442>
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	f000 80a1 	beq.w	8004d3a <_dtoa_r+0x442>
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	dd33      	ble.n	8004c64 <_dtoa_r+0x36c>
 8004bfc:	4b86      	ldr	r3, [pc, #536]	@ (8004e18 <_dtoa_r+0x520>)
 8004bfe:	f007 020f 	and.w	r2, r7, #15
 8004c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c06:	05f8      	lsls	r0, r7, #23
 8004c08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c14:	d516      	bpl.n	8004c44 <_dtoa_r+0x34c>
 8004c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c1a:	4b80      	ldr	r3, [pc, #512]	@ (8004e1c <_dtoa_r+0x524>)
 8004c1c:	2603      	movs	r6, #3
 8004c1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c22:	f7fb fd83 	bl	800072c <__aeabi_ddiv>
 8004c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c2a:	f004 040f 	and.w	r4, r4, #15
 8004c2e:	4d7b      	ldr	r5, [pc, #492]	@ (8004e1c <_dtoa_r+0x524>)
 8004c30:	b954      	cbnz	r4, 8004c48 <_dtoa_r+0x350>
 8004c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c3a:	f7fb fd77 	bl	800072c <__aeabi_ddiv>
 8004c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c42:	e028      	b.n	8004c96 <_dtoa_r+0x39e>
 8004c44:	2602      	movs	r6, #2
 8004c46:	e7f2      	b.n	8004c2e <_dtoa_r+0x336>
 8004c48:	07e1      	lsls	r1, r4, #31
 8004c4a:	d508      	bpl.n	8004c5e <_dtoa_r+0x366>
 8004c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c54:	f7fb fc40 	bl	80004d8 <__aeabi_dmul>
 8004c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	1064      	asrs	r4, r4, #1
 8004c60:	3508      	adds	r5, #8
 8004c62:	e7e5      	b.n	8004c30 <_dtoa_r+0x338>
 8004c64:	f000 80d2 	beq.w	8004e0c <_dtoa_r+0x514>
 8004c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c6c:	427c      	negs	r4, r7
 8004c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e18 <_dtoa_r+0x520>)
 8004c70:	f004 020f 	and.w	r2, r4, #15
 8004c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f7fb fc2c 	bl	80004d8 <__aeabi_dmul>
 8004c80:	2602      	movs	r6, #2
 8004c82:	2300      	movs	r3, #0
 8004c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c88:	4d64      	ldr	r5, [pc, #400]	@ (8004e1c <_dtoa_r+0x524>)
 8004c8a:	1124      	asrs	r4, r4, #4
 8004c8c:	2c00      	cmp	r4, #0
 8004c8e:	f040 80b2 	bne.w	8004df6 <_dtoa_r+0x4fe>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1d3      	bne.n	8004c3e <_dtoa_r+0x346>
 8004c96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80b7 	beq.w	8004e10 <_dtoa_r+0x518>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4b5d      	ldr	r3, [pc, #372]	@ (8004e20 <_dtoa_r+0x528>)
 8004caa:	f7fb fe87 	bl	80009bc <__aeabi_dcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f000 80ae 	beq.w	8004e10 <_dtoa_r+0x518>
 8004cb4:	9b07      	ldr	r3, [sp, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80aa 	beq.w	8004e10 <_dtoa_r+0x518>
 8004cbc:	9b08      	ldr	r3, [sp, #32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd37      	ble.n	8004d32 <_dtoa_r+0x43a>
 8004cc2:	1e7b      	subs	r3, r7, #1
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4b55      	ldr	r3, [pc, #340]	@ (8004e24 <_dtoa_r+0x52c>)
 8004cce:	f7fb fc03 	bl	80004d8 <__aeabi_dmul>
 8004cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cd6:	9c08      	ldr	r4, [sp, #32]
 8004cd8:	3601      	adds	r6, #1
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7fb fb92 	bl	8000404 <__aeabi_i2d>
 8004ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ce4:	f7fb fbf8 	bl	80004d8 <__aeabi_dmul>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4b4f      	ldr	r3, [pc, #316]	@ (8004e28 <_dtoa_r+0x530>)
 8004cec:	f7fb fa3e 	bl	800016c <__adddf3>
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	f040 809a 	bne.w	8004e30 <_dtoa_r+0x538>
 8004cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d00:	2200      	movs	r2, #0
 8004d02:	4b4a      	ldr	r3, [pc, #296]	@ (8004e2c <_dtoa_r+0x534>)
 8004d04:	f7fb fa30 	bl	8000168 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d10:	462a      	mov	r2, r5
 8004d12:	4633      	mov	r3, r6
 8004d14:	f7fb fe70 	bl	80009f8 <__aeabi_dcmpgt>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f040 828e 	bne.w	800523a <_dtoa_r+0x942>
 8004d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d22:	462a      	mov	r2, r5
 8004d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d28:	f7fb fe48 	bl	80009bc <__aeabi_dcmplt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 8127 	bne.w	8004f80 <_dtoa_r+0x688>
 8004d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f2c0 8163 	blt.w	8005008 <_dtoa_r+0x710>
 8004d42:	2f0e      	cmp	r7, #14
 8004d44:	f300 8160 	bgt.w	8005008 <_dtoa_r+0x710>
 8004d48:	4b33      	ldr	r3, [pc, #204]	@ (8004e18 <_dtoa_r+0x520>)
 8004d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da03      	bge.n	8004d64 <_dtoa_r+0x46c>
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f340 8100 	ble.w	8004f64 <_dtoa_r+0x66c>
 8004d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d68:	4656      	mov	r6, sl
 8004d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d6e:	4620      	mov	r0, r4
 8004d70:	4629      	mov	r1, r5
 8004d72:	f7fb fcdb 	bl	800072c <__aeabi_ddiv>
 8004d76:	f7fb fe5f 	bl	8000a38 <__aeabi_d2iz>
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	f7fb fb42 	bl	8000404 <__aeabi_i2d>
 8004d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d84:	f7fb fba8 	bl	80004d8 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb f9ea 	bl	8000168 <__aeabi_dsub>
 8004d94:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d98:	9d07      	ldr	r5, [sp, #28]
 8004d9a:	f806 4b01 	strb.w	r4, [r6], #1
 8004d9e:	eba6 040a 	sub.w	r4, r6, sl
 8004da2:	42a5      	cmp	r5, r4
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	f040 8116 	bne.w	8004fd8 <_dtoa_r+0x6e0>
 8004dac:	f7fb f9de 	bl	800016c <__adddf3>
 8004db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	f7fb fe1e 	bl	80009f8 <__aeabi_dcmpgt>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	f040 80f8 	bne.w	8004fb2 <_dtoa_r+0x6ba>
 8004dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7fb fded 	bl	80009a8 <__aeabi_dcmpeq>
 8004dce:	b118      	cbz	r0, 8004dd8 <_dtoa_r+0x4e0>
 8004dd0:	f018 0f01 	tst.w	r8, #1
 8004dd4:	f040 80ed 	bne.w	8004fb2 <_dtoa_r+0x6ba>
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f000 fc92 	bl	8005704 <_Bfree>
 8004de0:	2300      	movs	r3, #0
 8004de2:	7033      	strb	r3, [r6, #0]
 8004de4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004de6:	3701      	adds	r7, #1
 8004de8:	601f      	str	r7, [r3, #0]
 8004dea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8320 	beq.w	8005432 <_dtoa_r+0xb3a>
 8004df2:	601e      	str	r6, [r3, #0]
 8004df4:	e31d      	b.n	8005432 <_dtoa_r+0xb3a>
 8004df6:	07e2      	lsls	r2, r4, #31
 8004df8:	d505      	bpl.n	8004e06 <_dtoa_r+0x50e>
 8004dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dfe:	f7fb fb6b 	bl	80004d8 <__aeabi_dmul>
 8004e02:	2301      	movs	r3, #1
 8004e04:	3601      	adds	r6, #1
 8004e06:	1064      	asrs	r4, r4, #1
 8004e08:	3508      	adds	r5, #8
 8004e0a:	e73f      	b.n	8004c8c <_dtoa_r+0x394>
 8004e0c:	2602      	movs	r6, #2
 8004e0e:	e742      	b.n	8004c96 <_dtoa_r+0x39e>
 8004e10:	9c07      	ldr	r4, [sp, #28]
 8004e12:	9704      	str	r7, [sp, #16]
 8004e14:	e761      	b.n	8004cda <_dtoa_r+0x3e2>
 8004e16:	bf00      	nop
 8004e18:	08006a20 	.word	0x08006a20
 8004e1c:	080069f8 	.word	0x080069f8
 8004e20:	3ff00000 	.word	0x3ff00000
 8004e24:	40240000 	.word	0x40240000
 8004e28:	401c0000 	.word	0x401c0000
 8004e2c:	40140000 	.word	0x40140000
 8004e30:	4b70      	ldr	r3, [pc, #448]	@ (8004ff4 <_dtoa_r+0x6fc>)
 8004e32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e3c:	4454      	add	r4, sl
 8004e3e:	2900      	cmp	r1, #0
 8004e40:	d045      	beq.n	8004ece <_dtoa_r+0x5d6>
 8004e42:	2000      	movs	r0, #0
 8004e44:	496c      	ldr	r1, [pc, #432]	@ (8004ff8 <_dtoa_r+0x700>)
 8004e46:	f7fb fc71 	bl	800072c <__aeabi_ddiv>
 8004e4a:	4633      	mov	r3, r6
 8004e4c:	462a      	mov	r2, r5
 8004e4e:	f7fb f98b 	bl	8000168 <__aeabi_dsub>
 8004e52:	4656      	mov	r6, sl
 8004e54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e5c:	f7fb fdec 	bl	8000a38 <__aeabi_d2iz>
 8004e60:	4605      	mov	r5, r0
 8004e62:	f7fb facf 	bl	8000404 <__aeabi_i2d>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e6e:	f7fb f97b 	bl	8000168 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	3530      	adds	r5, #48	@ 0x30
 8004e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e80:	f806 5b01 	strb.w	r5, [r6], #1
 8004e84:	f7fb fd9a 	bl	80009bc <__aeabi_dcmplt>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d163      	bne.n	8004f54 <_dtoa_r+0x65c>
 8004e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e90:	2000      	movs	r0, #0
 8004e92:	495a      	ldr	r1, [pc, #360]	@ (8004ffc <_dtoa_r+0x704>)
 8004e94:	f7fb f968 	bl	8000168 <__aeabi_dsub>
 8004e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e9c:	f7fb fd8e 	bl	80009bc <__aeabi_dcmplt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f040 8087 	bne.w	8004fb4 <_dtoa_r+0x6bc>
 8004ea6:	42a6      	cmp	r6, r4
 8004ea8:	f43f af43 	beq.w	8004d32 <_dtoa_r+0x43a>
 8004eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <_dtoa_r+0x708>)
 8004eb4:	f7fb fb10 	bl	80004d8 <__aeabi_dmul>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8005000 <_dtoa_r+0x708>)
 8004ec4:	f7fb fb08 	bl	80004d8 <__aeabi_dmul>
 8004ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ecc:	e7c4      	b.n	8004e58 <_dtoa_r+0x560>
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7fb fb01 	bl	80004d8 <__aeabi_dmul>
 8004ed6:	4656      	mov	r6, sl
 8004ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004edc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ee2:	f7fb fda9 	bl	8000a38 <__aeabi_d2iz>
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	f7fb fa8c 	bl	8000404 <__aeabi_i2d>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef4:	f7fb f938 	bl	8000168 <__aeabi_dsub>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	3530      	adds	r5, #48	@ 0x30
 8004efe:	f806 5b01 	strb.w	r5, [r6], #1
 8004f02:	42a6      	cmp	r6, r4
 8004f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	d124      	bne.n	8004f58 <_dtoa_r+0x660>
 8004f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f12:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <_dtoa_r+0x700>)
 8004f14:	f7fb f92a 	bl	800016c <__adddf3>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f20:	f7fb fd6a 	bl	80009f8 <__aeabi_dcmpgt>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d145      	bne.n	8004fb4 <_dtoa_r+0x6bc>
 8004f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	4932      	ldr	r1, [pc, #200]	@ (8004ff8 <_dtoa_r+0x700>)
 8004f30:	f7fb f91a 	bl	8000168 <__aeabi_dsub>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3c:	f7fb fd3e 	bl	80009bc <__aeabi_dcmplt>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f43f aef6 	beq.w	8004d32 <_dtoa_r+0x43a>
 8004f46:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f48:	1e73      	subs	r3, r6, #1
 8004f4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d0f8      	beq.n	8004f46 <_dtoa_r+0x64e>
 8004f54:	9f04      	ldr	r7, [sp, #16]
 8004f56:	e73f      	b.n	8004dd8 <_dtoa_r+0x4e0>
 8004f58:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <_dtoa_r+0x708>)
 8004f5a:	f7fb fabd 	bl	80004d8 <__aeabi_dmul>
 8004f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f62:	e7bc      	b.n	8004ede <_dtoa_r+0x5e6>
 8004f64:	d10c      	bne.n	8004f80 <_dtoa_r+0x688>
 8004f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <_dtoa_r+0x70c>)
 8004f6e:	f7fb fab3 	bl	80004d8 <__aeabi_dmul>
 8004f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f76:	f7fb fd35 	bl	80009e4 <__aeabi_dcmpge>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f000 815b 	beq.w	8005236 <_dtoa_r+0x93e>
 8004f80:	2400      	movs	r4, #0
 8004f82:	4625      	mov	r5, r4
 8004f84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f86:	4656      	mov	r6, sl
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	2700      	movs	r7, #0
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4658      	mov	r0, fp
 8004f92:	f000 fbb7 	bl	8005704 <_Bfree>
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	d0dc      	beq.n	8004f54 <_dtoa_r+0x65c>
 8004f9a:	b12f      	cbz	r7, 8004fa8 <_dtoa_r+0x6b0>
 8004f9c:	42af      	cmp	r7, r5
 8004f9e:	d003      	beq.n	8004fa8 <_dtoa_r+0x6b0>
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4658      	mov	r0, fp
 8004fa4:	f000 fbae 	bl	8005704 <_Bfree>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4658      	mov	r0, fp
 8004fac:	f000 fbaa 	bl	8005704 <_Bfree>
 8004fb0:	e7d0      	b.n	8004f54 <_dtoa_r+0x65c>
 8004fb2:	9704      	str	r7, [sp, #16]
 8004fb4:	4633      	mov	r3, r6
 8004fb6:	461e      	mov	r6, r3
 8004fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fbc:	2a39      	cmp	r2, #57	@ 0x39
 8004fbe:	d107      	bne.n	8004fd0 <_dtoa_r+0x6d8>
 8004fc0:	459a      	cmp	sl, r3
 8004fc2:	d1f8      	bne.n	8004fb6 <_dtoa_r+0x6be>
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	3201      	adds	r2, #1
 8004fc8:	9204      	str	r2, [sp, #16]
 8004fca:	2230      	movs	r2, #48	@ 0x30
 8004fcc:	f88a 2000 	strb.w	r2, [sl]
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	3201      	adds	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e7bd      	b.n	8004f54 <_dtoa_r+0x65c>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <_dtoa_r+0x708>)
 8004fdc:	f7fb fa7c 	bl	80004d8 <__aeabi_dmul>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	f7fb fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f43f aebc 	beq.w	8004d6a <_dtoa_r+0x472>
 8004ff2:	e6f1      	b.n	8004dd8 <_dtoa_r+0x4e0>
 8004ff4:	08006a20 	.word	0x08006a20
 8004ff8:	3fe00000 	.word	0x3fe00000
 8004ffc:	3ff00000 	.word	0x3ff00000
 8005000:	40240000 	.word	0x40240000
 8005004:	40140000 	.word	0x40140000
 8005008:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800500a:	2a00      	cmp	r2, #0
 800500c:	f000 80db 	beq.w	80051c6 <_dtoa_r+0x8ce>
 8005010:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005012:	2a01      	cmp	r2, #1
 8005014:	f300 80bf 	bgt.w	8005196 <_dtoa_r+0x89e>
 8005018:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800501a:	2a00      	cmp	r2, #0
 800501c:	f000 80b7 	beq.w	800518e <_dtoa_r+0x896>
 8005020:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005024:	4646      	mov	r6, r8
 8005026:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800502a:	2101      	movs	r1, #1
 800502c:	441a      	add	r2, r3
 800502e:	4658      	mov	r0, fp
 8005030:	4498      	add	r8, r3
 8005032:	9209      	str	r2, [sp, #36]	@ 0x24
 8005034:	f000 fc1a 	bl	800586c <__i2b>
 8005038:	4605      	mov	r5, r0
 800503a:	b15e      	cbz	r6, 8005054 <_dtoa_r+0x75c>
 800503c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	dd08      	ble.n	8005054 <_dtoa_r+0x75c>
 8005042:	42b3      	cmp	r3, r6
 8005044:	bfa8      	it	ge
 8005046:	4633      	movge	r3, r6
 8005048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800504a:	eba8 0803 	sub.w	r8, r8, r3
 800504e:	1af6      	subs	r6, r6, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	9309      	str	r3, [sp, #36]	@ 0x24
 8005054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005056:	b1f3      	cbz	r3, 8005096 <_dtoa_r+0x79e>
 8005058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80b7 	beq.w	80051ce <_dtoa_r+0x8d6>
 8005060:	b18c      	cbz	r4, 8005086 <_dtoa_r+0x78e>
 8005062:	4629      	mov	r1, r5
 8005064:	4622      	mov	r2, r4
 8005066:	4658      	mov	r0, fp
 8005068:	f000 fcbe 	bl	80059e8 <__pow5mult>
 800506c:	464a      	mov	r2, r9
 800506e:	4601      	mov	r1, r0
 8005070:	4605      	mov	r5, r0
 8005072:	4658      	mov	r0, fp
 8005074:	f000 fc10 	bl	8005898 <__multiply>
 8005078:	4649      	mov	r1, r9
 800507a:	9004      	str	r0, [sp, #16]
 800507c:	4658      	mov	r0, fp
 800507e:	f000 fb41 	bl	8005704 <_Bfree>
 8005082:	9b04      	ldr	r3, [sp, #16]
 8005084:	4699      	mov	r9, r3
 8005086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005088:	1b1a      	subs	r2, r3, r4
 800508a:	d004      	beq.n	8005096 <_dtoa_r+0x79e>
 800508c:	4649      	mov	r1, r9
 800508e:	4658      	mov	r0, fp
 8005090:	f000 fcaa 	bl	80059e8 <__pow5mult>
 8005094:	4681      	mov	r9, r0
 8005096:	2101      	movs	r1, #1
 8005098:	4658      	mov	r0, fp
 800509a:	f000 fbe7 	bl	800586c <__i2b>
 800509e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050a0:	4604      	mov	r4, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 81c9 	beq.w	800543a <_dtoa_r+0xb42>
 80050a8:	461a      	mov	r2, r3
 80050aa:	4601      	mov	r1, r0
 80050ac:	4658      	mov	r0, fp
 80050ae:	f000 fc9b 	bl	80059e8 <__pow5mult>
 80050b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050b4:	4604      	mov	r4, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	f300 808f 	bgt.w	80051da <_dtoa_r+0x8e2>
 80050bc:	9b02      	ldr	r3, [sp, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 8087 	bne.w	80051d2 <_dtoa_r+0x8da>
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 8083 	bne.w	80051d6 <_dtoa_r+0x8de>
 80050d0:	9b03      	ldr	r3, [sp, #12]
 80050d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050d6:	0d1b      	lsrs	r3, r3, #20
 80050d8:	051b      	lsls	r3, r3, #20
 80050da:	b12b      	cbz	r3, 80050e8 <_dtoa_r+0x7f0>
 80050dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050de:	f108 0801 	add.w	r8, r8, #1
 80050e2:	3301      	adds	r3, #1
 80050e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050e6:	2301      	movs	r3, #1
 80050e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 81aa 	beq.w	8005446 <_dtoa_r+0xb4e>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050f8:	6918      	ldr	r0, [r3, #16]
 80050fa:	f000 fb6b 	bl	80057d4 <__hi0bits>
 80050fe:	f1c0 0020 	rsb	r0, r0, #32
 8005102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005104:	4418      	add	r0, r3
 8005106:	f010 001f 	ands.w	r0, r0, #31
 800510a:	d071      	beq.n	80051f0 <_dtoa_r+0x8f8>
 800510c:	f1c0 0320 	rsb	r3, r0, #32
 8005110:	2b04      	cmp	r3, #4
 8005112:	dd65      	ble.n	80051e0 <_dtoa_r+0x8e8>
 8005114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005116:	f1c0 001c 	rsb	r0, r0, #28
 800511a:	4403      	add	r3, r0
 800511c:	4480      	add	r8, r0
 800511e:	4406      	add	r6, r0
 8005120:	9309      	str	r3, [sp, #36]	@ 0x24
 8005122:	f1b8 0f00 	cmp.w	r8, #0
 8005126:	dd05      	ble.n	8005134 <_dtoa_r+0x83c>
 8005128:	4649      	mov	r1, r9
 800512a:	4642      	mov	r2, r8
 800512c:	4658      	mov	r0, fp
 800512e:	f000 fcb5 	bl	8005a9c <__lshift>
 8005132:	4681      	mov	r9, r0
 8005134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	dd05      	ble.n	8005146 <_dtoa_r+0x84e>
 800513a:	4621      	mov	r1, r4
 800513c:	461a      	mov	r2, r3
 800513e:	4658      	mov	r0, fp
 8005140:	f000 fcac 	bl	8005a9c <__lshift>
 8005144:	4604      	mov	r4, r0
 8005146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d053      	beq.n	80051f4 <_dtoa_r+0x8fc>
 800514c:	4621      	mov	r1, r4
 800514e:	4648      	mov	r0, r9
 8005150:	f000 fd10 	bl	8005b74 <__mcmp>
 8005154:	2800      	cmp	r0, #0
 8005156:	da4d      	bge.n	80051f4 <_dtoa_r+0x8fc>
 8005158:	1e7b      	subs	r3, r7, #1
 800515a:	4649      	mov	r1, r9
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	220a      	movs	r2, #10
 8005160:	2300      	movs	r3, #0
 8005162:	4658      	mov	r0, fp
 8005164:	f000 faf0 	bl	8005748 <__multadd>
 8005168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800516a:	4681      	mov	r9, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 816c 	beq.w	800544a <_dtoa_r+0xb52>
 8005172:	2300      	movs	r3, #0
 8005174:	4629      	mov	r1, r5
 8005176:	220a      	movs	r2, #10
 8005178:	4658      	mov	r0, fp
 800517a:	f000 fae5 	bl	8005748 <__multadd>
 800517e:	9b08      	ldr	r3, [sp, #32]
 8005180:	4605      	mov	r5, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	dc61      	bgt.n	800524a <_dtoa_r+0x952>
 8005186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005188:	2b02      	cmp	r3, #2
 800518a:	dc3b      	bgt.n	8005204 <_dtoa_r+0x90c>
 800518c:	e05d      	b.n	800524a <_dtoa_r+0x952>
 800518e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005190:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005194:	e746      	b.n	8005024 <_dtoa_r+0x72c>
 8005196:	9b07      	ldr	r3, [sp, #28]
 8005198:	1e5c      	subs	r4, r3, #1
 800519a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800519c:	42a3      	cmp	r3, r4
 800519e:	bfbf      	itttt	lt
 80051a0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80051a2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80051a4:	1ae3      	sublt	r3, r4, r3
 80051a6:	18d2      	addlt	r2, r2, r3
 80051a8:	bfa8      	it	ge
 80051aa:	1b1c      	subge	r4, r3, r4
 80051ac:	9b07      	ldr	r3, [sp, #28]
 80051ae:	bfbe      	ittt	lt
 80051b0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80051b2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80051b4:	2400      	movlt	r4, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfb5      	itete	lt
 80051ba:	eba8 0603 	sublt.w	r6, r8, r3
 80051be:	4646      	movge	r6, r8
 80051c0:	2300      	movlt	r3, #0
 80051c2:	9b07      	ldrge	r3, [sp, #28]
 80051c4:	e730      	b.n	8005028 <_dtoa_r+0x730>
 80051c6:	4646      	mov	r6, r8
 80051c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80051cc:	e735      	b.n	800503a <_dtoa_r+0x742>
 80051ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051d0:	e75c      	b.n	800508c <_dtoa_r+0x794>
 80051d2:	2300      	movs	r3, #0
 80051d4:	e788      	b.n	80050e8 <_dtoa_r+0x7f0>
 80051d6:	9b02      	ldr	r3, [sp, #8]
 80051d8:	e786      	b.n	80050e8 <_dtoa_r+0x7f0>
 80051da:	2300      	movs	r3, #0
 80051dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80051de:	e788      	b.n	80050f2 <_dtoa_r+0x7fa>
 80051e0:	d09f      	beq.n	8005122 <_dtoa_r+0x82a>
 80051e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051e4:	331c      	adds	r3, #28
 80051e6:	441a      	add	r2, r3
 80051e8:	4498      	add	r8, r3
 80051ea:	441e      	add	r6, r3
 80051ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80051ee:	e798      	b.n	8005122 <_dtoa_r+0x82a>
 80051f0:	4603      	mov	r3, r0
 80051f2:	e7f6      	b.n	80051e2 <_dtoa_r+0x8ea>
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	9704      	str	r7, [sp, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dc20      	bgt.n	800523e <_dtoa_r+0x946>
 80051fc:	9308      	str	r3, [sp, #32]
 80051fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005200:	2b02      	cmp	r3, #2
 8005202:	dd1e      	ble.n	8005242 <_dtoa_r+0x94a>
 8005204:	9b08      	ldr	r3, [sp, #32]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f47f aebc 	bne.w	8004f84 <_dtoa_r+0x68c>
 800520c:	4621      	mov	r1, r4
 800520e:	2205      	movs	r2, #5
 8005210:	4658      	mov	r0, fp
 8005212:	f000 fa99 	bl	8005748 <__multadd>
 8005216:	4601      	mov	r1, r0
 8005218:	4604      	mov	r4, r0
 800521a:	4648      	mov	r0, r9
 800521c:	f000 fcaa 	bl	8005b74 <__mcmp>
 8005220:	2800      	cmp	r0, #0
 8005222:	f77f aeaf 	ble.w	8004f84 <_dtoa_r+0x68c>
 8005226:	2331      	movs	r3, #49	@ 0x31
 8005228:	4656      	mov	r6, sl
 800522a:	f806 3b01 	strb.w	r3, [r6], #1
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	3301      	adds	r3, #1
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	e6aa      	b.n	8004f8c <_dtoa_r+0x694>
 8005236:	9c07      	ldr	r4, [sp, #28]
 8005238:	9704      	str	r7, [sp, #16]
 800523a:	4625      	mov	r5, r4
 800523c:	e7f3      	b.n	8005226 <_dtoa_r+0x92e>
 800523e:	9b07      	ldr	r3, [sp, #28]
 8005240:	9308      	str	r3, [sp, #32]
 8005242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8104 	beq.w	8005452 <_dtoa_r+0xb5a>
 800524a:	2e00      	cmp	r6, #0
 800524c:	dd05      	ble.n	800525a <_dtoa_r+0x962>
 800524e:	4629      	mov	r1, r5
 8005250:	4632      	mov	r2, r6
 8005252:	4658      	mov	r0, fp
 8005254:	f000 fc22 	bl	8005a9c <__lshift>
 8005258:	4605      	mov	r5, r0
 800525a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05a      	beq.n	8005316 <_dtoa_r+0xa1e>
 8005260:	4658      	mov	r0, fp
 8005262:	6869      	ldr	r1, [r5, #4]
 8005264:	f000 fa0e 	bl	8005684 <_Balloc>
 8005268:	4606      	mov	r6, r0
 800526a:	b928      	cbnz	r0, 8005278 <_dtoa_r+0x980>
 800526c:	4602      	mov	r2, r0
 800526e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005272:	4b83      	ldr	r3, [pc, #524]	@ (8005480 <_dtoa_r+0xb88>)
 8005274:	f7ff bb54 	b.w	8004920 <_dtoa_r+0x28>
 8005278:	692a      	ldr	r2, [r5, #16]
 800527a:	f105 010c 	add.w	r1, r5, #12
 800527e:	3202      	adds	r2, #2
 8005280:	0092      	lsls	r2, r2, #2
 8005282:	300c      	adds	r0, #12
 8005284:	f000 ffa8 	bl	80061d8 <memcpy>
 8005288:	2201      	movs	r2, #1
 800528a:	4631      	mov	r1, r6
 800528c:	4658      	mov	r0, fp
 800528e:	f000 fc05 	bl	8005a9c <__lshift>
 8005292:	462f      	mov	r7, r5
 8005294:	4605      	mov	r5, r0
 8005296:	f10a 0301 	add.w	r3, sl, #1
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	9b08      	ldr	r3, [sp, #32]
 800529e:	4453      	add	r3, sl
 80052a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052a2:	9b02      	ldr	r3, [sp, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052aa:	9b07      	ldr	r3, [sp, #28]
 80052ac:	4621      	mov	r1, r4
 80052ae:	3b01      	subs	r3, #1
 80052b0:	4648      	mov	r0, r9
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	f7ff fa97 	bl	80047e6 <quorem>
 80052b8:	4639      	mov	r1, r7
 80052ba:	9008      	str	r0, [sp, #32]
 80052bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052c0:	4648      	mov	r0, r9
 80052c2:	f000 fc57 	bl	8005b74 <__mcmp>
 80052c6:	462a      	mov	r2, r5
 80052c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80052ca:	4621      	mov	r1, r4
 80052cc:	4658      	mov	r0, fp
 80052ce:	f000 fc6d 	bl	8005bac <__mdiff>
 80052d2:	68c2      	ldr	r2, [r0, #12]
 80052d4:	4606      	mov	r6, r0
 80052d6:	bb02      	cbnz	r2, 800531a <_dtoa_r+0xa22>
 80052d8:	4601      	mov	r1, r0
 80052da:	4648      	mov	r0, r9
 80052dc:	f000 fc4a 	bl	8005b74 <__mcmp>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4631      	mov	r1, r6
 80052e4:	4658      	mov	r0, fp
 80052e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80052e8:	f000 fa0c 	bl	8005704 <_Bfree>
 80052ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80052f0:	9e07      	ldr	r6, [sp, #28]
 80052f2:	ea43 0102 	orr.w	r1, r3, r2
 80052f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f8:	4319      	orrs	r1, r3
 80052fa:	d110      	bne.n	800531e <_dtoa_r+0xa26>
 80052fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005300:	d029      	beq.n	8005356 <_dtoa_r+0xa5e>
 8005302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	dd02      	ble.n	800530e <_dtoa_r+0xa16>
 8005308:	9b08      	ldr	r3, [sp, #32]
 800530a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800530e:	9b02      	ldr	r3, [sp, #8]
 8005310:	f883 8000 	strb.w	r8, [r3]
 8005314:	e63b      	b.n	8004f8e <_dtoa_r+0x696>
 8005316:	4628      	mov	r0, r5
 8005318:	e7bb      	b.n	8005292 <_dtoa_r+0x99a>
 800531a:	2201      	movs	r2, #1
 800531c:	e7e1      	b.n	80052e2 <_dtoa_r+0x9ea>
 800531e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	db04      	blt.n	800532e <_dtoa_r+0xa36>
 8005324:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005326:	430b      	orrs	r3, r1
 8005328:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800532a:	430b      	orrs	r3, r1
 800532c:	d120      	bne.n	8005370 <_dtoa_r+0xa78>
 800532e:	2a00      	cmp	r2, #0
 8005330:	dded      	ble.n	800530e <_dtoa_r+0xa16>
 8005332:	4649      	mov	r1, r9
 8005334:	2201      	movs	r2, #1
 8005336:	4658      	mov	r0, fp
 8005338:	f000 fbb0 	bl	8005a9c <__lshift>
 800533c:	4621      	mov	r1, r4
 800533e:	4681      	mov	r9, r0
 8005340:	f000 fc18 	bl	8005b74 <__mcmp>
 8005344:	2800      	cmp	r0, #0
 8005346:	dc03      	bgt.n	8005350 <_dtoa_r+0xa58>
 8005348:	d1e1      	bne.n	800530e <_dtoa_r+0xa16>
 800534a:	f018 0f01 	tst.w	r8, #1
 800534e:	d0de      	beq.n	800530e <_dtoa_r+0xa16>
 8005350:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005354:	d1d8      	bne.n	8005308 <_dtoa_r+0xa10>
 8005356:	2339      	movs	r3, #57	@ 0x39
 8005358:	9a02      	ldr	r2, [sp, #8]
 800535a:	7013      	strb	r3, [r2, #0]
 800535c:	4633      	mov	r3, r6
 800535e:	461e      	mov	r6, r3
 8005360:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005364:	3b01      	subs	r3, #1
 8005366:	2a39      	cmp	r2, #57	@ 0x39
 8005368:	d052      	beq.n	8005410 <_dtoa_r+0xb18>
 800536a:	3201      	adds	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e60e      	b.n	8004f8e <_dtoa_r+0x696>
 8005370:	2a00      	cmp	r2, #0
 8005372:	dd07      	ble.n	8005384 <_dtoa_r+0xa8c>
 8005374:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005378:	d0ed      	beq.n	8005356 <_dtoa_r+0xa5e>
 800537a:	9a02      	ldr	r2, [sp, #8]
 800537c:	f108 0301 	add.w	r3, r8, #1
 8005380:	7013      	strb	r3, [r2, #0]
 8005382:	e604      	b.n	8004f8e <_dtoa_r+0x696>
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	9a07      	ldr	r2, [sp, #28]
 8005388:	f803 8c01 	strb.w	r8, [r3, #-1]
 800538c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800538e:	4293      	cmp	r3, r2
 8005390:	d028      	beq.n	80053e4 <_dtoa_r+0xaec>
 8005392:	4649      	mov	r1, r9
 8005394:	2300      	movs	r3, #0
 8005396:	220a      	movs	r2, #10
 8005398:	4658      	mov	r0, fp
 800539a:	f000 f9d5 	bl	8005748 <__multadd>
 800539e:	42af      	cmp	r7, r5
 80053a0:	4681      	mov	r9, r0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f04f 020a 	mov.w	r2, #10
 80053aa:	4639      	mov	r1, r7
 80053ac:	4658      	mov	r0, fp
 80053ae:	d107      	bne.n	80053c0 <_dtoa_r+0xac8>
 80053b0:	f000 f9ca 	bl	8005748 <__multadd>
 80053b4:	4607      	mov	r7, r0
 80053b6:	4605      	mov	r5, r0
 80053b8:	9b07      	ldr	r3, [sp, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	9307      	str	r3, [sp, #28]
 80053be:	e774      	b.n	80052aa <_dtoa_r+0x9b2>
 80053c0:	f000 f9c2 	bl	8005748 <__multadd>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4607      	mov	r7, r0
 80053c8:	2300      	movs	r3, #0
 80053ca:	220a      	movs	r2, #10
 80053cc:	4658      	mov	r0, fp
 80053ce:	f000 f9bb 	bl	8005748 <__multadd>
 80053d2:	4605      	mov	r5, r0
 80053d4:	e7f0      	b.n	80053b8 <_dtoa_r+0xac0>
 80053d6:	9b08      	ldr	r3, [sp, #32]
 80053d8:	2700      	movs	r7, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfcc      	ite	gt
 80053de:	461e      	movgt	r6, r3
 80053e0:	2601      	movle	r6, #1
 80053e2:	4456      	add	r6, sl
 80053e4:	4649      	mov	r1, r9
 80053e6:	2201      	movs	r2, #1
 80053e8:	4658      	mov	r0, fp
 80053ea:	f000 fb57 	bl	8005a9c <__lshift>
 80053ee:	4621      	mov	r1, r4
 80053f0:	4681      	mov	r9, r0
 80053f2:	f000 fbbf 	bl	8005b74 <__mcmp>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	dcb0      	bgt.n	800535c <_dtoa_r+0xa64>
 80053fa:	d102      	bne.n	8005402 <_dtoa_r+0xb0a>
 80053fc:	f018 0f01 	tst.w	r8, #1
 8005400:	d1ac      	bne.n	800535c <_dtoa_r+0xa64>
 8005402:	4633      	mov	r3, r6
 8005404:	461e      	mov	r6, r3
 8005406:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800540a:	2a30      	cmp	r2, #48	@ 0x30
 800540c:	d0fa      	beq.n	8005404 <_dtoa_r+0xb0c>
 800540e:	e5be      	b.n	8004f8e <_dtoa_r+0x696>
 8005410:	459a      	cmp	sl, r3
 8005412:	d1a4      	bne.n	800535e <_dtoa_r+0xa66>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	3301      	adds	r3, #1
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	2331      	movs	r3, #49	@ 0x31
 800541c:	f88a 3000 	strb.w	r3, [sl]
 8005420:	e5b5      	b.n	8004f8e <_dtoa_r+0x696>
 8005422:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005424:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005484 <_dtoa_r+0xb8c>
 8005428:	b11b      	cbz	r3, 8005432 <_dtoa_r+0xb3a>
 800542a:	f10a 0308 	add.w	r3, sl, #8
 800542e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4650      	mov	r0, sl
 8005434:	b017      	add	sp, #92	@ 0x5c
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800543c:	2b01      	cmp	r3, #1
 800543e:	f77f ae3d 	ble.w	80050bc <_dtoa_r+0x7c4>
 8005442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005444:	930a      	str	r3, [sp, #40]	@ 0x28
 8005446:	2001      	movs	r0, #1
 8005448:	e65b      	b.n	8005102 <_dtoa_r+0x80a>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f77f aed6 	ble.w	80051fe <_dtoa_r+0x906>
 8005452:	4656      	mov	r6, sl
 8005454:	4621      	mov	r1, r4
 8005456:	4648      	mov	r0, r9
 8005458:	f7ff f9c5 	bl	80047e6 <quorem>
 800545c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	f806 8b01 	strb.w	r8, [r6], #1
 8005466:	eba6 020a 	sub.w	r2, r6, sl
 800546a:	4293      	cmp	r3, r2
 800546c:	ddb3      	ble.n	80053d6 <_dtoa_r+0xade>
 800546e:	4649      	mov	r1, r9
 8005470:	2300      	movs	r3, #0
 8005472:	220a      	movs	r2, #10
 8005474:	4658      	mov	r0, fp
 8005476:	f000 f967 	bl	8005748 <__multadd>
 800547a:	4681      	mov	r9, r0
 800547c:	e7ea      	b.n	8005454 <_dtoa_r+0xb5c>
 800547e:	bf00      	nop
 8005480:	0800697e 	.word	0x0800697e
 8005484:	08006902 	.word	0x08006902

08005488 <_free_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4605      	mov	r5, r0
 800548c:	2900      	cmp	r1, #0
 800548e:	d040      	beq.n	8005512 <_free_r+0x8a>
 8005490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005494:	1f0c      	subs	r4, r1, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	bfb8      	it	lt
 800549a:	18e4      	addlt	r4, r4, r3
 800549c:	f000 f8e6 	bl	800566c <__malloc_lock>
 80054a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <_free_r+0x8c>)
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	b933      	cbnz	r3, 80054b4 <_free_r+0x2c>
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	4628      	mov	r0, r5
 80054ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b0:	f000 b8e2 	b.w	8005678 <__malloc_unlock>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d908      	bls.n	80054ca <_free_r+0x42>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	1821      	adds	r1, r4, r0
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1809      	addeq	r1, r1, r0
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	e7ed      	b.n	80054a6 <_free_r+0x1e>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x4c>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x42>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1850      	adds	r0, r2, r1
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x6c>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	4401      	add	r1, r0
 80054e0:	1850      	adds	r0, r2, r1
 80054e2:	4283      	cmp	r3, r0
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1e0      	bne.n	80054aa <_free_r+0x22>
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4408      	add	r0, r1
 80054ee:	6010      	str	r0, [r2, #0]
 80054f0:	6053      	str	r3, [r2, #4]
 80054f2:	e7da      	b.n	80054aa <_free_r+0x22>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x74>
 80054f6:	230c      	movs	r3, #12
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	e7d6      	b.n	80054aa <_free_r+0x22>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6054      	str	r4, [r2, #4]
 8005510:	e7cb      	b.n	80054aa <_free_r+0x22>
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20000dfc 	.word	0x20000dfc

08005518 <malloc>:
 8005518:	4b02      	ldr	r3, [pc, #8]	@ (8005524 <malloc+0xc>)
 800551a:	4601      	mov	r1, r0
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	f000 b825 	b.w	800556c <_malloc_r>
 8005522:	bf00      	nop
 8005524:	20000a7c 	.word	0x20000a7c

08005528 <sbrk_aligned>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4e0f      	ldr	r6, [pc, #60]	@ (8005568 <sbrk_aligned+0x40>)
 800552c:	460c      	mov	r4, r1
 800552e:	6831      	ldr	r1, [r6, #0]
 8005530:	4605      	mov	r5, r0
 8005532:	b911      	cbnz	r1, 800553a <sbrk_aligned+0x12>
 8005534:	f000 fe40 	bl	80061b8 <_sbrk_r>
 8005538:	6030      	str	r0, [r6, #0]
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f000 fe3b 	bl	80061b8 <_sbrk_r>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	d103      	bne.n	800554e <sbrk_aligned+0x26>
 8005546:	f04f 34ff 	mov.w	r4, #4294967295
 800554a:	4620      	mov	r0, r4
 800554c:	bd70      	pop	{r4, r5, r6, pc}
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d0f8      	beq.n	800554a <sbrk_aligned+0x22>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fe2c 	bl	80061b8 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d1f2      	bne.n	800554a <sbrk_aligned+0x22>
 8005564:	e7ef      	b.n	8005546 <sbrk_aligned+0x1e>
 8005566:	bf00      	nop
 8005568:	20000df8 	.word	0x20000df8

0800556c <_malloc_r>:
 800556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005570:	1ccd      	adds	r5, r1, #3
 8005572:	f025 0503 	bic.w	r5, r5, #3
 8005576:	3508      	adds	r5, #8
 8005578:	2d0c      	cmp	r5, #12
 800557a:	bf38      	it	cc
 800557c:	250c      	movcc	r5, #12
 800557e:	2d00      	cmp	r5, #0
 8005580:	4606      	mov	r6, r0
 8005582:	db01      	blt.n	8005588 <_malloc_r+0x1c>
 8005584:	42a9      	cmp	r1, r5
 8005586:	d904      	bls.n	8005592 <_malloc_r+0x26>
 8005588:	230c      	movs	r3, #12
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	2000      	movs	r0, #0
 800558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005668 <_malloc_r+0xfc>
 8005596:	f000 f869 	bl	800566c <__malloc_lock>
 800559a:	f8d8 3000 	ldr.w	r3, [r8]
 800559e:	461c      	mov	r4, r3
 80055a0:	bb44      	cbnz	r4, 80055f4 <_malloc_r+0x88>
 80055a2:	4629      	mov	r1, r5
 80055a4:	4630      	mov	r0, r6
 80055a6:	f7ff ffbf 	bl	8005528 <sbrk_aligned>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	4604      	mov	r4, r0
 80055ae:	d158      	bne.n	8005662 <_malloc_r+0xf6>
 80055b0:	f8d8 4000 	ldr.w	r4, [r8]
 80055b4:	4627      	mov	r7, r4
 80055b6:	2f00      	cmp	r7, #0
 80055b8:	d143      	bne.n	8005642 <_malloc_r+0xd6>
 80055ba:	2c00      	cmp	r4, #0
 80055bc:	d04b      	beq.n	8005656 <_malloc_r+0xea>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	4639      	mov	r1, r7
 80055c2:	4630      	mov	r0, r6
 80055c4:	eb04 0903 	add.w	r9, r4, r3
 80055c8:	f000 fdf6 	bl	80061b8 <_sbrk_r>
 80055cc:	4581      	cmp	r9, r0
 80055ce:	d142      	bne.n	8005656 <_malloc_r+0xea>
 80055d0:	6821      	ldr	r1, [r4, #0]
 80055d2:	4630      	mov	r0, r6
 80055d4:	1a6d      	subs	r5, r5, r1
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7ff ffa6 	bl	8005528 <sbrk_aligned>
 80055dc:	3001      	adds	r0, #1
 80055de:	d03a      	beq.n	8005656 <_malloc_r+0xea>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	442b      	add	r3, r5
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	f8d8 3000 	ldr.w	r3, [r8]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	bb62      	cbnz	r2, 8005648 <_malloc_r+0xdc>
 80055ee:	f8c8 7000 	str.w	r7, [r8]
 80055f2:	e00f      	b.n	8005614 <_malloc_r+0xa8>
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	1b52      	subs	r2, r2, r5
 80055f8:	d420      	bmi.n	800563c <_malloc_r+0xd0>
 80055fa:	2a0b      	cmp	r2, #11
 80055fc:	d917      	bls.n	800562e <_malloc_r+0xc2>
 80055fe:	1961      	adds	r1, r4, r5
 8005600:	42a3      	cmp	r3, r4
 8005602:	6025      	str	r5, [r4, #0]
 8005604:	bf18      	it	ne
 8005606:	6059      	strne	r1, [r3, #4]
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	bf08      	it	eq
 800560c:	f8c8 1000 	streq.w	r1, [r8]
 8005610:	5162      	str	r2, [r4, r5]
 8005612:	604b      	str	r3, [r1, #4]
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f82f 	bl	8005678 <__malloc_unlock>
 800561a:	f104 000b 	add.w	r0, r4, #11
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	f020 0007 	bic.w	r0, r0, #7
 8005624:	1ac2      	subs	r2, r0, r3
 8005626:	bf1c      	itt	ne
 8005628:	1a1b      	subne	r3, r3, r0
 800562a:	50a3      	strne	r3, [r4, r2]
 800562c:	e7af      	b.n	800558e <_malloc_r+0x22>
 800562e:	6862      	ldr	r2, [r4, #4]
 8005630:	42a3      	cmp	r3, r4
 8005632:	bf0c      	ite	eq
 8005634:	f8c8 2000 	streq.w	r2, [r8]
 8005638:	605a      	strne	r2, [r3, #4]
 800563a:	e7eb      	b.n	8005614 <_malloc_r+0xa8>
 800563c:	4623      	mov	r3, r4
 800563e:	6864      	ldr	r4, [r4, #4]
 8005640:	e7ae      	b.n	80055a0 <_malloc_r+0x34>
 8005642:	463c      	mov	r4, r7
 8005644:	687f      	ldr	r7, [r7, #4]
 8005646:	e7b6      	b.n	80055b6 <_malloc_r+0x4a>
 8005648:	461a      	mov	r2, r3
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	42a3      	cmp	r3, r4
 800564e:	d1fb      	bne.n	8005648 <_malloc_r+0xdc>
 8005650:	2300      	movs	r3, #0
 8005652:	6053      	str	r3, [r2, #4]
 8005654:	e7de      	b.n	8005614 <_malloc_r+0xa8>
 8005656:	230c      	movs	r3, #12
 8005658:	4630      	mov	r0, r6
 800565a:	6033      	str	r3, [r6, #0]
 800565c:	f000 f80c 	bl	8005678 <__malloc_unlock>
 8005660:	e794      	b.n	800558c <_malloc_r+0x20>
 8005662:	6005      	str	r5, [r0, #0]
 8005664:	e7d6      	b.n	8005614 <_malloc_r+0xa8>
 8005666:	bf00      	nop
 8005668:	20000dfc 	.word	0x20000dfc

0800566c <__malloc_lock>:
 800566c:	4801      	ldr	r0, [pc, #4]	@ (8005674 <__malloc_lock+0x8>)
 800566e:	f7ff b8aa 	b.w	80047c6 <__retarget_lock_acquire_recursive>
 8005672:	bf00      	nop
 8005674:	20000df4 	.word	0x20000df4

08005678 <__malloc_unlock>:
 8005678:	4801      	ldr	r0, [pc, #4]	@ (8005680 <__malloc_unlock+0x8>)
 800567a:	f7ff b8a5 	b.w	80047c8 <__retarget_lock_release_recursive>
 800567e:	bf00      	nop
 8005680:	20000df4 	.word	0x20000df4

08005684 <_Balloc>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	69c6      	ldr	r6, [r0, #28]
 8005688:	4604      	mov	r4, r0
 800568a:	460d      	mov	r5, r1
 800568c:	b976      	cbnz	r6, 80056ac <_Balloc+0x28>
 800568e:	2010      	movs	r0, #16
 8005690:	f7ff ff42 	bl	8005518 <malloc>
 8005694:	4602      	mov	r2, r0
 8005696:	61e0      	str	r0, [r4, #28]
 8005698:	b920      	cbnz	r0, 80056a4 <_Balloc+0x20>
 800569a:	216b      	movs	r1, #107	@ 0x6b
 800569c:	4b17      	ldr	r3, [pc, #92]	@ (80056fc <_Balloc+0x78>)
 800569e:	4818      	ldr	r0, [pc, #96]	@ (8005700 <_Balloc+0x7c>)
 80056a0:	f000 fda8 	bl	80061f4 <__assert_func>
 80056a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056a8:	6006      	str	r6, [r0, #0]
 80056aa:	60c6      	str	r6, [r0, #12]
 80056ac:	69e6      	ldr	r6, [r4, #28]
 80056ae:	68f3      	ldr	r3, [r6, #12]
 80056b0:	b183      	cbz	r3, 80056d4 <_Balloc+0x50>
 80056b2:	69e3      	ldr	r3, [r4, #28]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056ba:	b9b8      	cbnz	r0, 80056ec <_Balloc+0x68>
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f605 	lsl.w	r6, r1, r5
 80056c2:	1d72      	adds	r2, r6, #5
 80056c4:	4620      	mov	r0, r4
 80056c6:	0092      	lsls	r2, r2, #2
 80056c8:	f000 fdb2 	bl	8006230 <_calloc_r>
 80056cc:	b160      	cbz	r0, 80056e8 <_Balloc+0x64>
 80056ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056d2:	e00e      	b.n	80056f2 <_Balloc+0x6e>
 80056d4:	2221      	movs	r2, #33	@ 0x21
 80056d6:	2104      	movs	r1, #4
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fda9 	bl	8006230 <_calloc_r>
 80056de:	69e3      	ldr	r3, [r4, #28]
 80056e0:	60f0      	str	r0, [r6, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e4      	bne.n	80056b2 <_Balloc+0x2e>
 80056e8:	2000      	movs	r0, #0
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	6802      	ldr	r2, [r0, #0]
 80056ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056f2:	2300      	movs	r3, #0
 80056f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056f8:	e7f7      	b.n	80056ea <_Balloc+0x66>
 80056fa:	bf00      	nop
 80056fc:	0800690f 	.word	0x0800690f
 8005700:	0800698f 	.word	0x0800698f

08005704 <_Bfree>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	69c6      	ldr	r6, [r0, #28]
 8005708:	4605      	mov	r5, r0
 800570a:	460c      	mov	r4, r1
 800570c:	b976      	cbnz	r6, 800572c <_Bfree+0x28>
 800570e:	2010      	movs	r0, #16
 8005710:	f7ff ff02 	bl	8005518 <malloc>
 8005714:	4602      	mov	r2, r0
 8005716:	61e8      	str	r0, [r5, #28]
 8005718:	b920      	cbnz	r0, 8005724 <_Bfree+0x20>
 800571a:	218f      	movs	r1, #143	@ 0x8f
 800571c:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <_Bfree+0x3c>)
 800571e:	4809      	ldr	r0, [pc, #36]	@ (8005744 <_Bfree+0x40>)
 8005720:	f000 fd68 	bl	80061f4 <__assert_func>
 8005724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005728:	6006      	str	r6, [r0, #0]
 800572a:	60c6      	str	r6, [r0, #12]
 800572c:	b13c      	cbz	r4, 800573e <_Bfree+0x3a>
 800572e:	69eb      	ldr	r3, [r5, #28]
 8005730:	6862      	ldr	r2, [r4, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005738:	6021      	str	r1, [r4, #0]
 800573a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	0800690f 	.word	0x0800690f
 8005744:	0800698f 	.word	0x0800698f

08005748 <__multadd>:
 8005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574c:	4607      	mov	r7, r0
 800574e:	460c      	mov	r4, r1
 8005750:	461e      	mov	r6, r3
 8005752:	2000      	movs	r0, #0
 8005754:	690d      	ldr	r5, [r1, #16]
 8005756:	f101 0c14 	add.w	ip, r1, #20
 800575a:	f8dc 3000 	ldr.w	r3, [ip]
 800575e:	3001      	adds	r0, #1
 8005760:	b299      	uxth	r1, r3
 8005762:	fb02 6101 	mla	r1, r2, r1, r6
 8005766:	0c1e      	lsrs	r6, r3, #16
 8005768:	0c0b      	lsrs	r3, r1, #16
 800576a:	fb02 3306 	mla	r3, r2, r6, r3
 800576e:	b289      	uxth	r1, r1
 8005770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005774:	4285      	cmp	r5, r0
 8005776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800577a:	f84c 1b04 	str.w	r1, [ip], #4
 800577e:	dcec      	bgt.n	800575a <__multadd+0x12>
 8005780:	b30e      	cbz	r6, 80057c6 <__multadd+0x7e>
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc19      	bgt.n	80057bc <__multadd+0x74>
 8005788:	6861      	ldr	r1, [r4, #4]
 800578a:	4638      	mov	r0, r7
 800578c:	3101      	adds	r1, #1
 800578e:	f7ff ff79 	bl	8005684 <_Balloc>
 8005792:	4680      	mov	r8, r0
 8005794:	b928      	cbnz	r0, 80057a2 <__multadd+0x5a>
 8005796:	4602      	mov	r2, r0
 8005798:	21ba      	movs	r1, #186	@ 0xba
 800579a:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <__multadd+0x84>)
 800579c:	480c      	ldr	r0, [pc, #48]	@ (80057d0 <__multadd+0x88>)
 800579e:	f000 fd29 	bl	80061f4 <__assert_func>
 80057a2:	6922      	ldr	r2, [r4, #16]
 80057a4:	f104 010c 	add.w	r1, r4, #12
 80057a8:	3202      	adds	r2, #2
 80057aa:	0092      	lsls	r2, r2, #2
 80057ac:	300c      	adds	r0, #12
 80057ae:	f000 fd13 	bl	80061d8 <memcpy>
 80057b2:	4621      	mov	r1, r4
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff ffa5 	bl	8005704 <_Bfree>
 80057ba:	4644      	mov	r4, r8
 80057bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057c0:	3501      	adds	r5, #1
 80057c2:	615e      	str	r6, [r3, #20]
 80057c4:	6125      	str	r5, [r4, #16]
 80057c6:	4620      	mov	r0, r4
 80057c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057cc:	0800697e 	.word	0x0800697e
 80057d0:	0800698f 	.word	0x0800698f

080057d4 <__hi0bits>:
 80057d4:	4603      	mov	r3, r0
 80057d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80057da:	bf3a      	itte	cc
 80057dc:	0403      	lslcc	r3, r0, #16
 80057de:	2010      	movcc	r0, #16
 80057e0:	2000      	movcs	r0, #0
 80057e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e6:	bf3c      	itt	cc
 80057e8:	021b      	lslcc	r3, r3, #8
 80057ea:	3008      	addcc	r0, #8
 80057ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f0:	bf3c      	itt	cc
 80057f2:	011b      	lslcc	r3, r3, #4
 80057f4:	3004      	addcc	r0, #4
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fa:	bf3c      	itt	cc
 80057fc:	009b      	lslcc	r3, r3, #2
 80057fe:	3002      	addcc	r0, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	db05      	blt.n	8005810 <__hi0bits+0x3c>
 8005804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005808:	f100 0001 	add.w	r0, r0, #1
 800580c:	bf08      	it	eq
 800580e:	2020      	moveq	r0, #32
 8005810:	4770      	bx	lr

08005812 <__lo0bits>:
 8005812:	6803      	ldr	r3, [r0, #0]
 8005814:	4602      	mov	r2, r0
 8005816:	f013 0007 	ands.w	r0, r3, #7
 800581a:	d00b      	beq.n	8005834 <__lo0bits+0x22>
 800581c:	07d9      	lsls	r1, r3, #31
 800581e:	d421      	bmi.n	8005864 <__lo0bits+0x52>
 8005820:	0798      	lsls	r0, r3, #30
 8005822:	bf49      	itett	mi
 8005824:	085b      	lsrmi	r3, r3, #1
 8005826:	089b      	lsrpl	r3, r3, #2
 8005828:	2001      	movmi	r0, #1
 800582a:	6013      	strmi	r3, [r2, #0]
 800582c:	bf5c      	itt	pl
 800582e:	2002      	movpl	r0, #2
 8005830:	6013      	strpl	r3, [r2, #0]
 8005832:	4770      	bx	lr
 8005834:	b299      	uxth	r1, r3
 8005836:	b909      	cbnz	r1, 800583c <__lo0bits+0x2a>
 8005838:	2010      	movs	r0, #16
 800583a:	0c1b      	lsrs	r3, r3, #16
 800583c:	b2d9      	uxtb	r1, r3
 800583e:	b909      	cbnz	r1, 8005844 <__lo0bits+0x32>
 8005840:	3008      	adds	r0, #8
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	0719      	lsls	r1, r3, #28
 8005846:	bf04      	itt	eq
 8005848:	091b      	lsreq	r3, r3, #4
 800584a:	3004      	addeq	r0, #4
 800584c:	0799      	lsls	r1, r3, #30
 800584e:	bf04      	itt	eq
 8005850:	089b      	lsreq	r3, r3, #2
 8005852:	3002      	addeq	r0, #2
 8005854:	07d9      	lsls	r1, r3, #31
 8005856:	d403      	bmi.n	8005860 <__lo0bits+0x4e>
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	f100 0001 	add.w	r0, r0, #1
 800585e:	d003      	beq.n	8005868 <__lo0bits+0x56>
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4770      	bx	lr
 8005864:	2000      	movs	r0, #0
 8005866:	4770      	bx	lr
 8005868:	2020      	movs	r0, #32
 800586a:	4770      	bx	lr

0800586c <__i2b>:
 800586c:	b510      	push	{r4, lr}
 800586e:	460c      	mov	r4, r1
 8005870:	2101      	movs	r1, #1
 8005872:	f7ff ff07 	bl	8005684 <_Balloc>
 8005876:	4602      	mov	r2, r0
 8005878:	b928      	cbnz	r0, 8005886 <__i2b+0x1a>
 800587a:	f240 1145 	movw	r1, #325	@ 0x145
 800587e:	4b04      	ldr	r3, [pc, #16]	@ (8005890 <__i2b+0x24>)
 8005880:	4804      	ldr	r0, [pc, #16]	@ (8005894 <__i2b+0x28>)
 8005882:	f000 fcb7 	bl	80061f4 <__assert_func>
 8005886:	2301      	movs	r3, #1
 8005888:	6144      	str	r4, [r0, #20]
 800588a:	6103      	str	r3, [r0, #16]
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	0800697e 	.word	0x0800697e
 8005894:	0800698f 	.word	0x0800698f

08005898 <__multiply>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4614      	mov	r4, r2
 800589e:	690a      	ldr	r2, [r1, #16]
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	460f      	mov	r7, r1
 80058a4:	429a      	cmp	r2, r3
 80058a6:	bfa2      	ittt	ge
 80058a8:	4623      	movge	r3, r4
 80058aa:	460c      	movge	r4, r1
 80058ac:	461f      	movge	r7, r3
 80058ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80058b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	6861      	ldr	r1, [r4, #4]
 80058ba:	eb0a 0609 	add.w	r6, sl, r9
 80058be:	42b3      	cmp	r3, r6
 80058c0:	b085      	sub	sp, #20
 80058c2:	bfb8      	it	lt
 80058c4:	3101      	addlt	r1, #1
 80058c6:	f7ff fedd 	bl	8005684 <_Balloc>
 80058ca:	b930      	cbnz	r0, 80058da <__multiply+0x42>
 80058cc:	4602      	mov	r2, r0
 80058ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80058d2:	4b43      	ldr	r3, [pc, #268]	@ (80059e0 <__multiply+0x148>)
 80058d4:	4843      	ldr	r0, [pc, #268]	@ (80059e4 <__multiply+0x14c>)
 80058d6:	f000 fc8d 	bl	80061f4 <__assert_func>
 80058da:	f100 0514 	add.w	r5, r0, #20
 80058de:	462b      	mov	r3, r5
 80058e0:	2200      	movs	r2, #0
 80058e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058e6:	4543      	cmp	r3, r8
 80058e8:	d321      	bcc.n	800592e <__multiply+0x96>
 80058ea:	f107 0114 	add.w	r1, r7, #20
 80058ee:	f104 0214 	add.w	r2, r4, #20
 80058f2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80058f6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80058fa:	9302      	str	r3, [sp, #8]
 80058fc:	1b13      	subs	r3, r2, r4
 80058fe:	3b15      	subs	r3, #21
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	3304      	adds	r3, #4
 8005906:	f104 0715 	add.w	r7, r4, #21
 800590a:	42ba      	cmp	r2, r7
 800590c:	bf38      	it	cc
 800590e:	2304      	movcc	r3, #4
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	9b02      	ldr	r3, [sp, #8]
 8005914:	9103      	str	r1, [sp, #12]
 8005916:	428b      	cmp	r3, r1
 8005918:	d80c      	bhi.n	8005934 <__multiply+0x9c>
 800591a:	2e00      	cmp	r6, #0
 800591c:	dd03      	ble.n	8005926 <__multiply+0x8e>
 800591e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005922:	2b00      	cmp	r3, #0
 8005924:	d05a      	beq.n	80059dc <__multiply+0x144>
 8005926:	6106      	str	r6, [r0, #16]
 8005928:	b005      	add	sp, #20
 800592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592e:	f843 2b04 	str.w	r2, [r3], #4
 8005932:	e7d8      	b.n	80058e6 <__multiply+0x4e>
 8005934:	f8b1 a000 	ldrh.w	sl, [r1]
 8005938:	f1ba 0f00 	cmp.w	sl, #0
 800593c:	d023      	beq.n	8005986 <__multiply+0xee>
 800593e:	46a9      	mov	r9, r5
 8005940:	f04f 0c00 	mov.w	ip, #0
 8005944:	f104 0e14 	add.w	lr, r4, #20
 8005948:	f85e 7b04 	ldr.w	r7, [lr], #4
 800594c:	f8d9 3000 	ldr.w	r3, [r9]
 8005950:	fa1f fb87 	uxth.w	fp, r7
 8005954:	b29b      	uxth	r3, r3
 8005956:	fb0a 330b 	mla	r3, sl, fp, r3
 800595a:	4463      	add	r3, ip
 800595c:	f8d9 c000 	ldr.w	ip, [r9]
 8005960:	0c3f      	lsrs	r7, r7, #16
 8005962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005966:	fb0a c707 	mla	r7, sl, r7, ip
 800596a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005974:	4572      	cmp	r2, lr
 8005976:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800597a:	f849 3b04 	str.w	r3, [r9], #4
 800597e:	d8e3      	bhi.n	8005948 <__multiply+0xb0>
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	f845 c003 	str.w	ip, [r5, r3]
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	3104      	adds	r1, #4
 800598a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800598e:	f1b9 0f00 	cmp.w	r9, #0
 8005992:	d021      	beq.n	80059d8 <__multiply+0x140>
 8005994:	46ae      	mov	lr, r5
 8005996:	f04f 0a00 	mov.w	sl, #0
 800599a:	682b      	ldr	r3, [r5, #0]
 800599c:	f104 0c14 	add.w	ip, r4, #20
 80059a0:	f8bc b000 	ldrh.w	fp, [ip]
 80059a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	fb09 770b 	mla	r7, r9, fp, r7
 80059ae:	4457      	add	r7, sl
 80059b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059b4:	f84e 3b04 	str.w	r3, [lr], #4
 80059b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059c0:	f8be 3000 	ldrh.w	r3, [lr]
 80059c4:	4562      	cmp	r2, ip
 80059c6:	fb09 330a 	mla	r3, r9, sl, r3
 80059ca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80059ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059d2:	d8e5      	bhi.n	80059a0 <__multiply+0x108>
 80059d4:	9f01      	ldr	r7, [sp, #4]
 80059d6:	51eb      	str	r3, [r5, r7]
 80059d8:	3504      	adds	r5, #4
 80059da:	e79a      	b.n	8005912 <__multiply+0x7a>
 80059dc:	3e01      	subs	r6, #1
 80059de:	e79c      	b.n	800591a <__multiply+0x82>
 80059e0:	0800697e 	.word	0x0800697e
 80059e4:	0800698f 	.word	0x0800698f

080059e8 <__pow5mult>:
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ec:	4615      	mov	r5, r2
 80059ee:	f012 0203 	ands.w	r2, r2, #3
 80059f2:	4607      	mov	r7, r0
 80059f4:	460e      	mov	r6, r1
 80059f6:	d007      	beq.n	8005a08 <__pow5mult+0x20>
 80059f8:	4c25      	ldr	r4, [pc, #148]	@ (8005a90 <__pow5mult+0xa8>)
 80059fa:	3a01      	subs	r2, #1
 80059fc:	2300      	movs	r3, #0
 80059fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a02:	f7ff fea1 	bl	8005748 <__multadd>
 8005a06:	4606      	mov	r6, r0
 8005a08:	10ad      	asrs	r5, r5, #2
 8005a0a:	d03d      	beq.n	8005a88 <__pow5mult+0xa0>
 8005a0c:	69fc      	ldr	r4, [r7, #28]
 8005a0e:	b97c      	cbnz	r4, 8005a30 <__pow5mult+0x48>
 8005a10:	2010      	movs	r0, #16
 8005a12:	f7ff fd81 	bl	8005518 <malloc>
 8005a16:	4602      	mov	r2, r0
 8005a18:	61f8      	str	r0, [r7, #28]
 8005a1a:	b928      	cbnz	r0, 8005a28 <__pow5mult+0x40>
 8005a1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a20:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <__pow5mult+0xac>)
 8005a22:	481d      	ldr	r0, [pc, #116]	@ (8005a98 <__pow5mult+0xb0>)
 8005a24:	f000 fbe6 	bl	80061f4 <__assert_func>
 8005a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a2c:	6004      	str	r4, [r0, #0]
 8005a2e:	60c4      	str	r4, [r0, #12]
 8005a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a38:	b94c      	cbnz	r4, 8005a4e <__pow5mult+0x66>
 8005a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f7ff ff14 	bl	800586c <__i2b>
 8005a44:	2300      	movs	r3, #0
 8005a46:	4604      	mov	r4, r0
 8005a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a4c:	6003      	str	r3, [r0, #0]
 8005a4e:	f04f 0900 	mov.w	r9, #0
 8005a52:	07eb      	lsls	r3, r5, #31
 8005a54:	d50a      	bpl.n	8005a6c <__pow5mult+0x84>
 8005a56:	4631      	mov	r1, r6
 8005a58:	4622      	mov	r2, r4
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f7ff ff1c 	bl	8005898 <__multiply>
 8005a60:	4680      	mov	r8, r0
 8005a62:	4631      	mov	r1, r6
 8005a64:	4638      	mov	r0, r7
 8005a66:	f7ff fe4d 	bl	8005704 <_Bfree>
 8005a6a:	4646      	mov	r6, r8
 8005a6c:	106d      	asrs	r5, r5, #1
 8005a6e:	d00b      	beq.n	8005a88 <__pow5mult+0xa0>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	b938      	cbnz	r0, 8005a84 <__pow5mult+0x9c>
 8005a74:	4622      	mov	r2, r4
 8005a76:	4621      	mov	r1, r4
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f7ff ff0d 	bl	8005898 <__multiply>
 8005a7e:	6020      	str	r0, [r4, #0]
 8005a80:	f8c0 9000 	str.w	r9, [r0]
 8005a84:	4604      	mov	r4, r0
 8005a86:	e7e4      	b.n	8005a52 <__pow5mult+0x6a>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	bf00      	nop
 8005a90:	080069e8 	.word	0x080069e8
 8005a94:	0800690f 	.word	0x0800690f
 8005a98:	0800698f 	.word	0x0800698f

08005a9c <__lshift>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	4691      	mov	r9, r2
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	6849      	ldr	r1, [r1, #4]
 8005aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ab4:	f108 0601 	add.w	r6, r8, #1
 8005ab8:	42b3      	cmp	r3, r6
 8005aba:	db0b      	blt.n	8005ad4 <__lshift+0x38>
 8005abc:	4638      	mov	r0, r7
 8005abe:	f7ff fde1 	bl	8005684 <_Balloc>
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	b948      	cbnz	r0, 8005ada <__lshift+0x3e>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005acc:	4b27      	ldr	r3, [pc, #156]	@ (8005b6c <__lshift+0xd0>)
 8005ace:	4828      	ldr	r0, [pc, #160]	@ (8005b70 <__lshift+0xd4>)
 8005ad0:	f000 fb90 	bl	80061f4 <__assert_func>
 8005ad4:	3101      	adds	r1, #1
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	e7ee      	b.n	8005ab8 <__lshift+0x1c>
 8005ada:	2300      	movs	r3, #0
 8005adc:	f100 0114 	add.w	r1, r0, #20
 8005ae0:	f100 0210 	add.w	r2, r0, #16
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4553      	cmp	r3, sl
 8005ae8:	db33      	blt.n	8005b52 <__lshift+0xb6>
 8005aea:	6920      	ldr	r0, [r4, #16]
 8005aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005af0:	f104 0314 	add.w	r3, r4, #20
 8005af4:	f019 091f 	ands.w	r9, r9, #31
 8005af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b00:	d02b      	beq.n	8005b5a <__lshift+0xbe>
 8005b02:	468a      	mov	sl, r1
 8005b04:	2200      	movs	r2, #0
 8005b06:	f1c9 0e20 	rsb	lr, r9, #32
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b10:	4310      	orrs	r0, r2
 8005b12:	f84a 0b04 	str.w	r0, [sl], #4
 8005b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1a:	459c      	cmp	ip, r3
 8005b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b20:	d8f3      	bhi.n	8005b0a <__lshift+0x6e>
 8005b22:	ebac 0304 	sub.w	r3, ip, r4
 8005b26:	3b15      	subs	r3, #21
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	f104 0015 	add.w	r0, r4, #21
 8005b32:	4584      	cmp	ip, r0
 8005b34:	bf38      	it	cc
 8005b36:	2304      	movcc	r3, #4
 8005b38:	50ca      	str	r2, [r1, r3]
 8005b3a:	b10a      	cbz	r2, 8005b40 <__lshift+0xa4>
 8005b3c:	f108 0602 	add.w	r6, r8, #2
 8005b40:	3e01      	subs	r6, #1
 8005b42:	4638      	mov	r0, r7
 8005b44:	4621      	mov	r1, r4
 8005b46:	612e      	str	r6, [r5, #16]
 8005b48:	f7ff fddc 	bl	8005704 <_Bfree>
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b56:	3301      	adds	r3, #1
 8005b58:	e7c5      	b.n	8005ae6 <__lshift+0x4a>
 8005b5a:	3904      	subs	r1, #4
 8005b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b60:	459c      	cmp	ip, r3
 8005b62:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b66:	d8f9      	bhi.n	8005b5c <__lshift+0xc0>
 8005b68:	e7ea      	b.n	8005b40 <__lshift+0xa4>
 8005b6a:	bf00      	nop
 8005b6c:	0800697e 	.word	0x0800697e
 8005b70:	0800698f 	.word	0x0800698f

08005b74 <__mcmp>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	690a      	ldr	r2, [r1, #16]
 8005b78:	6900      	ldr	r0, [r0, #16]
 8005b7a:	b530      	push	{r4, r5, lr}
 8005b7c:	1a80      	subs	r0, r0, r2
 8005b7e:	d10e      	bne.n	8005b9e <__mcmp+0x2a>
 8005b80:	3314      	adds	r3, #20
 8005b82:	3114      	adds	r1, #20
 8005b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b94:	4295      	cmp	r5, r2
 8005b96:	d003      	beq.n	8005ba0 <__mcmp+0x2c>
 8005b98:	d205      	bcs.n	8005ba6 <__mcmp+0x32>
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	bd30      	pop	{r4, r5, pc}
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d3f3      	bcc.n	8005b8c <__mcmp+0x18>
 8005ba4:	e7fb      	b.n	8005b9e <__mcmp+0x2a>
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e7f9      	b.n	8005b9e <__mcmp+0x2a>
	...

08005bac <__mdiff>:
 8005bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	4689      	mov	r9, r1
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4648      	mov	r0, r9
 8005bb8:	4614      	mov	r4, r2
 8005bba:	f7ff ffdb 	bl	8005b74 <__mcmp>
 8005bbe:	1e05      	subs	r5, r0, #0
 8005bc0:	d112      	bne.n	8005be8 <__mdiff+0x3c>
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f7ff fd5d 	bl	8005684 <_Balloc>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	b928      	cbnz	r0, 8005bda <__mdiff+0x2e>
 8005bce:	f240 2137 	movw	r1, #567	@ 0x237
 8005bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ccc <__mdiff+0x120>)
 8005bd4:	483e      	ldr	r0, [pc, #248]	@ (8005cd0 <__mdiff+0x124>)
 8005bd6:	f000 fb0d 	bl	80061f4 <__assert_func>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005be0:	4610      	mov	r0, r2
 8005be2:	b003      	add	sp, #12
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be8:	bfbc      	itt	lt
 8005bea:	464b      	movlt	r3, r9
 8005bec:	46a1      	movlt	r9, r4
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005bf4:	bfba      	itte	lt
 8005bf6:	461c      	movlt	r4, r3
 8005bf8:	2501      	movlt	r5, #1
 8005bfa:	2500      	movge	r5, #0
 8005bfc:	f7ff fd42 	bl	8005684 <_Balloc>
 8005c00:	4602      	mov	r2, r0
 8005c02:	b918      	cbnz	r0, 8005c0c <__mdiff+0x60>
 8005c04:	f240 2145 	movw	r1, #581	@ 0x245
 8005c08:	4b30      	ldr	r3, [pc, #192]	@ (8005ccc <__mdiff+0x120>)
 8005c0a:	e7e3      	b.n	8005bd4 <__mdiff+0x28>
 8005c0c:	f100 0b14 	add.w	fp, r0, #20
 8005c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c14:	f109 0310 	add.w	r3, r9, #16
 8005c18:	60c5      	str	r5, [r0, #12]
 8005c1a:	f04f 0c00 	mov.w	ip, #0
 8005c1e:	f109 0514 	add.w	r5, r9, #20
 8005c22:	46d9      	mov	r9, fp
 8005c24:	6926      	ldr	r6, [r4, #16]
 8005c26:	f104 0e14 	add.w	lr, r4, #20
 8005c2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c3e:	b281      	uxth	r1, r0
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	fa1f f38a 	uxth.w	r3, sl
 8005c46:	1a5b      	subs	r3, r3, r1
 8005c48:	0c00      	lsrs	r0, r0, #16
 8005c4a:	4463      	add	r3, ip
 8005c4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c5a:	4576      	cmp	r6, lr
 8005c5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c60:	f849 3b04 	str.w	r3, [r9], #4
 8005c64:	d8e6      	bhi.n	8005c34 <__mdiff+0x88>
 8005c66:	1b33      	subs	r3, r6, r4
 8005c68:	3b15      	subs	r3, #21
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	3415      	adds	r4, #21
 8005c70:	3304      	adds	r3, #4
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	bf38      	it	cc
 8005c76:	2304      	movcc	r3, #4
 8005c78:	441d      	add	r5, r3
 8005c7a:	445b      	add	r3, fp
 8005c7c:	461e      	mov	r6, r3
 8005c7e:	462c      	mov	r4, r5
 8005c80:	4544      	cmp	r4, r8
 8005c82:	d30e      	bcc.n	8005ca2 <__mdiff+0xf6>
 8005c84:	f108 0103 	add.w	r1, r8, #3
 8005c88:	1b49      	subs	r1, r1, r5
 8005c8a:	f021 0103 	bic.w	r1, r1, #3
 8005c8e:	3d03      	subs	r5, #3
 8005c90:	45a8      	cmp	r8, r5
 8005c92:	bf38      	it	cc
 8005c94:	2100      	movcc	r1, #0
 8005c96:	440b      	add	r3, r1
 8005c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c9c:	b199      	cbz	r1, 8005cc6 <__mdiff+0x11a>
 8005c9e:	6117      	str	r7, [r2, #16]
 8005ca0:	e79e      	b.n	8005be0 <__mdiff+0x34>
 8005ca2:	46e6      	mov	lr, ip
 8005ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ca8:	fa1f fc81 	uxth.w	ip, r1
 8005cac:	44f4      	add	ip, lr
 8005cae:	0c08      	lsrs	r0, r1, #16
 8005cb0:	4471      	add	r1, lr
 8005cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005cb6:	b289      	uxth	r1, r1
 8005cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cc0:	f846 1b04 	str.w	r1, [r6], #4
 8005cc4:	e7dc      	b.n	8005c80 <__mdiff+0xd4>
 8005cc6:	3f01      	subs	r7, #1
 8005cc8:	e7e6      	b.n	8005c98 <__mdiff+0xec>
 8005cca:	bf00      	nop
 8005ccc:	0800697e 	.word	0x0800697e
 8005cd0:	0800698f 	.word	0x0800698f

08005cd4 <__d2b>:
 8005cd4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4690      	mov	r8, r2
 8005cdc:	4699      	mov	r9, r3
 8005cde:	9e08      	ldr	r6, [sp, #32]
 8005ce0:	f7ff fcd0 	bl	8005684 <_Balloc>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	b930      	cbnz	r0, 8005cf6 <__d2b+0x22>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	f240 310f 	movw	r1, #783	@ 0x30f
 8005cee:	4b23      	ldr	r3, [pc, #140]	@ (8005d7c <__d2b+0xa8>)
 8005cf0:	4823      	ldr	r0, [pc, #140]	@ (8005d80 <__d2b+0xac>)
 8005cf2:	f000 fa7f 	bl	80061f4 <__assert_func>
 8005cf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005cfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cfe:	b10d      	cbz	r5, 8005d04 <__d2b+0x30>
 8005d00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	f1b8 0300 	subs.w	r3, r8, #0
 8005d0a:	d024      	beq.n	8005d56 <__d2b+0x82>
 8005d0c:	4668      	mov	r0, sp
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	f7ff fd7f 	bl	8005812 <__lo0bits>
 8005d14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d18:	b1d8      	cbz	r0, 8005d52 <__d2b+0x7e>
 8005d1a:	f1c0 0320 	rsb	r3, r0, #32
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	430b      	orrs	r3, r1
 8005d24:	40c2      	lsrs	r2, r0
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	9201      	str	r2, [sp, #4]
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	2201      	moveq	r2, #1
 8005d32:	2202      	movne	r2, #2
 8005d34:	61a3      	str	r3, [r4, #24]
 8005d36:	6122      	str	r2, [r4, #16]
 8005d38:	b1ad      	cbz	r5, 8005d66 <__d2b+0x92>
 8005d3a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d3e:	4405      	add	r5, r0
 8005d40:	6035      	str	r5, [r6, #0]
 8005d42:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d48:	6018      	str	r0, [r3, #0]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	b002      	add	sp, #8
 8005d4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005d52:	6161      	str	r1, [r4, #20]
 8005d54:	e7e9      	b.n	8005d2a <__d2b+0x56>
 8005d56:	a801      	add	r0, sp, #4
 8005d58:	f7ff fd5b 	bl	8005812 <__lo0bits>
 8005d5c:	9b01      	ldr	r3, [sp, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	6163      	str	r3, [r4, #20]
 8005d62:	3020      	adds	r0, #32
 8005d64:	e7e7      	b.n	8005d36 <__d2b+0x62>
 8005d66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005d6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d6e:	6030      	str	r0, [r6, #0]
 8005d70:	6918      	ldr	r0, [r3, #16]
 8005d72:	f7ff fd2f 	bl	80057d4 <__hi0bits>
 8005d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d7a:	e7e4      	b.n	8005d46 <__d2b+0x72>
 8005d7c:	0800697e 	.word	0x0800697e
 8005d80:	0800698f 	.word	0x0800698f

08005d84 <__ssputs_r>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	461f      	mov	r7, r3
 8005d8a:	688e      	ldr	r6, [r1, #8]
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	42be      	cmp	r6, r7
 8005d90:	460c      	mov	r4, r1
 8005d92:	4690      	mov	r8, r2
 8005d94:	680b      	ldr	r3, [r1, #0]
 8005d96:	d82d      	bhi.n	8005df4 <__ssputs_r+0x70>
 8005d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005da0:	d026      	beq.n	8005df0 <__ssputs_r+0x6c>
 8005da2:	6965      	ldr	r5, [r4, #20]
 8005da4:	6909      	ldr	r1, [r1, #16]
 8005da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005daa:	eba3 0901 	sub.w	r9, r3, r1
 8005dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db2:	1c7b      	adds	r3, r7, #1
 8005db4:	444b      	add	r3, r9
 8005db6:	106d      	asrs	r5, r5, #1
 8005db8:	429d      	cmp	r5, r3
 8005dba:	bf38      	it	cc
 8005dbc:	461d      	movcc	r5, r3
 8005dbe:	0553      	lsls	r3, r2, #21
 8005dc0:	d527      	bpl.n	8005e12 <__ssputs_r+0x8e>
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7ff fbd2 	bl	800556c <_malloc_r>
 8005dc8:	4606      	mov	r6, r0
 8005dca:	b360      	cbz	r0, 8005e26 <__ssputs_r+0xa2>
 8005dcc:	464a      	mov	r2, r9
 8005dce:	6921      	ldr	r1, [r4, #16]
 8005dd0:	f000 fa02 	bl	80061d8 <memcpy>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	6126      	str	r6, [r4, #16]
 8005de2:	444e      	add	r6, r9
 8005de4:	6026      	str	r6, [r4, #0]
 8005de6:	463e      	mov	r6, r7
 8005de8:	6165      	str	r5, [r4, #20]
 8005dea:	eba5 0509 	sub.w	r5, r5, r9
 8005dee:	60a5      	str	r5, [r4, #8]
 8005df0:	42be      	cmp	r6, r7
 8005df2:	d900      	bls.n	8005df6 <__ssputs_r+0x72>
 8005df4:	463e      	mov	r6, r7
 8005df6:	4632      	mov	r2, r6
 8005df8:	4641      	mov	r1, r8
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	f000 f9c2 	bl	8006184 <memmove>
 8005e00:	2000      	movs	r0, #0
 8005e02:	68a3      	ldr	r3, [r4, #8]
 8005e04:	1b9b      	subs	r3, r3, r6
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	4433      	add	r3, r6
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e12:	462a      	mov	r2, r5
 8005e14:	f000 fa32 	bl	800627c <_realloc_r>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1e0      	bne.n	8005de0 <__ssputs_r+0x5c>
 8005e1e:	4650      	mov	r0, sl
 8005e20:	6921      	ldr	r1, [r4, #16]
 8005e22:	f7ff fb31 	bl	8005488 <_free_r>
 8005e26:	230c      	movs	r3, #12
 8005e28:	f8ca 3000 	str.w	r3, [sl]
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	e7e9      	b.n	8005e0e <__ssputs_r+0x8a>
	...

08005e3c <_svfiprintf_r>:
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	4698      	mov	r8, r3
 8005e42:	898b      	ldrh	r3, [r1, #12]
 8005e44:	4607      	mov	r7, r0
 8005e46:	061b      	lsls	r3, r3, #24
 8005e48:	460d      	mov	r5, r1
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	b09d      	sub	sp, #116	@ 0x74
 8005e4e:	d510      	bpl.n	8005e72 <_svfiprintf_r+0x36>
 8005e50:	690b      	ldr	r3, [r1, #16]
 8005e52:	b973      	cbnz	r3, 8005e72 <_svfiprintf_r+0x36>
 8005e54:	2140      	movs	r1, #64	@ 0x40
 8005e56:	f7ff fb89 	bl	800556c <_malloc_r>
 8005e5a:	6028      	str	r0, [r5, #0]
 8005e5c:	6128      	str	r0, [r5, #16]
 8005e5e:	b930      	cbnz	r0, 8005e6e <_svfiprintf_r+0x32>
 8005e60:	230c      	movs	r3, #12
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	b01d      	add	sp, #116	@ 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	2340      	movs	r3, #64	@ 0x40
 8005e70:	616b      	str	r3, [r5, #20]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e76:	2320      	movs	r3, #32
 8005e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e7c:	2330      	movs	r3, #48	@ 0x30
 8005e7e:	f04f 0901 	mov.w	r9, #1
 8005e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006020 <_svfiprintf_r+0x1e4>
 8005e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e8e:	4623      	mov	r3, r4
 8005e90:	469a      	mov	sl, r3
 8005e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e96:	b10a      	cbz	r2, 8005e9c <_svfiprintf_r+0x60>
 8005e98:	2a25      	cmp	r2, #37	@ 0x25
 8005e9a:	d1f9      	bne.n	8005e90 <_svfiprintf_r+0x54>
 8005e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea0:	d00b      	beq.n	8005eba <_svfiprintf_r+0x7e>
 8005ea2:	465b      	mov	r3, fp
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff ff6b 	bl	8005d84 <__ssputs_r>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f000 80a7 	beq.w	8006002 <_svfiprintf_r+0x1c6>
 8005eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eb6:	445a      	add	r2, fp
 8005eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eba:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 809f 	beq.w	8006002 <_svfiprintf_r+0x1c6>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ece:	f10a 0a01 	add.w	sl, sl, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8005edc:	4654      	mov	r4, sl
 8005ede:	2205      	movs	r2, #5
 8005ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee4:	484e      	ldr	r0, [pc, #312]	@ (8006020 <_svfiprintf_r+0x1e4>)
 8005ee6:	f7fe fc70 	bl	80047ca <memchr>
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	b9d8      	cbnz	r0, 8005f26 <_svfiprintf_r+0xea>
 8005eee:	06d0      	lsls	r0, r2, #27
 8005ef0:	bf44      	itt	mi
 8005ef2:	2320      	movmi	r3, #32
 8005ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef8:	0711      	lsls	r1, r2, #28
 8005efa:	bf44      	itt	mi
 8005efc:	232b      	movmi	r3, #43	@ 0x2b
 8005efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f02:	f89a 3000 	ldrb.w	r3, [sl]
 8005f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f08:	d015      	beq.n	8005f36 <_svfiprintf_r+0xfa>
 8005f0a:	4654      	mov	r4, sl
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f04f 0c0a 	mov.w	ip, #10
 8005f12:	9a07      	ldr	r2, [sp, #28]
 8005f14:	4621      	mov	r1, r4
 8005f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f1a:	3b30      	subs	r3, #48	@ 0x30
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d94b      	bls.n	8005fb8 <_svfiprintf_r+0x17c>
 8005f20:	b1b0      	cbz	r0, 8005f50 <_svfiprintf_r+0x114>
 8005f22:	9207      	str	r2, [sp, #28]
 8005f24:	e014      	b.n	8005f50 <_svfiprintf_r+0x114>
 8005f26:	eba0 0308 	sub.w	r3, r0, r8
 8005f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	46a2      	mov	sl, r4
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	e7d2      	b.n	8005edc <_svfiprintf_r+0xa0>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	1d19      	adds	r1, r3, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	9103      	str	r1, [sp, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfbb      	ittet	lt
 8005f42:	425b      	neglt	r3, r3
 8005f44:	f042 0202 	orrlt.w	r2, r2, #2
 8005f48:	9307      	strge	r3, [sp, #28]
 8005f4a:	9307      	strlt	r3, [sp, #28]
 8005f4c:	bfb8      	it	lt
 8005f4e:	9204      	strlt	r2, [sp, #16]
 8005f50:	7823      	ldrb	r3, [r4, #0]
 8005f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f54:	d10a      	bne.n	8005f6c <_svfiprintf_r+0x130>
 8005f56:	7863      	ldrb	r3, [r4, #1]
 8005f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f5a:	d132      	bne.n	8005fc2 <_svfiprintf_r+0x186>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	3402      	adds	r4, #2
 8005f60:	1d1a      	adds	r2, r3, #4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	9203      	str	r2, [sp, #12]
 8005f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006024 <_svfiprintf_r+0x1e8>
 8005f70:	2203      	movs	r2, #3
 8005f72:	4650      	mov	r0, sl
 8005f74:	7821      	ldrb	r1, [r4, #0]
 8005f76:	f7fe fc28 	bl	80047ca <memchr>
 8005f7a:	b138      	cbz	r0, 8005f8c <_svfiprintf_r+0x150>
 8005f7c:	2240      	movs	r2, #64	@ 0x40
 8005f7e:	9b04      	ldr	r3, [sp, #16]
 8005f80:	eba0 000a 	sub.w	r0, r0, sl
 8005f84:	4082      	lsls	r2, r0
 8005f86:	4313      	orrs	r3, r2
 8005f88:	3401      	adds	r4, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f90:	2206      	movs	r2, #6
 8005f92:	4825      	ldr	r0, [pc, #148]	@ (8006028 <_svfiprintf_r+0x1ec>)
 8005f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f98:	f7fe fc17 	bl	80047ca <memchr>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d036      	beq.n	800600e <_svfiprintf_r+0x1d2>
 8005fa0:	4b22      	ldr	r3, [pc, #136]	@ (800602c <_svfiprintf_r+0x1f0>)
 8005fa2:	bb1b      	cbnz	r3, 8005fec <_svfiprintf_r+0x1b0>
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	3307      	adds	r3, #7
 8005fa8:	f023 0307 	bic.w	r3, r3, #7
 8005fac:	3308      	adds	r3, #8
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb2:	4433      	add	r3, r6
 8005fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb6:	e76a      	b.n	8005e8e <_svfiprintf_r+0x52>
 8005fb8:	460c      	mov	r4, r1
 8005fba:	2001      	movs	r0, #1
 8005fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc0:	e7a8      	b.n	8005f14 <_svfiprintf_r+0xd8>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f04f 0c0a 	mov.w	ip, #10
 8005fc8:	4619      	mov	r1, r3
 8005fca:	3401      	adds	r4, #1
 8005fcc:	9305      	str	r3, [sp, #20]
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd4:	3a30      	subs	r2, #48	@ 0x30
 8005fd6:	2a09      	cmp	r2, #9
 8005fd8:	d903      	bls.n	8005fe2 <_svfiprintf_r+0x1a6>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0c6      	beq.n	8005f6c <_svfiprintf_r+0x130>
 8005fde:	9105      	str	r1, [sp, #20]
 8005fe0:	e7c4      	b.n	8005f6c <_svfiprintf_r+0x130>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fea:	e7f0      	b.n	8005fce <_svfiprintf_r+0x192>
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8006030 <_svfiprintf_r+0x1f4>)
 8005ff6:	a904      	add	r1, sp, #16
 8005ff8:	f7fd fe84 	bl	8003d04 <_printf_float>
 8005ffc:	1c42      	adds	r2, r0, #1
 8005ffe:	4606      	mov	r6, r0
 8006000:	d1d6      	bne.n	8005fb0 <_svfiprintf_r+0x174>
 8006002:	89ab      	ldrh	r3, [r5, #12]
 8006004:	065b      	lsls	r3, r3, #25
 8006006:	f53f af2d 	bmi.w	8005e64 <_svfiprintf_r+0x28>
 800600a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800600c:	e72c      	b.n	8005e68 <_svfiprintf_r+0x2c>
 800600e:	ab03      	add	r3, sp, #12
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	462a      	mov	r2, r5
 8006014:	4638      	mov	r0, r7
 8006016:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <_svfiprintf_r+0x1f4>)
 8006018:	a904      	add	r1, sp, #16
 800601a:	f7fe f911 	bl	8004240 <_printf_i>
 800601e:	e7ed      	b.n	8005ffc <_svfiprintf_r+0x1c0>
 8006020:	08006ae8 	.word	0x08006ae8
 8006024:	08006aee 	.word	0x08006aee
 8006028:	08006af2 	.word	0x08006af2
 800602c:	08003d05 	.word	0x08003d05
 8006030:	08005d85 	.word	0x08005d85

08006034 <__sflush_r>:
 8006034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	0716      	lsls	r6, r2, #28
 800603c:	4605      	mov	r5, r0
 800603e:	460c      	mov	r4, r1
 8006040:	d454      	bmi.n	80060ec <__sflush_r+0xb8>
 8006042:	684b      	ldr	r3, [r1, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	dc02      	bgt.n	800604e <__sflush_r+0x1a>
 8006048:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd48      	ble.n	80060e0 <__sflush_r+0xac>
 800604e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006050:	2e00      	cmp	r6, #0
 8006052:	d045      	beq.n	80060e0 <__sflush_r+0xac>
 8006054:	2300      	movs	r3, #0
 8006056:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800605a:	682f      	ldr	r7, [r5, #0]
 800605c:	6a21      	ldr	r1, [r4, #32]
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	d030      	beq.n	80060c4 <__sflush_r+0x90>
 8006062:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	0759      	lsls	r1, r3, #29
 8006068:	d505      	bpl.n	8006076 <__sflush_r+0x42>
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006070:	b10b      	cbz	r3, 8006076 <__sflush_r+0x42>
 8006072:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	4628      	mov	r0, r5
 800607a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	47b0      	blx	r6
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	d106      	bne.n	8006094 <__sflush_r+0x60>
 8006086:	6829      	ldr	r1, [r5, #0]
 8006088:	291d      	cmp	r1, #29
 800608a:	d82b      	bhi.n	80060e4 <__sflush_r+0xb0>
 800608c:	4a28      	ldr	r2, [pc, #160]	@ (8006130 <__sflush_r+0xfc>)
 800608e:	410a      	asrs	r2, r1
 8006090:	07d6      	lsls	r6, r2, #31
 8006092:	d427      	bmi.n	80060e4 <__sflush_r+0xb0>
 8006094:	2200      	movs	r2, #0
 8006096:	6062      	str	r2, [r4, #4]
 8006098:	6922      	ldr	r2, [r4, #16]
 800609a:	04d9      	lsls	r1, r3, #19
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	d504      	bpl.n	80060aa <__sflush_r+0x76>
 80060a0:	1c42      	adds	r2, r0, #1
 80060a2:	d101      	bne.n	80060a8 <__sflush_r+0x74>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	b903      	cbnz	r3, 80060aa <__sflush_r+0x76>
 80060a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80060aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ac:	602f      	str	r7, [r5, #0]
 80060ae:	b1b9      	cbz	r1, 80060e0 <__sflush_r+0xac>
 80060b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060b4:	4299      	cmp	r1, r3
 80060b6:	d002      	beq.n	80060be <__sflush_r+0x8a>
 80060b8:	4628      	mov	r0, r5
 80060ba:	f7ff f9e5 	bl	8005488 <_free_r>
 80060be:	2300      	movs	r3, #0
 80060c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80060c2:	e00d      	b.n	80060e0 <__sflush_r+0xac>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b0      	blx	r6
 80060ca:	4602      	mov	r2, r0
 80060cc:	1c50      	adds	r0, r2, #1
 80060ce:	d1c9      	bne.n	8006064 <__sflush_r+0x30>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0c6      	beq.n	8006064 <__sflush_r+0x30>
 80060d6:	2b1d      	cmp	r3, #29
 80060d8:	d001      	beq.n	80060de <__sflush_r+0xaa>
 80060da:	2b16      	cmp	r3, #22
 80060dc:	d11d      	bne.n	800611a <__sflush_r+0xe6>
 80060de:	602f      	str	r7, [r5, #0]
 80060e0:	2000      	movs	r0, #0
 80060e2:	e021      	b.n	8006128 <__sflush_r+0xf4>
 80060e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	e01a      	b.n	8006122 <__sflush_r+0xee>
 80060ec:	690f      	ldr	r7, [r1, #16]
 80060ee:	2f00      	cmp	r7, #0
 80060f0:	d0f6      	beq.n	80060e0 <__sflush_r+0xac>
 80060f2:	0793      	lsls	r3, r2, #30
 80060f4:	bf18      	it	ne
 80060f6:	2300      	movne	r3, #0
 80060f8:	680e      	ldr	r6, [r1, #0]
 80060fa:	bf08      	it	eq
 80060fc:	694b      	ldreq	r3, [r1, #20]
 80060fe:	1bf6      	subs	r6, r6, r7
 8006100:	600f      	str	r7, [r1, #0]
 8006102:	608b      	str	r3, [r1, #8]
 8006104:	2e00      	cmp	r6, #0
 8006106:	ddeb      	ble.n	80060e0 <__sflush_r+0xac>
 8006108:	4633      	mov	r3, r6
 800610a:	463a      	mov	r2, r7
 800610c:	4628      	mov	r0, r5
 800610e:	6a21      	ldr	r1, [r4, #32]
 8006110:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006114:	47e0      	blx	ip
 8006116:	2800      	cmp	r0, #0
 8006118:	dc07      	bgt.n	800612a <__sflush_r+0xf6>
 800611a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800611e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006122:	f04f 30ff 	mov.w	r0, #4294967295
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612a:	4407      	add	r7, r0
 800612c:	1a36      	subs	r6, r6, r0
 800612e:	e7e9      	b.n	8006104 <__sflush_r+0xd0>
 8006130:	dfbffffe 	.word	0xdfbffffe

08006134 <_fflush_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	690b      	ldr	r3, [r1, #16]
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	b913      	cbnz	r3, 8006144 <_fflush_r+0x10>
 800613e:	2500      	movs	r5, #0
 8006140:	4628      	mov	r0, r5
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	b118      	cbz	r0, 800614e <_fflush_r+0x1a>
 8006146:	6a03      	ldr	r3, [r0, #32]
 8006148:	b90b      	cbnz	r3, 800614e <_fflush_r+0x1a>
 800614a:	f7fe fa25 	bl	8004598 <__sinit>
 800614e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0f3      	beq.n	800613e <_fflush_r+0xa>
 8006156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006158:	07d0      	lsls	r0, r2, #31
 800615a:	d404      	bmi.n	8006166 <_fflush_r+0x32>
 800615c:	0599      	lsls	r1, r3, #22
 800615e:	d402      	bmi.n	8006166 <_fflush_r+0x32>
 8006160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006162:	f7fe fb30 	bl	80047c6 <__retarget_lock_acquire_recursive>
 8006166:	4628      	mov	r0, r5
 8006168:	4621      	mov	r1, r4
 800616a:	f7ff ff63 	bl	8006034 <__sflush_r>
 800616e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006170:	4605      	mov	r5, r0
 8006172:	07da      	lsls	r2, r3, #31
 8006174:	d4e4      	bmi.n	8006140 <_fflush_r+0xc>
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	059b      	lsls	r3, r3, #22
 800617a:	d4e1      	bmi.n	8006140 <_fflush_r+0xc>
 800617c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800617e:	f7fe fb23 	bl	80047c8 <__retarget_lock_release_recursive>
 8006182:	e7dd      	b.n	8006140 <_fflush_r+0xc>

08006184 <memmove>:
 8006184:	4288      	cmp	r0, r1
 8006186:	b510      	push	{r4, lr}
 8006188:	eb01 0402 	add.w	r4, r1, r2
 800618c:	d902      	bls.n	8006194 <memmove+0x10>
 800618e:	4284      	cmp	r4, r0
 8006190:	4623      	mov	r3, r4
 8006192:	d807      	bhi.n	80061a4 <memmove+0x20>
 8006194:	1e43      	subs	r3, r0, #1
 8006196:	42a1      	cmp	r1, r4
 8006198:	d008      	beq.n	80061ac <memmove+0x28>
 800619a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800619e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061a2:	e7f8      	b.n	8006196 <memmove+0x12>
 80061a4:	4601      	mov	r1, r0
 80061a6:	4402      	add	r2, r0
 80061a8:	428a      	cmp	r2, r1
 80061aa:	d100      	bne.n	80061ae <memmove+0x2a>
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061b6:	e7f7      	b.n	80061a8 <memmove+0x24>

080061b8 <_sbrk_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	2300      	movs	r3, #0
 80061bc:	4d05      	ldr	r5, [pc, #20]	@ (80061d4 <_sbrk_r+0x1c>)
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f7fb fbce 	bl	8001964 <_sbrk>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_sbrk_r+0x1a>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_sbrk_r+0x1a>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000df0 	.word	0x20000df0

080061d8 <memcpy>:
 80061d8:	440a      	add	r2, r1
 80061da:	4291      	cmp	r1, r2
 80061dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80061e0:	d100      	bne.n	80061e4 <memcpy+0xc>
 80061e2:	4770      	bx	lr
 80061e4:	b510      	push	{r4, lr}
 80061e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ea:	4291      	cmp	r1, r2
 80061ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061f0:	d1f9      	bne.n	80061e6 <memcpy+0xe>
 80061f2:	bd10      	pop	{r4, pc}

080061f4 <__assert_func>:
 80061f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061f6:	4614      	mov	r4, r2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <__assert_func+0x2c>)
 80061fc:	4605      	mov	r5, r0
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68d8      	ldr	r0, [r3, #12]
 8006202:	b954      	cbnz	r4, 800621a <__assert_func+0x26>
 8006204:	4b07      	ldr	r3, [pc, #28]	@ (8006224 <__assert_func+0x30>)
 8006206:	461c      	mov	r4, r3
 8006208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800620c:	9100      	str	r1, [sp, #0]
 800620e:	462b      	mov	r3, r5
 8006210:	4905      	ldr	r1, [pc, #20]	@ (8006228 <__assert_func+0x34>)
 8006212:	f000 f86f 	bl	80062f4 <fiprintf>
 8006216:	f000 f87f 	bl	8006318 <abort>
 800621a:	4b04      	ldr	r3, [pc, #16]	@ (800622c <__assert_func+0x38>)
 800621c:	e7f4      	b.n	8006208 <__assert_func+0x14>
 800621e:	bf00      	nop
 8006220:	20000a7c 	.word	0x20000a7c
 8006224:	08006b3e 	.word	0x08006b3e
 8006228:	08006b10 	.word	0x08006b10
 800622c:	08006b03 	.word	0x08006b03

08006230 <_calloc_r>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	fba1 5402 	umull	r5, r4, r1, r2
 8006236:	b93c      	cbnz	r4, 8006248 <_calloc_r+0x18>
 8006238:	4629      	mov	r1, r5
 800623a:	f7ff f997 	bl	800556c <_malloc_r>
 800623e:	4606      	mov	r6, r0
 8006240:	b928      	cbnz	r0, 800624e <_calloc_r+0x1e>
 8006242:	2600      	movs	r6, #0
 8006244:	4630      	mov	r0, r6
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	220c      	movs	r2, #12
 800624a:	6002      	str	r2, [r0, #0]
 800624c:	e7f9      	b.n	8006242 <_calloc_r+0x12>
 800624e:	462a      	mov	r2, r5
 8006250:	4621      	mov	r1, r4
 8006252:	f7fe fa3a 	bl	80046ca <memset>
 8006256:	e7f5      	b.n	8006244 <_calloc_r+0x14>

08006258 <__ascii_mbtowc>:
 8006258:	b082      	sub	sp, #8
 800625a:	b901      	cbnz	r1, 800625e <__ascii_mbtowc+0x6>
 800625c:	a901      	add	r1, sp, #4
 800625e:	b142      	cbz	r2, 8006272 <__ascii_mbtowc+0x1a>
 8006260:	b14b      	cbz	r3, 8006276 <__ascii_mbtowc+0x1e>
 8006262:	7813      	ldrb	r3, [r2, #0]
 8006264:	600b      	str	r3, [r1, #0]
 8006266:	7812      	ldrb	r2, [r2, #0]
 8006268:	1e10      	subs	r0, r2, #0
 800626a:	bf18      	it	ne
 800626c:	2001      	movne	r0, #1
 800626e:	b002      	add	sp, #8
 8006270:	4770      	bx	lr
 8006272:	4610      	mov	r0, r2
 8006274:	e7fb      	b.n	800626e <__ascii_mbtowc+0x16>
 8006276:	f06f 0001 	mvn.w	r0, #1
 800627a:	e7f8      	b.n	800626e <__ascii_mbtowc+0x16>

0800627c <_realloc_r>:
 800627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006280:	4680      	mov	r8, r0
 8006282:	4615      	mov	r5, r2
 8006284:	460c      	mov	r4, r1
 8006286:	b921      	cbnz	r1, 8006292 <_realloc_r+0x16>
 8006288:	4611      	mov	r1, r2
 800628a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800628e:	f7ff b96d 	b.w	800556c <_malloc_r>
 8006292:	b92a      	cbnz	r2, 80062a0 <_realloc_r+0x24>
 8006294:	f7ff f8f8 	bl	8005488 <_free_r>
 8006298:	2400      	movs	r4, #0
 800629a:	4620      	mov	r0, r4
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a0:	f000 f841 	bl	8006326 <_malloc_usable_size_r>
 80062a4:	4285      	cmp	r5, r0
 80062a6:	4606      	mov	r6, r0
 80062a8:	d802      	bhi.n	80062b0 <_realloc_r+0x34>
 80062aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062ae:	d8f4      	bhi.n	800629a <_realloc_r+0x1e>
 80062b0:	4629      	mov	r1, r5
 80062b2:	4640      	mov	r0, r8
 80062b4:	f7ff f95a 	bl	800556c <_malloc_r>
 80062b8:	4607      	mov	r7, r0
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0ec      	beq.n	8006298 <_realloc_r+0x1c>
 80062be:	42b5      	cmp	r5, r6
 80062c0:	462a      	mov	r2, r5
 80062c2:	4621      	mov	r1, r4
 80062c4:	bf28      	it	cs
 80062c6:	4632      	movcs	r2, r6
 80062c8:	f7ff ff86 	bl	80061d8 <memcpy>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4640      	mov	r0, r8
 80062d0:	f7ff f8da 	bl	8005488 <_free_r>
 80062d4:	463c      	mov	r4, r7
 80062d6:	e7e0      	b.n	800629a <_realloc_r+0x1e>

080062d8 <__ascii_wctomb>:
 80062d8:	4603      	mov	r3, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	b141      	cbz	r1, 80062f0 <__ascii_wctomb+0x18>
 80062de:	2aff      	cmp	r2, #255	@ 0xff
 80062e0:	d904      	bls.n	80062ec <__ascii_wctomb+0x14>
 80062e2:	228a      	movs	r2, #138	@ 0x8a
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	4770      	bx	lr
 80062ec:	2001      	movs	r0, #1
 80062ee:	700a      	strb	r2, [r1, #0]
 80062f0:	4770      	bx	lr
	...

080062f4 <fiprintf>:
 80062f4:	b40e      	push	{r1, r2, r3}
 80062f6:	b503      	push	{r0, r1, lr}
 80062f8:	4601      	mov	r1, r0
 80062fa:	ab03      	add	r3, sp, #12
 80062fc:	4805      	ldr	r0, [pc, #20]	@ (8006314 <fiprintf+0x20>)
 80062fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006302:	6800      	ldr	r0, [r0, #0]
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	f000 f83d 	bl	8006384 <_vfiprintf_r>
 800630a:	b002      	add	sp, #8
 800630c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006310:	b003      	add	sp, #12
 8006312:	4770      	bx	lr
 8006314:	20000a7c 	.word	0x20000a7c

08006318 <abort>:
 8006318:	2006      	movs	r0, #6
 800631a:	b508      	push	{r3, lr}
 800631c:	f000 fa06 	bl	800672c <raise>
 8006320:	2001      	movs	r0, #1
 8006322:	f7fb faaa 	bl	800187a <_exit>

08006326 <_malloc_usable_size_r>:
 8006326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632a:	1f18      	subs	r0, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfbc      	itt	lt
 8006330:	580b      	ldrlt	r3, [r1, r0]
 8006332:	18c0      	addlt	r0, r0, r3
 8006334:	4770      	bx	lr

08006336 <__sfputc_r>:
 8006336:	6893      	ldr	r3, [r2, #8]
 8006338:	b410      	push	{r4}
 800633a:	3b01      	subs	r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	6093      	str	r3, [r2, #8]
 8006340:	da07      	bge.n	8006352 <__sfputc_r+0x1c>
 8006342:	6994      	ldr	r4, [r2, #24]
 8006344:	42a3      	cmp	r3, r4
 8006346:	db01      	blt.n	800634c <__sfputc_r+0x16>
 8006348:	290a      	cmp	r1, #10
 800634a:	d102      	bne.n	8006352 <__sfputc_r+0x1c>
 800634c:	bc10      	pop	{r4}
 800634e:	f000 b931 	b.w	80065b4 <__swbuf_r>
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	1c58      	adds	r0, r3, #1
 8006356:	6010      	str	r0, [r2, #0]
 8006358:	7019      	strb	r1, [r3, #0]
 800635a:	4608      	mov	r0, r1
 800635c:	bc10      	pop	{r4}
 800635e:	4770      	bx	lr

08006360 <__sfputs_r>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	4614      	mov	r4, r2
 8006368:	18d5      	adds	r5, r2, r3
 800636a:	42ac      	cmp	r4, r5
 800636c:	d101      	bne.n	8006372 <__sfputs_r+0x12>
 800636e:	2000      	movs	r0, #0
 8006370:	e007      	b.n	8006382 <__sfputs_r+0x22>
 8006372:	463a      	mov	r2, r7
 8006374:	4630      	mov	r0, r6
 8006376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637a:	f7ff ffdc 	bl	8006336 <__sfputc_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	d1f3      	bne.n	800636a <__sfputs_r+0xa>
 8006382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006384 <_vfiprintf_r>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	460d      	mov	r5, r1
 800638a:	4614      	mov	r4, r2
 800638c:	4698      	mov	r8, r3
 800638e:	4606      	mov	r6, r0
 8006390:	b09d      	sub	sp, #116	@ 0x74
 8006392:	b118      	cbz	r0, 800639c <_vfiprintf_r+0x18>
 8006394:	6a03      	ldr	r3, [r0, #32]
 8006396:	b90b      	cbnz	r3, 800639c <_vfiprintf_r+0x18>
 8006398:	f7fe f8fe 	bl	8004598 <__sinit>
 800639c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800639e:	07d9      	lsls	r1, r3, #31
 80063a0:	d405      	bmi.n	80063ae <_vfiprintf_r+0x2a>
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	059a      	lsls	r2, r3, #22
 80063a6:	d402      	bmi.n	80063ae <_vfiprintf_r+0x2a>
 80063a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063aa:	f7fe fa0c 	bl	80047c6 <__retarget_lock_acquire_recursive>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	071b      	lsls	r3, r3, #28
 80063b2:	d501      	bpl.n	80063b8 <_vfiprintf_r+0x34>
 80063b4:	692b      	ldr	r3, [r5, #16]
 80063b6:	b99b      	cbnz	r3, 80063e0 <_vfiprintf_r+0x5c>
 80063b8:	4629      	mov	r1, r5
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 f938 	bl	8006630 <__swsetup_r>
 80063c0:	b170      	cbz	r0, 80063e0 <_vfiprintf_r+0x5c>
 80063c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063c4:	07dc      	lsls	r4, r3, #31
 80063c6:	d504      	bpl.n	80063d2 <_vfiprintf_r+0x4e>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	b01d      	add	sp, #116	@ 0x74
 80063ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	0598      	lsls	r0, r3, #22
 80063d6:	d4f7      	bmi.n	80063c8 <_vfiprintf_r+0x44>
 80063d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063da:	f7fe f9f5 	bl	80047c8 <__retarget_lock_release_recursive>
 80063de:	e7f3      	b.n	80063c8 <_vfiprintf_r+0x44>
 80063e0:	2300      	movs	r3, #0
 80063e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e4:	2320      	movs	r3, #32
 80063e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063ea:	2330      	movs	r3, #48	@ 0x30
 80063ec:	f04f 0901 	mov.w	r9, #1
 80063f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80065a0 <_vfiprintf_r+0x21c>
 80063f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063fc:	4623      	mov	r3, r4
 80063fe:	469a      	mov	sl, r3
 8006400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006404:	b10a      	cbz	r2, 800640a <_vfiprintf_r+0x86>
 8006406:	2a25      	cmp	r2, #37	@ 0x25
 8006408:	d1f9      	bne.n	80063fe <_vfiprintf_r+0x7a>
 800640a:	ebba 0b04 	subs.w	fp, sl, r4
 800640e:	d00b      	beq.n	8006428 <_vfiprintf_r+0xa4>
 8006410:	465b      	mov	r3, fp
 8006412:	4622      	mov	r2, r4
 8006414:	4629      	mov	r1, r5
 8006416:	4630      	mov	r0, r6
 8006418:	f7ff ffa2 	bl	8006360 <__sfputs_r>
 800641c:	3001      	adds	r0, #1
 800641e:	f000 80a7 	beq.w	8006570 <_vfiprintf_r+0x1ec>
 8006422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006424:	445a      	add	r2, fp
 8006426:	9209      	str	r2, [sp, #36]	@ 0x24
 8006428:	f89a 3000 	ldrb.w	r3, [sl]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 809f 	beq.w	8006570 <_vfiprintf_r+0x1ec>
 8006432:	2300      	movs	r3, #0
 8006434:	f04f 32ff 	mov.w	r2, #4294967295
 8006438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800643c:	f10a 0a01 	add.w	sl, sl, #1
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	9307      	str	r3, [sp, #28]
 8006444:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006448:	931a      	str	r3, [sp, #104]	@ 0x68
 800644a:	4654      	mov	r4, sl
 800644c:	2205      	movs	r2, #5
 800644e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006452:	4853      	ldr	r0, [pc, #332]	@ (80065a0 <_vfiprintf_r+0x21c>)
 8006454:	f7fe f9b9 	bl	80047ca <memchr>
 8006458:	9a04      	ldr	r2, [sp, #16]
 800645a:	b9d8      	cbnz	r0, 8006494 <_vfiprintf_r+0x110>
 800645c:	06d1      	lsls	r1, r2, #27
 800645e:	bf44      	itt	mi
 8006460:	2320      	movmi	r3, #32
 8006462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006466:	0713      	lsls	r3, r2, #28
 8006468:	bf44      	itt	mi
 800646a:	232b      	movmi	r3, #43	@ 0x2b
 800646c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006470:	f89a 3000 	ldrb.w	r3, [sl]
 8006474:	2b2a      	cmp	r3, #42	@ 0x2a
 8006476:	d015      	beq.n	80064a4 <_vfiprintf_r+0x120>
 8006478:	4654      	mov	r4, sl
 800647a:	2000      	movs	r0, #0
 800647c:	f04f 0c0a 	mov.w	ip, #10
 8006480:	9a07      	ldr	r2, [sp, #28]
 8006482:	4621      	mov	r1, r4
 8006484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006488:	3b30      	subs	r3, #48	@ 0x30
 800648a:	2b09      	cmp	r3, #9
 800648c:	d94b      	bls.n	8006526 <_vfiprintf_r+0x1a2>
 800648e:	b1b0      	cbz	r0, 80064be <_vfiprintf_r+0x13a>
 8006490:	9207      	str	r2, [sp, #28]
 8006492:	e014      	b.n	80064be <_vfiprintf_r+0x13a>
 8006494:	eba0 0308 	sub.w	r3, r0, r8
 8006498:	fa09 f303 	lsl.w	r3, r9, r3
 800649c:	4313      	orrs	r3, r2
 800649e:	46a2      	mov	sl, r4
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	e7d2      	b.n	800644a <_vfiprintf_r+0xc6>
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	1d19      	adds	r1, r3, #4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	9103      	str	r1, [sp, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bfbb      	ittet	lt
 80064b0:	425b      	neglt	r3, r3
 80064b2:	f042 0202 	orrlt.w	r2, r2, #2
 80064b6:	9307      	strge	r3, [sp, #28]
 80064b8:	9307      	strlt	r3, [sp, #28]
 80064ba:	bfb8      	it	lt
 80064bc:	9204      	strlt	r2, [sp, #16]
 80064be:	7823      	ldrb	r3, [r4, #0]
 80064c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80064c2:	d10a      	bne.n	80064da <_vfiprintf_r+0x156>
 80064c4:	7863      	ldrb	r3, [r4, #1]
 80064c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064c8:	d132      	bne.n	8006530 <_vfiprintf_r+0x1ac>
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	3402      	adds	r4, #2
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	9203      	str	r2, [sp, #12]
 80064d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80065a4 <_vfiprintf_r+0x220>
 80064de:	2203      	movs	r2, #3
 80064e0:	4650      	mov	r0, sl
 80064e2:	7821      	ldrb	r1, [r4, #0]
 80064e4:	f7fe f971 	bl	80047ca <memchr>
 80064e8:	b138      	cbz	r0, 80064fa <_vfiprintf_r+0x176>
 80064ea:	2240      	movs	r2, #64	@ 0x40
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	eba0 000a 	sub.w	r0, r0, sl
 80064f2:	4082      	lsls	r2, r0
 80064f4:	4313      	orrs	r3, r2
 80064f6:	3401      	adds	r4, #1
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fe:	2206      	movs	r2, #6
 8006500:	4829      	ldr	r0, [pc, #164]	@ (80065a8 <_vfiprintf_r+0x224>)
 8006502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006506:	f7fe f960 	bl	80047ca <memchr>
 800650a:	2800      	cmp	r0, #0
 800650c:	d03f      	beq.n	800658e <_vfiprintf_r+0x20a>
 800650e:	4b27      	ldr	r3, [pc, #156]	@ (80065ac <_vfiprintf_r+0x228>)
 8006510:	bb1b      	cbnz	r3, 800655a <_vfiprintf_r+0x1d6>
 8006512:	9b03      	ldr	r3, [sp, #12]
 8006514:	3307      	adds	r3, #7
 8006516:	f023 0307 	bic.w	r3, r3, #7
 800651a:	3308      	adds	r3, #8
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	443b      	add	r3, r7
 8006522:	9309      	str	r3, [sp, #36]	@ 0x24
 8006524:	e76a      	b.n	80063fc <_vfiprintf_r+0x78>
 8006526:	460c      	mov	r4, r1
 8006528:	2001      	movs	r0, #1
 800652a:	fb0c 3202 	mla	r2, ip, r2, r3
 800652e:	e7a8      	b.n	8006482 <_vfiprintf_r+0xfe>
 8006530:	2300      	movs	r3, #0
 8006532:	f04f 0c0a 	mov.w	ip, #10
 8006536:	4619      	mov	r1, r3
 8006538:	3401      	adds	r4, #1
 800653a:	9305      	str	r3, [sp, #20]
 800653c:	4620      	mov	r0, r4
 800653e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006542:	3a30      	subs	r2, #48	@ 0x30
 8006544:	2a09      	cmp	r2, #9
 8006546:	d903      	bls.n	8006550 <_vfiprintf_r+0x1cc>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0c6      	beq.n	80064da <_vfiprintf_r+0x156>
 800654c:	9105      	str	r1, [sp, #20]
 800654e:	e7c4      	b.n	80064da <_vfiprintf_r+0x156>
 8006550:	4604      	mov	r4, r0
 8006552:	2301      	movs	r3, #1
 8006554:	fb0c 2101 	mla	r1, ip, r1, r2
 8006558:	e7f0      	b.n	800653c <_vfiprintf_r+0x1b8>
 800655a:	ab03      	add	r3, sp, #12
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	462a      	mov	r2, r5
 8006560:	4630      	mov	r0, r6
 8006562:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <_vfiprintf_r+0x22c>)
 8006564:	a904      	add	r1, sp, #16
 8006566:	f7fd fbcd 	bl	8003d04 <_printf_float>
 800656a:	4607      	mov	r7, r0
 800656c:	1c78      	adds	r0, r7, #1
 800656e:	d1d6      	bne.n	800651e <_vfiprintf_r+0x19a>
 8006570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006572:	07d9      	lsls	r1, r3, #31
 8006574:	d405      	bmi.n	8006582 <_vfiprintf_r+0x1fe>
 8006576:	89ab      	ldrh	r3, [r5, #12]
 8006578:	059a      	lsls	r2, r3, #22
 800657a:	d402      	bmi.n	8006582 <_vfiprintf_r+0x1fe>
 800657c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800657e:	f7fe f923 	bl	80047c8 <__retarget_lock_release_recursive>
 8006582:	89ab      	ldrh	r3, [r5, #12]
 8006584:	065b      	lsls	r3, r3, #25
 8006586:	f53f af1f 	bmi.w	80063c8 <_vfiprintf_r+0x44>
 800658a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800658c:	e71e      	b.n	80063cc <_vfiprintf_r+0x48>
 800658e:	ab03      	add	r3, sp, #12
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	462a      	mov	r2, r5
 8006594:	4630      	mov	r0, r6
 8006596:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <_vfiprintf_r+0x22c>)
 8006598:	a904      	add	r1, sp, #16
 800659a:	f7fd fe51 	bl	8004240 <_printf_i>
 800659e:	e7e4      	b.n	800656a <_vfiprintf_r+0x1e6>
 80065a0:	08006ae8 	.word	0x08006ae8
 80065a4:	08006aee 	.word	0x08006aee
 80065a8:	08006af2 	.word	0x08006af2
 80065ac:	08003d05 	.word	0x08003d05
 80065b0:	08006361 	.word	0x08006361

080065b4 <__swbuf_r>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	460e      	mov	r6, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	4605      	mov	r5, r0
 80065bc:	b118      	cbz	r0, 80065c6 <__swbuf_r+0x12>
 80065be:	6a03      	ldr	r3, [r0, #32]
 80065c0:	b90b      	cbnz	r3, 80065c6 <__swbuf_r+0x12>
 80065c2:	f7fd ffe9 	bl	8004598 <__sinit>
 80065c6:	69a3      	ldr	r3, [r4, #24]
 80065c8:	60a3      	str	r3, [r4, #8]
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	071a      	lsls	r2, r3, #28
 80065ce:	d501      	bpl.n	80065d4 <__swbuf_r+0x20>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	b943      	cbnz	r3, 80065e6 <__swbuf_r+0x32>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f82a 	bl	8006630 <__swsetup_r>
 80065dc:	b118      	cbz	r0, 80065e6 <__swbuf_r+0x32>
 80065de:	f04f 37ff 	mov.w	r7, #4294967295
 80065e2:	4638      	mov	r0, r7
 80065e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	6922      	ldr	r2, [r4, #16]
 80065ea:	b2f6      	uxtb	r6, r6
 80065ec:	1a98      	subs	r0, r3, r2
 80065ee:	6963      	ldr	r3, [r4, #20]
 80065f0:	4637      	mov	r7, r6
 80065f2:	4283      	cmp	r3, r0
 80065f4:	dc05      	bgt.n	8006602 <__swbuf_r+0x4e>
 80065f6:	4621      	mov	r1, r4
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7ff fd9b 	bl	8006134 <_fflush_r>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d1ed      	bne.n	80065de <__swbuf_r+0x2a>
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	3b01      	subs	r3, #1
 8006606:	60a3      	str	r3, [r4, #8]
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	701e      	strb	r6, [r3, #0]
 8006610:	6962      	ldr	r2, [r4, #20]
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	429a      	cmp	r2, r3
 8006616:	d004      	beq.n	8006622 <__swbuf_r+0x6e>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	07db      	lsls	r3, r3, #31
 800661c:	d5e1      	bpl.n	80065e2 <__swbuf_r+0x2e>
 800661e:	2e0a      	cmp	r6, #10
 8006620:	d1df      	bne.n	80065e2 <__swbuf_r+0x2e>
 8006622:	4621      	mov	r1, r4
 8006624:	4628      	mov	r0, r5
 8006626:	f7ff fd85 	bl	8006134 <_fflush_r>
 800662a:	2800      	cmp	r0, #0
 800662c:	d0d9      	beq.n	80065e2 <__swbuf_r+0x2e>
 800662e:	e7d6      	b.n	80065de <__swbuf_r+0x2a>

08006630 <__swsetup_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4b29      	ldr	r3, [pc, #164]	@ (80066d8 <__swsetup_r+0xa8>)
 8006634:	4605      	mov	r5, r0
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	460c      	mov	r4, r1
 800663a:	b118      	cbz	r0, 8006644 <__swsetup_r+0x14>
 800663c:	6a03      	ldr	r3, [r0, #32]
 800663e:	b90b      	cbnz	r3, 8006644 <__swsetup_r+0x14>
 8006640:	f7fd ffaa 	bl	8004598 <__sinit>
 8006644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006648:	0719      	lsls	r1, r3, #28
 800664a:	d422      	bmi.n	8006692 <__swsetup_r+0x62>
 800664c:	06da      	lsls	r2, r3, #27
 800664e:	d407      	bmi.n	8006660 <__swsetup_r+0x30>
 8006650:	2209      	movs	r2, #9
 8006652:	602a      	str	r2, [r5, #0]
 8006654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	81a3      	strh	r3, [r4, #12]
 800665e:	e033      	b.n	80066c8 <__swsetup_r+0x98>
 8006660:	0758      	lsls	r0, r3, #29
 8006662:	d512      	bpl.n	800668a <__swsetup_r+0x5a>
 8006664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006666:	b141      	cbz	r1, 800667a <__swsetup_r+0x4a>
 8006668:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__swsetup_r+0x46>
 8006670:	4628      	mov	r0, r5
 8006672:	f7fe ff09 	bl	8005488 <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	@ 0x34
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0308 	orr.w	r3, r3, #8
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	b94b      	cbnz	r3, 80066aa <__swsetup_r+0x7a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800669c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a0:	d003      	beq.n	80066aa <__swsetup_r+0x7a>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 f882 	bl	80067ae <__smakebuf_r>
 80066aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ae:	f013 0201 	ands.w	r2, r3, #1
 80066b2:	d00a      	beq.n	80066ca <__swsetup_r+0x9a>
 80066b4:	2200      	movs	r2, #0
 80066b6:	60a2      	str	r2, [r4, #8]
 80066b8:	6962      	ldr	r2, [r4, #20]
 80066ba:	4252      	negs	r2, r2
 80066bc:	61a2      	str	r2, [r4, #24]
 80066be:	6922      	ldr	r2, [r4, #16]
 80066c0:	b942      	cbnz	r2, 80066d4 <__swsetup_r+0xa4>
 80066c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066c6:	d1c5      	bne.n	8006654 <__swsetup_r+0x24>
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	0799      	lsls	r1, r3, #30
 80066cc:	bf58      	it	pl
 80066ce:	6962      	ldrpl	r2, [r4, #20]
 80066d0:	60a2      	str	r2, [r4, #8]
 80066d2:	e7f4      	b.n	80066be <__swsetup_r+0x8e>
 80066d4:	2000      	movs	r0, #0
 80066d6:	e7f7      	b.n	80066c8 <__swsetup_r+0x98>
 80066d8:	20000a7c 	.word	0x20000a7c

080066dc <_raise_r>:
 80066dc:	291f      	cmp	r1, #31
 80066de:	b538      	push	{r3, r4, r5, lr}
 80066e0:	4605      	mov	r5, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	d904      	bls.n	80066f0 <_raise_r+0x14>
 80066e6:	2316      	movs	r3, #22
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80066f2:	b112      	cbz	r2, 80066fa <_raise_r+0x1e>
 80066f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066f8:	b94b      	cbnz	r3, 800670e <_raise_r+0x32>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 f830 	bl	8006760 <_getpid_r>
 8006700:	4622      	mov	r2, r4
 8006702:	4601      	mov	r1, r0
 8006704:	4628      	mov	r0, r5
 8006706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800670a:	f000 b817 	b.w	800673c <_kill_r>
 800670e:	2b01      	cmp	r3, #1
 8006710:	d00a      	beq.n	8006728 <_raise_r+0x4c>
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	d103      	bne.n	800671e <_raise_r+0x42>
 8006716:	2316      	movs	r3, #22
 8006718:	6003      	str	r3, [r0, #0]
 800671a:	2001      	movs	r0, #1
 800671c:	e7e7      	b.n	80066ee <_raise_r+0x12>
 800671e:	2100      	movs	r1, #0
 8006720:	4620      	mov	r0, r4
 8006722:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006726:	4798      	blx	r3
 8006728:	2000      	movs	r0, #0
 800672a:	e7e0      	b.n	80066ee <_raise_r+0x12>

0800672c <raise>:
 800672c:	4b02      	ldr	r3, [pc, #8]	@ (8006738 <raise+0xc>)
 800672e:	4601      	mov	r1, r0
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f7ff bfd3 	b.w	80066dc <_raise_r>
 8006736:	bf00      	nop
 8006738:	20000a7c 	.word	0x20000a7c

0800673c <_kill_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	2300      	movs	r3, #0
 8006740:	4d06      	ldr	r5, [pc, #24]	@ (800675c <_kill_r+0x20>)
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	f7fb f886 	bl	800185a <_kill>
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	d102      	bne.n	8006758 <_kill_r+0x1c>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	b103      	cbz	r3, 8006758 <_kill_r+0x1c>
 8006756:	6023      	str	r3, [r4, #0]
 8006758:	bd38      	pop	{r3, r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	20000df0 	.word	0x20000df0

08006760 <_getpid_r>:
 8006760:	f7fb b874 	b.w	800184c <_getpid>

08006764 <__swhatbuf_r>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	460c      	mov	r4, r1
 8006768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800676c:	4615      	mov	r5, r2
 800676e:	2900      	cmp	r1, #0
 8006770:	461e      	mov	r6, r3
 8006772:	b096      	sub	sp, #88	@ 0x58
 8006774:	da0c      	bge.n	8006790 <__swhatbuf_r+0x2c>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	2100      	movs	r1, #0
 800677a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800677e:	bf14      	ite	ne
 8006780:	2340      	movne	r3, #64	@ 0x40
 8006782:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006786:	2000      	movs	r0, #0
 8006788:	6031      	str	r1, [r6, #0]
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	b016      	add	sp, #88	@ 0x58
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	466a      	mov	r2, sp
 8006792:	f000 f849 	bl	8006828 <_fstat_r>
 8006796:	2800      	cmp	r0, #0
 8006798:	dbed      	blt.n	8006776 <__swhatbuf_r+0x12>
 800679a:	9901      	ldr	r1, [sp, #4]
 800679c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067a4:	4259      	negs	r1, r3
 80067a6:	4159      	adcs	r1, r3
 80067a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ac:	e7eb      	b.n	8006786 <__swhatbuf_r+0x22>

080067ae <__smakebuf_r>:
 80067ae:	898b      	ldrh	r3, [r1, #12]
 80067b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b2:	079d      	lsls	r5, r3, #30
 80067b4:	4606      	mov	r6, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	d507      	bpl.n	80067ca <__smakebuf_r+0x1c>
 80067ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	2301      	movs	r3, #1
 80067c4:	6163      	str	r3, [r4, #20]
 80067c6:	b003      	add	sp, #12
 80067c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ca:	466a      	mov	r2, sp
 80067cc:	ab01      	add	r3, sp, #4
 80067ce:	f7ff ffc9 	bl	8006764 <__swhatbuf_r>
 80067d2:	9f00      	ldr	r7, [sp, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	4639      	mov	r1, r7
 80067d8:	4630      	mov	r0, r6
 80067da:	f7fe fec7 	bl	800556c <_malloc_r>
 80067de:	b948      	cbnz	r0, 80067f4 <__smakebuf_r+0x46>
 80067e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e4:	059a      	lsls	r2, r3, #22
 80067e6:	d4ee      	bmi.n	80067c6 <__smakebuf_r+0x18>
 80067e8:	f023 0303 	bic.w	r3, r3, #3
 80067ec:	f043 0302 	orr.w	r3, r3, #2
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	e7e2      	b.n	80067ba <__smakebuf_r+0xc>
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fe:	81a3      	strh	r3, [r4, #12]
 8006800:	9b01      	ldr	r3, [sp, #4]
 8006802:	6020      	str	r0, [r4, #0]
 8006804:	b15b      	cbz	r3, 800681e <__smakebuf_r+0x70>
 8006806:	4630      	mov	r0, r6
 8006808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800680c:	f000 f81e 	bl	800684c <_isatty_r>
 8006810:	b128      	cbz	r0, 800681e <__smakebuf_r+0x70>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	431d      	orrs	r5, r3
 8006822:	81a5      	strh	r5, [r4, #12]
 8006824:	e7cf      	b.n	80067c6 <__smakebuf_r+0x18>
	...

08006828 <_fstat_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	2300      	movs	r3, #0
 800682c:	4d06      	ldr	r5, [pc, #24]	@ (8006848 <_fstat_r+0x20>)
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	602b      	str	r3, [r5, #0]
 8006836:	f7fb f86f 	bl	8001918 <_fstat>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	d102      	bne.n	8006844 <_fstat_r+0x1c>
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	b103      	cbz	r3, 8006844 <_fstat_r+0x1c>
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	20000df0 	.word	0x20000df0

0800684c <_isatty_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	2300      	movs	r3, #0
 8006850:	4d05      	ldr	r5, [pc, #20]	@ (8006868 <_isatty_r+0x1c>)
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fb f86d 	bl	8001936 <_isatty>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_isatty_r+0x1a>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_isatty_r+0x1a>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20000df0 	.word	0x20000df0

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
