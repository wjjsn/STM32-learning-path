
mpr121.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080098c0  080098c0  0000a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009970  08009970  0000bc30  2**0
                  CONTENTS
  4 .ARM          00000000  08009970  08009970  0000bc30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009970  08009970  0000bc30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009970  08009970  0000a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009974  08009974  0000a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c30  20000000  08009978  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001384  20000c30  0800a5a8  0000bc30  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fb4  0800a5a8  0000bfb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000bc30  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f9  00000000  00000000  0000bc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ef  00000000  00000000  0001bd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001f148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  0001ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aabc  00000000  00000000  00020a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156cd  00000000  00000000  0003b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008785c  00000000  00000000  00050bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  000d8458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000dc160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000c30 	.word	0x20000c30
 8000128:	00000000 	.word	0x00000000
 800012c:	080098a8 	.word	0x080098a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000c34 	.word	0x20000c34
 8000148:	080098a8 	.word	0x080098a8

0800014c <OLED_WriteCommand>:
#define OLED_CHN_CHAR_WIDTH 3



void OLED_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 800015e:	f107 020c 	add.w	r2, r7, #12
 8000162:	f04f 33ff 	mov.w	r3, #4294967295
 8000166:	9300      	str	r3, [sp, #0]
 8000168:	2302      	movs	r3, #2
 800016a:	2178      	movs	r1, #120	@ 0x78
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <OLED_WriteCommand+0x30>)
 800016e:	f001 f8f1 	bl	8001354 <HAL_I2C_Master_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000c50 	.word	0x20000c50

08000180 <OLED_WriteData>:

void OLED_WriteData(uint8_t dat)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x40;
 800018a:	2340      	movs	r3, #64	@ 0x40
 800018c:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=dat;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 8000192:	f107 020c 	add.w	r2, r7, #12
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	2302      	movs	r3, #2
 800019e:	2178      	movs	r1, #120	@ 0x78
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <OLED_WriteData+0x30>)
 80001a2:	f001 f8d7 	bl	8001354 <HAL_I2C_Master_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000c50 	.word	0x20000c50

080001b4 <OLED_SetCursor>:

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	460a      	mov	r2, r1
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffbd 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80001d2:	79bb      	ldrb	r3, [r7, #6]
 80001d4:	091b      	lsrs	r3, r3, #4
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	f043 0310 	orr.w	r3, r3, #16
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	f003 030f 	and.w	r3, r3, #15
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffad 	bl	800014c <OLED_WriteCommand>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <OLED_init>:

void OLED_init(void)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	@ 0x64
 8000200:	f000 fcae 	bl	8000b60 <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 8000204:	20ae      	movs	r0, #174	@ 0xae
 8000206:	f7ff ffa1 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 800020a:	20d5      	movs	r0, #213	@ 0xd5
 800020c:	f7ff ff9e 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 8000210:	2080      	movs	r0, #128	@ 0x80
 8000212:	f7ff ff9b 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 8000216:	20a8      	movs	r0, #168	@ 0xa8
 8000218:	f7ff ff98 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 800021c:	203f      	movs	r0, #63	@ 0x3f
 800021e:	f7ff ff95 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 8000222:	20d3      	movs	r0, #211	@ 0xd3
 8000224:	f7ff ff92 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 8000228:	2000      	movs	r0, #0
 800022a:	f7ff ff8f 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 800022e:	2040      	movs	r0, #64	@ 0x40
 8000230:	f7ff ff8c 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000234:	20a1      	movs	r0, #161	@ 0xa1
 8000236:	f7ff ff89 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800023a:	20c8      	movs	r0, #200	@ 0xc8
 800023c:	f7ff ff86 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000240:	20da      	movs	r0, #218	@ 0xda
 8000242:	f7ff ff83 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000246:	2012      	movs	r0, #18
 8000248:	f7ff ff80 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 800024c:	2081      	movs	r0, #129	@ 0x81
 800024e:	f7ff ff7d 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8000252:	20cf      	movs	r0, #207	@ 0xcf
 8000254:	f7ff ff7a 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8000258:	20d9      	movs	r0, #217	@ 0xd9
 800025a:	f7ff ff77 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800025e:	20f1      	movs	r0, #241	@ 0xf1
 8000260:	f7ff ff74 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000264:	20db      	movs	r0, #219	@ 0xdb
 8000266:	f7ff ff71 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800026a:	2030      	movs	r0, #48	@ 0x30
 800026c:	f7ff ff6e 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000270:	20a4      	movs	r0, #164	@ 0xa4
 8000272:	f7ff ff6b 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8000276:	20a6      	movs	r0, #166	@ 0xa6
 8000278:	f7ff ff68 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800027c:	208d      	movs	r0, #141	@ 0x8d
 800027e:	f7ff ff65 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000282:	2014      	movs	r0, #20
 8000284:	f7ff ff62 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000288:	20af      	movs	r0, #175	@ 0xaf
 800028a:	f7ff ff5f 	bl	800014c <OLED_WriteCommand>
	OLED_chear();
 800028e:	f000 f802 	bl	8000296 <OLED_chear>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}

08000296 <OLED_chear>:

void OLED_chear(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e014      	b.n	80002cc <OLED_chear+0x36>
	{
		OLED_SetCursor(i, 0);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff83 	bl	80001b4 <OLED_SetCursor>
		for (int j = 0; j < 128; ++j)
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	e005      	b.n	80002c0 <OLED_chear+0x2a>
		{
			OLED_WriteData(0x00);
 80002b4:	2000      	movs	r0, #0
 80002b6:	f7ff ff63 	bl	8000180 <OLED_WriteData>
		for (int j = 0; j < 128; ++j)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80002c4:	ddf6      	ble.n	80002b4 <OLED_chear+0x1e>
	for (int i = 0; i < 8; ++i)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	dde7      	ble.n	80002a2 <OLED_chear+0xc>
		}
	}
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <OLED_showChar>:

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4604      	mov	r4, r0
 80002e4:	4608      	mov	r0, r1
 80002e6:	4611      	mov	r1, r2
 80002e8:	461a      	mov	r2, r3
 80002ea:	4623      	mov	r3, r4
 80002ec:	71fb      	strb	r3, [r7, #7]
 80002ee:	4603      	mov	r3, r0
 80002f0:	71bb      	strb	r3, [r7, #6]
 80002f2:	460b      	mov	r3, r1
 80002f4:	717b      	strb	r3, [r7, #5]
 80002f6:	4613      	mov	r3, r2
 80002f8:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 80002fa:	79ba      	ldrb	r2, [r7, #6]
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4611      	mov	r1, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff57 	bl	80001b4 <OLED_SetCursor>
	if (fontSize == 8)
 8000306:	793b      	ldrb	r3, [r7, #4]
 8000308:	2b08      	cmp	r3, #8
 800030a:	d134      	bne.n	8000376 <OLED_showChar+0x9a>
	{
		for (int i = 0; i < fontSize; ++i)
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	e00d      	b.n	800032e <OLED_showChar+0x52>
		{
			OLED_WriteData(EN8_16[ a - ' ' ][i]);
 8000312:	797b      	ldrb	r3, [r7, #5]
 8000314:	3b20      	subs	r3, #32
 8000316:	4a39      	ldr	r2, [pc, #228]	@ (80003fc <OLED_showChar+0x120>)
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	441a      	add	r2, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	4413      	add	r3, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff2c 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	3301      	adds	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	793b      	ldrb	r3, [r7, #4]
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	429a      	cmp	r2, r3
 8000334:	dbed      	blt.n	8000312 <OLED_showChar+0x36>
		}
		OLED_SetCursor(Page+1, X);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	3301      	adds	r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	79ba      	ldrb	r2, [r7, #6]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff37 	bl	80001b4 <OLED_SetCursor>
		for (int i = 0; i < fontSize; ++i)
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	e00f      	b.n	800036c <OLED_showChar+0x90>
		{
			OLED_WriteData(EN8_16[ a - ' ' ][i+8]);
 800034c:	797b      	ldrb	r3, [r7, #5]
 800034e:	f1a3 0220 	sub.w	r2, r3, #32
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	3308      	adds	r3, #8
 8000356:	4929      	ldr	r1, [pc, #164]	@ (80003fc <OLED_showChar+0x120>)
 8000358:	0112      	lsls	r2, r2, #4
 800035a:	440a      	add	r2, r1
 800035c:	4413      	add	r3, r2
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff0d 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	3301      	adds	r3, #1
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	793b      	ldrb	r3, [r7, #4]
 800036e:	693a      	ldr	r2, [r7, #16]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbeb      	blt.n	800034c <OLED_showChar+0x70>
		for (int i = 0; i < fontSize; ++i)
		{
			OLED_WriteData(EN6_12[ a - ' ' ][i+6]);
		}
	}
}
 8000374:	e03d      	b.n	80003f2 <OLED_showChar+0x116>
	else if (fontSize == 6)
 8000376:	793b      	ldrb	r3, [r7, #4]
 8000378:	2b06      	cmp	r3, #6
 800037a:	d13a      	bne.n	80003f2 <OLED_showChar+0x116>
		for (int i = 0; i < fontSize; ++i)
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	e011      	b.n	80003a6 <OLED_showChar+0xca>
			OLED_WriteData(EN6_12[ a - ' ' ][i]);
 8000382:	797b      	ldrb	r3, [r7, #5]
 8000384:	f1a3 0220 	sub.w	r2, r3, #32
 8000388:	491d      	ldr	r1, [pc, #116]	@ (8000400 <OLED_showChar+0x124>)
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	18ca      	adds	r2, r1, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fef0 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	793b      	ldrb	r3, [r7, #4]
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dbe9      	blt.n	8000382 <OLED_showChar+0xa6>
		OLED_SetCursor(Page+1, X);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	3301      	adds	r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	79ba      	ldrb	r2, [r7, #6]
 80003b6:	4611      	mov	r1, r2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fefb 	bl	80001b4 <OLED_SetCursor>
		for (int i = 0; i < fontSize; ++i)
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	e012      	b.n	80003ea <OLED_showChar+0x10e>
			OLED_WriteData(EN6_12[ a - ' ' ][i+6]);
 80003c4:	797b      	ldrb	r3, [r7, #5]
 80003c6:	f1a3 0220 	sub.w	r2, r3, #32
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	1d99      	adds	r1, r3, #6
 80003ce:	480c      	ldr	r0, [pc, #48]	@ (8000400 <OLED_showChar+0x124>)
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4403      	add	r3, r0
 80003da:	440b      	add	r3, r1
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fece 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	793b      	ldrb	r3, [r7, #4]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dbe8      	blt.n	80003c4 <OLED_showChar+0xe8>
}
 80003f2:	bf00      	nop
 80003f4:	371c      	adds	r7, #28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd90      	pop	{r4, r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000000 	.word	0x20000000
 8000400:	200005f0 	.word	0x200005f0

08000404 <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	603a      	str	r2, [r7, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e013      	b.n	8000448 <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	797a      	ldrb	r2, [r7, #5]
 8000426:	fb02 f303 	mul.w	r3, r2, r3
 800042a:	b2da      	uxtb	r2, r3
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	4413      	add	r3, r2
 8000430:	b2d9      	uxtb	r1, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	4413      	add	r3, r2
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	79f8      	ldrb	r0, [r7, #7]
 800043e:	f7ff ff4d 	bl	80002dc <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3301      	adds	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	4413      	add	r3, r2
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1e5      	bne.n	8000420 <OLED_showString+0x1c>
	}
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <mpr121_init>:
//#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

HAL_StatusTypeDef status;

uint8_t mpr121_init()
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
	writeRegister(MPR121_SOFTRESET, 0x63);//软重置
 8000464:	2163      	movs	r1, #99	@ 0x63
 8000466:	2080      	movs	r0, #128	@ 0x80
 8000468:	f000 f8c0 	bl	80005ec <writeRegister>
	writeRegister(MPR121_ECR, 0x00);
 800046c:	2100      	movs	r1, #0
 800046e:	205e      	movs	r0, #94	@ 0x5e
 8000470:	f000 f8bc 	bl	80005ec <writeRegister>

	uint8_t c = readRegister8(MPR121_CONFIG2);
 8000474:	205d      	movs	r0, #93	@ 0x5d
 8000476:	f000 f88f 	bl	8000598 <readRegister8>
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	if (c != 0x24){return 1;}
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b24      	cmp	r3, #36	@ 0x24
 8000482:	d001      	beq.n	8000488 <mpr121_init+0x2a>
 8000484:	2301      	movs	r3, #1
 8000486:	e043      	b.n	8000510 <mpr121_init+0xb2>

	setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000488:	2106      	movs	r1, #6
 800048a:	200c      	movs	r0, #12
 800048c:	f000 f844 	bl	8000518 <setThresholds>
	writeRegister(MPR121_MHDR, 0x01);
 8000490:	2101      	movs	r1, #1
 8000492:	202b      	movs	r0, #43	@ 0x2b
 8000494:	f000 f8aa 	bl	80005ec <writeRegister>
	writeRegister(MPR121_NHDR, 0x01);
 8000498:	2101      	movs	r1, #1
 800049a:	202c      	movs	r0, #44	@ 0x2c
 800049c:	f000 f8a6 	bl	80005ec <writeRegister>
	writeRegister(MPR121_NCLR, 0x0E);
 80004a0:	210e      	movs	r1, #14
 80004a2:	202d      	movs	r0, #45	@ 0x2d
 80004a4:	f000 f8a2 	bl	80005ec <writeRegister>
	writeRegister(MPR121_FDLR, 0x00);
 80004a8:	2100      	movs	r1, #0
 80004aa:	202e      	movs	r0, #46	@ 0x2e
 80004ac:	f000 f89e 	bl	80005ec <writeRegister>

	writeRegister(MPR121_MHDF, 0x01);
 80004b0:	2101      	movs	r1, #1
 80004b2:	202f      	movs	r0, #47	@ 0x2f
 80004b4:	f000 f89a 	bl	80005ec <writeRegister>
	writeRegister(MPR121_NHDF, 0x05);
 80004b8:	2105      	movs	r1, #5
 80004ba:	2030      	movs	r0, #48	@ 0x30
 80004bc:	f000 f896 	bl	80005ec <writeRegister>
	writeRegister(MPR121_NCLF, 0x01);
 80004c0:	2101      	movs	r1, #1
 80004c2:	2031      	movs	r0, #49	@ 0x31
 80004c4:	f000 f892 	bl	80005ec <writeRegister>
	writeRegister(MPR121_FDLF, 0x00);
 80004c8:	2100      	movs	r1, #0
 80004ca:	2032      	movs	r0, #50	@ 0x32
 80004cc:	f000 f88e 	bl	80005ec <writeRegister>

	writeRegister(MPR121_NHDT, 0x00);
 80004d0:	2100      	movs	r1, #0
 80004d2:	2033      	movs	r0, #51	@ 0x33
 80004d4:	f000 f88a 	bl	80005ec <writeRegister>
	writeRegister(MPR121_NCLT, 0x00);
 80004d8:	2100      	movs	r1, #0
 80004da:	2034      	movs	r0, #52	@ 0x34
 80004dc:	f000 f886 	bl	80005ec <writeRegister>
	writeRegister(MPR121_FDLT, 0x00);
 80004e0:	2100      	movs	r1, #0
 80004e2:	2035      	movs	r0, #53	@ 0x35
 80004e4:	f000 f882 	bl	80005ec <writeRegister>

	writeRegister(MPR121_DEBOUNCE, 0);
 80004e8:	2100      	movs	r1, #0
 80004ea:	205b      	movs	r0, #91	@ 0x5b
 80004ec:	f000 f87e 	bl	80005ec <writeRegister>
	writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80004f0:	2110      	movs	r1, #16
 80004f2:	205c      	movs	r0, #92	@ 0x5c
 80004f4:	f000 f87a 	bl	80005ec <writeRegister>
	writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80004f8:	2120      	movs	r1, #32
 80004fa:	205d      	movs	r0, #93	@ 0x5d
 80004fc:	f000 f876 	bl	80005ec <writeRegister>
	  writeRegister(MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
	  writeRegister(MPR121_TARGETLIMIT, 180); // UPLIMIT * 0.9
	  writeRegister(MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65
	#endif

	uint8_t ECR_SETTING = 0x8C;//配置ECR寄存器，位的作用在数据手册的第16页
 8000500:	238c      	movs	r3, #140	@ 0x8c
 8000502:	71bb      	strb	r3, [r7, #6]
	writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	4619      	mov	r1, r3
 8000508:	205e      	movs	r0, #94	@ 0x5e
 800050a:	f000 f86f 	bl	80005ec <writeRegister>
	return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
	// set all thresholds (the same)
	for (uint8_t i = 0; i < 12; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e016      	b.n	800055c <setThresholds+0x44>
	{
		writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	3341      	adds	r3, #65	@ 0x41
 8000536:	b2db      	uxtb	r3, r3
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f855 	bl	80005ec <writeRegister>
		writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	3321      	adds	r3, #33	@ 0x21
 8000546:	b2db      	uxtb	r3, r3
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	79ba      	ldrb	r2, [r7, #6]
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f84b 	bl	80005ec <writeRegister>
	for (uint8_t i = 0; i < 12; i++)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	3301      	adds	r3, #1
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b0b      	cmp	r3, #11
 8000560:	d9e5      	bls.n	800052e <setThresholds+0x16>
	}
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <touched>:

uint16_t touched()
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
	uint16_t data = ( readRegister8(MPR121_TOUCHSTATUS_H)<<8 | readRegister8(MPR121_TOUCHSTATUS_L) );
 8000572:	2001      	movs	r0, #1
 8000574:	f000 f810 	bl	8000598 <readRegister8>
 8000578:	4603      	mov	r3, r0
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	b21c      	sxth	r4, r3
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f80a 	bl	8000598 <readRegister8>
 8000584:	4603      	mov	r3, r0
 8000586:	b21b      	sxth	r3, r3
 8000588:	4323      	orrs	r3, r4
 800058a:	b21b      	sxth	r3, r3
 800058c:	80fb      	strh	r3, [r7, #6]
	return data;
 800058e:	88fb      	ldrh	r3, [r7, #6]
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <readRegister8>:

uint8_t readRegister8(uint8_t reg)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	uint8_t readedBuffer=0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, MPR121_I2CADDR_DEFAULT, reg, I2C_MEMADD_SIZE_8BIT, &readedBuffer, 1, HAL_MAX_DELAY);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	21b4      	movs	r1, #180	@ 0xb4
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <readRegister8+0x4c>)
 80005c0:	f001 f8c0 	bl	8001744 <HAL_I2C_Mem_Read>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <readRegister8+0x50>)
 80005ca:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return 0;}
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <readRegister8+0x50>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <readRegister8+0x40>
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <readRegister8+0x42>
	return readedBuffer;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000c50 	.word	0x20000c50
 80005e8:	20000c4c 	.word	0x20000c4c

080005ec <writeRegister>:

void writeRegister(uint8_t reg, uint8_t value)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	uint8_t stop_required = 1;//判断是否需要进入停止状态指示位
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
	uint8_t ecr_backup = readRegister8(MPR121_ECR);//备份电极配置寄存器(ERC寄存器)
 8000600:	205e      	movs	r0, #94	@ 0x5e
 8000602:	f7ff ffc9 	bl	8000598 <readRegister8>
 8000606:	4603      	mov	r3, r0
 8000608:	73bb      	strb	r3, [r7, #14]
	uint8_t ecr_chear = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	737b      	strb	r3, [r7, #13]
	if( (reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A)) ){stop_required = 0;}//如果成立则无需进入停止状态
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b5e      	cmp	r3, #94	@ 0x5e
 8000612:	d005      	beq.n	8000620 <writeRegister+0x34>
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b72      	cmp	r3, #114	@ 0x72
 8000618:	d904      	bls.n	8000624 <writeRegister+0x38>
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b7a      	cmp	r3, #122	@ 0x7a
 800061e:	d801      	bhi.n	8000624 <writeRegister+0x38>
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
	if (stop_required)//清除ERC寄存器，进入停止状态
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d015      	beq.n	8000656 <writeRegister+0x6a>
	{
		status = HAL_I2C_Mem_Write(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_chear, 1, HAL_MAX_DELAY);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	f107 030d 	add.w	r3, r7, #13
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	225e      	movs	r2, #94	@ 0x5e
 800063e:	21b4      	movs	r1, #180	@ 0xb4
 8000640:	481f      	ldr	r0, [pc, #124]	@ (80006c0 <writeRegister+0xd4>)
 8000642:	f000 ff85 	bl	8001550 <HAL_I2C_Mem_Write>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <writeRegister+0xd8>)
 800064c:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <writeRegister+0xd8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d12e      	bne.n	80006b4 <writeRegister+0xc8>
	}
	status = HAL_I2C_Mem_Write(&hi2c1, MPR121_I2CADDR_DEFAULT, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);//开始写入目标寄存器
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	b29a      	uxth	r2, r3
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	2301      	movs	r3, #1
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	21b4      	movs	r1, #180	@ 0xb4
 800066c:	4814      	ldr	r0, [pc, #80]	@ (80006c0 <writeRegister+0xd4>)
 800066e:	f000 ff6f 	bl	8001550 <HAL_I2C_Mem_Write>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <writeRegister+0xd8>)
 8000678:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return;}
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <writeRegister+0xd8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d11a      	bne.n	80006b8 <writeRegister+0xcc>
	if (stop_required) //还原ERC寄存器的值
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d018      	beq.n	80006ba <writeRegister+0xce>
	{
		status = HAL_I2C_Mem_Write(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_backup, 1, HAL_MAX_DELAY);
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2301      	movs	r3, #1
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f107 030e 	add.w	r3, r7, #14
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	225e      	movs	r2, #94	@ 0x5e
 800069c:	21b4      	movs	r1, #180	@ 0xb4
 800069e:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <writeRegister+0xd4>)
 80006a0:	f000 ff56 	bl	8001550 <HAL_I2C_Mem_Write>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <writeRegister+0xd8>)
 80006aa:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <writeRegister+0xd8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	e002      	b.n	80006ba <writeRegister+0xce>
		if (status != HAL_OK){return;}
 80006b4:	bf00      	nop
 80006b6:	e000      	b.n	80006ba <writeRegister+0xce>
	if (status != HAL_OK){return;}
 80006b8:	bf00      	nop
	}
}
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000c50 	.word	0x20000c50
 80006c4:	20000c4c 	.word	0x20000c4c

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_GPIO_Init+0x58>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <MX_GPIO_Init+0x58>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_GPIO_Init+0x58>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_GPIO_Init+0x58>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <MX_GPIO_Init+0x58>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_GPIO_Init+0x58>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_GPIO_Init+0x58>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a07      	ldr	r2, [pc, #28]	@ (8000720 <MX_GPIO_Init+0x58>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <MX_GPIO_Init+0x58>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000

08000724 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 fcb3 	bl	80010cc <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f8c6 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000c50 	.word	0x20000c50
 8000778:	40005400 	.word	0x40005400
 800077c:	00061a80 	.word	0x00061a80

08000780 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <HAL_I2C_MspInit+0x70>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d123      	bne.n	80007e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_I2C_MspInit+0x74>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <HAL_I2C_MspInit+0x74>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <HAL_I2C_MspInit+0x74>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b8:	23c0      	movs	r3, #192	@ 0xc0
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007bc:	2312      	movs	r3, #18
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <HAL_I2C_MspInit+0x78>)
 80007cc:	f000 fafa 	bl	8000dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_I2C_MspInit+0x74>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_I2C_MspInit+0x74>)
 80007d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007da:	61d3      	str	r3, [r2, #28]
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_I2C_MspInit+0x74>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010c00 	.word	0x40010c00

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 f94b 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f81f 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f7ff ff5d 	bl	80006c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800080e:	f007 ff25 	bl	800865c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000812:	f7ff ff87 	bl	8000724 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 8000816:	f7ff fcf0 	bl	80001fa <OLED_init>
  mpr121_init();
 800081a:	f7ff fe20 	bl	800045e <mpr121_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t data = touched();
 800081e:	f7ff fea5 	bl	800056c <touched>
 8000822:	4603      	mov	r3, r0
 8000824:	81fb      	strh	r3, [r7, #14]

	  sprintf(buffer, "%ld    ", data);
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	463b      	mov	r3, r7
 800082a:	4906      	ldr	r1, [pc, #24]	@ (8000844 <main+0x48>)
 800082c:	4618      	mov	r0, r3
 800082e:	f008 fb8b 	bl	8008f48 <siprintf>
	  OLED_showString(8, 8, buffer, 8);
 8000832:	463a      	mov	r2, r7
 8000834:	2308      	movs	r3, #8
 8000836:	2108      	movs	r1, #8
 8000838:	2008      	movs	r0, #8
 800083a:	f7ff fde3 	bl	8000404 <OLED_showString>
  {
 800083e:	bf00      	nop
 8000840:	e7ed      	b.n	800081e <main+0x22>
 8000842:	bf00      	nop
 8000844:	080098c0 	.word	0x080098c0

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	2228      	movs	r2, #40	@ 0x28
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f008 fb96 	bl	8008f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000894:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fb5a 	bl	8003f58 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008aa:	f000 f827 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fdc6 	bl	800445c <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008d6:	f000 f811 	bl	80008fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008da:	2310      	movs	r3, #16
 80008dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 ff33 	bl	8004750 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008f0:	f000 f804 	bl	80008fc <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	@ 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <HAL_MspInit+0x5c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_MspInit+0x5c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_MspInit+0x5c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x5c>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_MspInit+0x60>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_MspInit+0x60>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000
 8000968:	40010000 	.word	0x40010000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8b4 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009ca:	f001 fe80 	bl	80026ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20001974 	.word	0x20001974

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f008 fac6 	bl	8008f98 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20005000 	.word	0x20005000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20000ca4 	.word	0x20000ca4
 8000a40:	20001fb8 	.word	0x20001fb8

08000a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff fff8 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a56:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a58:	4a0c      	ldr	r2, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a6c:	4c09      	ldr	r4, [pc, #36]	@ (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f008 fa93 	bl	8008fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff febd 	bl	80007fc <main>
  bx lr
 8000a82:	4770      	bx	lr
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000c30 	.word	0x20000c30
  ldr r2, =_sidata
 8000a8c:	08009978 	.word	0x08009978
  ldr r2, =_sbss
 8000a90:	20000c30 	.word	0x20000c30
  ldr r4, =_ebss
 8000a94:	20001fb4 	.word	0x20001fb4

08000a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_2_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_Init+0x28>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <HAL_Init+0x28>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f947 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff ff26 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f95f 	bl	8000daa <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f927 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	@ (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000a64 	.word	0x20000a64
 8000b20:	20000a6c 	.word	0x20000a6c
 8000b24:	20000a68 	.word	0x20000a68

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a03      	ldr	r2, [pc, #12]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000a6c 	.word	0x20000a6c
 8000b48:	20000ca8 	.word	0x20000ca8

08000b4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	@ (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000ca8 	.word	0x20000ca8

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000a6c 	.word	0x20000a6c

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4906      	ldr	r1, [pc, #24]	@ (8000c40 <__NVIC_EnableIRQ+0x34>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff90 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff2d 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff42 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff90 	bl	8000c98 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5f 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff35 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b08b      	sub	sp, #44	@ 0x2c
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	e169      	b.n	80010ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8158 	bne.w	80010a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a9a      	ldr	r2, [pc, #616]	@ (8001064 <HAL_GPIO_Init+0x2a0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d05e      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e00:	4a98      	ldr	r2, [pc, #608]	@ (8001064 <HAL_GPIO_Init+0x2a0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d875      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e06:	4a98      	ldr	r2, [pc, #608]	@ (8001068 <HAL_GPIO_Init+0x2a4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d058      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e0c:	4a96      	ldr	r2, [pc, #600]	@ (8001068 <HAL_GPIO_Init+0x2a4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d86f      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e12:	4a96      	ldr	r2, [pc, #600]	@ (800106c <HAL_GPIO_Init+0x2a8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d052      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e18:	4a94      	ldr	r2, [pc, #592]	@ (800106c <HAL_GPIO_Init+0x2a8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d869      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e1e:	4a94      	ldr	r2, [pc, #592]	@ (8001070 <HAL_GPIO_Init+0x2ac>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d04c      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e24:	4a92      	ldr	r2, [pc, #584]	@ (8001070 <HAL_GPIO_Init+0x2ac>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d863      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e2a:	4a92      	ldr	r2, [pc, #584]	@ (8001074 <HAL_GPIO_Init+0x2b0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d046      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e30:	4a90      	ldr	r2, [pc, #576]	@ (8001074 <HAL_GPIO_Init+0x2b0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d85d      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d82a      	bhi.n	8000e90 <HAL_GPIO_Init+0xcc>
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d859      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e44 <HAL_GPIO_Init+0x80>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000ebf 	.word	0x08000ebf
 8000e48:	08000e99 	.word	0x08000e99
 8000e4c:	08000eab 	.word	0x08000eab
 8000e50:	08000eed 	.word	0x08000eed
 8000e54:	08000ef3 	.word	0x08000ef3
 8000e58:	08000ef3 	.word	0x08000ef3
 8000e5c:	08000ef3 	.word	0x08000ef3
 8000e60:	08000ef3 	.word	0x08000ef3
 8000e64:	08000ef3 	.word	0x08000ef3
 8000e68:	08000ef3 	.word	0x08000ef3
 8000e6c:	08000ef3 	.word	0x08000ef3
 8000e70:	08000ef3 	.word	0x08000ef3
 8000e74:	08000ef3 	.word	0x08000ef3
 8000e78:	08000ef3 	.word	0x08000ef3
 8000e7c:	08000ef3 	.word	0x08000ef3
 8000e80:	08000ef3 	.word	0x08000ef3
 8000e84:	08000ef3 	.word	0x08000ef3
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000eb5 	.word	0x08000eb5
 8000e90:	4a79      	ldr	r2, [pc, #484]	@ (8001078 <HAL_GPIO_Init+0x2b4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e96:	e02c      	b.n	8000ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e029      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e024      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	3308      	adds	r3, #8
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e01f      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e01a      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e013      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	611a      	str	r2, [r3, #16]
          break;
 8000ede:	e009      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	615a      	str	r2, [r3, #20]
          break;
 8000eea:	e003      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          break;
 8000ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2bff      	cmp	r3, #255	@ 0xff
 8000ef8:	d801      	bhi.n	8000efe <HAL_GPIO_Init+0x13a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	e001      	b.n	8000f02 <HAL_GPIO_Init+0x13e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3304      	adds	r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	@ 0xff
 8000f08:	d802      	bhi.n	8000f10 <HAL_GPIO_Init+0x14c>
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x152>
 8000f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f12:	3b08      	subs	r3, #8
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	6a39      	ldr	r1, [r7, #32]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	431a      	orrs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 80b1 	beq.w	80010a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f44:	4b4d      	ldr	r3, [pc, #308]	@ (800107c <HAL_GPIO_Init+0x2b8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	@ (800107c <HAL_GPIO_Init+0x2b8>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <HAL_GPIO_Init+0x2b8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f5c:	4a48      	ldr	r2, [pc, #288]	@ (8001080 <HAL_GPIO_Init+0x2bc>)
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a40      	ldr	r2, [pc, #256]	@ (8001084 <HAL_GPIO_Init+0x2c0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d013      	beq.n	8000fb0 <HAL_GPIO_Init+0x1ec>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001088 <HAL_GPIO_Init+0x2c4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00d      	beq.n	8000fac <HAL_GPIO_Init+0x1e8>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3e      	ldr	r2, [pc, #248]	@ (800108c <HAL_GPIO_Init+0x2c8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x1e4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001090 <HAL_GPIO_Init+0x2cc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_GPIO_Init+0x1e0>
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_Init+0x1ee>
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	e004      	b.n	8000fb2 <HAL_GPIO_Init+0x1ee>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e002      	b.n	8000fb2 <HAL_GPIO_Init+0x1ee>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <HAL_GPIO_Init+0x1ee>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb4:	f002 0203 	and.w	r2, r2, #3
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	4093      	lsls	r3, r2
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc2:	492f      	ldr	r1, [pc, #188]	@ (8001080 <HAL_GPIO_Init+0x2bc>)
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	492c      	ldr	r1, [pc, #176]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	608b      	str	r3, [r1, #8]
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fea:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4928      	ldr	r1, [pc, #160]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	4922      	ldr	r1, [pc, #136]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	60cb      	str	r3, [r1, #12]
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	43db      	mvns	r3, r3
 800101a:	491e      	ldr	r1, [pc, #120]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 800101c:	4013      	ands	r3, r2
 800101e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4918      	ldr	r1, [pc, #96]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	4914      	ldr	r1, [pc, #80]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8001044:	4013      	ands	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d021      	beq.n	8001098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	490e      	ldr	r1, [pc, #56]	@ (8001094 <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e021      	b.n	80010a6 <HAL_GPIO_Init+0x2e2>
 8001062:	bf00      	nop
 8001064:	10320000 	.word	0x10320000
 8001068:	10310000 	.word	0x10310000
 800106c:	10220000 	.word	0x10220000
 8001070:	10210000 	.word	0x10210000
 8001074:	10120000 	.word	0x10120000
 8001078:	10110000 	.word	0x10110000
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	40010800 	.word	0x40010800
 8001088:	40010c00 	.word	0x40010c00
 800108c:	40011000 	.word	0x40011000
 8001090:	40011400 	.word	0x40011400
 8001094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4909      	ldr	r1, [pc, #36]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	3301      	adds	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f47f ae8e 	bne.w	8000dd8 <HAL_GPIO_Init+0x14>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	372c      	adds	r7, #44	@ 0x2c
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e12b      	b.n	8001336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fb44 	bl	8000780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2224      	movs	r2, #36	@ 0x24
 80010fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800111e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800112e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001130:	f003 fadc 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 8001134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a81      	ldr	r2, [pc, #516]	@ (8001340 <HAL_I2C_Init+0x274>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d807      	bhi.n	8001150 <HAL_I2C_Init+0x84>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4a80      	ldr	r2, [pc, #512]	@ (8001344 <HAL_I2C_Init+0x278>)
 8001144:	4293      	cmp	r3, r2
 8001146:	bf94      	ite	ls
 8001148:	2301      	movls	r3, #1
 800114a:	2300      	movhi	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	e006      	b.n	800115e <HAL_I2C_Init+0x92>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4a7d      	ldr	r2, [pc, #500]	@ (8001348 <HAL_I2C_Init+0x27c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	bf94      	ite	ls
 8001158:	2301      	movls	r3, #1
 800115a:	2300      	movhi	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0e7      	b.n	8001336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4a78      	ldr	r2, [pc, #480]	@ (800134c <HAL_I2C_Init+0x280>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	430a      	orrs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a6a      	ldr	r2, [pc, #424]	@ (8001340 <HAL_I2C_Init+0x274>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d802      	bhi.n	80011a0 <HAL_I2C_Init+0xd4>
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3301      	adds	r3, #1
 800119e:	e009      	b.n	80011b4 <HAL_I2C_Init+0xe8>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a69      	ldr	r2, [pc, #420]	@ (8001350 <HAL_I2C_Init+0x284>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	099b      	lsrs	r3, r3, #6
 80011b2:	3301      	adds	r3, #1
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	495c      	ldr	r1, [pc, #368]	@ (8001340 <HAL_I2C_Init+0x274>)
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d819      	bhi.n	8001208 <HAL_I2C_Init+0x13c>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1e59      	subs	r1, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e2:	1c59      	adds	r1, r3, #1
 80011e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011e8:	400b      	ands	r3, r1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_I2C_Init+0x138>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1e59      	subs	r1, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011fc:	3301      	adds	r3, #1
 80011fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001202:	e051      	b.n	80012a8 <HAL_I2C_Init+0x1dc>
 8001204:	2304      	movs	r3, #4
 8001206:	e04f      	b.n	80012a8 <HAL_I2C_Init+0x1dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d111      	bne.n	8001234 <HAL_I2C_Init+0x168>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1e58      	subs	r0, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	440b      	add	r3, r1
 800121e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001222:	3301      	adds	r3, #1
 8001224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	e012      	b.n	800125a <HAL_I2C_Init+0x18e>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1e58      	subs	r0, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	0099      	lsls	r1, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	fbb0 f3f3 	udiv	r3, r0, r3
 800124a:	3301      	adds	r3, #1
 800124c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Init+0x196>
 800125e:	2301      	movs	r3, #1
 8001260:	e022      	b.n	80012a8 <HAL_I2C_Init+0x1dc>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10e      	bne.n	8001288 <HAL_I2C_Init+0x1bc>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1e58      	subs	r0, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6859      	ldr	r1, [r3, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	440b      	add	r3, r1
 8001278:	fbb0 f3f3 	udiv	r3, r0, r3
 800127c:	3301      	adds	r3, #1
 800127e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001286:	e00f      	b.n	80012a8 <HAL_I2C_Init+0x1dc>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1e58      	subs	r0, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	0099      	lsls	r1, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	fbb0 f3f3 	udiv	r3, r0, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	6809      	ldr	r1, [r1, #0]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6911      	ldr	r1, [r2, #16]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68d2      	ldr	r2, [r2, #12]
 80012e2:	4311      	orrs	r1, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	000186a0 	.word	0x000186a0
 8001344:	001e847f 	.word	0x001e847f
 8001348:	003d08ff 	.word	0x003d08ff
 800134c:	431bde83 	.word	0x431bde83
 8001350:	10624dd3 	.word	0x10624dd3

08001354 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	461a      	mov	r2, r3
 8001360:	460b      	mov	r3, r1
 8001362:	817b      	strh	r3, [r7, #10]
 8001364:	4613      	mov	r3, r2
 8001366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff fbf0 	bl	8000b4c <HAL_GetTick>
 800136c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b20      	cmp	r3, #32
 8001378:	f040 80e0 	bne.w	800153c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2319      	movs	r3, #25
 8001382:	2201      	movs	r2, #1
 8001384:	4970      	ldr	r1, [pc, #448]	@ (8001548 <HAL_I2C_Master_Transmit+0x1f4>)
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 fe50 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001392:	2302      	movs	r3, #2
 8001394:	e0d3      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_I2C_Master_Transmit+0x50>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0cc      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ea>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d007      	beq.n	80013ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2221      	movs	r2, #33	@ 0x21
 80013de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2210      	movs	r2, #16
 80013e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	893a      	ldrh	r2, [r7, #8]
 80013fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001400:	b29a      	uxth	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a50      	ldr	r2, [pc, #320]	@ (800154c <HAL_I2C_Master_Transmit+0x1f8>)
 800140a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800140c:	8979      	ldrh	r1, [r7, #10]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	6a3a      	ldr	r2, [r7, #32]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fc0a 	bl	8001c2c <I2C_MasterRequestWrite>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e08d      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001438:	e066      	b.n	8001508 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 ff0e 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00d      	beq.n	8001466 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	2b04      	cmp	r3, #4
 8001450:	d107      	bne.n	8001462 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06b      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148e:	3b01      	subs	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d11b      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x188>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d017      	beq.n	80014dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	6a39      	ldr	r1, [r7, #32]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 ff05 	bl	80022f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00d      	beq.n	8001508 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d107      	bne.n	8001504 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001502:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e01a      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800150c:	2b00      	cmp	r3, #0
 800150e:	d194      	bne.n	800143a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2220      	movs	r2, #32
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	00100002 	.word	0x00100002
 800154c:	ffff0000 	.word	0xffff0000

08001550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af02      	add	r7, sp, #8
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	817b      	strh	r3, [r7, #10]
 8001562:	460b      	mov	r3, r1
 8001564:	813b      	strh	r3, [r7, #8]
 8001566:	4613      	mov	r3, r2
 8001568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800156a:	f7ff faef 	bl	8000b4c <HAL_GetTick>
 800156e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b20      	cmp	r3, #32
 800157a:	f040 80d9 	bne.w	8001730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2319      	movs	r3, #25
 8001584:	2201      	movs	r2, #1
 8001586:	496d      	ldr	r1, [pc, #436]	@ (800173c <HAL_I2C_Mem_Write+0x1ec>)
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fd4f 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001594:	2302      	movs	r3, #2
 8001596:	e0cc      	b.n	8001732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Mem_Write+0x56>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e0c5      	b.n	8001732 <HAL_I2C_Mem_Write+0x1e2>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d007      	beq.n	80015cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2221      	movs	r2, #33	@ 0x21
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2240      	movs	r2, #64	@ 0x40
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a4d      	ldr	r2, [pc, #308]	@ (8001740 <HAL_I2C_Mem_Write+0x1f0>)
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800160e:	88f8      	ldrh	r0, [r7, #6]
 8001610:	893a      	ldrh	r2, [r7, #8]
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4603      	mov	r3, r0
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 fb86 	bl	8001d30 <I2C_RequestMemoryWrite>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d052      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e081      	b.n	8001732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fe14 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	2b04      	cmp	r3, #4
 8001644:	d107      	bne.n	8001656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06b      	b.n	8001732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b04      	cmp	r3, #4
 8001696:	d11b      	bne.n	80016d0 <HAL_I2C_Mem_Write+0x180>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d017      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1aa      	bne.n	800162e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fe07 	bl	80022f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00d      	beq.n	8001704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d107      	bne.n	8001700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e016      	b.n	8001732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2220      	movs	r2, #32
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e000      	b.n	8001732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	00100002 	.word	0x00100002
 8001740:	ffff0000 	.word	0xffff0000

08001744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	@ 0x30
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	817b      	strh	r3, [r7, #10]
 8001756:	460b      	mov	r3, r1
 8001758:	813b      	strh	r3, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001762:	f7ff f9f3 	bl	8000b4c <HAL_GetTick>
 8001766:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b20      	cmp	r3, #32
 8001772:	f040 8250 	bne.w	8001c16 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2319      	movs	r3, #25
 800177c:	2201      	movs	r2, #1
 800177e:	4982      	ldr	r1, [pc, #520]	@ (8001988 <HAL_I2C_Mem_Read+0x244>)
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fc53 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
 800178e:	e243      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_I2C_Mem_Read+0x5a>
 800179a:	2302      	movs	r3, #2
 800179c:	e23c      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d007      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2222      	movs	r2, #34	@ 0x22
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2240      	movs	r2, #64	@ 0x40
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80017f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a62      	ldr	r2, [pc, #392]	@ (800198c <HAL_I2C_Mem_Read+0x248>)
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001806:	88f8      	ldrh	r0, [r7, #6]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	8979      	ldrh	r1, [r7, #10]
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fb20 	bl	8001e5c <I2C_RequestMemoryRead>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1f8      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d113      	bne.n	8001856 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e1cc      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185a:	2b01      	cmp	r3, #1
 800185c:	d11e      	bne.n	800189c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800186c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800186e:	b672      	cpsid	i
}
 8001870:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001898:	b662      	cpsie	i
}
 800189a:	e035      	b.n	8001908 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d11e      	bne.n	80018e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018de:	b662      	cpsie	i
}
 80018e0:	e012      	b.n	8001908 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001908:	e172      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190e:	2b03      	cmp	r3, #3
 8001910:	f200 811f 	bhi.w	8001b52 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001918:	2b01      	cmp	r3, #1
 800191a:	d123      	bne.n	8001964 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fd2d 	bl	8002380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e173      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001962:	e145      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001968:	2b02      	cmp	r3, #2
 800196a:	d152      	bne.n	8001a12 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001972:	2200      	movs	r2, #0
 8001974:	4906      	ldr	r1, [pc, #24]	@ (8001990 <HAL_I2C_Mem_Read+0x24c>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fb58 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e148      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
 8001986:	bf00      	nop
 8001988:	00100002 	.word	0x00100002
 800198c:	ffff0000 	.word	0xffff0000
 8001990:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019da:	b662      	cpsie	i
}
 80019dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a10:	e0ee      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4981      	ldr	r1, [pc, #516]	@ (8001c20 <HAL_I2C_Mem_Read+0x4dc>)
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fb05 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0f5      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a72:	4b6c      	ldr	r3, [pc, #432]	@ (8001c24 <HAL_I2C_Mem_Read+0x4e0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	4a6b      	ldr	r2, [pc, #428]	@ (8001c28 <HAL_I2C_Mem_Read+0x4e4>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0a1a      	lsrs	r2, r3, #8
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00da      	lsls	r2, r3, #3
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d118      	bne.n	8001aca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f043 0220 	orr.w	r2, r3, #32
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001aba:	b662      	cpsie	i
}
 8001abc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0a6      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d1d9      	bne.n	8001a8c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b1a:	b662      	cpsie	i
}
 8001b1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b50:	e04e      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fc12 	bl	8002380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e058      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d124      	bne.n	8001bf0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d107      	bne.n	8001bbe <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bbc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f ae88 	bne.w	800190a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3728      	adds	r7, #40	@ 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	00010004 	.word	0x00010004
 8001c24:	20000a64 	.word	0x20000a64
 8001c28:	14f8b589 	.word	0x14f8b589

08001c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d006      	beq.n	8001c56 <I2C_MasterRequestWrite+0x2a>
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d003      	beq.n	8001c56 <I2C_MasterRequestWrite+0x2a>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c54:	d108      	bne.n	8001c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e00b      	b.n	8001c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	2b12      	cmp	r3, #18
 8001c6e:	d107      	bne.n	8001c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f9cd 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ca6:	d103      	bne.n	8001cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e035      	b.n	8001d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cbc:	d108      	bne.n	8001cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cbe:	897b      	ldrh	r3, [r7, #10]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	e01b      	b.n	8001d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cd0:	897b      	ldrh	r3, [r7, #10]
 8001cd2:	11db      	asrs	r3, r3, #7
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f003 0306 	and.w	r3, r3, #6
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f063 030f 	orn	r3, r3, #15
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	490e      	ldr	r1, [pc, #56]	@ (8001d28 <I2C_MasterRequestWrite+0xfc>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fa16 	bl	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e010      	b.n	8001d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4907      	ldr	r1, [pc, #28]	@ (8001d2c <I2C_MasterRequestWrite+0x100>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fa06 	bl	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	00010008 	.word	0x00010008
 8001d2c:	00010002 	.word	0x00010002

08001d30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	817b      	strh	r3, [r7, #10]
 8001d42:	460b      	mov	r3, r1
 8001d44:	813b      	strh	r3, [r7, #8]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f960 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d80:	d103      	bne.n	8001d8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e05f      	b.n	8001e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d8e:	897b      	ldrh	r3, [r7, #10]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	6a3a      	ldr	r2, [r7, #32]
 8001da2:	492d      	ldr	r1, [pc, #180]	@ (8001e58 <I2C_RequestMemoryWrite+0x128>)
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f9bb 	bl	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04c      	b.n	8001e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fa46 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00d      	beq.n	8001df6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d107      	bne.n	8001df2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e02b      	b.n	8001e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dfc:	893b      	ldrh	r3, [r7, #8]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	e021      	b.n	8001e4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fa20 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00d      	beq.n	8001e42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d107      	bne.n	8001e3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e005      	b.n	8001e4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	00010002 	.word	0x00010002

08001e5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	813b      	strh	r3, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f8c2 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ebc:	d103      	bne.n	8001ec6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0aa      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ed8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	4952      	ldr	r1, [pc, #328]	@ (8002028 <I2C_RequestMemoryRead+0x1cc>)
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f91d 	bl	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e097      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f9a8 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d107      	bne.n	8001f2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e076      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f38:	893b      	ldrh	r3, [r7, #8]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	e021      	b.n	8001f88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f44:	893b      	ldrh	r3, [r7, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f982 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d107      	bne.n	8001f7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e050      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8a:	6a39      	ldr	r1, [r7, #32]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f967 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d107      	bne.n	8001fb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e035      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f82b 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fea:	d103      	bne.n	8001ff4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e013      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	4906      	ldr	r1, [pc, #24]	@ (8002028 <I2C_RequestMemoryRead+0x1cc>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f886 	bl	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	00010002 	.word	0x00010002

0800202c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203c:	e048      	b.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d044      	beq.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fd81 	bl	8000b4c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d139      	bne.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10d      	bne.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	e00c      	b.n	800209c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d116      	bne.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e023      	b.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10d      	bne.n	80020f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	e00c      	b.n	8002110 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	429a      	cmp	r2, r3
 8002114:	d093      	beq.n	800203e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800212e:	e071      	b.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213e:	d123      	bne.n	8002188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e067      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d041      	beq.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002190:	f7fe fcdc 	bl	8000b4c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d302      	bcc.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d136      	bne.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10c      	bne.n	80021ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4013      	ands	r3, r2
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e00b      	b.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	43da      	mvns	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e021      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10c      	bne.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	43da      	mvns	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4013      	ands	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e00b      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f af6d 	bne.w	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226c:	e034      	b.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8e3 	bl	800243a <I2C_IsAcknowledgeFailed>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e034      	b.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d028      	beq.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002286:	f7fe fc61 	bl	8000b4c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d302      	bcc.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11d      	bne.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b80      	cmp	r3, #128	@ 0x80
 80022a8:	d016      	beq.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b80      	cmp	r3, #128	@ 0x80
 80022e4:	d1c3      	bne.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fc:	e034      	b.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f89b 	bl	800243a <I2C_IsAcknowledgeFailed>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e034      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d028      	beq.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7fe fc19 	bl	8000b4c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d11d      	bne.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d016      	beq.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d1c3      	bne.n	80022fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800238c:	e049      	b.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b10      	cmp	r3, #16
 800239a:	d119      	bne.n	80023d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0210 	mvn.w	r2, #16
 80023a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e030      	b.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7fe fbbc 	bl	8000b4c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d016      	beq.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e007      	b.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242c:	2b40      	cmp	r3, #64	@ 0x40
 800242e:	d1ae      	bne.n	800238e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002450:	d11b      	bne.n	800248a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800245a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0e8      	b.n	800267a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f006 fa99 	bl	80089f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fa14 	bl	8004902 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e4:	f002 f9ea 	bl	80048bc <USB_CoreInit>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0bf      	b.n	800267a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fa18 	bl	8004936 <USB_SetCurrentMode>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b0      	b.n	800267a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e03e      	b.n	800259c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	3311      	adds	r3, #17
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3310      	adds	r3, #16
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	3313      	adds	r3, #19
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3320      	adds	r3, #32
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	3324      	adds	r3, #36	@ 0x24
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	3301      	adds	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d3bb      	bcc.n	800251e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e044      	b.n	8002636 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	3301      	adds	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	429a      	cmp	r2, r3
 800263e:	d3b5      	bcc.n	80025ac <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264a:	f002 f980 	bl	800494e <USB_DevInit>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e00c      	b.n	800267a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fbff 	bl	8006e76 <USB_DevDisconnect>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_PCD_Start+0x16>
 8002694:	2302      	movs	r3, #2
 8002696:	e016      	b.n	80026c6 <HAL_PCD_Start+0x44>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 f916 	bl	80048d6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80026aa:	2101      	movs	r1, #1
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f006 fc14 	bl	8008eda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fbd3 	bl	8006e62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b088      	sub	sp, #32
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 fbd5 	bl	8006e8a <USB_ReadInterrupts>
 80026e0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fb1a 	bl	8002d26 <PCD_EP_ISR_Handler>

    return;
 80026f2:	e119      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d013      	beq.n	8002726 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002710:	b292      	uxth	r2, r2
 8002712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f006 f9e7 	bl	8008aea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800271c:	2100      	movs	r1, #0
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f905 	bl	800292e <HAL_PCD_SetAddress>

    return;
 8002724:	e100      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002742:	b292      	uxth	r2, r2
 8002744:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002748:	e0ee      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002766:	b292      	uxth	r2, r2
 8002768:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800276c:	e0dc      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d027      	beq.n	80027c8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002780:	b29a      	uxth	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	b292      	uxth	r2, r2
 800278c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0208 	bic.w	r2, r2, #8
 80027a2:	b292      	uxth	r2, r2
 80027a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f006 f9d7 	bl	8008b5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027c0:	b292      	uxth	r2, r2
 80027c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027c6:	e0af      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8083 	beq.w	80028da <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e010      	b.n	80027fc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	7ffb      	ldrb	r3, [r7, #31]
 80027e8:	8812      	ldrh	r2, [r2, #0]
 80027ea:	b292      	uxth	r2, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	3320      	adds	r3, #32
 80027f0:	443b      	add	r3, r7
 80027f2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	3301      	adds	r3, #1
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	7ffb      	ldrb	r3, [r7, #31]
 80027fe:	2b07      	cmp	r3, #7
 8002800:	d9eb      	bls.n	80027da <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	b292      	uxth	r2, r2
 8002816:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002822:	b29a      	uxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	b292      	uxth	r2, r2
 800282e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002832:	bf00      	nop
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800283c:	b29b      	uxth	r3, r3
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f6      	beq.n	8002834 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002858:	b292      	uxth	r2, r2
 800285a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e00f      	b.n	8002884 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002864:	7ffb      	ldrb	r3, [r7, #31]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	4611      	mov	r1, r2
 800286c:	7ffa      	ldrb	r2, [r7, #31]
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	440a      	add	r2, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	3320      	adds	r3, #32
 8002876:	443b      	add	r3, r7
 8002878:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800287c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	3301      	adds	r3, #1
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	7ffb      	ldrb	r3, [r7, #31]
 8002886:	2b07      	cmp	r3, #7
 8002888:	d9ec      	bls.n	8002864 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0208 	orr.w	r2, r2, #8
 800289c:	b292      	uxth	r2, r2
 800289e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b4:	b292      	uxth	r2, r2
 80028b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0204 	orr.w	r2, r2, #4
 80028cc:	b292      	uxth	r2, r2
 80028ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f006 f928 	bl	8008b28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028d8:	e026      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00f      	beq.n	8002904 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028f6:	b292      	uxth	r2, r2
 80028f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f006 f8e6 	bl	8008ace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002902:	e011      	b.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00c      	beq.n	8002928 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002920:	b292      	uxth	r2, r2
 8002922:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002926:	bf00      	nop
  }
}
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_PCD_SetAddress+0x1a>
 8002944:	2302      	movs	r3, #2
 8002946:	e012      	b.n	800296e <HAL_PCD_SetAddress+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f004 fa6c 	bl	8006e3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	461a      	mov	r2, r3
 8002984:	4603      	mov	r3, r0
 8002986:	70fb      	strb	r3, [r7, #3]
 8002988:	460b      	mov	r3, r1
 800298a:	803b      	strh	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002998:	2b00      	cmp	r3, #0
 800299a:	da0e      	bge.n	80029ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	3310      	adds	r3, #16
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	705a      	strb	r2, [r3, #1]
 80029b8:	e00e      	b.n	80029d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0207 	and.w	r2, r3, #7
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029e4:	883a      	ldrh	r2, [r7, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	78ba      	ldrb	r2, [r7, #2]
 80029ee:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029f0:	78bb      	ldrb	r3, [r7, #2]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d102      	bne.n	80029fc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_PCD_EP_Open+0x94>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e00e      	b.n	8002a28 <HAL_PCD_EP_Open+0xb2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 ffb5 	bl	8004988 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002a26:	7afb      	ldrb	r3, [r7, #11]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da0e      	bge.n	8002a62 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 0207 	and.w	r2, r3, #7
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	3310      	adds	r3, #16
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	705a      	strb	r2, [r3, #1]
 8002a60:	e00e      	b.n	8002a80 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 0207 	and.w	r2, r3, #7
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_EP_Close+0x6a>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e00e      	b.n	8002ab8 <HAL_PCD_EP_Close+0x88>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68f9      	ldr	r1, [r7, #12]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f002 fb2d 	bl	8005108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	460b      	mov	r3, r1
 8002ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6979      	ldr	r1, [r7, #20]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fce4 	bl	80054e0 <USB_EPStartXfer>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 0207 	and.w	r2, r3, #7
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002b44:	681b      	ldr	r3, [r3, #0]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b60:	7afb      	ldrb	r3, [r7, #11]
 8002b62:	f003 0207 	and.w	r2, r3, #7
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	3310      	adds	r3, #16
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6979      	ldr	r1, [r7, #20]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fc96 	bl	80054e0 <USB_EPStartXfer>

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	7912      	ldrb	r2, [r2, #4]
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e04c      	b.n	8002c76 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da0e      	bge.n	8002c02 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 0207 	and.w	r2, r3, #7
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	3310      	adds	r3, #16
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	705a      	strb	r2, [r3, #1]
 8002c00:	e00c      	b.n	8002c1c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_PCD_EP_SetStall+0x7e>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e01c      	b.n	8002c76 <HAL_PCD_EP_SetStall+0xb8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fff9 	bl	8006c42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f004 f91e 	bl	8006ea8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	7912      	ldrb	r2, [r2, #4]
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e040      	b.n	8002d1e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da0e      	bge.n	8002cc2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 0207 	and.w	r2, r3, #7
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	3310      	adds	r3, #16
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	705a      	strb	r2, [r3, #1]
 8002cc0:	e00e      	b.n	8002ce0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 0207 	and.w	r2, r3, #7
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_PCD_EP_ClrStall+0x82>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e00e      	b.n	8002d1e <HAL_PCD_EP_ClrStall+0xa0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 ffe7 	bl	8006ce2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b096      	sub	sp, #88	@ 0x58
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d2e:	e3bb      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002d4a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8175 	bne.w	800303e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d14e      	bne.n	8002dfe <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d70:	81fb      	strh	r3, [r7, #14]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	89fb      	ldrh	r3, [r7, #14]
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3310      	adds	r3, #16
 8002d88:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f005 fe67 	bl	8008a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7b5b      	ldrb	r3, [r3, #13]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8368 	beq.w	80034a8 <PCD_EP_ISR_Handler+0x782>
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 8363 	bne.w	80034a8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7b5b      	ldrb	r3, [r3, #13]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	735a      	strb	r2, [r3, #13]
 8002dfc:	e354      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e04:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d034      	beq.n	8002e86 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3306      	adds	r3, #6
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f004 f874 	bl	8006f48 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	823b      	strh	r3, [r7, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	8a3a      	ldrh	r2, [r7, #16]
 8002e76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f005 fdde 	bl	8008a40 <HAL_PCD_SetupStageCallback>
 8002e84:	e310      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e86:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f280 830c 	bge.w	80034a8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	83fb      	strh	r3, [r7, #30]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	8bfa      	ldrh	r2, [r7, #30]
 8002ea6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3306      	adds	r3, #6
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x1f0>
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef0:	6959      	ldr	r1, [r3, #20]
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f004 f824 	bl	8006f48 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	441a      	add	r2, r3
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f005 fda7 	bl	8008a64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 82bd 	bne.w	80034a8 <PCD_EP_ISR_Handler+0x782>
 8002f2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f3a:	f000 82b5 	beq.w	80034a8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f74:	d91d      	bls.n	8002fb2 <PCD_EP_ISR_Handler+0x28c>
 8002f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <PCD_EP_ISR_Handler+0x26a>
 8002f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	029b      	lsls	r3, r3, #10
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	e026      	b.n	8003000 <PCD_EP_ISR_Handler+0x2da>
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <PCD_EP_ISR_Handler+0x2aa>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	e017      	b.n	8003000 <PCD_EP_ISR_Handler+0x2da>
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <PCD_EP_ISR_Handler+0x2c4>
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	029b      	lsls	r3, r3, #10
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800300c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003010:	827b      	strh	r3, [r7, #18]
 8003012:	8a7b      	ldrh	r3, [r7, #18]
 8003014:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003018:	827b      	strh	r3, [r7, #18]
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003020:	827b      	strh	r3, [r7, #18]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	8a7b      	ldrh	r3, [r7, #18]
 8003028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800302c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003038:	b29b      	uxth	r3, r3
 800303a:	8013      	strh	r3, [r2, #0]
 800303c:	e234      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003052:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003056:	2b00      	cmp	r3, #0
 8003058:	f280 80fc 	bge.w	8003254 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29a      	uxth	r2, r3
 800306e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003072:	4013      	ands	r3, r2
 8003074:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800308a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800308e:	b292      	uxth	r2, r2
 8003090:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003092:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030aa:	7b1b      	ldrb	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d125      	bne.n	80030fc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	3306      	adds	r3, #6
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80030dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8092 	beq.w	800320a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ec:	6959      	ldr	r1, [r3, #20]
 80030ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f0:	88da      	ldrh	r2, [r3, #6]
 80030f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030f6:	f003 ff27 	bl	8006f48 <USB_ReadPMA>
 80030fa:	e086      	b.n	800320a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80030fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fe:	78db      	ldrb	r3, [r3, #3]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d10a      	bne.n	800311a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003108:	461a      	mov	r2, r3
 800310a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f9d9 	bl	80034c4 <HAL_PCD_EP_DB_Receive>
 8003112:	4603      	mov	r3, r0
 8003114:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003118:	e077      	b.n	800320a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003134:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800314a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800314e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003156:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800315a:	b29b      	uxth	r3, r3
 800315c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d024      	beq.n	80031c2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	3302      	adds	r3, #2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80031a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02e      	beq.n	800320a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	6959      	ldr	r1, [r3, #20]
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	891a      	ldrh	r2, [r3, #8]
 80031b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031bc:	f003 fec4 	bl	8006f48 <USB_ReadPMA>
 80031c0:	e023      	b.n	800320a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	3306      	adds	r3, #6
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80031ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fc:	6959      	ldr	r1, [r3, #20]
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	895a      	ldrh	r2, [r3, #10]
 8003202:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003206:	f003 fe9f 	bl	8006f48 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003212:	441a      	add	r2, r3
 8003214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003216:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003220:	441a      	add	r2, r3
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <PCD_EP_ISR_Handler+0x514>
 800322e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	d206      	bcs.n	8003248 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800323a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f005 fc0f 	bl	8008a64 <HAL_PCD_DataOutStageCallback>
 8003246:	e005      	b.n	8003254 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800324e:	4618      	mov	r0, r3
 8003250:	f002 f946 	bl	80054e0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8123 	beq.w	80034a8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003262:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	3310      	adds	r3, #16
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800328c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003290:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80032a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80032b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b4:	78db      	ldrb	r3, [r3, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 80a2 	bne.w	8003400 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80032bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c4:	7b1b      	ldrb	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8093 	beq.w	80033f2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d046      	beq.n	8003366 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d126      	bne.n	800332e <PCD_EP_ISR_Handler+0x608>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	4413      	add	r3, r2
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	011a      	lsls	r2, r3, #4
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	4413      	add	r3, r2
 8003302:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003312:	b29a      	uxth	r2, r3
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003326:	b29a      	uxth	r2, r3
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	e061      	b.n	80033f2 <PCD_EP_ISR_Handler+0x6cc>
 800332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d15d      	bne.n	80033f2 <PCD_EP_ISR_Handler+0x6cc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334a:	4413      	add	r3, r2
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800334e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	011a      	lsls	r2, r3, #4
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	4413      	add	r3, r2
 8003358:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800335c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	e045      	b.n	80033f2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800336c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d126      	bne.n	80033c2 <PCD_EP_ISR_Handler+0x69c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	4413      	add	r3, r2
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
 800338c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	011a      	lsls	r2, r3, #4
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003394:	4413      	add	r3, r2
 8003396:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	e017      	b.n	80033f2 <PCD_EP_ISR_Handler+0x6cc>
 80033c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d113      	bne.n	80033f2 <PCD_EP_ISR_Handler+0x6cc>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d8:	4413      	add	r3, r2
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	011a      	lsls	r2, r3, #4
 80033e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e4:	4413      	add	r3, r2
 80033e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ee:	2200      	movs	r2, #0
 80033f0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f005 fb4e 	bl	8008a9a <HAL_PCD_DataInStageCallback>
 80033fe:	e053      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003400:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d146      	bne.n	800349a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	3302      	adds	r3, #2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003434:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003440:	429a      	cmp	r2, r3
 8003442:	d907      	bls.n	8003454 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800344c:	1ad2      	subs	r2, r2, r3
 800344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003450:	619a      	str	r2, [r3, #24]
 8003452:	e002      	b.n	800345a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800345a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f005 fb16 	bl	8008a9a <HAL_PCD_DataInStageCallback>
 800346e:	e01b      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003478:	441a      	add	r2, r3
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003486:	441a      	add	r2, r3
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003492:	4618      	mov	r0, r3
 8003494:	f002 f824 	bl	80054e0 <USB_EPStartXfer>
 8003498:	e006      	b.n	80034a8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800349a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800349e:	461a      	mov	r2, r3
 80034a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f91b 	bl	80036de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f6ff ac3b 	blt.w	8002d30 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3758      	adds	r7, #88	@ 0x58
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d07e      	beq.n	80035da <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	3302      	adds	r3, #2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003504:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	8b7b      	ldrh	r3, [r7, #26]
 800350c:	429a      	cmp	r2, r3
 800350e:	d306      	bcc.n	800351e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	8b7b      	ldrh	r3, [r7, #26]
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	619a      	str	r2, [r3, #24]
 800351c:	e002      	b.n	8003524 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d123      	bne.n	8003574 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003546:	833b      	strh	r3, [r7, #24]
 8003548:	8b3b      	ldrh	r3, [r7, #24]
 800354a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800354e:	833b      	strh	r3, [r7, #24]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	8b3b      	ldrh	r3, [r7, #24]
 8003560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003570:	b29b      	uxth	r3, r3
 8003572:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01f      	beq.n	80035be <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003598:	82fb      	strh	r3, [r7, #22]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	8afb      	ldrh	r3, [r7, #22]
 80035aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035be:	8b7b      	ldrh	r3, [r7, #26]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8087 	beq.w	80036d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6959      	ldr	r1, [r3, #20]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	891a      	ldrh	r2, [r3, #8]
 80035d2:	8b7b      	ldrh	r3, [r7, #26]
 80035d4:	f003 fcb8 	bl	8006f48 <USB_ReadPMA>
 80035d8:	e07c      	b.n	80036d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	3306      	adds	r3, #6
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003602:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	8b7b      	ldrh	r3, [r7, #26]
 800360a:	429a      	cmp	r2, r3
 800360c:	d306      	bcc.n	800361c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	8b7b      	ldrh	r3, [r7, #26]
 8003614:	1ad2      	subs	r2, r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	619a      	str	r2, [r3, #24]
 800361a:	e002      	b.n	8003622 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d123      	bne.n	8003672 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003644:	83fb      	strh	r3, [r7, #30]
 8003646:	8bfb      	ldrh	r3, [r7, #30]
 8003648:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800364c:	83fb      	strh	r3, [r7, #30]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	8bfb      	ldrh	r3, [r7, #30]
 800365e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800366e:	b29b      	uxth	r3, r3
 8003670:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11f      	bne.n	80036bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003696:	83bb      	strh	r3, [r7, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	441a      	add	r2, r3
 80036a6:	8bbb      	ldrh	r3, [r7, #28]
 80036a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036bc:	8b7b      	ldrh	r3, [r7, #26]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6959      	ldr	r1, [r3, #20]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	895a      	ldrh	r2, [r3, #10]
 80036ce:	8b7b      	ldrh	r3, [r7, #26]
 80036d0:	f003 fc3a 	bl	8006f48 <USB_ReadPMA>
    }
  }

  return count;
 80036d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b0a4      	sub	sp, #144	@ 0x90
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 81dd 	beq.w	8003ab2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	3302      	adds	r3, #2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003720:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800372c:	429a      	cmp	r2, r3
 800372e:	d907      	bls.n	8003740 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	619a      	str	r2, [r3, #24]
 800373e:	e002      	b.n	8003746 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80b9 	bne.w	80038c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d126      	bne.n	80037a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	4413      	add	r3, r2
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	011a      	lsls	r2, r3, #4
 8003776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003778:	4413      	add	r3, r2
 800377a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800377e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378a:	b29a      	uxth	r2, r3
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379e:	b29a      	uxth	r2, r3
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	e01a      	b.n	80037dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d116      	bne.n	80037dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	4413      	add	r3, r2
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	011a      	lsls	r2, r3, #4
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	4413      	add	r3, r2
 80037d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	2200      	movs	r2, #0
 80037da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d126      	bne.n	8003838 <HAL_PCD_EP_DB_Transmit+0x15a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	011a      	lsls	r2, r3, #4
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381c:	b29a      	uxth	r2, r3
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800382c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003830:	b29a      	uxth	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	e017      	b.n	8003868 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d113      	bne.n	8003868 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003848:	b29b      	uxth	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	4413      	add	r3, r2
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	011a      	lsls	r2, r3, #4
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	4413      	add	r3, r2
 800385c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003860:	623b      	str	r3, [r7, #32]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2200      	movs	r2, #0
 8003866:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f005 f913 	bl	8008a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 82fc 	beq.w	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	82fb      	strh	r3, [r7, #22]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	8afb      	ldrh	r3, [r7, #22]
 80038ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038bc:	b29b      	uxth	r3, r3
 80038be:	8013      	strh	r3, [r2, #0]
 80038c0:	e2da      	b.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d021      	beq.n	8003910 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80038fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800390c:	b29b      	uxth	r3, r3
 800390e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003916:	2b01      	cmp	r3, #1
 8003918:	f040 82ae 	bne.w	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003924:	441a      	add	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003932:	441a      	add	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	429a      	cmp	r2, r3
 8003942:	d30b      	bcc.n	800395c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	621a      	str	r2, [r3, #32]
 800395a:	e017      	b.n	800398c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003964:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003974:	e00a      	b.n	800398c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2200      	movs	r2, #0
 800398a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d165      	bne.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x382>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a8:	4413      	add	r3, r2
 80039aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	011a      	lsls	r2, r3, #4
 80039b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80039d2:	d91d      	bls.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x332>
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_PCD_EP_DB_Transmit+0x310>
 80039e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ea:	3b01      	subs	r3, #1
 80039ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	029b      	lsls	r3, r3, #10
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e044      	b.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_PCD_EP_DB_Transmit+0x350>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	e035      	b.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a44:	3301      	adds	r3, #1
 8003a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e01c      	b.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d118      	bne.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7c:	4413      	add	r3, r2
 8003a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	011a      	lsls	r2, r3, #4
 8003a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a98:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6959      	ldr	r1, [r3, #20]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	891a      	ldrh	r2, [r3, #8]
 8003aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f003 fa07 	bl	8006ebe <USB_WritePMA>
 8003ab0:	e1e2      	b.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3306      	adds	r3, #6
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ada:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d307      	bcc.n	8003afa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	e002      	b.n	8003b00 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 80c0 	bne.w	8003c8a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d126      	bne.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x482>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b26:	4413      	add	r3, r2
 8003b28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	011a      	lsls	r2, r3, #4
 8003b30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b32:	4413      	add	r3, r2
 8003b34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e01a      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d116      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b7c:	4413      	add	r3, r2
 8003b7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011a      	lsls	r2, r3, #4
 8003b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b88:	4413      	add	r3, r2
 8003b8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b92:	2200      	movs	r2, #0
 8003b94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12b      	bne.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x51e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb8:	4413      	add	r3, r2
 8003bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	011a      	lsls	r2, r3, #4
 8003bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e017      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d113      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c12:	4413      	add	r3, r2
 8003c14:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	011a      	lsls	r2, r3, #4
 8003c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f004 ff31 	bl	8008a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 811a 	bne.w	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	441a      	add	r2, r3
 8003c70:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]
 8003c88:	e0f6      	b.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d121      	bne.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	441a      	add	r2, r3
 8003cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	f040 80ca 	bne.w	8003e78 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cec:	441a      	add	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d30b      	bcc.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	621a      	str	r2, [r3, #32]
 8003d22:	e017      	b.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d108      	bne.n	8003d3e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003d2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d3c:	e00a      	b.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d165      	bne.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x750>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d76:	4413      	add	r3, r2
 8003d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	011a      	lsls	r2, r3, #4
 8003d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d82:	4413      	add	r3, r2
 8003d84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003da0:	d91d      	bls.n	8003dde <HAL_PCD_EP_DB_Transmit+0x700>
 8003da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x6de>
 8003db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003db8:	3b01      	subs	r3, #1
 8003dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e041      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x784>
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x71e>
 8003de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e032      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x784>
 8003dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x738>
 8003e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e12:	3301      	adds	r3, #1
 8003e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	e019      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d115      	bne.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e44:	4413      	add	r3, r2
 8003e46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	4413      	add	r3, r2
 8003e52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6959      	ldr	r1, [r3, #20]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	895a      	ldrh	r2, [r3, #10]
 8003e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f003 f823 	bl	8006ebe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e92:	82bb      	strh	r3, [r7, #20]
 8003e94:	8abb      	ldrh	r3, [r7, #20]
 8003e96:	f083 0310 	eor.w	r3, r3, #16
 8003e9a:	82bb      	strh	r3, [r7, #20]
 8003e9c:	8abb      	ldrh	r3, [r7, #20]
 8003e9e:	f083 0320 	eor.w	r3, r3, #32
 8003ea2:	82bb      	strh	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	8abb      	ldrh	r3, [r7, #20]
 8003eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3790      	adds	r7, #144	@ 0x90
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b087      	sub	sp, #28
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef0:	897b      	ldrh	r3, [r7, #10]
 8003ef2:	f003 0207 	and.w	r2, r3, #7
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	3310      	adds	r3, #16
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e009      	b.n	8003f1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f08:	897a      	ldrh	r2, [r7, #10]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	80da      	strh	r2, [r3, #6]
 8003f30:	e00b      	b.n	8003f4a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2201      	movs	r2, #1
 8003f36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0c1b      	lsrs	r3, r3, #16
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e272      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8087 	beq.w	8004086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f78:	4b92      	ldr	r3, [pc, #584]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d00c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f84:	4b8f      	ldr	r3, [pc, #572]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d112      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x5e>
 8003f90:	4b8c      	ldr	r3, [pc, #560]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9e:	4b89      	ldr	r3, [pc, #548]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d06c      	beq.n	8004084 <HAL_RCC_OscConfig+0x12c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d168      	bne.n	8004084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e24c      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x76>
 8003fc0:	4b80      	ldr	r3, [pc, #512]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e02e      	b.n	800402c <HAL_RCC_OscConfig+0xd4>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x98>
 8003fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7a      	ldr	r2, [pc, #488]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b78      	ldr	r3, [pc, #480]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a77      	ldr	r2, [pc, #476]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e01d      	b.n	800402c <HAL_RCC_OscConfig+0xd4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0xbc>
 8003ffa:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a71      	ldr	r2, [pc, #452]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b6f      	ldr	r3, [pc, #444]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0xd4>
 8004014:	4b6b      	ldr	r3, [pc, #428]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6a      	ldr	r2, [pc, #424]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b68      	ldr	r3, [pc, #416]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a67      	ldr	r2, [pc, #412]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800402a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fc fd8a 	bl	8000b4c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fc fd86 	bl	8000b4c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	@ 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e200      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	4b5d      	ldr	r3, [pc, #372]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0xe4>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fc fd76 	bl	8000b4c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fc fd72 	bl	8000b4c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e1ec      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004076:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x10c>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d063      	beq.n	800415a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004092:	4b4c      	ldr	r3, [pc, #304]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800409e:	4b49      	ldr	r3, [pc, #292]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d11c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x18c>
 80040aa:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	4b43      	ldr	r3, [pc, #268]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_RCC_OscConfig+0x176>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e1c0      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4939      	ldr	r1, [pc, #228]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	e03a      	b.n	800415a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fc fd2b 	bl	8000b4c <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fc fd27 	bl	8000b4c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1a1      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	4b2d      	ldr	r3, [pc, #180]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004118:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4927      	ldr	r1, [pc, #156]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	600b      	str	r3, [r1, #0]
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fc fd0a 	bl	8000b4c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413c:	f7fc fd06 	bl	8000b4c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e180      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03a      	beq.n	80041dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d019      	beq.n	80041a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b17      	ldr	r3, [pc, #92]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004174:	f7fc fcea 	bl	8000b4c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417c:	f7fc fce6 	bl	8000b4c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e160      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <HAL_RCC_OscConfig+0x26c>)
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800419a:	2001      	movs	r0, #1
 800419c:	f000 faba 	bl	8004714 <RCC_Delay>
 80041a0:	e01c      	b.n	80041dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fc fcd0 	bl	8000b4c <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ae:	e00f      	b.n	80041d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b0:	f7fc fccc 	bl	8000b4c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d908      	bls.n	80041d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e146      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
 80041c8:	42420000 	.word	0x42420000
 80041cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d0:	4b92      	ldr	r3, [pc, #584]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e9      	bne.n	80041b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80a6 	beq.w	8004336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ee:	4b8b      	ldr	r3, [pc, #556]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	4b88      	ldr	r3, [pc, #544]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	4a87      	ldr	r2, [pc, #540]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004204:	61d3      	str	r3, [r2, #28]
 8004206:	4b85      	ldr	r3, [pc, #532]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b82      	ldr	r3, [pc, #520]	@ (8004420 <HAL_RCC_OscConfig+0x4c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004222:	4b7f      	ldr	r3, [pc, #508]	@ (8004420 <HAL_RCC_OscConfig+0x4c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7e      	ldr	r2, [pc, #504]	@ (8004420 <HAL_RCC_OscConfig+0x4c8>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422e:	f7fc fc8d 	bl	8000b4c <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fc fc89 	bl	8000b4c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b64      	cmp	r3, #100	@ 0x64
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e103      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b75      	ldr	r3, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x4c8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x312>
 800425c:	4b6f      	ldr	r3, [pc, #444]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4a6e      	ldr	r2, [pc, #440]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6213      	str	r3, [r2, #32]
 8004268:	e02d      	b.n	80042c6 <HAL_RCC_OscConfig+0x36e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x334>
 8004272:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4a69      	ldr	r2, [pc, #420]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6213      	str	r3, [r2, #32]
 800427e:	4b67      	ldr	r3, [pc, #412]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4a66      	ldr	r2, [pc, #408]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	6213      	str	r3, [r2, #32]
 800428a:	e01c      	b.n	80042c6 <HAL_RCC_OscConfig+0x36e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b05      	cmp	r3, #5
 8004292:	d10c      	bne.n	80042ae <HAL_RCC_OscConfig+0x356>
 8004294:	4b61      	ldr	r3, [pc, #388]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a60      	ldr	r2, [pc, #384]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	6213      	str	r3, [r2, #32]
 80042a0:	4b5e      	ldr	r3, [pc, #376]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	4a5d      	ldr	r2, [pc, #372]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6213      	str	r3, [r2, #32]
 80042ac:	e00b      	b.n	80042c6 <HAL_RCC_OscConfig+0x36e>
 80042ae:	4b5b      	ldr	r3, [pc, #364]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	4a5a      	ldr	r2, [pc, #360]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	6213      	str	r3, [r2, #32]
 80042ba:	4b58      	ldr	r3, [pc, #352]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4a57      	ldr	r2, [pc, #348]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d015      	beq.n	80042fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ce:	f7fc fc3d 	bl	8000b4c <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fc fc39 	bl	8000b4c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e0b1      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ec:	4b4b      	ldr	r3, [pc, #300]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ee      	beq.n	80042d6 <HAL_RCC_OscConfig+0x37e>
 80042f8:	e014      	b.n	8004324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fa:	f7fc fc27 	bl	8000b4c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fc fc23 	bl	8000b4c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e09b      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004318:	4b40      	ldr	r3, [pc, #256]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ee      	bne.n	8004302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432a:	4b3c      	ldr	r3, [pc, #240]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4a3b      	ldr	r2, [pc, #236]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8087 	beq.w	800444e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b08      	cmp	r3, #8
 800434a:	d061      	beq.n	8004410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d146      	bne.n	80043e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004354:	4b33      	ldr	r3, [pc, #204]	@ (8004424 <HAL_RCC_OscConfig+0x4cc>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fc fbf7 	bl	8000b4c <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004362:	f7fc fbf3 	bl	8000b4c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e06d      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004374:	4b29      	ldr	r3, [pc, #164]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004388:	d108      	bne.n	800439c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800438a:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4921      	ldr	r1, [pc, #132]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439c:	4b1f      	ldr	r3, [pc, #124]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a19      	ldr	r1, [r3, #32]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	430b      	orrs	r3, r1
 80043ae:	491b      	ldr	r1, [pc, #108]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fc fbc7 	bl	8000b4c <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fc fbc3 	bl	8000b4c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e03d      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043d4:	4b11      	ldr	r3, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46a>
 80043e0:	e035      	b.n	800444e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fc fbb0 	bl	8000b4c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fc fbac 	bl	8000b4c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e026      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x4c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x498>
 800440e:	e01e      	b.n	800444e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e019      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_RCC_OscConfig+0x500>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	429a      	cmp	r2, r3
 800443a:	d106      	bne.n	800444a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000

0800445c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0d0      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d910      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b67      	ldr	r3, [pc, #412]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 0207 	bic.w	r2, r3, #7
 8004486:	4965      	ldr	r1, [pc, #404]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b63      	ldr	r3, [pc, #396]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0b8      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b8:	4b59      	ldr	r3, [pc, #356]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4a58      	ldr	r2, [pc, #352]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d0:	4b53      	ldr	r3, [pc, #332]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a52      	ldr	r2, [pc, #328]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	4b50      	ldr	r3, [pc, #320]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	494d      	ldr	r1, [pc, #308]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d040      	beq.n	800457c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d115      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e073      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b3d      	ldr	r3, [pc, #244]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e06b      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b39      	ldr	r3, [pc, #228]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4936      	ldr	r1, [pc, #216]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800454c:	f7fc fafe 	bl	8000b4c <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fc fafa 	bl	8000b4c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e053      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2d      	ldr	r3, [pc, #180]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b27      	ldr	r3, [pc, #156]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d210      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b24      	ldr	r3, [pc, #144]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 0207 	bic.w	r2, r3, #7
 8004592:	4922      	ldr	r1, [pc, #136]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b20      	ldr	r3, [pc, #128]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e032      	b.n	8004612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b19      	ldr	r3, [pc, #100]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4916      	ldr	r1, [pc, #88]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045d6:	4b12      	ldr	r3, [pc, #72]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	490e      	ldr	r1, [pc, #56]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ea:	f000 f821 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	490a      	ldr	r1, [pc, #40]	@ (8004624 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	5ccb      	ldrb	r3, [r1, r3]
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	4a09      	ldr	r2, [pc, #36]	@ (8004628 <HAL_RCC_ClockConfig+0x1cc>)
 8004604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004606:	4b09      	ldr	r3, [pc, #36]	@ (800462c <HAL_RCC_ClockConfig+0x1d0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fa5c 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40022000 	.word	0x40022000
 8004620:	40021000 	.word	0x40021000
 8004624:	08009910 	.word	0x08009910
 8004628:	20000a64 	.word	0x20000a64
 800462c:	20000a68 	.word	0x20000a68

08004630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800464a:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b04      	cmp	r3, #4
 8004658:	d002      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x30>
 800465a:	2b08      	cmp	r3, #8
 800465c:	d003      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0x36>
 800465e:	e027      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004660:	4b19      	ldr	r3, [pc, #100]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004662:	613b      	str	r3, [r7, #16]
      break;
 8004664:	e027      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	0c9b      	lsrs	r3, r3, #18
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	4a17      	ldr	r2, [pc, #92]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004670:	5cd3      	ldrb	r3, [r2, r3]
 8004672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d010      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800467e:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0c5b      	lsrs	r3, r3, #17
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	4a11      	ldr	r2, [pc, #68]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a0d      	ldr	r2, [pc, #52]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004692:	fb03 f202 	mul.w	r2, r3, r2
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e004      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0c      	ldr	r2, [pc, #48]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	613b      	str	r3, [r7, #16]
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80046b2:	613b      	str	r3, [r7, #16]
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	693b      	ldr	r3, [r7, #16]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	007a1200 	.word	0x007a1200
 80046cc:	08009928 	.word	0x08009928
 80046d0:	08009938 	.word	0x08009938
 80046d4:	003d0900 	.word	0x003d0900

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b02      	ldr	r3, [pc, #8]	@ (80046e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	20000a64 	.word	0x20000a64

080046ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f0:	f7ff fff2 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	@ (8004710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	08009920 	.word	0x08009920

08004714 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800471c:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <RCC_Delay+0x34>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <RCC_Delay+0x38>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0a5b      	lsrs	r3, r3, #9
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004730:	bf00      	nop
  }
  while (Delay --);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e5a      	subs	r2, r3, #1
 8004736:	60fa      	str	r2, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f9      	bne.n	8004730 <RCC_Delay+0x1c>
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	20000a64 	.word	0x20000a64
 800474c:	10624dd3 	.word	0x10624dd3

08004750 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d07d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004770:	4b4f      	ldr	r3, [pc, #316]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477c:	4b4c      	ldr	r3, [pc, #304]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4a4b      	ldr	r2, [pc, #300]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004786:	61d3      	str	r3, [r2, #28]
 8004788:	4b49      	ldr	r3, [pc, #292]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	4b46      	ldr	r3, [pc, #280]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d118      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a4:	4b43      	ldr	r3, [pc, #268]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a42      	ldr	r2, [pc, #264]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b0:	f7fc f9cc 	bl	8000b4c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b6:	e008      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b8:	f7fc f9c8 	bl	8000b4c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e06d      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ca:	4b3a      	ldr	r3, [pc, #232]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047d6:	4b36      	ldr	r3, [pc, #216]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d02e      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d027      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047f4:	4b2e      	ldr	r3, [pc, #184]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047fe:	4b2e      	ldr	r3, [pc, #184]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004804:	4b2c      	ldr	r3, [pc, #176]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800480a:	4a29      	ldr	r2, [pc, #164]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d014      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fc f997 	bl	8000b4c <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fc f993 	bl	8000b4c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e036      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ee      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004844:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4917      	ldr	r1, [pc, #92]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	4313      	orrs	r3, r2
 8004854:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	4a13      	ldr	r2, [pc, #76]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004866:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004874:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	490b      	ldr	r1, [pc, #44]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004892:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4904      	ldr	r1, [pc, #16]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40007000 	.word	0x40007000
 80048b8:	42420440 	.word	0x42420440

080048bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4638      	mov	r0, r7
 80048c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80048ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800490a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800490e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	b29b      	uxth	r3, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	b29b      	uxth	r3, r3
 8004920:	4013      	ands	r3, r2
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	4638      	mov	r0, r7
 8004958:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004988:	b480      	push	{r7}
 800498a:	b09d      	sub	sp, #116	@ 0x74
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d81f      	bhi.n	80049fa <USB_ActivateEndpoint+0x72>
 80049ba:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <USB_ActivateEndpoint+0x38>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	08004a03 	.word	0x08004a03
 80049cc:	080049df 	.word	0x080049df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80049d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80049dc:	e012      	b.n	8004a04 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80049e2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80049e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80049ea:	e00b      	b.n	8004a04 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80049f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80049f8:	e004      	b.n	8004a04 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004a00:	e000      	b.n	8004a04 <USB_ActivateEndpoint+0x7c>
      break;
 8004a02:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	7b1b      	ldrb	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 8178 	bne.w	8004d64 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8084 	beq.w	8004b86 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	011a      	lsls	r2, r3, #4
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	88db      	ldrh	r3, [r3, #6]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	827b      	strh	r3, [r7, #18]
 8004ac0:	8a7b      	ldrh	r3, [r7, #18]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01b      	beq.n	8004b02 <USB_ActivateEndpoint+0x17a>
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae0:	823b      	strh	r3, [r7, #16]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	8a3b      	ldrh	r3, [r7, #16]
 8004aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004afa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	78db      	ldrb	r3, [r3, #3]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d020      	beq.n	8004b4c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b20:	81bb      	strh	r3, [r7, #12]
 8004b22:	89bb      	ldrh	r3, [r7, #12]
 8004b24:	f083 0320 	eor.w	r3, r3, #32
 8004b28:	81bb      	strh	r3, [r7, #12]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	89bb      	ldrh	r3, [r7, #12]
 8004b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8013      	strh	r3, [r2, #0]
 8004b4a:	e2d5      	b.n	80050f8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b62:	81fb      	strh	r3, [r7, #14]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]
 8004b84:	e2b8      	b.n	80050f8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	4413      	add	r3, r2
 8004b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	011a      	lsls	r2, r3, #4
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	88db      	ldrh	r3, [r3, #6]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	4413      	add	r3, r2
 8004bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	011a      	lsls	r2, r3, #4
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bf4:	d91d      	bls.n	8004c32 <USB_ActivateEndpoint+0x2aa>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <USB_ActivateEndpoint+0x288>
 8004c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e026      	b.n	8004c80 <USB_ActivateEndpoint+0x2f8>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <USB_ActivateEndpoint+0x2c8>
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	801a      	strh	r2, [r3, #0]
 8004c4e:	e017      	b.n	8004c80 <USB_ActivateEndpoint+0x2f8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <USB_ActivateEndpoint+0x2e2>
 8004c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c66:	3301      	adds	r3, #1
 8004c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004c8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <USB_ActivateEndpoint+0x348>
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	843b      	strh	r3, [r7, #32]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	8c3b      	ldrh	r3, [r7, #32]
 8004cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d124      	bne.n	8004d22 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	83bb      	strh	r3, [r7, #28]
 8004cf0:	8bbb      	ldrh	r3, [r7, #28]
 8004cf2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cf6:	83bb      	strh	r3, [r7, #28]
 8004cf8:	8bbb      	ldrh	r3, [r7, #28]
 8004cfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cfe:	83bb      	strh	r3, [r7, #28]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	8bbb      	ldrh	r3, [r7, #28]
 8004d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]
 8004d20:	e1ea      	b.n	80050f8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d38:	83fb      	strh	r3, [r7, #30]
 8004d3a:	8bfb      	ldrh	r3, [r7, #30]
 8004d3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d40:	83fb      	strh	r3, [r7, #30]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	441a      	add	r2, r3
 8004d4c:	8bfb      	ldrh	r3, [r7, #30]
 8004d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]
 8004d62:	e1c9      	b.n	80050f8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11e      	bne.n	8004daa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d82:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
 8004da8:	e01d      	b.n	8004de6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004df6:	4413      	add	r3, r2
 8004df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	011a      	lsls	r2, r3, #4
 8004e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	891b      	ldrh	r3, [r3, #8]
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2a:	4413      	add	r3, r2
 8004e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	011a      	lsls	r2, r3, #4
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004e3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	895b      	ldrh	r3, [r3, #10]
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e4c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f040 8093 	bne.w	8004f7e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <USB_ActivateEndpoint+0x524>
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004eba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <USB_ActivateEndpoint+0x574>
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ef4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f1a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f22:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
 8004f7c:	e0bc      	b.n	80050f8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004f8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01d      	beq.n	8004fd6 <USB_ActivateEndpoint+0x64e>
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004fe6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01d      	beq.n	800502e <USB_ActivateEndpoint+0x6a6>
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005026:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	78db      	ldrb	r3, [r3, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d024      	beq.n	8005080 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800504c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005050:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005054:	f083 0320 	eor.w	r3, r3, #32
 8005058:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	441a      	add	r2, r3
 8005066:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005096:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80050e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80050f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3774      	adds	r7, #116	@ 0x74
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop

08005108 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005108:	b480      	push	{r7}
 800510a:	b08d      	sub	sp, #52	@ 0x34
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	7b1b      	ldrb	r3, [r3, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 808e 	bne.w	8005238 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d044      	beq.n	80051ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	81bb      	strh	r3, [r7, #12]
 8005132:	89bb      	ldrh	r3, [r7, #12]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <USB_DeactivateEndpoint+0x6c>
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	817b      	strh	r3, [r7, #10]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	897b      	ldrh	r3, [r7, #10]
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800518a:	813b      	strh	r3, [r7, #8]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]
 80051ac:	e192      	b.n	80054d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	827b      	strh	r3, [r7, #18]
 80051bc:	8a7b      	ldrh	r3, [r7, #18]
 80051be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01b      	beq.n	80051fe <USB_DeactivateEndpoint+0xf6>
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051dc:	823b      	strh	r3, [r7, #16]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	441a      	add	r2, r3
 80051e8:	8a3b      	ldrh	r3, [r7, #16]
 80051ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005214:	81fb      	strh	r3, [r7, #14]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800522a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]
 8005236:	e14d      	b.n	80054d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 80a5 	bne.w	800538c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	843b      	strh	r3, [r7, #32]
 8005250:	8c3b      	ldrh	r3, [r7, #32]
 8005252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01b      	beq.n	8005292 <USB_DeactivateEndpoint+0x18a>
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800526c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005270:	83fb      	strh	r3, [r7, #30]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	441a      	add	r2, r3
 800527c:	8bfb      	ldrh	r3, [r7, #30]
 800527e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005286:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800528a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528e:	b29b      	uxth	r3, r3
 8005290:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	83bb      	strh	r3, [r7, #28]
 80052a0:	8bbb      	ldrh	r3, [r7, #28]
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01b      	beq.n	80052e2 <USB_DeactivateEndpoint+0x1da>
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c0:	837b      	strh	r3, [r7, #26]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	441a      	add	r2, r3
 80052cc:	8b7b      	ldrh	r3, [r7, #26]
 80052ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f8:	833b      	strh	r3, [r7, #24]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	8b3b      	ldrh	r3, [r7, #24]
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800530e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005312:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800532c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005330:	82fb      	strh	r3, [r7, #22]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005368:	82bb      	strh	r3, [r7, #20]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	8abb      	ldrh	r3, [r7, #20]
 8005376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800537a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800537e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005386:	b29b      	uxth	r3, r3
 8005388:	8013      	strh	r3, [r2, #0]
 800538a:	e0a3      	b.n	80054d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800539a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800539c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <USB_DeactivateEndpoint+0x2d4>
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80053c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d8:	b29b      	uxth	r3, r3
 80053da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80053ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01b      	beq.n	800542c <USB_DeactivateEndpoint+0x324>
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800541c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005424:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005428:	b29b      	uxth	r3, r3
 800542a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005442:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800545c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3734      	adds	r7, #52	@ 0x34
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b0c2      	sub	sp, #264	@ 0x108
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ee:	6018      	str	r0, [r3, #0]
 80054f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b01      	cmp	r3, #1
 8005508:	f040 86b7 	bne.w	800627a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800550c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	429a      	cmp	r2, r3
 8005526:	d908      	bls.n	800553a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005538:	e007      	b.n	800554a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800553a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800554a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	7b1b      	ldrb	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d13a      	bne.n	80055d0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800555a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6959      	ldr	r1, [r3, #20]
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	88da      	ldrh	r2, [r3, #6]
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005576:	b29b      	uxth	r3, r3
 8005578:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800557c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005580:	6800      	ldr	r0, [r0, #0]
 8005582:	f001 fc9c 	bl	8006ebe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	011a      	lsls	r2, r3, #4
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	f000 be1f 	b.w	800620e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80055d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	78db      	ldrb	r3, [r3, #3]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	f040 8462 	bne.w	8005ea6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80055e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	f240 83df 	bls.w	8005dbe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800562a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800564c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005650:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005658:	b29b      	uxth	r3, r3
 800565a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800565c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	1ad2      	subs	r2, r2, r3
 800566e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800567a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 81c7 	beq.w	8005a30 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d177      	bne.n	80057ae <USB_EPStartXfer+0x2ce>
 80056be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056d8:	b29b      	uxth	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	4413      	add	r3, r2
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	011a      	lsls	r2, r3, #4
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	4413      	add	r3, r2
 80056f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005704:	b29a      	uxth	r2, r3
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005710:	d921      	bls.n	8005756 <USB_EPStartXfer+0x276>
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <USB_EPStartXfer+0x252>
 8005728:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800572c:	3b01      	subs	r3, #1
 800572e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800573c:	b29b      	uxth	r3, r3
 800573e:	029b      	lsls	r3, r3, #10
 8005740:	b29b      	uxth	r3, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	b29b      	uxth	r3, r3
 8005746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574e:	b29a      	uxth	r2, r3
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e050      	b.n	80057f8 <USB_EPStartXfer+0x318>
 8005756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <USB_EPStartXfer+0x294>
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e041      	b.n	80057f8 <USB_EPStartXfer+0x318>
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d004      	beq.n	8005794 <USB_EPStartXfer+0x2b4>
 800578a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800578e:	3301      	adds	r3, #1
 8005790:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29a      	uxth	r2, r3
 800579a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4313      	orrs	r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	e024      	b.n	80057f8 <USB_EPStartXfer+0x318>
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d11c      	bne.n	80057f8 <USB_EPStartXfer+0x318>
 80057be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	4413      	add	r3, r2
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	011a      	lsls	r2, r3, #4
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	895b      	ldrh	r3, [r3, #10]
 8005804:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6959      	ldr	r1, [r3, #20]
 8005814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005818:	b29b      	uxth	r3, r3
 800581a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800581e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005822:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005826:	6800      	ldr	r0, [r0, #0]
 8005828:	f001 fb49 	bl	8006ebe <USB_WritePMA>
            ep->xfer_buff += len;
 800582c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	441a      	add	r2, r3
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800584a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d90f      	bls.n	8005886 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005876:	1ad2      	subs	r2, r2, r3
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	621a      	str	r2, [r3, #32]
 8005884:	e00e      	b.n	80058a4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2200      	movs	r2, #0
 80058a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d177      	bne.n	80059a4 <USB_EPStartXfer+0x4c4>
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	4413      	add	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	011a      	lsls	r2, r3, #4
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005904:	2b3e      	cmp	r3, #62	@ 0x3e
 8005906:	d921      	bls.n	800594c <USB_EPStartXfer+0x46c>
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <USB_EPStartXfer+0x448>
 800591e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005922:	3b01      	subs	r3, #1
 8005924:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29a      	uxth	r2, r3
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29b      	uxth	r3, r3
 8005938:	4313      	orrs	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005944:	b29a      	uxth	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e056      	b.n	80059fa <USB_EPStartXfer+0x51a>
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <USB_EPStartXfer+0x48a>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005962:	b29a      	uxth	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	e047      	b.n	80059fa <USB_EPStartXfer+0x51a>
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_EPStartXfer+0x4aa>
 8005980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29a      	uxth	r2, r3
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005994:	b29b      	uxth	r3, r3
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	b29b      	uxth	r3, r3
 800599a:	4313      	orrs	r3, r2
 800599c:	b29a      	uxth	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e02a      	b.n	80059fa <USB_EPStartXfer+0x51a>
 80059a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d122      	bne.n	80059fa <USB_EPStartXfer+0x51a>
 80059b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	623b      	str	r3, [r7, #32]
 80059c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	4413      	add	r3, r2
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	4413      	add	r3, r2
 80059ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	891b      	ldrh	r3, [r3, #8]
 8005a06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6959      	ldr	r1, [r3, #20]
 8005a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a28:	6800      	ldr	r0, [r0, #0]
 8005a2a:	f001 fa48 	bl	8006ebe <USB_WritePMA>
 8005a2e:	e3ee      	b.n	800620e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d177      	bne.n	8005b30 <USB_EPStartXfer+0x650>
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a60:	4413      	add	r3, r2
 8005a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a92:	d921      	bls.n	8005ad8 <USB_EPStartXfer+0x5f8>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <USB_EPStartXfer+0x5d4>
 8005aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	e056      	b.n	8005b86 <USB_EPStartXfer+0x6a6>
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <USB_EPStartXfer+0x616>
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	e047      	b.n	8005b86 <USB_EPStartXfer+0x6a6>
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <USB_EPStartXfer+0x636>
 8005b0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b10:	3301      	adds	r3, #1
 8005b12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e02a      	b.n	8005b86 <USB_EPStartXfer+0x6a6>
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d122      	bne.n	8005b86 <USB_EPStartXfer+0x6a6>
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b60:	4413      	add	r3, r2
 8005b62:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	011a      	lsls	r2, r3, #4
 8005b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b74:	4413      	add	r3, r2
 8005b76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	891b      	ldrh	r3, [r3, #8]
 8005b92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6959      	ldr	r1, [r3, #20]
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bb0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bb4:	6800      	ldr	r0, [r0, #0]
 8005bb6:	f001 f982 	bl	8006ebe <USB_WritePMA>
            ep->xfer_buff += len;
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	441a      	add	r2, r3
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d90f      	bls.n	8005c14 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	1ad2      	subs	r2, r2, r3
 8005c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	621a      	str	r2, [r3, #32]
 8005c12:	e00e      	b.n	8005c32 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d177      	bne.n	8005d3e <USB_EPStartXfer+0x85e>
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6e:	4413      	add	r3, r2
 8005c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	4413      	add	r3, r2
 8005c84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ca0:	d921      	bls.n	8005ce6 <USB_EPStartXfer+0x806>
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <USB_EPStartXfer+0x7e2>
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e050      	b.n	8005d88 <USB_EPStartXfer+0x8a8>
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <USB_EPStartXfer+0x824>
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	e041      	b.n	8005d88 <USB_EPStartXfer+0x8a8>
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <USB_EPStartXfer+0x844>
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	029b      	lsls	r3, r3, #10
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4313      	orrs	r3, r2
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e024      	b.n	8005d88 <USB_EPStartXfer+0x8a8>
 8005d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d11c      	bne.n	8005d88 <USB_EPStartXfer+0x8a8>
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d62:	4413      	add	r3, r2
 8005d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	011a      	lsls	r2, r3, #4
 8005d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d76:	4413      	add	r3, r2
 8005d78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	895b      	ldrh	r3, [r3, #10]
 8005d94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6959      	ldr	r1, [r3, #20]
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005dae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005db2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005db6:	6800      	ldr	r0, [r0, #0]
 8005db8:	f001 f881 	bl	8006ebe <USB_WritePMA>
 8005dbc:	e227      	b.n	800620e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e4a:	4413      	add	r3, r2
 8005e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	011a      	lsls	r2, r3, #4
 8005e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e5e:	4413      	add	r3, r2
 8005e60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	891b      	ldrh	r3, [r3, #8]
 8005e7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6959      	ldr	r1, [r3, #20]
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e9e:	6800      	ldr	r0, [r0, #0]
 8005ea0:	f001 f80d 	bl	8006ebe <USB_WritePMA>
 8005ea4:	e1b3      	b.n	800620e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1a      	ldr	r2, [r3, #32]
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 80c6 	beq.w	8006078 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d177      	bne.n	8005ff8 <USB_EPStartXfer+0xb18>
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f28:	4413      	add	r3, r2
 8005f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	011a      	lsls	r2, r3, #4
 8005f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f42:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f58:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f5a:	d921      	bls.n	8005fa0 <USB_EPStartXfer+0xac0>
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <USB_EPStartXfer+0xa9c>
 8005f72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005f76:	3b01      	subs	r3, #1
 8005f78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	029b      	lsls	r3, r3, #10
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	e050      	b.n	8006042 <USB_EPStartXfer+0xb62>
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <USB_EPStartXfer+0xade>
 8005fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e041      	b.n	8006042 <USB_EPStartXfer+0xb62>
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <USB_EPStartXfer+0xafe>
 8005fd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005fd8:	3301      	adds	r3, #1
 8005fda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e024      	b.n	8006042 <USB_EPStartXfer+0xb62>
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d11c      	bne.n	8006042 <USB_EPStartXfer+0xb62>
 8006008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006016:	b29b      	uxth	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800601c:	4413      	add	r3, r2
 800601e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	011a      	lsls	r2, r3, #4
 800602e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006030:	4413      	add	r3, r2
 8006032:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	b29a      	uxth	r2, r3
 800603e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006040:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6959      	ldr	r1, [r3, #20]
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006062:	b29b      	uxth	r3, r3
 8006064:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006068:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800606c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006070:	6800      	ldr	r0, [r0, #0]
 8006072:	f000 ff24 	bl	8006ebe <USB_WritePMA>
 8006076:	e0ca      	b.n	800620e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d177      	bne.n	8006178 <USB_EPStartXfer+0xc98>
 8006088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060a8:	4413      	add	r3, r2
 80060aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	011a      	lsls	r2, r3, #4
 80060ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80060da:	d921      	bls.n	8006120 <USB_EPStartXfer+0xc40>
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <USB_EPStartXfer+0xc1c>
 80060f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80060f6:	3b01      	subs	r3, #1
 80060f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80060fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006106:	b29b      	uxth	r3, r3
 8006108:	029b      	lsls	r3, r3, #10
 800610a:	b29b      	uxth	r3, r3
 800610c:	4313      	orrs	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006118:	b29a      	uxth	r2, r3
 800611a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e05c      	b.n	80061da <USB_EPStartXfer+0xcfa>
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <USB_EPStartXfer+0xc5e>
 8006128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006136:	b29a      	uxth	r2, r3
 8006138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	e04d      	b.n	80061da <USB_EPStartXfer+0xcfa>
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <USB_EPStartXfer+0xc7e>
 8006154:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006158:	3301      	adds	r3, #1
 800615a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800615e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006168:	b29b      	uxth	r3, r3
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	b29b      	uxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e030      	b.n	80061da <USB_EPStartXfer+0xcfa>
 8006178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d128      	bne.n	80061da <USB_EPStartXfer+0xcfa>
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061ac:	4413      	add	r3, r2
 80061ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	011a      	lsls	r2, r3, #4
 80061c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	891b      	ldrh	r3, [r3, #8]
 80061e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6959      	ldr	r1, [r3, #20]
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006200:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006204:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006208:	6800      	ldr	r0, [r0, #0]
 800620a:	f000 fe58 	bl	8006ebe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800620e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006234:	817b      	strh	r3, [r7, #10]
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	f083 0310 	eor.w	r3, r3, #16
 800623c:	817b      	strh	r3, [r7, #10]
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	f083 0320 	eor.w	r3, r3, #32
 8006244:	817b      	strh	r3, [r7, #10]
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	897b      	ldrh	r3, [r7, #10]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
 8006276:	f000 bcde 	b.w	8006c36 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	7b1b      	ldrb	r3, [r3, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 80bb 	bne.w	8006402 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d917      	bls.n	80062d8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80062b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	619a      	str	r2, [r3, #24]
 80062d6:	e00e      	b.n	80062f6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2200      	movs	r2, #0
 80062f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006312:	b29b      	uxth	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800631a:	4413      	add	r3, r2
 800631c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	011a      	lsls	r2, r3, #4
 800632e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006332:	4413      	add	r3, r2
 8006334:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006338:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800633c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006348:	b29a      	uxth	r2, r3
 800634a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800634e:	801a      	strh	r2, [r3, #0]
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	2b3e      	cmp	r3, #62	@ 0x3e
 8006356:	d924      	bls.n	80063a2 <USB_EPStartXfer+0xec2>
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <USB_EPStartXfer+0xe98>
 800636e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006372:	3b01      	subs	r3, #1
 8006374:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29a      	uxth	r2, r3
 8006380:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006384:	b29b      	uxth	r3, r3
 8006386:	029b      	lsls	r3, r3, #10
 8006388:	b29b      	uxth	r3, r3
 800638a:	4313      	orrs	r3, r2
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	f000 bc10 	b.w	8006bc2 <USB_EPStartXfer+0x16e2>
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10c      	bne.n	80063c4 <USB_EPStartXfer+0xee4>
 80063aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	e3fe      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <USB_EPStartXfer+0xf04>
 80063da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063de:	3301      	adds	r3, #1
 80063e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	029b      	lsls	r3, r3, #10
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e3df      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	78db      	ldrb	r3, [r3, #3]
 800640e:	2b02      	cmp	r3, #2
 8006410:	f040 8218 	bne.w	8006844 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 809d 	bne.w	8006560 <USB_EPStartXfer+0x1080>
 8006426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800644a:	4413      	add	r3, r2
 800644c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	011a      	lsls	r2, r3, #4
 800645e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006462:	4413      	add	r3, r2
 8006464:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800646c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b3e      	cmp	r3, #62	@ 0x3e
 800648e:	d92b      	bls.n	80064e8 <USB_EPStartXfer+0x1008>
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <USB_EPStartXfer+0xfe0>
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ba:	3b01      	subs	r3, #1
 80064bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	029b      	lsls	r3, r3, #10
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	4313      	orrs	r3, r2
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e070      	b.n	80065ca <USB_EPStartXfer+0x10ea>
 80064e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10c      	bne.n	8006512 <USB_EPStartXfer+0x1032>
 80064f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e05b      	b.n	80065ca <USB_EPStartXfer+0x10ea>
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <USB_EPStartXfer+0x1062>
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653c:	3301      	adds	r3, #1
 800653e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654e:	b29b      	uxth	r3, r3
 8006550:	029b      	lsls	r3, r3, #10
 8006552:	b29b      	uxth	r3, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	e034      	b.n	80065ca <USB_EPStartXfer+0x10ea>
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d12c      	bne.n	80065ca <USB_EPStartXfer+0x10ea>
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800657e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006594:	4413      	add	r3, r2
 8006596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	011a      	lsls	r2, r3, #4
 80065a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 809d 	bne.w	8006724 <USB_EPStartXfer+0x1244>
 80065ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800660e:	4413      	add	r3, r2
 8006610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	011a      	lsls	r2, r3, #4
 8006622:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006626:	4413      	add	r3, r2
 8006628:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800662c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b3e      	cmp	r3, #62	@ 0x3e
 8006652:	d92b      	bls.n	80066ac <USB_EPStartXfer+0x11cc>
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <USB_EPStartXfer+0x11a4>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667e:	3b01      	subs	r3, #1
 8006680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006684:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29a      	uxth	r2, r3
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006690:	b29b      	uxth	r3, r3
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	b29b      	uxth	r3, r3
 8006696:	4313      	orrs	r3, r2
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e069      	b.n	8006780 <USB_EPStartXfer+0x12a0>
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10c      	bne.n	80066d6 <USB_EPStartXfer+0x11f6>
 80066bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e054      	b.n	8006780 <USB_EPStartXfer+0x12a0>
 80066d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <USB_EPStartXfer+0x1226>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006700:	3301      	adds	r3, #1
 8006702:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006706:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006712:	b29b      	uxth	r3, r3
 8006714:	029b      	lsls	r3, r3, #10
 8006716:	b29b      	uxth	r3, r3
 8006718:	4313      	orrs	r3, r2
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	e02d      	b.n	8006780 <USB_EPStartXfer+0x12a0>
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d125      	bne.n	8006780 <USB_EPStartXfer+0x12a0>
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800674a:	4413      	add	r3, r2
 800674c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	011a      	lsls	r2, r3, #4
 800675e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006762:	4413      	add	r3, r2
 8006764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006768:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800677e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8218 	beq.w	8006bc2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80067b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <USB_EPStartXfer+0x12ea>
 80067be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80067c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80067ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 81f5 	bne.w	8006bc2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 81ee 	bne.w	8006bc2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800683a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
 8006842:	e1be      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	78db      	ldrb	r3, [r3, #3]
 8006850:	2b01      	cmp	r3, #1
 8006852:	f040 81b4 	bne.w	8006bbe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d917      	bls.n	80068a2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	619a      	str	r2, [r3, #24]
 80068a0:	e00e      	b.n	80068c0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80068b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 8085 	bne.w	80069dc <USB_EPStartXfer+0x14fc>
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068f6:	4413      	add	r3, r2
 80068f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800690e:	4413      	add	r3, r2
 8006910:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006914:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006924:	b29a      	uxth	r2, r3
 8006926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006930:	2b3e      	cmp	r3, #62	@ 0x3e
 8006932:	d923      	bls.n	800697c <USB_EPStartXfer+0x149c>
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <USB_EPStartXfer+0x1474>
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800694e:	3b01      	subs	r3, #1
 8006950:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29a      	uxth	r2, r3
 800695c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006960:	b29b      	uxth	r3, r3
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	b29b      	uxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e060      	b.n	8006a3e <USB_EPStartXfer+0x155e>
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <USB_EPStartXfer+0x14be>
 8006984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006994:	b29a      	uxth	r2, r3
 8006996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	e04f      	b.n	8006a3e <USB_EPStartXfer+0x155e>
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <USB_EPStartXfer+0x14de>
 80069b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b8:	3301      	adds	r3, #1
 80069ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e030      	b.n	8006a3e <USB_EPStartXfer+0x155e>
 80069dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d128      	bne.n	8006a3e <USB_EPStartXfer+0x155e>
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a10:	4413      	add	r3, r2
 8006a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	011a      	lsls	r2, r3, #4
 8006a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a28:	4413      	add	r3, r2
 8006a2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 8085 	bne.w	8006b68 <USB_EPStartXfer+0x1688>
 8006a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a82:	4413      	add	r3, r2
 8006a84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	011a      	lsls	r2, r3, #4
 8006a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006aa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006abe:	d923      	bls.n	8006b08 <USB_EPStartXfer+0x1628>
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <USB_EPStartXfer+0x1600>
 8006ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ada:	3b01      	subs	r3, #1
 8006adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e05c      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <USB_EPStartXfer+0x164a>
 8006b10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e04b      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <USB_EPStartXfer+0x166a>
 8006b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b44:	3301      	adds	r3, #1
 8006b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e02c      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d124      	bne.n	8006bc2 <USB_EPStartXfer+0x16e2>
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b8e:	4413      	add	r3, r2
 8006b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e001      	b.n	8006bc2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e03a      	b.n	8006c38 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6a:	81bb      	strh	r3, [r7, #12]
 8006c6c:	89bb      	ldrh	r3, [r7, #12]
 8006c6e:	f083 0310 	eor.w	r3, r3, #16
 8006c72:	81bb      	strh	r3, [r7, #12]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	89bb      	ldrh	r3, [r7, #12]
 8006c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]
 8006c94:	e01f      	b.n	8006cd6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cac:	81fb      	strh	r3, [r7, #14]
 8006cae:	89fb      	ldrh	r3, [r7, #14]
 8006cb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006cb4:	81fb      	strh	r3, [r7, #14]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	7b1b      	ldrb	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 809d 	bne.w	8006e30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d04c      	beq.n	8006d98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	823b      	strh	r3, [r7, #16]
 8006d0c:	8a3b      	ldrh	r3, [r7, #16]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01b      	beq.n	8006d4e <USB_EPClearStall+0x6c>
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2c:	81fb      	strh	r3, [r7, #14]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	78db      	ldrb	r3, [r3, #3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d06c      	beq.n	8006e30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d6c:	81bb      	strh	r3, [r7, #12]
 8006d6e:	89bb      	ldrh	r3, [r7, #12]
 8006d70:	f083 0320 	eor.w	r3, r3, #32
 8006d74:	81bb      	strh	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	89bb      	ldrh	r3, [r7, #12]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
 8006d96:	e04b      	b.n	8006e30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	82fb      	strh	r3, [r7, #22]
 8006da6:	8afb      	ldrh	r3, [r7, #22]
 8006da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <USB_EPClearStall+0x106>
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc6:	82bb      	strh	r3, [r7, #20]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8abb      	ldrh	r3, [r7, #20]
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ddc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfe:	827b      	strh	r3, [r7, #18]
 8006e00:	8a7b      	ldrh	r3, [r7, #18]
 8006e02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e06:	827b      	strh	r3, [r7, #18]
 8006e08:	8a7b      	ldrh	r3, [r7, #18]
 8006e0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e0e:	827b      	strh	r3, [r7, #18]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	441a      	add	r2, r3
 8006e1a:	8a7b      	ldrh	r3, [r7, #18]
 8006e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2280      	movs	r2, #128	@ 0x80
 8006e52:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr

08006e62 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b08b      	sub	sp, #44	@ 0x2c
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	460b      	mov	r3, r1
 8006ece:	80fb      	strh	r3, [r7, #6]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ed4:	88bb      	ldrh	r3, [r7, #4]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	005a      	lsls	r2, r3, #1
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ef0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef6:	e01e      	b.n	8006f36 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3301      	adds	r3, #1
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	b21a      	sxth	r2, r3
 8006f08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	b21b      	sxth	r3, r3
 8006f10:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	8a7a      	ldrh	r2, [r7, #18]
 8006f16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	3302      	adds	r3, #2
 8006f1c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	3302      	adds	r3, #2
 8006f22:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	3301      	adds	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	3b01      	subs	r3, #1
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1dd      	bne.n	8006ef8 <USB_WritePMA+0x3a>
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	372c      	adds	r7, #44	@ 0x2c
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	@ 0x2c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	460b      	mov	r3, r1
 8006f58:	80fb      	strh	r3, [r7, #6]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f5e:	88bb      	ldrh	r3, [r7, #4]
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	005a      	lsls	r2, r3, #1
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f7a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f80:	e01b      	b.n	8006fba <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e0      	bne.n	8006f82 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	701a      	strb	r2, [r3, #0]
  }
}
 8006fdc:	bf00      	nop
 8006fde:	372c      	adds	r7, #44	@ 0x2c
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d115      	bne.n	800702a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007002:	2202      	movs	r2, #2
 8007004:	2181      	movs	r1, #129	@ 0x81
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fe2b 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007016:	2202      	movs	r2, #2
 8007018:	2101      	movs	r1, #1
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fe21 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007028:	e012      	b.n	8007050 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800702a:	2340      	movs	r3, #64	@ 0x40
 800702c:	2202      	movs	r2, #2
 800702e:	2181      	movs	r1, #129	@ 0x81
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fe16 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800703c:	2340      	movs	r3, #64	@ 0x40
 800703e:	2202      	movs	r2, #2
 8007040:	2101      	movs	r1, #1
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fe0d 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007050:	2308      	movs	r3, #8
 8007052:	2203      	movs	r2, #3
 8007054:	2182      	movs	r1, #130	@ 0x82
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fe03 	bl	8008c62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007062:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007066:	f001 ff23 	bl	8008eb0 <USBD_static_malloc>
 800706a:	4602      	mov	r2, r0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
 8007080:	e026      	b.n	80070d0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007088:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7c1b      	ldrb	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070b6:	2101      	movs	r1, #1
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fec2 	bl	8008e42 <USBD_LL_PrepareReceive>
 80070be:	e007      	b.n	80070d0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070c6:	2340      	movs	r3, #64	@ 0x40
 80070c8:	2101      	movs	r1, #1
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 feb9 	bl	8008e42 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070ea:	2181      	movs	r1, #129	@ 0x81
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fdde 	bl	8008cae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070f8:	2101      	movs	r1, #1
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fdd7 	bl	8008cae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007108:	2182      	movs	r1, #130	@ 0x82
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fdcf 	bl	8008cae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fec9 	bl	8008ec8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007158:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800716e:	2b00      	cmp	r3, #0
 8007170:	d039      	beq.n	80071e6 <USBD_CDC_Setup+0x9e>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d17f      	bne.n	8007276 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d029      	beq.n	80071d2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b25b      	sxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	da11      	bge.n	80071ac <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007194:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	88d2      	ldrh	r2, [r2, #6]
 800719a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800719c:	6939      	ldr	r1, [r7, #16]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f9d5 	bl	8008554 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80071aa:	e06b      	b.n	8007284 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	785a      	ldrb	r2, [r3, #1]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	88db      	ldrh	r3, [r3, #6]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071c2:	6939      	ldr	r1, [r7, #16]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	88db      	ldrh	r3, [r3, #6]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f9f0 	bl	80085b0 <USBD_CtlPrepareRx>
      break;
 80071d0:	e058      	b.n	8007284 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	7850      	ldrb	r0, [r2, #1]
 80071de:	2200      	movs	r2, #0
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	4798      	blx	r3
      break;
 80071e4:	e04e      	b.n	8007284 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b0b      	cmp	r3, #11
 80071ec:	d02e      	beq.n	800724c <USBD_CDC_Setup+0x104>
 80071ee:	2b0b      	cmp	r3, #11
 80071f0:	dc38      	bgt.n	8007264 <USBD_CDC_Setup+0x11c>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <USBD_CDC_Setup+0xb4>
 80071f6:	2b0a      	cmp	r3, #10
 80071f8:	d014      	beq.n	8007224 <USBD_CDC_Setup+0xdc>
 80071fa:	e033      	b.n	8007264 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007202:	2b03      	cmp	r3, #3
 8007204:	d107      	bne.n	8007216 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	2202      	movs	r2, #2
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 f9a0 	bl	8008554 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007214:	e02e      	b.n	8007274 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f931 	bl	8008480 <USBD_CtlError>
            ret = USBD_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	75fb      	strb	r3, [r7, #23]
          break;
 8007222:	e027      	b.n	8007274 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800722a:	2b03      	cmp	r3, #3
 800722c:	d107      	bne.n	800723e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800722e:	f107 030f 	add.w	r3, r7, #15
 8007232:	2201      	movs	r2, #1
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f98c 	bl	8008554 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800723c:	e01a      	b.n	8007274 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f91d 	bl	8008480 <USBD_CtlError>
            ret = USBD_FAIL;
 8007246:	2302      	movs	r3, #2
 8007248:	75fb      	strb	r3, [r7, #23]
          break;
 800724a:	e013      	b.n	8007274 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007252:	2b03      	cmp	r3, #3
 8007254:	d00d      	beq.n	8007272 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f911 	bl	8008480 <USBD_CtlError>
            ret = USBD_FAIL;
 800725e:	2302      	movs	r3, #2
 8007260:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007262:	e006      	b.n	8007272 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 f90a 	bl	8008480 <USBD_CtlError>
          ret = USBD_FAIL;
 800726c:	2302      	movs	r3, #2
 800726e:	75fb      	strb	r3, [r7, #23]
          break;
 8007270:	e000      	b.n	8007274 <USBD_CDC_Setup+0x12c>
          break;
 8007272:	bf00      	nop
      }
      break;
 8007274:	e006      	b.n	8007284 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f901 	bl	8008480 <USBD_CtlError>
      ret = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	75fb      	strb	r3, [r7, #23]
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80072a8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d03a      	beq.n	800732a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	331c      	adds	r3, #28
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d029      	beq.n	800731e <USBD_CDC_DataIn+0x90>
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	331c      	adds	r3, #28
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	78f9      	ldrb	r1, [r7, #3]
 80072de:	68b8      	ldr	r0, [r7, #8]
 80072e0:	460b      	mov	r3, r1
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4403      	add	r3, r0
 80072ea:	3320      	adds	r3, #32
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	fbb2 f1f3 	udiv	r1, r2, r3
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d110      	bne.n	800731e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	331c      	adds	r3, #28
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007310:	78f9      	ldrb	r1, [r7, #3]
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fd70 	bl	8008dfc <USBD_LL_Transmit>
 800731c:	e003      	b.n	8007326 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	e000      	b.n	800732c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800732a:	2302      	movs	r3, #2
  }
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007346:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 fd9b 	bl	8008e88 <USBD_LL_GetRxDataSize>
 8007352:	4602      	mov	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007378:	4611      	mov	r1, r2
 800737a:	4798      	blx	r3

    return USBD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007398:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d014      	beq.n	80073ce <USBD_CDC_EP0_RxReady+0x44>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073aa:	2bff      	cmp	r3, #255	@ 0xff
 80073ac:	d00f      	beq.n	80073ce <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80073bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2243      	movs	r2, #67	@ 0x43
 80073e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80073e6:	4b03      	ldr	r3, [pc, #12]	@ (80073f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000af8 	.word	0x20000af8

080073f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2243      	movs	r2, #67	@ 0x43
 8007404:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007406:	4b03      	ldr	r3, [pc, #12]	@ (8007414 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000ab4 	.word	0x20000ab4

08007418 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2243      	movs	r2, #67	@ 0x43
 8007424:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007426:	4b03      	ldr	r3, [pc, #12]	@ (8007434 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000b3c 	.word	0x20000b3c

08007438 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	220a      	movs	r2, #10
 8007444:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007446:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000a70 	.word	0x20000a70

08007458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007462:	2302      	movs	r3, #2
 8007464:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007498:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bc80      	pop	{r7}
 80074b4:	4770      	bx	lr

080074b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr

080074dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d017      	beq.n	8007526 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7c1b      	ldrb	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007508:	2101      	movs	r1, #1
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fc99 	bl	8008e42 <USBD_LL_PrepareReceive>
 8007510:	e007      	b.n	8007522 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007518:	2340      	movs	r3, #64	@ 0x40
 800751a:	2101      	movs	r1, #1
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fc90 	bl	8008e42 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e000      	b.n	8007528 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007526:	2302      	movs	r3, #2
  }
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007544:	2302      	movs	r3, #2
 8007546:	e01a      	b.n	800757e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	79fa      	ldrb	r2, [r7, #7]
 8007574:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f001 fafe 	bl	8008b78 <USBD_LL_Init>

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d006      	beq.n	80075a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
 80075a6:	e001      	b.n	80075ac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80075a8:	2302      	movs	r3, #2
 80075aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 fb33 	bl	8008c2c <USBD_LL_Start>

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80075f0:	2302      	movs	r3, #2
 80075f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	4611      	mov	r1, r2
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	4798      	blx	r3

  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fed7 	bl	800840e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2b02      	cmp	r3, #2
 8007682:	d016      	beq.n	80076b2 <USBD_LL_SetupStage+0x6a>
 8007684:	2b02      	cmp	r3, #2
 8007686:	d81c      	bhi.n	80076c2 <USBD_LL_SetupStage+0x7a>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <USBD_LL_SetupStage+0x4a>
 800768c:	2b01      	cmp	r3, #1
 800768e:	d008      	beq.n	80076a2 <USBD_LL_SetupStage+0x5a>
 8007690:	e017      	b.n	80076c2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9ca 	bl	8007a34 <USBD_StdDevReq>
      break;
 80076a0:	e01a      	b.n	80076d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa2c 	bl	8007b08 <USBD_StdItfReq>
      break;
 80076b0:	e012      	b.n	80076d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa6c 	bl	8007b98 <USBD_StdEPReq>
      break;
 80076c0:	e00a      	b.n	80076d8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80076c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fb0b 	bl	8008cec <USBD_LL_StallEP>
      break;
 80076d6:	bf00      	nop
  }

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	460b      	mov	r3, r1
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d14b      	bne.n	800778e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80076fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007704:	2b03      	cmp	r3, #3
 8007706:	d134      	bne.n	8007772 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d919      	bls.n	8007748 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	1ad2      	subs	r2, r2, r3
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800772a:	429a      	cmp	r2, r3
 800772c:	d203      	bcs.n	8007736 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007732:	b29b      	uxth	r3, r3
 8007734:	e002      	b.n	800773c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 ff53 	bl	80085ec <USBD_CtlContinueRx>
 8007746:	e038      	b.n	80077ba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800775a:	2b03      	cmp	r3, #3
 800775c:	d105      	bne.n	800776a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 ff50 	bl	8008610 <USBD_CtlSendStatus>
 8007770:	e023      	b.n	80077ba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007778:	2b05      	cmp	r3, #5
 800777a:	d11e      	bne.n	80077ba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007784:	2100      	movs	r1, #0
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f001 fab0 	bl	8008cec <USBD_LL_StallEP>
 800778c:	e015      	b.n	80077ba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00d      	beq.n	80077b6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d108      	bne.n	80077b6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	7afa      	ldrb	r2, [r7, #11]
 80077ae:	4611      	mov	r1, r2
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	4798      	blx	r3
 80077b4:	e001      	b.n	80077ba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077b6:	2302      	movs	r3, #2
 80077b8:	e000      	b.n	80077bc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	460b      	mov	r3, r1
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d17f      	bne.n	80078d8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3314      	adds	r3, #20
 80077dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d15c      	bne.n	80078a2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d915      	bls.n	8007820 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	1ad2      	subs	r2, r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 febd 	bl	800858c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007812:	2300      	movs	r3, #0
 8007814:	2200      	movs	r2, #0
 8007816:	2100      	movs	r1, #0
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f001 fb12 	bl	8008e42 <USBD_LL_PrepareReceive>
 800781e:	e04e      	b.n	80078be <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	6912      	ldr	r2, [r2, #16]
 8007828:	fbb3 f1f2 	udiv	r1, r3, r2
 800782c:	fb01 f202 	mul.w	r2, r1, r2
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d11c      	bne.n	8007870 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800783e:	429a      	cmp	r2, r3
 8007840:	d316      	bcc.n	8007870 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800784c:	429a      	cmp	r2, r3
 800784e:	d20f      	bcs.n	8007870 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007850:	2200      	movs	r2, #0
 8007852:	2100      	movs	r1, #0
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fe99 	bl	800858c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007862:	2300      	movs	r3, #0
 8007864:	2200      	movs	r2, #0
 8007866:	2100      	movs	r1, #0
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f001 faea 	bl	8008e42 <USBD_LL_PrepareReceive>
 800786e:	e026      	b.n	80078be <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007882:	2b03      	cmp	r3, #3
 8007884:	d105      	bne.n	8007892 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007892:	2180      	movs	r1, #128	@ 0x80
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f001 fa29 	bl	8008cec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fecb 	bl	8008636 <USBD_CtlReceiveStatus>
 80078a0:	e00d      	b.n	80078be <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d004      	beq.n	80078b6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80078b6:	2180      	movs	r1, #128	@ 0x80
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fa17 	bl	8008cec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d11d      	bne.n	8007904 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff fe81 	bl	80075d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80078d6:	e015      	b.n	8007904 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d108      	bne.n	8007900 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	7afa      	ldrb	r2, [r7, #11]
 80078f8:	4611      	mov	r1, r2
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	4798      	blx	r3
 80078fe:	e001      	b.n	8007904 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007900:	2302      	movs	r3, #2
 8007902:	e000      	b.n	8007906 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007916:	2340      	movs	r3, #64	@ 0x40
 8007918:	2200      	movs	r2, #0
 800791a:	2100      	movs	r1, #0
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f9a0 	bl	8008c62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2240      	movs	r2, #64	@ 0x40
 800792e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007932:	2340      	movs	r3, #64	@ 0x40
 8007934:	2200      	movs	r2, #0
 8007936:	2180      	movs	r1, #128	@ 0x80
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f992 	bl	8008c62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2240      	movs	r2, #64	@ 0x40
 8007948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6852      	ldr	r2, [r2, #4]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	4611      	mov	r1, r2
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
  }

  return USBD_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr

080079ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2204      	movs	r2, #4
 80079c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d105      	bne.n	80079f4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr

08007a00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d10b      	bne.n	8007a2a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a4a:	2b40      	cmp	r3, #64	@ 0x40
 8007a4c:	d005      	beq.n	8007a5a <USBD_StdDevReq+0x26>
 8007a4e:	2b40      	cmp	r3, #64	@ 0x40
 8007a50:	d84f      	bhi.n	8007af2 <USBD_StdDevReq+0xbe>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <USBD_StdDevReq+0x36>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d14b      	bne.n	8007af2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
      break;
 8007a68:	e048      	b.n	8007afc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b09      	cmp	r3, #9
 8007a70:	d839      	bhi.n	8007ae6 <USBD_StdDevReq+0xb2>
 8007a72:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <USBD_StdDevReq+0x44>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007ac9 	.word	0x08007ac9
 8007a7c:	08007add 	.word	0x08007add
 8007a80:	08007ae7 	.word	0x08007ae7
 8007a84:	08007ad3 	.word	0x08007ad3
 8007a88:	08007ae7 	.word	0x08007ae7
 8007a8c:	08007aab 	.word	0x08007aab
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007ae7 	.word	0x08007ae7
 8007a98:	08007abf 	.word	0x08007abf
 8007a9c:	08007ab5 	.word	0x08007ab5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f9dc 	bl	8007e60 <USBD_GetDescriptor>
          break;
 8007aa8:	e022      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb3f 	bl	8008130 <USBD_SetAddress>
          break;
 8007ab2:	e01d      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb7e 	bl	80081b8 <USBD_SetConfig>
          break;
 8007abc:	e018      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fc07 	bl	80082d4 <USBD_GetConfig>
          break;
 8007ac6:	e013      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fc37 	bl	800833e <USBD_GetStatus>
          break;
 8007ad0:	e00e      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc65 	bl	80083a4 <USBD_SetFeature>
          break;
 8007ada:	e009      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fc74 	bl	80083cc <USBD_ClrFeature>
          break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fcc9 	bl	8008480 <USBD_CtlError>
          break;
 8007aee:	bf00      	nop
      }
      break;
 8007af0:	e004      	b.n	8007afc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fcc3 	bl	8008480 <USBD_CtlError>
      break;
 8007afa:	bf00      	nop
  }

  return ret;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b1e:	2b40      	cmp	r3, #64	@ 0x40
 8007b20:	d005      	beq.n	8007b2e <USBD_StdItfReq+0x26>
 8007b22:	2b40      	cmp	r3, #64	@ 0x40
 8007b24:	d82e      	bhi.n	8007b84 <USBD_StdItfReq+0x7c>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USBD_StdItfReq+0x26>
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d12a      	bne.n	8007b84 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b34:	3b01      	subs	r3, #1
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d81d      	bhi.n	8007b76 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	889b      	ldrh	r3, [r3, #4]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d813      	bhi.n	8007b6c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	88db      	ldrh	r3, [r3, #6]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d110      	bne.n	8007b80 <USBD_StdItfReq+0x78>
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10d      	bne.n	8007b80 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fd53 	bl	8008610 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b6a:	e009      	b.n	8007b80 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fc86 	bl	8008480 <USBD_CtlError>
          break;
 8007b74:	e004      	b.n	8007b80 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fc81 	bl	8008480 <USBD_CtlError>
          break;
 8007b7e:	e000      	b.n	8007b82 <USBD_StdItfReq+0x7a>
          break;
 8007b80:	bf00      	nop
      }
      break;
 8007b82:	e004      	b.n	8007b8e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fc7a 	bl	8008480 <USBD_CtlError>
      break;
 8007b8c:	bf00      	nop
  }

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	889b      	ldrh	r3, [r3, #4]
 8007baa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bb4:	2b40      	cmp	r3, #64	@ 0x40
 8007bb6:	d007      	beq.n	8007bc8 <USBD_StdEPReq+0x30>
 8007bb8:	2b40      	cmp	r3, #64	@ 0x40
 8007bba:	f200 8146 	bhi.w	8007e4a <USBD_StdEPReq+0x2b2>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <USBD_StdEPReq+0x40>
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	f040 8141 	bne.w	8007e4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
      break;
 8007bd6:	e13d      	b.n	8007e54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d10a      	bne.n	8007bfa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	e12d      	b.n	8007e56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d007      	beq.n	8007c12 <USBD_StdEPReq+0x7a>
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	f300 811b 	bgt.w	8007e3e <USBD_StdEPReq+0x2a6>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d072      	beq.n	8007cf2 <USBD_StdEPReq+0x15a>
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d03a      	beq.n	8007c86 <USBD_StdEPReq+0xee>
 8007c10:	e115      	b.n	8007e3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d002      	beq.n	8007c22 <USBD_StdEPReq+0x8a>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d015      	beq.n	8007c4c <USBD_StdEPReq+0xb4>
 8007c20:	e02b      	b.n	8007c7a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00c      	beq.n	8007c42 <USBD_StdEPReq+0xaa>
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d009      	beq.n	8007c42 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 f85a 	bl	8008cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c38:	2180      	movs	r1, #128	@ 0x80
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 f856 	bl	8008cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c40:	e020      	b.n	8007c84 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fc1b 	bl	8008480 <USBD_CtlError>
              break;
 8007c4a:	e01b      	b.n	8007c84 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	885b      	ldrh	r3, [r3, #2]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10e      	bne.n	8007c72 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00b      	beq.n	8007c72 <USBD_StdEPReq+0xda>
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	2b80      	cmp	r3, #128	@ 0x80
 8007c5e:	d008      	beq.n	8007c72 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	88db      	ldrh	r3, [r3, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 f83d 	bl	8008cec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fccc 	bl	8008610 <USBD_CtlSendStatus>

              break;
 8007c78:	e004      	b.n	8007c84 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fbff 	bl	8008480 <USBD_CtlError>
              break;
 8007c82:	bf00      	nop
          }
          break;
 8007c84:	e0e0      	b.n	8007e48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d002      	beq.n	8007c96 <USBD_StdEPReq+0xfe>
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d015      	beq.n	8007cc0 <USBD_StdEPReq+0x128>
 8007c94:	e026      	b.n	8007ce4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00c      	beq.n	8007cb6 <USBD_StdEPReq+0x11e>
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ca0:	d009      	beq.n	8007cb6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f820 	bl	8008cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cac:	2180      	movs	r1, #128	@ 0x80
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 f81c 	bl	8008cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cb4:	e01c      	b.n	8007cf0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fbe1 	bl	8008480 <USBD_CtlError>
              break;
 8007cbe:	e017      	b.n	8007cf0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	885b      	ldrh	r3, [r3, #2]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d112      	bne.n	8007cee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f827 	bl	8008d2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc97 	bl	8008610 <USBD_CtlSendStatus>
              }
              break;
 8007ce2:	e004      	b.n	8007cee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fbca 	bl	8008480 <USBD_CtlError>
              break;
 8007cec:	e000      	b.n	8007cf0 <USBD_StdEPReq+0x158>
              break;
 8007cee:	bf00      	nop
          }
          break;
 8007cf0:	e0aa      	b.n	8007e48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d002      	beq.n	8007d02 <USBD_StdEPReq+0x16a>
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d032      	beq.n	8007d66 <USBD_StdEPReq+0x1ce>
 8007d00:	e097      	b.n	8007e32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <USBD_StdEPReq+0x180>
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b80      	cmp	r3, #128	@ 0x80
 8007d0c:	d004      	beq.n	8007d18 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fbb5 	bl	8008480 <USBD_CtlError>
                break;
 8007d16:	e091      	b.n	8007e3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	da0b      	bge.n	8007d38 <USBD_StdEPReq+0x1a0>
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	3310      	adds	r3, #16
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	3304      	adds	r3, #4
 8007d36:	e00b      	b.n	8007d50 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3304      	adds	r3, #4
 8007d50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fbf8 	bl	8008554 <USBD_CtlSendData>
              break;
 8007d64:	e06a      	b.n	8007e3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	da11      	bge.n	8007d92 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	f003 020f 	and.w	r2, r3, #15
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	3318      	adds	r3, #24
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d117      	bne.n	8007db8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fb78 	bl	8008480 <USBD_CtlError>
                  break;
 8007d90:	e054      	b.n	8007e3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fb65 	bl	8008480 <USBD_CtlError>
                  break;
 8007db6:	e041      	b.n	8007e3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da0b      	bge.n	8007dd8 <USBD_StdEPReq+0x240>
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	3310      	adds	r3, #16
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	e00b      	b.n	8007df0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	3304      	adds	r3, #4
 8007df0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <USBD_StdEPReq+0x266>
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b80      	cmp	r3, #128	@ 0x80
 8007dfc:	d103      	bne.n	8007e06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e00e      	b.n	8007e24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 ffac 	bl	8008d68 <USBD_LL_IsStallEP>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e002      	b.n	8007e24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2202      	movs	r2, #2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb92 	bl	8008554 <USBD_CtlSendData>
              break;
 8007e30:	e004      	b.n	8007e3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb23 	bl	8008480 <USBD_CtlError>
              break;
 8007e3a:	bf00      	nop
          }
          break;
 8007e3c:	e004      	b.n	8007e48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fb1d 	bl	8008480 <USBD_CtlError>
          break;
 8007e46:	bf00      	nop
      }
      break;
 8007e48:	e004      	b.n	8007e54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fb17 	bl	8008480 <USBD_CtlError>
      break;
 8007e52:	bf00      	nop
  }

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	2b06      	cmp	r3, #6
 8007e82:	f200 8128 	bhi.w	80080d6 <USBD_GetDescriptor+0x276>
 8007e86:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <USBD_GetDescriptor+0x2c>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007ec1 	.word	0x08007ec1
 8007e94:	08007f01 	.word	0x08007f01
 8007e98:	080080d7 	.word	0x080080d7
 8007e9c:	080080d7 	.word	0x080080d7
 8007ea0:	08008077 	.word	0x08008077
 8007ea4:	080080a3 	.word	0x080080a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
      break;
 8007ebe:	e112      	b.n	80080e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7c1b      	ldrb	r3, [r3, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10d      	bne.n	8007ee4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f107 0208 	add.w	r2, r7, #8
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	2202      	movs	r2, #2
 8007ee0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ee2:	e100      	b.n	80080e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	f107 0208 	add.w	r2, r7, #8
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	2202      	movs	r2, #2
 8007efc:	701a      	strb	r2, [r3, #0]
      break;
 8007efe:	e0f2      	b.n	80080e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	885b      	ldrh	r3, [r3, #2]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b05      	cmp	r3, #5
 8007f08:	f200 80ac 	bhi.w	8008064 <USBD_GetDescriptor+0x204>
 8007f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f14 <USBD_GetDescriptor+0xb4>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f2d 	.word	0x08007f2d
 8007f18:	08007f61 	.word	0x08007f61
 8007f1c:	08007f95 	.word	0x08007f95
 8007f20:	08007fc9 	.word	0x08007fc9
 8007f24:	08007ffd 	.word	0x08007ffd
 8007f28:	08008031 	.word	0x08008031
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7c12      	ldrb	r2, [r2, #16]
 8007f44:	f107 0108 	add.w	r1, r7, #8
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
 8007f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4e:	e091      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa94 	bl	8008480 <USBD_CtlError>
            err++;
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5e:	e089      	b.n	8008074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	7c12      	ldrb	r2, [r2, #16]
 8007f78:	f107 0108 	add.w	r1, r7, #8
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
 8007f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f82:	e077      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa7a 	bl	8008480 <USBD_CtlError>
            err++;
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	72fb      	strb	r3, [r7, #11]
          break;
 8007f92:	e06f      	b.n	8008074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	7c12      	ldrb	r2, [r2, #16]
 8007fac:	f107 0108 	add.w	r1, r7, #8
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb6:	e05d      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa60 	bl	8008480 <USBD_CtlError>
            err++;
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc6:	e055      	b.n	8008074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	7c12      	ldrb	r2, [r2, #16]
 8007fe0:	f107 0108 	add.w	r1, r7, #8
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
 8007fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fea:	e043      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa46 	bl	8008480 <USBD_CtlError>
            err++;
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffa:	e03b      	b.n	8008074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801e:	e029      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa2c 	bl	8008480 <USBD_CtlError>
            err++;
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	3301      	adds	r3, #1
 800802c:	72fb      	strb	r3, [r7, #11]
          break;
 800802e:	e021      	b.n	8008074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	7c12      	ldrb	r2, [r2, #16]
 8008048:	f107 0108 	add.w	r1, r7, #8
 800804c:	4610      	mov	r0, r2
 800804e:	4798      	blx	r3
 8008050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008052:	e00f      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa12 	bl	8008480 <USBD_CtlError>
            err++;
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	3301      	adds	r3, #1
 8008060:	72fb      	strb	r3, [r7, #11]
          break;
 8008062:	e007      	b.n	8008074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa0a 	bl	8008480 <USBD_CtlError>
          err++;
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	3301      	adds	r3, #1
 8008070:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008072:	e038      	b.n	80080e6 <USBD_GetDescriptor+0x286>
 8008074:	e037      	b.n	80080e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	7c1b      	ldrb	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008086:	f107 0208 	add.w	r2, r7, #8
 800808a:	4610      	mov	r0, r2
 800808c:	4798      	blx	r3
 800808e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008090:	e029      	b.n	80080e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f9f3 	bl	8008480 <USBD_CtlError>
        err++;
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	3301      	adds	r3, #1
 800809e:	72fb      	strb	r3, [r7, #11]
      break;
 80080a0:	e021      	b.n	80080e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7c1b      	ldrb	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10d      	bne.n	80080c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b2:	f107 0208 	add.w	r2, r7, #8
 80080b6:	4610      	mov	r0, r2
 80080b8:	4798      	blx	r3
 80080ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	2207      	movs	r2, #7
 80080c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080c4:	e00f      	b.n	80080e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f9d9 	bl	8008480 <USBD_CtlError>
        err++;
 80080ce:	7afb      	ldrb	r3, [r7, #11]
 80080d0:	3301      	adds	r3, #1
 80080d2:	72fb      	strb	r3, [r7, #11]
      break;
 80080d4:	e007      	b.n	80080e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9d1 	bl	8008480 <USBD_CtlError>
      err++;
 80080de:	7afb      	ldrb	r3, [r7, #11]
 80080e0:	3301      	adds	r3, #1
 80080e2:	72fb      	strb	r3, [r7, #11]
      break;
 80080e4:	bf00      	nop
  }

  if (err != 0U)
 80080e6:	7afb      	ldrb	r3, [r7, #11]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11c      	bne.n	8008126 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80080ec:	893b      	ldrh	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d011      	beq.n	8008116 <USBD_GetDescriptor+0x2b6>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00d      	beq.n	8008116 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	88da      	ldrh	r2, [r3, #6]
 80080fe:	893b      	ldrh	r3, [r7, #8]
 8008100:	4293      	cmp	r3, r2
 8008102:	bf28      	it	cs
 8008104:	4613      	movcs	r3, r2
 8008106:	b29b      	uxth	r3, r3
 8008108:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800810a:	893b      	ldrh	r3, [r7, #8]
 800810c:	461a      	mov	r2, r3
 800810e:	68f9      	ldr	r1, [r7, #12]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fa1f 	bl	8008554 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	88db      	ldrh	r3, [r3, #6]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa76 	bl	8008610 <USBD_CtlSendStatus>
 8008124:	e000      	b.n	8008128 <USBD_GetDescriptor+0x2c8>
    return;
 8008126:	bf00      	nop
    }
  }
}
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop

08008130 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	889b      	ldrh	r3, [r3, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d130      	bne.n	80081a4 <USBD_SetAddress+0x74>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12c      	bne.n	80081a4 <USBD_SetAddress+0x74>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008150:	d828      	bhi.n	80081a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008164:	2b03      	cmp	r3, #3
 8008166:	d104      	bne.n	8008172 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f988 	bl	8008480 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008170:	e01d      	b.n	80081ae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7bfa      	ldrb	r2, [r7, #15]
 8008176:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fe1d 	bl	8008dbe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fa43 	bl	8008610 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d004      	beq.n	800819a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008198:	e009      	b.n	80081ae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	e004      	b.n	80081ae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f96a 	bl	8008480 <USBD_CtlError>
  }
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	4b41      	ldr	r3, [pc, #260]	@ (80082d0 <USBD_SetConfig+0x118>)
 80081ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081cc:	4b40      	ldr	r3, [pc, #256]	@ (80082d0 <USBD_SetConfig+0x118>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d904      	bls.n	80081de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f952 	bl	8008480 <USBD_CtlError>
 80081dc:	e075      	b.n	80082ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d002      	beq.n	80081ee <USBD_SetConfig+0x36>
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d023      	beq.n	8008234 <USBD_SetConfig+0x7c>
 80081ec:	e062      	b.n	80082b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80081ee:	4b38      	ldr	r3, [pc, #224]	@ (80082d0 <USBD_SetConfig+0x118>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01a      	beq.n	800822c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80081f6:	4b36      	ldr	r3, [pc, #216]	@ (80082d0 <USBD_SetConfig+0x118>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2203      	movs	r2, #3
 8008204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008208:	4b31      	ldr	r3, [pc, #196]	@ (80082d0 <USBD_SetConfig+0x118>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff f9e8 	bl	80075e4 <USBD_SetClassConfig>
 8008214:	4603      	mov	r3, r0
 8008216:	2b02      	cmp	r3, #2
 8008218:	d104      	bne.n	8008224 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f92f 	bl	8008480 <USBD_CtlError>
            return;
 8008222:	e052      	b.n	80082ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f9f3 	bl	8008610 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800822a:	e04e      	b.n	80082ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f9ef 	bl	8008610 <USBD_CtlSendStatus>
        break;
 8008232:	e04a      	b.n	80082ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008234:	4b26      	ldr	r3, [pc, #152]	@ (80082d0 <USBD_SetConfig+0x118>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d112      	bne.n	8008262 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008244:	4b22      	ldr	r3, [pc, #136]	@ (80082d0 <USBD_SetConfig+0x118>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800824e:	4b20      	ldr	r3, [pc, #128]	@ (80082d0 <USBD_SetConfig+0x118>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff f9e4 	bl	8007622 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f9d8 	bl	8008610 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008260:	e033      	b.n	80082ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008262:	4b1b      	ldr	r3, [pc, #108]	@ (80082d0 <USBD_SetConfig+0x118>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d01d      	beq.n	80082ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff f9d2 	bl	8007622 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800827e:	4b14      	ldr	r3, [pc, #80]	@ (80082d0 <USBD_SetConfig+0x118>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008288:	4b11      	ldr	r3, [pc, #68]	@ (80082d0 <USBD_SetConfig+0x118>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff f9a8 	bl	80075e4 <USBD_SetClassConfig>
 8008294:	4603      	mov	r3, r0
 8008296:	2b02      	cmp	r3, #2
 8008298:	d104      	bne.n	80082a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f8ef 	bl	8008480 <USBD_CtlError>
            return;
 80082a2:	e012      	b.n	80082ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f9b3 	bl	8008610 <USBD_CtlSendStatus>
        break;
 80082aa:	e00e      	b.n	80082ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f9af 	bl	8008610 <USBD_CtlSendStatus>
        break;
 80082b2:	e00a      	b.n	80082ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8e2 	bl	8008480 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80082bc:	4b04      	ldr	r3, [pc, #16]	@ (80082d0 <USBD_SetConfig+0x118>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff f9ad 	bl	8007622 <USBD_ClrClassConfig>
        break;
 80082c8:	bf00      	nop
    }
  }
}
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000cac 	.word	0x20000cac

080082d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88db      	ldrh	r3, [r3, #6]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d004      	beq.n	80082f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8c9 	bl	8008480 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80082ee:	e022      	b.n	8008336 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	dc02      	bgt.n	8008300 <USBD_GetConfig+0x2c>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dc03      	bgt.n	8008306 <USBD_GetConfig+0x32>
 80082fe:	e015      	b.n	800832c <USBD_GetConfig+0x58>
 8008300:	2b03      	cmp	r3, #3
 8008302:	d00b      	beq.n	800831c <USBD_GetConfig+0x48>
 8008304:	e012      	b.n	800832c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3308      	adds	r3, #8
 8008310:	2201      	movs	r2, #1
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f91d 	bl	8008554 <USBD_CtlSendData>
        break;
 800831a:	e00c      	b.n	8008336 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	2201      	movs	r2, #1
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f915 	bl	8008554 <USBD_CtlSendData>
        break;
 800832a:	e004      	b.n	8008336 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8a6 	bl	8008480 <USBD_CtlError>
        break;
 8008334:	bf00      	nop
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834e:	3b01      	subs	r3, #1
 8008350:	2b02      	cmp	r3, #2
 8008352:	d81e      	bhi.n	8008392 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	88db      	ldrh	r3, [r3, #6]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d004      	beq.n	8008366 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f88e 	bl	8008480 <USBD_CtlError>
        break;
 8008364:	e01a      	b.n	800839c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f043 0202 	orr.w	r2, r3, #2
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	330c      	adds	r3, #12
 8008386:	2202      	movs	r2, #2
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f8e2 	bl	8008554 <USBD_CtlSendData>
      break;
 8008390:	e004      	b.n	800839c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f873 	bl	8008480 <USBD_CtlError>
      break;
 800839a:	bf00      	nop
  }
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	885b      	ldrh	r3, [r3, #2]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d106      	bne.n	80083c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f926 	bl	8008610 <USBD_CtlSendStatus>
  }
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083dc:	3b01      	subs	r3, #1
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d80b      	bhi.n	80083fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d10c      	bne.n	8008404 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f90c 	bl	8008610 <USBD_CtlSendStatus>
      }
      break;
 80083f8:	e004      	b.n	8008404 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f83f 	bl	8008480 <USBD_CtlError>
      break;
 8008402:	e000      	b.n	8008406 <USBD_ClrFeature+0x3a>
      break;
 8008404:	bf00      	nop
  }
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	785a      	ldrb	r2, [r3, #1]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	3302      	adds	r3, #2
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	3303      	adds	r3, #3
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	b29b      	uxth	r3, r3
 800843a:	4413      	add	r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	3304      	adds	r3, #4
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	3305      	adds	r3, #5
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	b29b      	uxth	r3, r3
 8008454:	4413      	add	r3, r2
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	3306      	adds	r3, #6
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	3307      	adds	r3, #7
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	b29b      	uxth	r3, r3
 800846e:	4413      	add	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	80da      	strh	r2, [r3, #6]

}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr

08008480 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800848a:	2180      	movs	r1, #128	@ 0x80
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fc2d 	bl	8008cec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008492:	2100      	movs	r1, #0
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc29 	bl	8008cec <USBD_LL_StallEP>
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b086      	sub	sp, #24
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d032      	beq.n	800851e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f834 	bl	8008526 <USBD_GetLen>
 80084be:	4603      	mov	r3, r0
 80084c0:	3301      	adds	r3, #1
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	75fa      	strb	r2, [r7, #23]
 80084d2:	461a      	mov	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4413      	add	r3, r2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	75fa      	strb	r2, [r7, #23]
 80084e4:	461a      	mov	r2, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4413      	add	r3, r2
 80084ea:	2203      	movs	r2, #3
 80084ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80084ee:	e012      	b.n	8008516 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	60fa      	str	r2, [r7, #12]
 80084f6:	7dfa      	ldrb	r2, [r7, #23]
 80084f8:	1c51      	adds	r1, r2, #1
 80084fa:	75f9      	strb	r1, [r7, #23]
 80084fc:	4611      	mov	r1, r2
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	440a      	add	r2, r1
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	75fa      	strb	r2, [r7, #23]
 800850c:	461a      	mov	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e8      	bne.n	80084f0 <USBD_GetString+0x4e>
    }
  }
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008526:	b480      	push	{r7}
 8008528:	b085      	sub	sp, #20
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008532:	e005      	b.n	8008540 <USBD_GetLen+0x1a>
  {
    len++;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	3301      	adds	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
    buf++;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3301      	adds	r3, #1
 800853e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f5      	bne.n	8008534 <USBD_GetLen+0xe>
  }

  return len;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2202      	movs	r2, #2
 8008566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800856a:	88fa      	ldrh	r2, [r7, #6]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008570:	88fa      	ldrh	r2, [r7, #6]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	2100      	movs	r1, #0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fc3d 	bl	8008dfc <USBD_LL_Transmit>

  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	2100      	movs	r1, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 fc2b 	bl	8008dfc <USBD_LL_Transmit>

  return USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2203      	movs	r2, #3
 80085c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80085ce:	88fa      	ldrh	r2, [r7, #6]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	2100      	movs	r1, #0
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fc30 	bl	8008e42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	2100      	movs	r1, #0
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fc1e 	bl	8008e42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2204      	movs	r2, #4
 800861c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008620:	2300      	movs	r3, #0
 8008622:	2200      	movs	r2, #0
 8008624:	2100      	movs	r1, #0
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fbe8 	bl	8008dfc <USBD_LL_Transmit>

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2205      	movs	r2, #5
 8008642:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008646:	2300      	movs	r3, #0
 8008648:	2200      	movs	r2, #0
 800864a:	2100      	movs	r1, #0
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fbf8 	bl	8008e42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008660:	2200      	movs	r2, #0
 8008662:	4912      	ldr	r1, [pc, #72]	@ (80086ac <MX_USB_DEVICE_Init+0x50>)
 8008664:	4812      	ldr	r0, [pc, #72]	@ (80086b0 <MX_USB_DEVICE_Init+0x54>)
 8008666:	f7fe ff63 	bl	8007530 <USBD_Init>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008670:	f7f8 f944 	bl	80008fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008674:	490f      	ldr	r1, [pc, #60]	@ (80086b4 <MX_USB_DEVICE_Init+0x58>)
 8008676:	480e      	ldr	r0, [pc, #56]	@ (80086b0 <MX_USB_DEVICE_Init+0x54>)
 8008678:	f7fe ff85 	bl	8007586 <USBD_RegisterClass>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008682:	f7f8 f93b 	bl	80008fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008686:	490c      	ldr	r1, [pc, #48]	@ (80086b8 <MX_USB_DEVICE_Init+0x5c>)
 8008688:	4809      	ldr	r0, [pc, #36]	@ (80086b0 <MX_USB_DEVICE_Init+0x54>)
 800868a:	f7fe fee5 	bl	8007458 <USBD_CDC_RegisterInterface>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008694:	f7f8 f932 	bl	80008fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008698:	4805      	ldr	r0, [pc, #20]	@ (80086b0 <MX_USB_DEVICE_Init+0x54>)
 800869a:	f7fe ff8d 	bl	80075b8 <USBD_Start>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086a4:	f7f8 f92a 	bl	80008fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086a8:	bf00      	nop
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000b90 	.word	0x20000b90
 80086b0:	20000cb0 	.word	0x20000cb0
 80086b4:	20000a7c 	.word	0x20000a7c
 80086b8:	20000b80 	.word	0x20000b80

080086bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086c0:	2200      	movs	r2, #0
 80086c2:	4905      	ldr	r1, [pc, #20]	@ (80086d8 <CDC_Init_FS+0x1c>)
 80086c4:	4805      	ldr	r0, [pc, #20]	@ (80086dc <CDC_Init_FS+0x20>)
 80086c6:	f7fe fedd 	bl	8007484 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086ca:	4905      	ldr	r1, [pc, #20]	@ (80086e0 <CDC_Init_FS+0x24>)
 80086cc:	4803      	ldr	r0, [pc, #12]	@ (80086dc <CDC_Init_FS+0x20>)
 80086ce:	f7fe fef2 	bl	80074b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80086d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20001374 	.word	0x20001374
 80086dc:	20000cb0 	.word	0x20000cb0
 80086e0:	20000f74 	.word	0x20000f74

080086e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
	...

080086f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	71fb      	strb	r3, [r7, #7]
 8008700:	4613      	mov	r3, r2
 8008702:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	2b23      	cmp	r3, #35	@ 0x23
 8008708:	d84a      	bhi.n	80087a0 <CDC_Control_FS+0xac>
 800870a:	a201      	add	r2, pc, #4	@ (adr r2, 8008710 <CDC_Control_FS+0x1c>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	080087a1 	.word	0x080087a1
 8008714:	080087a1 	.word	0x080087a1
 8008718:	080087a1 	.word	0x080087a1
 800871c:	080087a1 	.word	0x080087a1
 8008720:	080087a1 	.word	0x080087a1
 8008724:	080087a1 	.word	0x080087a1
 8008728:	080087a1 	.word	0x080087a1
 800872c:	080087a1 	.word	0x080087a1
 8008730:	080087a1 	.word	0x080087a1
 8008734:	080087a1 	.word	0x080087a1
 8008738:	080087a1 	.word	0x080087a1
 800873c:	080087a1 	.word	0x080087a1
 8008740:	080087a1 	.word	0x080087a1
 8008744:	080087a1 	.word	0x080087a1
 8008748:	080087a1 	.word	0x080087a1
 800874c:	080087a1 	.word	0x080087a1
 8008750:	080087a1 	.word	0x080087a1
 8008754:	080087a1 	.word	0x080087a1
 8008758:	080087a1 	.word	0x080087a1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087a1 	.word	0x080087a1
 8008764:	080087a1 	.word	0x080087a1
 8008768:	080087a1 	.word	0x080087a1
 800876c:	080087a1 	.word	0x080087a1
 8008770:	080087a1 	.word	0x080087a1
 8008774:	080087a1 	.word	0x080087a1
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a1 	.word	0x080087a1
 8008784:	080087a1 	.word	0x080087a1
 8008788:	080087a1 	.word	0x080087a1
 800878c:	080087a1 	.word	0x080087a1
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a1 	.word	0x080087a1
 8008798:	080087a1 	.word	0x080087a1
 800879c:	080087a1 	.word	0x080087a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087a0:	bf00      	nop
  }

  return (USBD_OK);
 80087a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop

080087b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4805      	ldr	r0, [pc, #20]	@ (80087d4 <CDC_Receive_FS+0x24>)
 80087be:	f7fe fe7a 	bl	80074b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087c2:	4804      	ldr	r0, [pc, #16]	@ (80087d4 <CDC_Receive_FS+0x24>)
 80087c4:	f7fe fe8a 	bl	80074dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80087c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000cb0 	.word	0x20000cb0

080087d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2212      	movs	r2, #18
 80087e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087ea:	4b03      	ldr	r3, [pc, #12]	@ (80087f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000bac 	.word	0x20000bac

080087fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2204      	movs	r2, #4
 800880c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800880e:	4b03      	ldr	r3, [pc, #12]	@ (800881c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000bc0 	.word	0x20000bc0

08008820 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	6039      	str	r1, [r7, #0]
 800882a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d105      	bne.n	800883e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4907      	ldr	r1, [pc, #28]	@ (8008854 <USBD_FS_ProductStrDescriptor+0x34>)
 8008836:	4808      	ldr	r0, [pc, #32]	@ (8008858 <USBD_FS_ProductStrDescriptor+0x38>)
 8008838:	f7ff fe33 	bl	80084a2 <USBD_GetString>
 800883c:	e004      	b.n	8008848 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	4904      	ldr	r1, [pc, #16]	@ (8008854 <USBD_FS_ProductStrDescriptor+0x34>)
 8008842:	4805      	ldr	r0, [pc, #20]	@ (8008858 <USBD_FS_ProductStrDescriptor+0x38>)
 8008844:	f7ff fe2d 	bl	80084a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008848:	4b02      	ldr	r3, [pc, #8]	@ (8008854 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20001774 	.word	0x20001774
 8008858:	080098c8 	.word	0x080098c8

0800885c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	6039      	str	r1, [r7, #0]
 8008866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	4904      	ldr	r1, [pc, #16]	@ (800887c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800886c:	4804      	ldr	r0, [pc, #16]	@ (8008880 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800886e:	f7ff fe18 	bl	80084a2 <USBD_GetString>
  return USBD_StrDesc;
 8008872:	4b02      	ldr	r3, [pc, #8]	@ (800887c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20001774 	.word	0x20001774
 8008880:	080098e0 	.word	0x080098e0

08008884 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	221a      	movs	r2, #26
 8008894:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008896:	f000 f843 	bl	8008920 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800889a:	4b02      	ldr	r3, [pc, #8]	@ (80088a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	20000bc4 	.word	0x20000bc4

080088a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	6039      	str	r1, [r7, #0]
 80088b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d105      	bne.n	80088c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4907      	ldr	r1, [pc, #28]	@ (80088dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088be:	4808      	ldr	r0, [pc, #32]	@ (80088e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088c0:	f7ff fdef 	bl	80084a2 <USBD_GetString>
 80088c4:	e004      	b.n	80088d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4904      	ldr	r1, [pc, #16]	@ (80088dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ca:	4805      	ldr	r0, [pc, #20]	@ (80088e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088cc:	f7ff fde9 	bl	80084a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088d0:	4b02      	ldr	r3, [pc, #8]	@ (80088dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20001774 	.word	0x20001774
 80088e0:	080098f4 	.word	0x080098f4

080088e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	4907      	ldr	r1, [pc, #28]	@ (8008918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088fa:	4808      	ldr	r0, [pc, #32]	@ (800891c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088fc:	f7ff fdd1 	bl	80084a2 <USBD_GetString>
 8008900:	e004      	b.n	800890c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	4904      	ldr	r1, [pc, #16]	@ (8008918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008906:	4805      	ldr	r0, [pc, #20]	@ (800891c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008908:	f7ff fdcb 	bl	80084a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800890c:	4b02      	ldr	r3, [pc, #8]	@ (8008918 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20001774 	.word	0x20001774
 800891c:	08009900 	.word	0x08009900

08008920 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008926:	4b0f      	ldr	r3, [pc, #60]	@ (8008964 <Get_SerialNum+0x44>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800892c:	4b0e      	ldr	r3, [pc, #56]	@ (8008968 <Get_SerialNum+0x48>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008932:	4b0e      	ldr	r3, [pc, #56]	@ (800896c <Get_SerialNum+0x4c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d009      	beq.n	800895a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008946:	2208      	movs	r2, #8
 8008948:	4909      	ldr	r1, [pc, #36]	@ (8008970 <Get_SerialNum+0x50>)
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f814 	bl	8008978 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008950:	2204      	movs	r2, #4
 8008952:	4908      	ldr	r1, [pc, #32]	@ (8008974 <Get_SerialNum+0x54>)
 8008954:	68b8      	ldr	r0, [r7, #8]
 8008956:	f000 f80f 	bl	8008978 <IntToUnicode>
  }
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	1ffff7e8 	.word	0x1ffff7e8
 8008968:	1ffff7ec 	.word	0x1ffff7ec
 800896c:	1ffff7f0 	.word	0x1ffff7f0
 8008970:	20000bc6 	.word	0x20000bc6
 8008974:	20000bd6 	.word	0x20000bd6

08008978 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800898a:	2300      	movs	r3, #0
 800898c:	75fb      	strb	r3, [r7, #23]
 800898e:	e027      	b.n	80089e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	0f1b      	lsrs	r3, r3, #28
 8008994:	2b09      	cmp	r3, #9
 8008996:	d80b      	bhi.n	80089b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	0f1b      	lsrs	r3, r3, #28
 800899c:	b2da      	uxtb	r2, r3
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	4619      	mov	r1, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	440b      	add	r3, r1
 80089a8:	3230      	adds	r2, #48	@ 0x30
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	e00a      	b.n	80089c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0f1b      	lsrs	r3, r3, #28
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	4619      	mov	r1, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	440b      	add	r3, r1
 80089c0:	3237      	adds	r2, #55	@ 0x37
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	011b      	lsls	r3, r3, #4
 80089ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	3301      	adds	r3, #1
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	3301      	adds	r3, #1
 80089de:	75fb      	strb	r3, [r7, #23]
 80089e0:	7dfa      	ldrb	r2, [r7, #23]
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d3d3      	bcc.n	8008990 <IntToUnicode+0x18>
  }
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0d      	ldr	r2, [pc, #52]	@ (8008a38 <HAL_PCD_MspInit+0x44>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d113      	bne.n	8008a2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a06:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <HAL_PCD_MspInit+0x48>)
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a3c <HAL_PCD_MspInit+0x48>)
 8008a0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a10:	61d3      	str	r3, [r2, #28]
 8008a12:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <HAL_PCD_MspInit+0x48>)
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	2014      	movs	r0, #20
 8008a24:	f7f8 f997 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a28:	2014      	movs	r0, #20
 8008a2a:	f7f8 f9b0 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40005c00 	.word	0x40005c00
 8008a3c:	40021000 	.word	0x40021000

08008a40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7fe fdf6 	bl	8007648 <USBD_LL_SetupStage>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	440b      	add	r3, r1
 8008a84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f7fe fe28 	bl	80076e2 <USBD_LL_DataOutStage>
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	440b      	add	r3, r1
 8008aba:	3324      	adds	r3, #36	@ 0x24
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f7fe fe7f 	bl	80077c4 <USBD_LL_DataInStage>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe ff8f 	bl	8007a00 <USBD_LL_SOF>
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008af2:	2301      	movs	r3, #1
 8008af4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	799b      	ldrb	r3, [r3, #6]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d001      	beq.n	8008b02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008afe:	f7f7 fefd 	bl	80008fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b08:	7bfa      	ldrb	r2, [r7, #15]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe ff3f 	bl	8007990 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fef8 	bl	800790e <USBD_LL_Reset>
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe ff39 	bl	80079ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7a9b      	ldrb	r3, [r3, #10]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b44:	4b04      	ldr	r3, [pc, #16]	@ (8008b58 <HAL_PCD_SuspendCallback+0x30>)
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	4a03      	ldr	r2, [pc, #12]	@ (8008b58 <HAL_PCD_SuspendCallback+0x30>)
 8008b4a:	f043 0306 	orr.w	r3, r3, #6
 8008b4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	e000ed00 	.word	0xe000ed00

08008b5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe ff33 	bl	80079d6 <USBD_LL_Resume>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b80:	4a28      	ldr	r2, [pc, #160]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a26      	ldr	r2, [pc, #152]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008b8c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b90:	4b24      	ldr	r3, [pc, #144]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008b92:	4a25      	ldr	r2, [pc, #148]	@ (8008c28 <USBD_LL_Init+0xb0>)
 8008b94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b96:	4b23      	ldr	r3, [pc, #140]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008b98:	2208      	movs	r2, #8
 8008b9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b9c:	4b21      	ldr	r3, [pc, #132]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ba2:	4b20      	ldr	r3, [pc, #128]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008bae:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008bb4:	481b      	ldr	r0, [pc, #108]	@ (8008c24 <USBD_LL_Init+0xac>)
 8008bb6:	f7f9 fc6e 	bl	8002496 <HAL_PCD_Init>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008bc0:	f7f7 fe9c 	bl	80008fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bca:	2318      	movs	r3, #24
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2100      	movs	r1, #0
 8008bd0:	f7fb f97f 	bl	8003ed2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bda:	2358      	movs	r3, #88	@ 0x58
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2180      	movs	r1, #128	@ 0x80
 8008be0:	f7fb f977 	bl	8003ed2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bea:	23c0      	movs	r3, #192	@ 0xc0
 8008bec:	2200      	movs	r2, #0
 8008bee:	2181      	movs	r1, #129	@ 0x81
 8008bf0:	f7fb f96f 	bl	8003ed2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bfa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2101      	movs	r1, #1
 8008c02:	f7fb f966 	bl	8003ed2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c10:	2200      	movs	r2, #0
 8008c12:	2182      	movs	r1, #130	@ 0x82
 8008c14:	f7fb f95d 	bl	8003ed2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20001974 	.word	0x20001974
 8008c28:	40005c00 	.word	0x40005c00

08008c2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f9 fd1d 	bl	8002682 <HAL_PCD_Start>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f94e 	bl	8008ef0 <USBD_Get_USB_Status>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4603      	mov	r3, r0
 8008c72:	70fb      	strb	r3, [r7, #3]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70bb      	strb	r3, [r7, #2]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c8a:	78bb      	ldrb	r3, [r7, #2]
 8008c8c:	883a      	ldrh	r2, [r7, #0]
 8008c8e:	78f9      	ldrb	r1, [r7, #3]
 8008c90:	f7f9 fe71 	bl	8002976 <HAL_PCD_EP_Open>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f928 	bl	8008ef0 <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cc8:	78fa      	ldrb	r2, [r7, #3]
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f9 feaf 	bl	8002a30 <HAL_PCD_EP_Close>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 f909 	bl	8008ef0 <USBD_Get_USB_Status>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7f9 ff57 	bl	8002bbe <HAL_PCD_EP_SetStall>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f8ea 	bl	8008ef0 <USBD_Get_USB_Status>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d44:	78fa      	ldrb	r2, [r7, #3]
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7f9 ff98 	bl	8002c7e <HAL_PCD_EP_ClrStall>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f8cb 	bl	8008ef0 <USBD_Get_USB_Status>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da0b      	bge.n	8008d9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	440b      	add	r3, r1
 8008d96:	3312      	adds	r3, #18
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	e00b      	b.n	8008db4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	440b      	add	r3, r1
 8008dae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008db2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7f9 fda6 	bl	800292e <HAL_PCD_SetAddress>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f881 	bl	8008ef0 <USBD_Get_USB_Status>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	607a      	str	r2, [r7, #4]
 8008e06:	461a      	mov	r2, r3
 8008e08:	460b      	mov	r3, r1
 8008e0a:	72fb      	strb	r3, [r7, #11]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e1e:	893b      	ldrh	r3, [r7, #8]
 8008e20:	7af9      	ldrb	r1, [r7, #11]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	f7f9 fe94 	bl	8002b50 <HAL_PCD_EP_Transmit>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f85e 	bl	8008ef0 <USBD_Get_USB_Status>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	460b      	mov	r3, r1
 8008e50:	72fb      	strb	r3, [r7, #11]
 8008e52:	4613      	mov	r3, r2
 8008e54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	7af9      	ldrb	r1, [r7, #11]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	f7f9 fe29 	bl	8002ac0 <HAL_PCD_EP_Receive>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f83b 	bl	8008ef0 <USBD_Get_USB_Status>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7f9 fe3f 	bl	8002b22 <HAL_PCD_EP_GetRxCount>
 8008ea4:	4603      	mov	r3, r0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <USBD_static_malloc+0x14>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	20001c4c 	.word	0x20001c4c

08008ec8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr

08008eda <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d817      	bhi.n	8008f34 <USBD_Get_USB_Status+0x44>
 8008f04:	a201      	add	r2, pc, #4	@ (adr r2, 8008f0c <USBD_Get_USB_Status+0x1c>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f1d 	.word	0x08008f1d
 8008f10:	08008f23 	.word	0x08008f23
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f2f 	.word	0x08008f2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e00b      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	73fb      	strb	r3, [r7, #15]
    break;
 8008f26:	e008      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2c:	e005      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	73fb      	strb	r3, [r7, #15]
    break;
 8008f32:	e002      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f34:	2302      	movs	r3, #2
 8008f36:	73fb      	strb	r3, [r7, #15]
    break;
 8008f38:	bf00      	nop
  }
  return usb_status;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop

08008f48 <siprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f4e:	b500      	push	{lr}
 8008f50:	b09c      	sub	sp, #112	@ 0x70
 8008f52:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	9006      	str	r0, [sp, #24]
 8008f58:	9107      	str	r1, [sp, #28]
 8008f5a:	9104      	str	r1, [sp, #16]
 8008f5c:	4808      	ldr	r0, [pc, #32]	@ (8008f80 <siprintf+0x38>)
 8008f5e:	4909      	ldr	r1, [pc, #36]	@ (8008f84 <siprintf+0x3c>)
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	a902      	add	r1, sp, #8
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	f000 f992 	bl	8009294 <_svfiprintf_r>
 8008f70:	2200      	movs	r2, #0
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	b01c      	add	sp, #112	@ 0x70
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b003      	add	sp, #12
 8008f7e:	4770      	bx	lr
 8008f80:	20000be0 	.word	0x20000be0
 8008f84:	ffff0208 	.word	0xffff0208

08008f88 <memset>:
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4402      	add	r2, r0
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d100      	bne.n	8008f92 <memset+0xa>
 8008f90:	4770      	bx	lr
 8008f92:	f803 1b01 	strb.w	r1, [r3], #1
 8008f96:	e7f9      	b.n	8008f8c <memset+0x4>

08008f98 <__errno>:
 8008f98:	4b01      	ldr	r3, [pc, #4]	@ (8008fa0 <__errno+0x8>)
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000be0 	.word	0x20000be0

08008fa4 <__libc_init_array>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	4d0c      	ldr	r5, [pc, #48]	@ (8008fdc <__libc_init_array+0x38>)
 8008faa:	4c0d      	ldr	r4, [pc, #52]	@ (8008fe0 <__libc_init_array+0x3c>)
 8008fac:	1b64      	subs	r4, r4, r5
 8008fae:	10a4      	asrs	r4, r4, #2
 8008fb0:	42a6      	cmp	r6, r4
 8008fb2:	d109      	bne.n	8008fc8 <__libc_init_array+0x24>
 8008fb4:	f000 fc78 	bl	80098a8 <_init>
 8008fb8:	2600      	movs	r6, #0
 8008fba:	4d0a      	ldr	r5, [pc, #40]	@ (8008fe4 <__libc_init_array+0x40>)
 8008fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8008fe8 <__libc_init_array+0x44>)
 8008fbe:	1b64      	subs	r4, r4, r5
 8008fc0:	10a4      	asrs	r4, r4, #2
 8008fc2:	42a6      	cmp	r6, r4
 8008fc4:	d105      	bne.n	8008fd2 <__libc_init_array+0x2e>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fcc:	4798      	blx	r3
 8008fce:	3601      	adds	r6, #1
 8008fd0:	e7ee      	b.n	8008fb0 <__libc_init_array+0xc>
 8008fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd6:	4798      	blx	r3
 8008fd8:	3601      	adds	r6, #1
 8008fda:	e7f2      	b.n	8008fc2 <__libc_init_array+0x1e>
 8008fdc:	08009970 	.word	0x08009970
 8008fe0:	08009970 	.word	0x08009970
 8008fe4:	08009970 	.word	0x08009970
 8008fe8:	08009974 	.word	0x08009974

08008fec <__retarget_lock_acquire_recursive>:
 8008fec:	4770      	bx	lr

08008fee <__retarget_lock_release_recursive>:
 8008fee:	4770      	bx	lr

08008ff0 <_free_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	d040      	beq.n	800907a <_free_r+0x8a>
 8008ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffc:	1f0c      	subs	r4, r1, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	18e4      	addlt	r4, r4, r3
 8009004:	f000 f8de 	bl	80091c4 <__malloc_lock>
 8009008:	4a1c      	ldr	r2, [pc, #112]	@ (800907c <_free_r+0x8c>)
 800900a:	6813      	ldr	r3, [r2, #0]
 800900c:	b933      	cbnz	r3, 800901c <_free_r+0x2c>
 800900e:	6063      	str	r3, [r4, #4]
 8009010:	6014      	str	r4, [r2, #0]
 8009012:	4628      	mov	r0, r5
 8009014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009018:	f000 b8da 	b.w	80091d0 <__malloc_unlock>
 800901c:	42a3      	cmp	r3, r4
 800901e:	d908      	bls.n	8009032 <_free_r+0x42>
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	1821      	adds	r1, r4, r0
 8009024:	428b      	cmp	r3, r1
 8009026:	bf01      	itttt	eq
 8009028:	6819      	ldreq	r1, [r3, #0]
 800902a:	685b      	ldreq	r3, [r3, #4]
 800902c:	1809      	addeq	r1, r1, r0
 800902e:	6021      	streq	r1, [r4, #0]
 8009030:	e7ed      	b.n	800900e <_free_r+0x1e>
 8009032:	461a      	mov	r2, r3
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	b10b      	cbz	r3, 800903c <_free_r+0x4c>
 8009038:	42a3      	cmp	r3, r4
 800903a:	d9fa      	bls.n	8009032 <_free_r+0x42>
 800903c:	6811      	ldr	r1, [r2, #0]
 800903e:	1850      	adds	r0, r2, r1
 8009040:	42a0      	cmp	r0, r4
 8009042:	d10b      	bne.n	800905c <_free_r+0x6c>
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	4401      	add	r1, r0
 8009048:	1850      	adds	r0, r2, r1
 800904a:	4283      	cmp	r3, r0
 800904c:	6011      	str	r1, [r2, #0]
 800904e:	d1e0      	bne.n	8009012 <_free_r+0x22>
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	4408      	add	r0, r1
 8009056:	6010      	str	r0, [r2, #0]
 8009058:	6053      	str	r3, [r2, #4]
 800905a:	e7da      	b.n	8009012 <_free_r+0x22>
 800905c:	d902      	bls.n	8009064 <_free_r+0x74>
 800905e:	230c      	movs	r3, #12
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	e7d6      	b.n	8009012 <_free_r+0x22>
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	1821      	adds	r1, r4, r0
 8009068:	428b      	cmp	r3, r1
 800906a:	bf01      	itttt	eq
 800906c:	6819      	ldreq	r1, [r3, #0]
 800906e:	685b      	ldreq	r3, [r3, #4]
 8009070:	1809      	addeq	r1, r1, r0
 8009072:	6021      	streq	r1, [r4, #0]
 8009074:	6063      	str	r3, [r4, #4]
 8009076:	6054      	str	r4, [r2, #4]
 8009078:	e7cb      	b.n	8009012 <_free_r+0x22>
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20001fb0 	.word	0x20001fb0

08009080 <sbrk_aligned>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4e0f      	ldr	r6, [pc, #60]	@ (80090c0 <sbrk_aligned+0x40>)
 8009084:	460c      	mov	r4, r1
 8009086:	6831      	ldr	r1, [r6, #0]
 8009088:	4605      	mov	r5, r0
 800908a:	b911      	cbnz	r1, 8009092 <sbrk_aligned+0x12>
 800908c:	f000 fbaa 	bl	80097e4 <_sbrk_r>
 8009090:	6030      	str	r0, [r6, #0]
 8009092:	4621      	mov	r1, r4
 8009094:	4628      	mov	r0, r5
 8009096:	f000 fba5 	bl	80097e4 <_sbrk_r>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d103      	bne.n	80090a6 <sbrk_aligned+0x26>
 800909e:	f04f 34ff 	mov.w	r4, #4294967295
 80090a2:	4620      	mov	r0, r4
 80090a4:	bd70      	pop	{r4, r5, r6, pc}
 80090a6:	1cc4      	adds	r4, r0, #3
 80090a8:	f024 0403 	bic.w	r4, r4, #3
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d0f8      	beq.n	80090a2 <sbrk_aligned+0x22>
 80090b0:	1a21      	subs	r1, r4, r0
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 fb96 	bl	80097e4 <_sbrk_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d1f2      	bne.n	80090a2 <sbrk_aligned+0x22>
 80090bc:	e7ef      	b.n	800909e <sbrk_aligned+0x1e>
 80090be:	bf00      	nop
 80090c0:	20001fac 	.word	0x20001fac

080090c4 <_malloc_r>:
 80090c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	1ccd      	adds	r5, r1, #3
 80090ca:	f025 0503 	bic.w	r5, r5, #3
 80090ce:	3508      	adds	r5, #8
 80090d0:	2d0c      	cmp	r5, #12
 80090d2:	bf38      	it	cc
 80090d4:	250c      	movcc	r5, #12
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	4606      	mov	r6, r0
 80090da:	db01      	blt.n	80090e0 <_malloc_r+0x1c>
 80090dc:	42a9      	cmp	r1, r5
 80090de:	d904      	bls.n	80090ea <_malloc_r+0x26>
 80090e0:	230c      	movs	r3, #12
 80090e2:	6033      	str	r3, [r6, #0]
 80090e4:	2000      	movs	r0, #0
 80090e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091c0 <_malloc_r+0xfc>
 80090ee:	f000 f869 	bl	80091c4 <__malloc_lock>
 80090f2:	f8d8 3000 	ldr.w	r3, [r8]
 80090f6:	461c      	mov	r4, r3
 80090f8:	bb44      	cbnz	r4, 800914c <_malloc_r+0x88>
 80090fa:	4629      	mov	r1, r5
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff ffbf 	bl	8009080 <sbrk_aligned>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	4604      	mov	r4, r0
 8009106:	d158      	bne.n	80091ba <_malloc_r+0xf6>
 8009108:	f8d8 4000 	ldr.w	r4, [r8]
 800910c:	4627      	mov	r7, r4
 800910e:	2f00      	cmp	r7, #0
 8009110:	d143      	bne.n	800919a <_malloc_r+0xd6>
 8009112:	2c00      	cmp	r4, #0
 8009114:	d04b      	beq.n	80091ae <_malloc_r+0xea>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	4639      	mov	r1, r7
 800911a:	4630      	mov	r0, r6
 800911c:	eb04 0903 	add.w	r9, r4, r3
 8009120:	f000 fb60 	bl	80097e4 <_sbrk_r>
 8009124:	4581      	cmp	r9, r0
 8009126:	d142      	bne.n	80091ae <_malloc_r+0xea>
 8009128:	6821      	ldr	r1, [r4, #0]
 800912a:	4630      	mov	r0, r6
 800912c:	1a6d      	subs	r5, r5, r1
 800912e:	4629      	mov	r1, r5
 8009130:	f7ff ffa6 	bl	8009080 <sbrk_aligned>
 8009134:	3001      	adds	r0, #1
 8009136:	d03a      	beq.n	80091ae <_malloc_r+0xea>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	442b      	add	r3, r5
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	f8d8 3000 	ldr.w	r3, [r8]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	bb62      	cbnz	r2, 80091a0 <_malloc_r+0xdc>
 8009146:	f8c8 7000 	str.w	r7, [r8]
 800914a:	e00f      	b.n	800916c <_malloc_r+0xa8>
 800914c:	6822      	ldr	r2, [r4, #0]
 800914e:	1b52      	subs	r2, r2, r5
 8009150:	d420      	bmi.n	8009194 <_malloc_r+0xd0>
 8009152:	2a0b      	cmp	r2, #11
 8009154:	d917      	bls.n	8009186 <_malloc_r+0xc2>
 8009156:	1961      	adds	r1, r4, r5
 8009158:	42a3      	cmp	r3, r4
 800915a:	6025      	str	r5, [r4, #0]
 800915c:	bf18      	it	ne
 800915e:	6059      	strne	r1, [r3, #4]
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	bf08      	it	eq
 8009164:	f8c8 1000 	streq.w	r1, [r8]
 8009168:	5162      	str	r2, [r4, r5]
 800916a:	604b      	str	r3, [r1, #4]
 800916c:	4630      	mov	r0, r6
 800916e:	f000 f82f 	bl	80091d0 <__malloc_unlock>
 8009172:	f104 000b 	add.w	r0, r4, #11
 8009176:	1d23      	adds	r3, r4, #4
 8009178:	f020 0007 	bic.w	r0, r0, #7
 800917c:	1ac2      	subs	r2, r0, r3
 800917e:	bf1c      	itt	ne
 8009180:	1a1b      	subne	r3, r3, r0
 8009182:	50a3      	strne	r3, [r4, r2]
 8009184:	e7af      	b.n	80090e6 <_malloc_r+0x22>
 8009186:	6862      	ldr	r2, [r4, #4]
 8009188:	42a3      	cmp	r3, r4
 800918a:	bf0c      	ite	eq
 800918c:	f8c8 2000 	streq.w	r2, [r8]
 8009190:	605a      	strne	r2, [r3, #4]
 8009192:	e7eb      	b.n	800916c <_malloc_r+0xa8>
 8009194:	4623      	mov	r3, r4
 8009196:	6864      	ldr	r4, [r4, #4]
 8009198:	e7ae      	b.n	80090f8 <_malloc_r+0x34>
 800919a:	463c      	mov	r4, r7
 800919c:	687f      	ldr	r7, [r7, #4]
 800919e:	e7b6      	b.n	800910e <_malloc_r+0x4a>
 80091a0:	461a      	mov	r2, r3
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d1fb      	bne.n	80091a0 <_malloc_r+0xdc>
 80091a8:	2300      	movs	r3, #0
 80091aa:	6053      	str	r3, [r2, #4]
 80091ac:	e7de      	b.n	800916c <_malloc_r+0xa8>
 80091ae:	230c      	movs	r3, #12
 80091b0:	4630      	mov	r0, r6
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f000 f80c 	bl	80091d0 <__malloc_unlock>
 80091b8:	e794      	b.n	80090e4 <_malloc_r+0x20>
 80091ba:	6005      	str	r5, [r0, #0]
 80091bc:	e7d6      	b.n	800916c <_malloc_r+0xa8>
 80091be:	bf00      	nop
 80091c0:	20001fb0 	.word	0x20001fb0

080091c4 <__malloc_lock>:
 80091c4:	4801      	ldr	r0, [pc, #4]	@ (80091cc <__malloc_lock+0x8>)
 80091c6:	f7ff bf11 	b.w	8008fec <__retarget_lock_acquire_recursive>
 80091ca:	bf00      	nop
 80091cc:	20001fa8 	.word	0x20001fa8

080091d0 <__malloc_unlock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	@ (80091d8 <__malloc_unlock+0x8>)
 80091d2:	f7ff bf0c 	b.w	8008fee <__retarget_lock_release_recursive>
 80091d6:	bf00      	nop
 80091d8:	20001fa8 	.word	0x20001fa8

080091dc <__ssputs_r>:
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	461f      	mov	r7, r3
 80091e2:	688e      	ldr	r6, [r1, #8]
 80091e4:	4682      	mov	sl, r0
 80091e6:	42be      	cmp	r6, r7
 80091e8:	460c      	mov	r4, r1
 80091ea:	4690      	mov	r8, r2
 80091ec:	680b      	ldr	r3, [r1, #0]
 80091ee:	d82d      	bhi.n	800924c <__ssputs_r+0x70>
 80091f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091f8:	d026      	beq.n	8009248 <__ssputs_r+0x6c>
 80091fa:	6965      	ldr	r5, [r4, #20]
 80091fc:	6909      	ldr	r1, [r1, #16]
 80091fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009202:	eba3 0901 	sub.w	r9, r3, r1
 8009206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800920a:	1c7b      	adds	r3, r7, #1
 800920c:	444b      	add	r3, r9
 800920e:	106d      	asrs	r5, r5, #1
 8009210:	429d      	cmp	r5, r3
 8009212:	bf38      	it	cc
 8009214:	461d      	movcc	r5, r3
 8009216:	0553      	lsls	r3, r2, #21
 8009218:	d527      	bpl.n	800926a <__ssputs_r+0x8e>
 800921a:	4629      	mov	r1, r5
 800921c:	f7ff ff52 	bl	80090c4 <_malloc_r>
 8009220:	4606      	mov	r6, r0
 8009222:	b360      	cbz	r0, 800927e <__ssputs_r+0xa2>
 8009224:	464a      	mov	r2, r9
 8009226:	6921      	ldr	r1, [r4, #16]
 8009228:	f000 fafa 	bl	8009820 <memcpy>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	6126      	str	r6, [r4, #16]
 800923a:	444e      	add	r6, r9
 800923c:	6026      	str	r6, [r4, #0]
 800923e:	463e      	mov	r6, r7
 8009240:	6165      	str	r5, [r4, #20]
 8009242:	eba5 0509 	sub.w	r5, r5, r9
 8009246:	60a5      	str	r5, [r4, #8]
 8009248:	42be      	cmp	r6, r7
 800924a:	d900      	bls.n	800924e <__ssputs_r+0x72>
 800924c:	463e      	mov	r6, r7
 800924e:	4632      	mov	r2, r6
 8009250:	4641      	mov	r1, r8
 8009252:	6820      	ldr	r0, [r4, #0]
 8009254:	f000 faac 	bl	80097b0 <memmove>
 8009258:	2000      	movs	r0, #0
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	1b9b      	subs	r3, r3, r6
 800925e:	60a3      	str	r3, [r4, #8]
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	4433      	add	r3, r6
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926a:	462a      	mov	r2, r5
 800926c:	f000 fae6 	bl	800983c <_realloc_r>
 8009270:	4606      	mov	r6, r0
 8009272:	2800      	cmp	r0, #0
 8009274:	d1e0      	bne.n	8009238 <__ssputs_r+0x5c>
 8009276:	4650      	mov	r0, sl
 8009278:	6921      	ldr	r1, [r4, #16]
 800927a:	f7ff feb9 	bl	8008ff0 <_free_r>
 800927e:	230c      	movs	r3, #12
 8009280:	f8ca 3000 	str.w	r3, [sl]
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f04f 30ff 	mov.w	r0, #4294967295
 800928a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	e7e9      	b.n	8009266 <__ssputs_r+0x8a>
	...

08009294 <_svfiprintf_r>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	4698      	mov	r8, r3
 800929a:	898b      	ldrh	r3, [r1, #12]
 800929c:	4607      	mov	r7, r0
 800929e:	061b      	lsls	r3, r3, #24
 80092a0:	460d      	mov	r5, r1
 80092a2:	4614      	mov	r4, r2
 80092a4:	b09d      	sub	sp, #116	@ 0x74
 80092a6:	d510      	bpl.n	80092ca <_svfiprintf_r+0x36>
 80092a8:	690b      	ldr	r3, [r1, #16]
 80092aa:	b973      	cbnz	r3, 80092ca <_svfiprintf_r+0x36>
 80092ac:	2140      	movs	r1, #64	@ 0x40
 80092ae:	f7ff ff09 	bl	80090c4 <_malloc_r>
 80092b2:	6028      	str	r0, [r5, #0]
 80092b4:	6128      	str	r0, [r5, #16]
 80092b6:	b930      	cbnz	r0, 80092c6 <_svfiprintf_r+0x32>
 80092b8:	230c      	movs	r3, #12
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	b01d      	add	sp, #116	@ 0x74
 80092c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	2340      	movs	r3, #64	@ 0x40
 80092c8:	616b      	str	r3, [r5, #20]
 80092ca:	2300      	movs	r3, #0
 80092cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ce:	2320      	movs	r3, #32
 80092d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092d4:	2330      	movs	r3, #48	@ 0x30
 80092d6:	f04f 0901 	mov.w	r9, #1
 80092da:	f8cd 800c 	str.w	r8, [sp, #12]
 80092de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009478 <_svfiprintf_r+0x1e4>
 80092e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092e6:	4623      	mov	r3, r4
 80092e8:	469a      	mov	sl, r3
 80092ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ee:	b10a      	cbz	r2, 80092f4 <_svfiprintf_r+0x60>
 80092f0:	2a25      	cmp	r2, #37	@ 0x25
 80092f2:	d1f9      	bne.n	80092e8 <_svfiprintf_r+0x54>
 80092f4:	ebba 0b04 	subs.w	fp, sl, r4
 80092f8:	d00b      	beq.n	8009312 <_svfiprintf_r+0x7e>
 80092fa:	465b      	mov	r3, fp
 80092fc:	4622      	mov	r2, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff ff6b 	bl	80091dc <__ssputs_r>
 8009306:	3001      	adds	r0, #1
 8009308:	f000 80a7 	beq.w	800945a <_svfiprintf_r+0x1c6>
 800930c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800930e:	445a      	add	r2, fp
 8009310:	9209      	str	r2, [sp, #36]	@ 0x24
 8009312:	f89a 3000 	ldrb.w	r3, [sl]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 809f 	beq.w	800945a <_svfiprintf_r+0x1c6>
 800931c:	2300      	movs	r3, #0
 800931e:	f04f 32ff 	mov.w	r2, #4294967295
 8009322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009326:	f10a 0a01 	add.w	sl, sl, #1
 800932a:	9304      	str	r3, [sp, #16]
 800932c:	9307      	str	r3, [sp, #28]
 800932e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009332:	931a      	str	r3, [sp, #104]	@ 0x68
 8009334:	4654      	mov	r4, sl
 8009336:	2205      	movs	r2, #5
 8009338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933c:	484e      	ldr	r0, [pc, #312]	@ (8009478 <_svfiprintf_r+0x1e4>)
 800933e:	f000 fa61 	bl	8009804 <memchr>
 8009342:	9a04      	ldr	r2, [sp, #16]
 8009344:	b9d8      	cbnz	r0, 800937e <_svfiprintf_r+0xea>
 8009346:	06d0      	lsls	r0, r2, #27
 8009348:	bf44      	itt	mi
 800934a:	2320      	movmi	r3, #32
 800934c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009350:	0711      	lsls	r1, r2, #28
 8009352:	bf44      	itt	mi
 8009354:	232b      	movmi	r3, #43	@ 0x2b
 8009356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800935a:	f89a 3000 	ldrb.w	r3, [sl]
 800935e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009360:	d015      	beq.n	800938e <_svfiprintf_r+0xfa>
 8009362:	4654      	mov	r4, sl
 8009364:	2000      	movs	r0, #0
 8009366:	f04f 0c0a 	mov.w	ip, #10
 800936a:	9a07      	ldr	r2, [sp, #28]
 800936c:	4621      	mov	r1, r4
 800936e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009372:	3b30      	subs	r3, #48	@ 0x30
 8009374:	2b09      	cmp	r3, #9
 8009376:	d94b      	bls.n	8009410 <_svfiprintf_r+0x17c>
 8009378:	b1b0      	cbz	r0, 80093a8 <_svfiprintf_r+0x114>
 800937a:	9207      	str	r2, [sp, #28]
 800937c:	e014      	b.n	80093a8 <_svfiprintf_r+0x114>
 800937e:	eba0 0308 	sub.w	r3, r0, r8
 8009382:	fa09 f303 	lsl.w	r3, r9, r3
 8009386:	4313      	orrs	r3, r2
 8009388:	46a2      	mov	sl, r4
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	e7d2      	b.n	8009334 <_svfiprintf_r+0xa0>
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	1d19      	adds	r1, r3, #4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	9103      	str	r1, [sp, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfbb      	ittet	lt
 800939a:	425b      	neglt	r3, r3
 800939c:	f042 0202 	orrlt.w	r2, r2, #2
 80093a0:	9307      	strge	r3, [sp, #28]
 80093a2:	9307      	strlt	r3, [sp, #28]
 80093a4:	bfb8      	it	lt
 80093a6:	9204      	strlt	r2, [sp, #16]
 80093a8:	7823      	ldrb	r3, [r4, #0]
 80093aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ac:	d10a      	bne.n	80093c4 <_svfiprintf_r+0x130>
 80093ae:	7863      	ldrb	r3, [r4, #1]
 80093b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093b2:	d132      	bne.n	800941a <_svfiprintf_r+0x186>
 80093b4:	9b03      	ldr	r3, [sp, #12]
 80093b6:	3402      	adds	r4, #2
 80093b8:	1d1a      	adds	r2, r3, #4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	9203      	str	r2, [sp, #12]
 80093be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800947c <_svfiprintf_r+0x1e8>
 80093c8:	2203      	movs	r2, #3
 80093ca:	4650      	mov	r0, sl
 80093cc:	7821      	ldrb	r1, [r4, #0]
 80093ce:	f000 fa19 	bl	8009804 <memchr>
 80093d2:	b138      	cbz	r0, 80093e4 <_svfiprintf_r+0x150>
 80093d4:	2240      	movs	r2, #64	@ 0x40
 80093d6:	9b04      	ldr	r3, [sp, #16]
 80093d8:	eba0 000a 	sub.w	r0, r0, sl
 80093dc:	4082      	lsls	r2, r0
 80093de:	4313      	orrs	r3, r2
 80093e0:	3401      	adds	r4, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e8:	2206      	movs	r2, #6
 80093ea:	4825      	ldr	r0, [pc, #148]	@ (8009480 <_svfiprintf_r+0x1ec>)
 80093ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093f0:	f000 fa08 	bl	8009804 <memchr>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d036      	beq.n	8009466 <_svfiprintf_r+0x1d2>
 80093f8:	4b22      	ldr	r3, [pc, #136]	@ (8009484 <_svfiprintf_r+0x1f0>)
 80093fa:	bb1b      	cbnz	r3, 8009444 <_svfiprintf_r+0x1b0>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	3307      	adds	r3, #7
 8009400:	f023 0307 	bic.w	r3, r3, #7
 8009404:	3308      	adds	r3, #8
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800940a:	4433      	add	r3, r6
 800940c:	9309      	str	r3, [sp, #36]	@ 0x24
 800940e:	e76a      	b.n	80092e6 <_svfiprintf_r+0x52>
 8009410:	460c      	mov	r4, r1
 8009412:	2001      	movs	r0, #1
 8009414:	fb0c 3202 	mla	r2, ip, r2, r3
 8009418:	e7a8      	b.n	800936c <_svfiprintf_r+0xd8>
 800941a:	2300      	movs	r3, #0
 800941c:	f04f 0c0a 	mov.w	ip, #10
 8009420:	4619      	mov	r1, r3
 8009422:	3401      	adds	r4, #1
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	4620      	mov	r0, r4
 8009428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800942c:	3a30      	subs	r2, #48	@ 0x30
 800942e:	2a09      	cmp	r2, #9
 8009430:	d903      	bls.n	800943a <_svfiprintf_r+0x1a6>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0c6      	beq.n	80093c4 <_svfiprintf_r+0x130>
 8009436:	9105      	str	r1, [sp, #20]
 8009438:	e7c4      	b.n	80093c4 <_svfiprintf_r+0x130>
 800943a:	4604      	mov	r4, r0
 800943c:	2301      	movs	r3, #1
 800943e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009442:	e7f0      	b.n	8009426 <_svfiprintf_r+0x192>
 8009444:	ab03      	add	r3, sp, #12
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	462a      	mov	r2, r5
 800944a:	4638      	mov	r0, r7
 800944c:	4b0e      	ldr	r3, [pc, #56]	@ (8009488 <_svfiprintf_r+0x1f4>)
 800944e:	a904      	add	r1, sp, #16
 8009450:	f3af 8000 	nop.w
 8009454:	1c42      	adds	r2, r0, #1
 8009456:	4606      	mov	r6, r0
 8009458:	d1d6      	bne.n	8009408 <_svfiprintf_r+0x174>
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	065b      	lsls	r3, r3, #25
 800945e:	f53f af2d 	bmi.w	80092bc <_svfiprintf_r+0x28>
 8009462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009464:	e72c      	b.n	80092c0 <_svfiprintf_r+0x2c>
 8009466:	ab03      	add	r3, sp, #12
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	462a      	mov	r2, r5
 800946c:	4638      	mov	r0, r7
 800946e:	4b06      	ldr	r3, [pc, #24]	@ (8009488 <_svfiprintf_r+0x1f4>)
 8009470:	a904      	add	r1, sp, #16
 8009472:	f000 f87d 	bl	8009570 <_printf_i>
 8009476:	e7ed      	b.n	8009454 <_svfiprintf_r+0x1c0>
 8009478:	0800993a 	.word	0x0800993a
 800947c:	08009940 	.word	0x08009940
 8009480:	08009944 	.word	0x08009944
 8009484:	00000000 	.word	0x00000000
 8009488:	080091dd 	.word	0x080091dd

0800948c <_printf_common>:
 800948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009490:	4616      	mov	r6, r2
 8009492:	4698      	mov	r8, r3
 8009494:	688a      	ldr	r2, [r1, #8]
 8009496:	690b      	ldr	r3, [r1, #16]
 8009498:	4607      	mov	r7, r0
 800949a:	4293      	cmp	r3, r2
 800949c:	bfb8      	it	lt
 800949e:	4613      	movlt	r3, r2
 80094a0:	6033      	str	r3, [r6, #0]
 80094a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a6:	460c      	mov	r4, r1
 80094a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094ac:	b10a      	cbz	r2, 80094b2 <_printf_common+0x26>
 80094ae:	3301      	adds	r3, #1
 80094b0:	6033      	str	r3, [r6, #0]
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	0699      	lsls	r1, r3, #26
 80094b6:	bf42      	ittt	mi
 80094b8:	6833      	ldrmi	r3, [r6, #0]
 80094ba:	3302      	addmi	r3, #2
 80094bc:	6033      	strmi	r3, [r6, #0]
 80094be:	6825      	ldr	r5, [r4, #0]
 80094c0:	f015 0506 	ands.w	r5, r5, #6
 80094c4:	d106      	bne.n	80094d4 <_printf_common+0x48>
 80094c6:	f104 0a19 	add.w	sl, r4, #25
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	6832      	ldr	r2, [r6, #0]
 80094ce:	1a9b      	subs	r3, r3, r2
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dc2b      	bgt.n	800952c <_printf_common+0xa0>
 80094d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d8:	6822      	ldr	r2, [r4, #0]
 80094da:	3b00      	subs	r3, #0
 80094dc:	bf18      	it	ne
 80094de:	2301      	movne	r3, #1
 80094e0:	0692      	lsls	r2, r2, #26
 80094e2:	d430      	bmi.n	8009546 <_printf_common+0xba>
 80094e4:	4641      	mov	r1, r8
 80094e6:	4638      	mov	r0, r7
 80094e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094ec:	47c8      	blx	r9
 80094ee:	3001      	adds	r0, #1
 80094f0:	d023      	beq.n	800953a <_printf_common+0xae>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	6922      	ldr	r2, [r4, #16]
 80094f6:	f003 0306 	and.w	r3, r3, #6
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	bf14      	ite	ne
 80094fe:	2500      	movne	r5, #0
 8009500:	6833      	ldreq	r3, [r6, #0]
 8009502:	f04f 0600 	mov.w	r6, #0
 8009506:	bf08      	it	eq
 8009508:	68e5      	ldreq	r5, [r4, #12]
 800950a:	f104 041a 	add.w	r4, r4, #26
 800950e:	bf08      	it	eq
 8009510:	1aed      	subeq	r5, r5, r3
 8009512:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009516:	bf08      	it	eq
 8009518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800951c:	4293      	cmp	r3, r2
 800951e:	bfc4      	itt	gt
 8009520:	1a9b      	subgt	r3, r3, r2
 8009522:	18ed      	addgt	r5, r5, r3
 8009524:	42b5      	cmp	r5, r6
 8009526:	d11a      	bne.n	800955e <_printf_common+0xd2>
 8009528:	2000      	movs	r0, #0
 800952a:	e008      	b.n	800953e <_printf_common+0xb2>
 800952c:	2301      	movs	r3, #1
 800952e:	4652      	mov	r2, sl
 8009530:	4641      	mov	r1, r8
 8009532:	4638      	mov	r0, r7
 8009534:	47c8      	blx	r9
 8009536:	3001      	adds	r0, #1
 8009538:	d103      	bne.n	8009542 <_printf_common+0xb6>
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009542:	3501      	adds	r5, #1
 8009544:	e7c1      	b.n	80094ca <_printf_common+0x3e>
 8009546:	2030      	movs	r0, #48	@ 0x30
 8009548:	18e1      	adds	r1, r4, r3
 800954a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009554:	4422      	add	r2, r4
 8009556:	3302      	adds	r3, #2
 8009558:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800955c:	e7c2      	b.n	80094e4 <_printf_common+0x58>
 800955e:	2301      	movs	r3, #1
 8009560:	4622      	mov	r2, r4
 8009562:	4641      	mov	r1, r8
 8009564:	4638      	mov	r0, r7
 8009566:	47c8      	blx	r9
 8009568:	3001      	adds	r0, #1
 800956a:	d0e6      	beq.n	800953a <_printf_common+0xae>
 800956c:	3601      	adds	r6, #1
 800956e:	e7d9      	b.n	8009524 <_printf_common+0x98>

08009570 <_printf_i>:
 8009570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	7e0f      	ldrb	r7, [r1, #24]
 8009576:	4691      	mov	r9, r2
 8009578:	2f78      	cmp	r7, #120	@ 0x78
 800957a:	4680      	mov	r8, r0
 800957c:	460c      	mov	r4, r1
 800957e:	469a      	mov	sl, r3
 8009580:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009586:	d807      	bhi.n	8009598 <_printf_i+0x28>
 8009588:	2f62      	cmp	r7, #98	@ 0x62
 800958a:	d80a      	bhi.n	80095a2 <_printf_i+0x32>
 800958c:	2f00      	cmp	r7, #0
 800958e:	f000 80d3 	beq.w	8009738 <_printf_i+0x1c8>
 8009592:	2f58      	cmp	r7, #88	@ 0x58
 8009594:	f000 80ba 	beq.w	800970c <_printf_i+0x19c>
 8009598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800959c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095a0:	e03a      	b.n	8009618 <_printf_i+0xa8>
 80095a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095a6:	2b15      	cmp	r3, #21
 80095a8:	d8f6      	bhi.n	8009598 <_printf_i+0x28>
 80095aa:	a101      	add	r1, pc, #4	@ (adr r1, 80095b0 <_printf_i+0x40>)
 80095ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095b0:	08009609 	.word	0x08009609
 80095b4:	0800961d 	.word	0x0800961d
 80095b8:	08009599 	.word	0x08009599
 80095bc:	08009599 	.word	0x08009599
 80095c0:	08009599 	.word	0x08009599
 80095c4:	08009599 	.word	0x08009599
 80095c8:	0800961d 	.word	0x0800961d
 80095cc:	08009599 	.word	0x08009599
 80095d0:	08009599 	.word	0x08009599
 80095d4:	08009599 	.word	0x08009599
 80095d8:	08009599 	.word	0x08009599
 80095dc:	0800971f 	.word	0x0800971f
 80095e0:	08009647 	.word	0x08009647
 80095e4:	080096d9 	.word	0x080096d9
 80095e8:	08009599 	.word	0x08009599
 80095ec:	08009599 	.word	0x08009599
 80095f0:	08009741 	.word	0x08009741
 80095f4:	08009599 	.word	0x08009599
 80095f8:	08009647 	.word	0x08009647
 80095fc:	08009599 	.word	0x08009599
 8009600:	08009599 	.word	0x08009599
 8009604:	080096e1 	.word	0x080096e1
 8009608:	6833      	ldr	r3, [r6, #0]
 800960a:	1d1a      	adds	r2, r3, #4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6032      	str	r2, [r6, #0]
 8009610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009618:	2301      	movs	r3, #1
 800961a:	e09e      	b.n	800975a <_printf_i+0x1ea>
 800961c:	6833      	ldr	r3, [r6, #0]
 800961e:	6820      	ldr	r0, [r4, #0]
 8009620:	1d19      	adds	r1, r3, #4
 8009622:	6031      	str	r1, [r6, #0]
 8009624:	0606      	lsls	r6, r0, #24
 8009626:	d501      	bpl.n	800962c <_printf_i+0xbc>
 8009628:	681d      	ldr	r5, [r3, #0]
 800962a:	e003      	b.n	8009634 <_printf_i+0xc4>
 800962c:	0645      	lsls	r5, r0, #25
 800962e:	d5fb      	bpl.n	8009628 <_printf_i+0xb8>
 8009630:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009634:	2d00      	cmp	r5, #0
 8009636:	da03      	bge.n	8009640 <_printf_i+0xd0>
 8009638:	232d      	movs	r3, #45	@ 0x2d
 800963a:	426d      	negs	r5, r5
 800963c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009640:	230a      	movs	r3, #10
 8009642:	4859      	ldr	r0, [pc, #356]	@ (80097a8 <_printf_i+0x238>)
 8009644:	e011      	b.n	800966a <_printf_i+0xfa>
 8009646:	6821      	ldr	r1, [r4, #0]
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	0608      	lsls	r0, r1, #24
 800964c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009650:	d402      	bmi.n	8009658 <_printf_i+0xe8>
 8009652:	0649      	lsls	r1, r1, #25
 8009654:	bf48      	it	mi
 8009656:	b2ad      	uxthmi	r5, r5
 8009658:	2f6f      	cmp	r7, #111	@ 0x6f
 800965a:	6033      	str	r3, [r6, #0]
 800965c:	bf14      	ite	ne
 800965e:	230a      	movne	r3, #10
 8009660:	2308      	moveq	r3, #8
 8009662:	4851      	ldr	r0, [pc, #324]	@ (80097a8 <_printf_i+0x238>)
 8009664:	2100      	movs	r1, #0
 8009666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800966a:	6866      	ldr	r6, [r4, #4]
 800966c:	2e00      	cmp	r6, #0
 800966e:	bfa8      	it	ge
 8009670:	6821      	ldrge	r1, [r4, #0]
 8009672:	60a6      	str	r6, [r4, #8]
 8009674:	bfa4      	itt	ge
 8009676:	f021 0104 	bicge.w	r1, r1, #4
 800967a:	6021      	strge	r1, [r4, #0]
 800967c:	b90d      	cbnz	r5, 8009682 <_printf_i+0x112>
 800967e:	2e00      	cmp	r6, #0
 8009680:	d04b      	beq.n	800971a <_printf_i+0x1aa>
 8009682:	4616      	mov	r6, r2
 8009684:	fbb5 f1f3 	udiv	r1, r5, r3
 8009688:	fb03 5711 	mls	r7, r3, r1, r5
 800968c:	5dc7      	ldrb	r7, [r0, r7]
 800968e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009692:	462f      	mov	r7, r5
 8009694:	42bb      	cmp	r3, r7
 8009696:	460d      	mov	r5, r1
 8009698:	d9f4      	bls.n	8009684 <_printf_i+0x114>
 800969a:	2b08      	cmp	r3, #8
 800969c:	d10b      	bne.n	80096b6 <_printf_i+0x146>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	07df      	lsls	r7, r3, #31
 80096a2:	d508      	bpl.n	80096b6 <_printf_i+0x146>
 80096a4:	6923      	ldr	r3, [r4, #16]
 80096a6:	6861      	ldr	r1, [r4, #4]
 80096a8:	4299      	cmp	r1, r3
 80096aa:	bfde      	ittt	le
 80096ac:	2330      	movle	r3, #48	@ 0x30
 80096ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096b6:	1b92      	subs	r2, r2, r6
 80096b8:	6122      	str	r2, [r4, #16]
 80096ba:	464b      	mov	r3, r9
 80096bc:	4621      	mov	r1, r4
 80096be:	4640      	mov	r0, r8
 80096c0:	f8cd a000 	str.w	sl, [sp]
 80096c4:	aa03      	add	r2, sp, #12
 80096c6:	f7ff fee1 	bl	800948c <_printf_common>
 80096ca:	3001      	adds	r0, #1
 80096cc:	d14a      	bne.n	8009764 <_printf_i+0x1f4>
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	b004      	add	sp, #16
 80096d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	f043 0320 	orr.w	r3, r3, #32
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	2778      	movs	r7, #120	@ 0x78
 80096e2:	4832      	ldr	r0, [pc, #200]	@ (80097ac <_printf_i+0x23c>)
 80096e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	6831      	ldr	r1, [r6, #0]
 80096ec:	061f      	lsls	r7, r3, #24
 80096ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80096f2:	d402      	bmi.n	80096fa <_printf_i+0x18a>
 80096f4:	065f      	lsls	r7, r3, #25
 80096f6:	bf48      	it	mi
 80096f8:	b2ad      	uxthmi	r5, r5
 80096fa:	6031      	str	r1, [r6, #0]
 80096fc:	07d9      	lsls	r1, r3, #31
 80096fe:	bf44      	itt	mi
 8009700:	f043 0320 	orrmi.w	r3, r3, #32
 8009704:	6023      	strmi	r3, [r4, #0]
 8009706:	b11d      	cbz	r5, 8009710 <_printf_i+0x1a0>
 8009708:	2310      	movs	r3, #16
 800970a:	e7ab      	b.n	8009664 <_printf_i+0xf4>
 800970c:	4826      	ldr	r0, [pc, #152]	@ (80097a8 <_printf_i+0x238>)
 800970e:	e7e9      	b.n	80096e4 <_printf_i+0x174>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	f023 0320 	bic.w	r3, r3, #32
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	e7f6      	b.n	8009708 <_printf_i+0x198>
 800971a:	4616      	mov	r6, r2
 800971c:	e7bd      	b.n	800969a <_printf_i+0x12a>
 800971e:	6833      	ldr	r3, [r6, #0]
 8009720:	6825      	ldr	r5, [r4, #0]
 8009722:	1d18      	adds	r0, r3, #4
 8009724:	6961      	ldr	r1, [r4, #20]
 8009726:	6030      	str	r0, [r6, #0]
 8009728:	062e      	lsls	r6, r5, #24
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	d501      	bpl.n	8009732 <_printf_i+0x1c2>
 800972e:	6019      	str	r1, [r3, #0]
 8009730:	e002      	b.n	8009738 <_printf_i+0x1c8>
 8009732:	0668      	lsls	r0, r5, #25
 8009734:	d5fb      	bpl.n	800972e <_printf_i+0x1be>
 8009736:	8019      	strh	r1, [r3, #0]
 8009738:	2300      	movs	r3, #0
 800973a:	4616      	mov	r6, r2
 800973c:	6123      	str	r3, [r4, #16]
 800973e:	e7bc      	b.n	80096ba <_printf_i+0x14a>
 8009740:	6833      	ldr	r3, [r6, #0]
 8009742:	2100      	movs	r1, #0
 8009744:	1d1a      	adds	r2, r3, #4
 8009746:	6032      	str	r2, [r6, #0]
 8009748:	681e      	ldr	r6, [r3, #0]
 800974a:	6862      	ldr	r2, [r4, #4]
 800974c:	4630      	mov	r0, r6
 800974e:	f000 f859 	bl	8009804 <memchr>
 8009752:	b108      	cbz	r0, 8009758 <_printf_i+0x1e8>
 8009754:	1b80      	subs	r0, r0, r6
 8009756:	6060      	str	r0, [r4, #4]
 8009758:	6863      	ldr	r3, [r4, #4]
 800975a:	6123      	str	r3, [r4, #16]
 800975c:	2300      	movs	r3, #0
 800975e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009762:	e7aa      	b.n	80096ba <_printf_i+0x14a>
 8009764:	4632      	mov	r2, r6
 8009766:	4649      	mov	r1, r9
 8009768:	4640      	mov	r0, r8
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	47d0      	blx	sl
 800976e:	3001      	adds	r0, #1
 8009770:	d0ad      	beq.n	80096ce <_printf_i+0x15e>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	079b      	lsls	r3, r3, #30
 8009776:	d413      	bmi.n	80097a0 <_printf_i+0x230>
 8009778:	68e0      	ldr	r0, [r4, #12]
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	4298      	cmp	r0, r3
 800977e:	bfb8      	it	lt
 8009780:	4618      	movlt	r0, r3
 8009782:	e7a6      	b.n	80096d2 <_printf_i+0x162>
 8009784:	2301      	movs	r3, #1
 8009786:	4632      	mov	r2, r6
 8009788:	4649      	mov	r1, r9
 800978a:	4640      	mov	r0, r8
 800978c:	47d0      	blx	sl
 800978e:	3001      	adds	r0, #1
 8009790:	d09d      	beq.n	80096ce <_printf_i+0x15e>
 8009792:	3501      	adds	r5, #1
 8009794:	68e3      	ldr	r3, [r4, #12]
 8009796:	9903      	ldr	r1, [sp, #12]
 8009798:	1a5b      	subs	r3, r3, r1
 800979a:	42ab      	cmp	r3, r5
 800979c:	dcf2      	bgt.n	8009784 <_printf_i+0x214>
 800979e:	e7eb      	b.n	8009778 <_printf_i+0x208>
 80097a0:	2500      	movs	r5, #0
 80097a2:	f104 0619 	add.w	r6, r4, #25
 80097a6:	e7f5      	b.n	8009794 <_printf_i+0x224>
 80097a8:	0800994b 	.word	0x0800994b
 80097ac:	0800995c 	.word	0x0800995c

080097b0 <memmove>:
 80097b0:	4288      	cmp	r0, r1
 80097b2:	b510      	push	{r4, lr}
 80097b4:	eb01 0402 	add.w	r4, r1, r2
 80097b8:	d902      	bls.n	80097c0 <memmove+0x10>
 80097ba:	4284      	cmp	r4, r0
 80097bc:	4623      	mov	r3, r4
 80097be:	d807      	bhi.n	80097d0 <memmove+0x20>
 80097c0:	1e43      	subs	r3, r0, #1
 80097c2:	42a1      	cmp	r1, r4
 80097c4:	d008      	beq.n	80097d8 <memmove+0x28>
 80097c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ce:	e7f8      	b.n	80097c2 <memmove+0x12>
 80097d0:	4601      	mov	r1, r0
 80097d2:	4402      	add	r2, r0
 80097d4:	428a      	cmp	r2, r1
 80097d6:	d100      	bne.n	80097da <memmove+0x2a>
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097e2:	e7f7      	b.n	80097d4 <memmove+0x24>

080097e4 <_sbrk_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	2300      	movs	r3, #0
 80097e8:	4d05      	ldr	r5, [pc, #20]	@ (8009800 <_sbrk_r+0x1c>)
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	f7f7 f8f2 	bl	80009d8 <_sbrk>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_sbrk_r+0x1a>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_sbrk_r+0x1a>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20001fa4 	.word	0x20001fa4

08009804 <memchr>:
 8009804:	4603      	mov	r3, r0
 8009806:	b510      	push	{r4, lr}
 8009808:	b2c9      	uxtb	r1, r1
 800980a:	4402      	add	r2, r0
 800980c:	4293      	cmp	r3, r2
 800980e:	4618      	mov	r0, r3
 8009810:	d101      	bne.n	8009816 <memchr+0x12>
 8009812:	2000      	movs	r0, #0
 8009814:	e003      	b.n	800981e <memchr+0x1a>
 8009816:	7804      	ldrb	r4, [r0, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	428c      	cmp	r4, r1
 800981c:	d1f6      	bne.n	800980c <memchr+0x8>
 800981e:	bd10      	pop	{r4, pc}

08009820 <memcpy>:
 8009820:	440a      	add	r2, r1
 8009822:	4291      	cmp	r1, r2
 8009824:	f100 33ff 	add.w	r3, r0, #4294967295
 8009828:	d100      	bne.n	800982c <memcpy+0xc>
 800982a:	4770      	bx	lr
 800982c:	b510      	push	{r4, lr}
 800982e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009832:	4291      	cmp	r1, r2
 8009834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009838:	d1f9      	bne.n	800982e <memcpy+0xe>
 800983a:	bd10      	pop	{r4, pc}

0800983c <_realloc_r>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	4680      	mov	r8, r0
 8009842:	4615      	mov	r5, r2
 8009844:	460c      	mov	r4, r1
 8009846:	b921      	cbnz	r1, 8009852 <_realloc_r+0x16>
 8009848:	4611      	mov	r1, r2
 800984a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800984e:	f7ff bc39 	b.w	80090c4 <_malloc_r>
 8009852:	b92a      	cbnz	r2, 8009860 <_realloc_r+0x24>
 8009854:	f7ff fbcc 	bl	8008ff0 <_free_r>
 8009858:	2400      	movs	r4, #0
 800985a:	4620      	mov	r0, r4
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	f000 f81a 	bl	8009898 <_malloc_usable_size_r>
 8009864:	4285      	cmp	r5, r0
 8009866:	4606      	mov	r6, r0
 8009868:	d802      	bhi.n	8009870 <_realloc_r+0x34>
 800986a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800986e:	d8f4      	bhi.n	800985a <_realloc_r+0x1e>
 8009870:	4629      	mov	r1, r5
 8009872:	4640      	mov	r0, r8
 8009874:	f7ff fc26 	bl	80090c4 <_malloc_r>
 8009878:	4607      	mov	r7, r0
 800987a:	2800      	cmp	r0, #0
 800987c:	d0ec      	beq.n	8009858 <_realloc_r+0x1c>
 800987e:	42b5      	cmp	r5, r6
 8009880:	462a      	mov	r2, r5
 8009882:	4621      	mov	r1, r4
 8009884:	bf28      	it	cs
 8009886:	4632      	movcs	r2, r6
 8009888:	f7ff ffca 	bl	8009820 <memcpy>
 800988c:	4621      	mov	r1, r4
 800988e:	4640      	mov	r0, r8
 8009890:	f7ff fbae 	bl	8008ff0 <_free_r>
 8009894:	463c      	mov	r4, r7
 8009896:	e7e0      	b.n	800985a <_realloc_r+0x1e>

08009898 <_malloc_usable_size_r>:
 8009898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989c:	1f18      	subs	r0, r3, #4
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfbc      	itt	lt
 80098a2:	580b      	ldrlt	r3, [r1, r0]
 80098a4:	18c0      	addlt	r0, r0, r3
 80098a6:	4770      	bx	lr

080098a8 <_init>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr

080098b4 <_fini>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	bf00      	nop
 80098b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ba:	bc08      	pop	{r3}
 80098bc:	469e      	mov	lr, r3
 80098be:	4770      	bx	lr
