
mpr121.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800bae8  0800bae8  0000cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb9c  0800bb9c  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb9c  0800bb9c  0000d1d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb9c  0800bb9c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb9c  0800bb9c  0000cb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bba0  0800bba0  0000cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bba4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  200001d8  0800bd7c  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  0800bd7c  0000d638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d2d  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e2a  00000000  00000000  00022f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00026d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  00027f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c105  00000000  00000000  00028cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a29c  00000000  00000000  00044dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd62  00000000  00000000  0005f06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eadcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  000eae10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000efe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bad0 	.word	0x0800bad0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800bad0 	.word	0x0800bad0

0800014c <OLED_WriteCommand>:
#define OLED_CHN_CHAR_WIDTH 3



void OLED_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 800015e:	f107 020c 	add.w	r2, r7, #12
 8000162:	f04f 33ff 	mov.w	r3, #4294967295
 8000166:	9300      	str	r3, [sp, #0]
 8000168:	2302      	movs	r3, #2
 800016a:	2178      	movs	r1, #120	@ 0x78
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <OLED_WriteCommand+0x30>)
 800016e:	f001 fcbb 	bl	8001ae8 <HAL_I2C_Master_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	200001f8 	.word	0x200001f8

08000180 <OLED_WriteData>:

void OLED_WriteData(uint8_t dat)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x40;
 800018a:	2340      	movs	r3, #64	@ 0x40
 800018c:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=dat;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 8000192:	f107 020c 	add.w	r2, r7, #12
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	2302      	movs	r3, #2
 800019e:	2178      	movs	r1, #120	@ 0x78
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <OLED_WriteData+0x30>)
 80001a2:	f001 fca1 	bl	8001ae8 <HAL_I2C_Master_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200001f8 	.word	0x200001f8

080001b4 <OLED_SetCursor>:

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	460a      	mov	r2, r1
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffbd 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80001d2:	79bb      	ldrb	r3, [r7, #6]
 80001d4:	091b      	lsrs	r3, r3, #4
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	f043 0310 	orr.w	r3, r3, #16
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	f003 030f 	and.w	r3, r3, #15
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffad 	bl	800014c <OLED_WriteCommand>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <OLED_init>:

void OLED_init(void)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	@ 0x64
 8000200:	f000 fdd6 	bl	8000db0 <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 8000204:	20ae      	movs	r0, #174	@ 0xae
 8000206:	f7ff ffa1 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 800020a:	20d5      	movs	r0, #213	@ 0xd5
 800020c:	f7ff ff9e 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 8000210:	2080      	movs	r0, #128	@ 0x80
 8000212:	f7ff ff9b 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 8000216:	20a8      	movs	r0, #168	@ 0xa8
 8000218:	f7ff ff98 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 800021c:	203f      	movs	r0, #63	@ 0x3f
 800021e:	f7ff ff95 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 8000222:	20d3      	movs	r0, #211	@ 0xd3
 8000224:	f7ff ff92 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 8000228:	2000      	movs	r0, #0
 800022a:	f7ff ff8f 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 800022e:	2040      	movs	r0, #64	@ 0x40
 8000230:	f7ff ff8c 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000234:	20a1      	movs	r0, #161	@ 0xa1
 8000236:	f7ff ff89 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800023a:	20c8      	movs	r0, #200	@ 0xc8
 800023c:	f7ff ff86 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000240:	20da      	movs	r0, #218	@ 0xda
 8000242:	f7ff ff83 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000246:	2012      	movs	r0, #18
 8000248:	f7ff ff80 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 800024c:	2081      	movs	r0, #129	@ 0x81
 800024e:	f7ff ff7d 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8000252:	20cf      	movs	r0, #207	@ 0xcf
 8000254:	f7ff ff7a 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8000258:	20d9      	movs	r0, #217	@ 0xd9
 800025a:	f7ff ff77 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800025e:	20f1      	movs	r0, #241	@ 0xf1
 8000260:	f7ff ff74 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000264:	20db      	movs	r0, #219	@ 0xdb
 8000266:	f7ff ff71 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800026a:	2030      	movs	r0, #48	@ 0x30
 800026c:	f7ff ff6e 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000270:	20a4      	movs	r0, #164	@ 0xa4
 8000272:	f7ff ff6b 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8000276:	20a6      	movs	r0, #166	@ 0xa6
 8000278:	f7ff ff68 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800027c:	208d      	movs	r0, #141	@ 0x8d
 800027e:	f7ff ff65 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000282:	2014      	movs	r0, #20
 8000284:	f7ff ff62 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000288:	20af      	movs	r0, #175	@ 0xaf
 800028a:	f7ff ff5f 	bl	800014c <OLED_WriteCommand>
	OLED_chear();
 800028e:	f000 f802 	bl	8000296 <OLED_chear>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}

08000296 <OLED_chear>:

void OLED_chear(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e014      	b.n	80002cc <OLED_chear+0x36>
	{
		OLED_SetCursor(i, 0);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff83 	bl	80001b4 <OLED_SetCursor>
		for (int j = 0; j < 128; ++j)
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	e005      	b.n	80002c0 <OLED_chear+0x2a>
		{
			OLED_WriteData(0x00);
 80002b4:	2000      	movs	r0, #0
 80002b6:	f7ff ff63 	bl	8000180 <OLED_WriteData>
		for (int j = 0; j < 128; ++j)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80002c4:	ddf6      	ble.n	80002b4 <OLED_chear+0x1e>
	for (int i = 0; i < 8; ++i)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	dde7      	ble.n	80002a2 <OLED_chear+0xc>
		}
	}
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <mpr121_init>:
//#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

HAL_StatusTypeDef status;

uint8_t mpr121_init()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	writeRegister(MPR121_SOFTRESET, 0x63);//软重置
 80002e2:	2163      	movs	r1, #99	@ 0x63
 80002e4:	2080      	movs	r0, #128	@ 0x80
 80002e6:	f000 f8c1 	bl	800046c <writeRegister>
	writeRegister(MPR121_ECR, 0x00);
 80002ea:	2100      	movs	r1, #0
 80002ec:	205e      	movs	r0, #94	@ 0x5e
 80002ee:	f000 f8bd 	bl	800046c <writeRegister>

	uint8_t c = readRegister8(MPR121_CONFIG2);
 80002f2:	205d      	movs	r0, #93	@ 0x5d
 80002f4:	f000 f890 	bl	8000418 <readRegister8>
 80002f8:	4603      	mov	r3, r0
 80002fa:	71fb      	strb	r3, [r7, #7]
	if (c != 0x24){return 1;}
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	2b24      	cmp	r3, #36	@ 0x24
 8000300:	d001      	beq.n	8000306 <mpr121_init+0x2a>
 8000302:	2301      	movs	r3, #1
 8000304:	e043      	b.n	800038e <mpr121_init+0xb2>

	setThresholds(MPR121_TOUCH_THRESHOLD_DEFAULT, MPR121_RELEASE_THRESHOLD_DEFAULT);
 8000306:	2106      	movs	r1, #6
 8000308:	200c      	movs	r0, #12
 800030a:	f000 f844 	bl	8000396 <setThresholds>
	writeRegister(MPR121_MHDR, 0x01);
 800030e:	2101      	movs	r1, #1
 8000310:	202b      	movs	r0, #43	@ 0x2b
 8000312:	f000 f8ab 	bl	800046c <writeRegister>
	writeRegister(MPR121_NHDR, 0x01);
 8000316:	2101      	movs	r1, #1
 8000318:	202c      	movs	r0, #44	@ 0x2c
 800031a:	f000 f8a7 	bl	800046c <writeRegister>
	writeRegister(MPR121_NCLR, 0x0E);
 800031e:	210e      	movs	r1, #14
 8000320:	202d      	movs	r0, #45	@ 0x2d
 8000322:	f000 f8a3 	bl	800046c <writeRegister>
	writeRegister(MPR121_FDLR, 0x00);
 8000326:	2100      	movs	r1, #0
 8000328:	202e      	movs	r0, #46	@ 0x2e
 800032a:	f000 f89f 	bl	800046c <writeRegister>

	writeRegister(MPR121_MHDF, 0x01);
 800032e:	2101      	movs	r1, #1
 8000330:	202f      	movs	r0, #47	@ 0x2f
 8000332:	f000 f89b 	bl	800046c <writeRegister>
	writeRegister(MPR121_NHDF, 0x05);
 8000336:	2105      	movs	r1, #5
 8000338:	2030      	movs	r0, #48	@ 0x30
 800033a:	f000 f897 	bl	800046c <writeRegister>
	writeRegister(MPR121_NCLF, 0x01);
 800033e:	2101      	movs	r1, #1
 8000340:	2031      	movs	r0, #49	@ 0x31
 8000342:	f000 f893 	bl	800046c <writeRegister>
	writeRegister(MPR121_FDLF, 0x00);
 8000346:	2100      	movs	r1, #0
 8000348:	2032      	movs	r0, #50	@ 0x32
 800034a:	f000 f88f 	bl	800046c <writeRegister>

	writeRegister(MPR121_NHDT, 0x00);
 800034e:	2100      	movs	r1, #0
 8000350:	2033      	movs	r0, #51	@ 0x33
 8000352:	f000 f88b 	bl	800046c <writeRegister>
	writeRegister(MPR121_NCLT, 0x00);
 8000356:	2100      	movs	r1, #0
 8000358:	2034      	movs	r0, #52	@ 0x34
 800035a:	f000 f887 	bl	800046c <writeRegister>
	writeRegister(MPR121_FDLT, 0x00);
 800035e:	2100      	movs	r1, #0
 8000360:	2035      	movs	r0, #53	@ 0x35
 8000362:	f000 f883 	bl	800046c <writeRegister>

	writeRegister(MPR121_DEBOUNCE, 0);
 8000366:	2100      	movs	r1, #0
 8000368:	205b      	movs	r0, #91	@ 0x5b
 800036a:	f000 f87f 	bl	800046c <writeRegister>
	writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 800036e:	2110      	movs	r1, #16
 8000370:	205c      	movs	r0, #92	@ 0x5c
 8000372:	f000 f87b 	bl	800046c <writeRegister>
	writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 8000376:	2120      	movs	r1, #32
 8000378:	205d      	movs	r0, #93	@ 0x5d
 800037a:	f000 f877 	bl	800046c <writeRegister>
	  writeRegister(MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
	  writeRegister(MPR121_TARGETLIMIT, 180); // UPLIMIT * 0.9
	  writeRegister(MPR121_LOWLIMIT, 130);    // UPLIMIT * 0.65
	#endif

	uint8_t ECR_SETTING = 0x8C;//配置ECR寄存器，位的作用在数据手册的第16页
 800037e:	238c      	movs	r3, #140	@ 0x8c
 8000380:	71bb      	strb	r3, [r7, #6]
	writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	4619      	mov	r1, r3
 8000386:	205e      	movs	r0, #94	@ 0x5e
 8000388:	f000 f870 	bl	800046c <writeRegister>
	return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <setThresholds>:

void setThresholds(uint8_t touch, uint8_t release)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	460a      	mov	r2, r1
 80003a0:	71fb      	strb	r3, [r7, #7]
 80003a2:	4613      	mov	r3, r2
 80003a4:	71bb      	strb	r3, [r7, #6]
	// set all thresholds (the same)
	for (uint8_t i = 0; i < 12; i++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	e016      	b.n	80003da <setThresholds+0x44>
	{
		writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	3341      	adds	r3, #65	@ 0x41
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f856 	bl	800046c <writeRegister>
		writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	3321      	adds	r3, #33	@ 0x21
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	79ba      	ldrb	r2, [r7, #6]
 80003cc:	4611      	mov	r1, r2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f84c 	bl	800046c <writeRegister>
	for (uint8_t i = 0; i < 12; i++)
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	3301      	adds	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b0b      	cmp	r3, #11
 80003de:	d9e5      	bls.n	80003ac <setThresholds+0x16>
	}
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <touched>:

uint16_t touched()
{
 80003ea:	b590      	push	{r4, r7, lr}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
	uint16_t data = ( readRegister8(MPR121_TOUCHSTATUS_H)<<8 | readRegister8(MPR121_TOUCHSTATUS_L) );
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 f811 	bl	8000418 <readRegister8>
 80003f6:	4603      	mov	r3, r0
 80003f8:	021b      	lsls	r3, r3, #8
 80003fa:	b21c      	sxth	r4, r3
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f80b 	bl	8000418 <readRegister8>
 8000402:	4603      	mov	r3, r0
 8000404:	b21b      	sxth	r3, r3
 8000406:	4323      	orrs	r3, r4
 8000408:	b21b      	sxth	r3, r3
 800040a:	80fb      	strh	r3, [r7, #6]
	return data;
 800040c:	88fb      	ldrh	r3, [r7, #6]
}
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bd90      	pop	{r4, r7, pc}
	...

08000418 <readRegister8>:

uint8_t readRegister8(uint8_t reg)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af04      	add	r7, sp, #16
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	uint8_t readedBuffer=0;
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, MPR121_I2CADDR_DEFAULT, reg, I2C_MEMADD_SIZE_8BIT, &readedBuffer, 1, HAL_MAX_DELAY);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	b29a      	uxth	r2, r3
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2301      	movs	r3, #1
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	f107 030f 	add.w	r3, r7, #15
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2301      	movs	r3, #1
 800043c:	21b4      	movs	r1, #180	@ 0xb4
 800043e:	4809      	ldr	r0, [pc, #36]	@ (8000464 <readRegister8+0x4c>)
 8000440:	f001 fd4a 	bl	8001ed8 <HAL_I2C_Mem_Read>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <readRegister8+0x50>)
 800044a:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return 0;}
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <readRegister8+0x50>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <readRegister8+0x40>
 8000454:	2300      	movs	r3, #0
 8000456:	e000      	b.n	800045a <readRegister8+0x42>
	return readedBuffer;
 8000458:	7bfb      	ldrb	r3, [r7, #15]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200001f8 	.word	0x200001f8
 8000468:	200001f4 	.word	0x200001f4

0800046c <writeRegister>:

void writeRegister(uint8_t reg, uint8_t value)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af04      	add	r7, sp, #16
 8000472:	4603      	mov	r3, r0
 8000474:	460a      	mov	r2, r1
 8000476:	71fb      	strb	r3, [r7, #7]
 8000478:	4613      	mov	r3, r2
 800047a:	71bb      	strb	r3, [r7, #6]
	uint8_t stop_required = 1;//判断是否需要进入停止状态指示位
 800047c:	2301      	movs	r3, #1
 800047e:	73fb      	strb	r3, [r7, #15]
	uint8_t ecr_backup = readRegister8(MPR121_ECR);//备份电极配置寄存器(ERC寄存器)
 8000480:	205e      	movs	r0, #94	@ 0x5e
 8000482:	f7ff ffc9 	bl	8000418 <readRegister8>
 8000486:	4603      	mov	r3, r0
 8000488:	73bb      	strb	r3, [r7, #14]
	uint8_t ecr_chear = 0x00;
 800048a:	2300      	movs	r3, #0
 800048c:	737b      	strb	r3, [r7, #13]
	if( (reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A)) ){stop_required = 0;}//如果成立则无需进入停止状态
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b5e      	cmp	r3, #94	@ 0x5e
 8000492:	d005      	beq.n	80004a0 <writeRegister+0x34>
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b72      	cmp	r3, #114	@ 0x72
 8000498:	d904      	bls.n	80004a4 <writeRegister+0x38>
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	2b7a      	cmp	r3, #122	@ 0x7a
 800049e:	d801      	bhi.n	80004a4 <writeRegister+0x38>
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]
	if (stop_required)//清除ERC寄存器，进入停止状态
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d015      	beq.n	80004d6 <writeRegister+0x6a>
	{
		status = HAL_I2C_Mem_Write(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_chear, 1, HAL_MAX_DELAY);
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
 80004ae:	9302      	str	r3, [sp, #8]
 80004b0:	2301      	movs	r3, #1
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	f107 030d 	add.w	r3, r7, #13
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2301      	movs	r3, #1
 80004bc:	225e      	movs	r2, #94	@ 0x5e
 80004be:	21b4      	movs	r1, #180	@ 0xb4
 80004c0:	481f      	ldr	r0, [pc, #124]	@ (8000540 <writeRegister+0xd4>)
 80004c2:	f001 fc0f 	bl	8001ce4 <HAL_I2C_Mem_Write>
 80004c6:	4603      	mov	r3, r0
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000544 <writeRegister+0xd8>)
 80004cc:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 80004ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000544 <writeRegister+0xd8>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d12e      	bne.n	8000534 <writeRegister+0xc8>
	}
	status = HAL_I2C_Mem_Write(&hi2c1, MPR121_I2CADDR_DEFAULT, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);//开始写入目标寄存器
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	9302      	str	r3, [sp, #8]
 80004e0:	2301      	movs	r3, #1
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2301      	movs	r3, #1
 80004ea:	21b4      	movs	r1, #180	@ 0xb4
 80004ec:	4814      	ldr	r0, [pc, #80]	@ (8000540 <writeRegister+0xd4>)
 80004ee:	f001 fbf9 	bl	8001ce4 <HAL_I2C_Mem_Write>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <writeRegister+0xd8>)
 80004f8:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK){return;}
 80004fa:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <writeRegister+0xd8>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d11a      	bne.n	8000538 <writeRegister+0xcc>
	if (stop_required) //还原ERC寄存器的值
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d018      	beq.n	800053a <writeRegister+0xce>
	{
		status = HAL_I2C_Mem_Write(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_ECR, I2C_MEMADD_SIZE_8BIT, &ecr_backup, 1, HAL_MAX_DELAY);
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	9302      	str	r3, [sp, #8]
 800050e:	2301      	movs	r3, #1
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	f107 030e 	add.w	r3, r7, #14
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2301      	movs	r3, #1
 800051a:	225e      	movs	r2, #94	@ 0x5e
 800051c:	21b4      	movs	r1, #180	@ 0xb4
 800051e:	4808      	ldr	r0, [pc, #32]	@ (8000540 <writeRegister+0xd4>)
 8000520:	f001 fbe0 	bl	8001ce4 <HAL_I2C_Mem_Write>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <writeRegister+0xd8>)
 800052a:	701a      	strb	r2, [r3, #0]
		if (status != HAL_OK){return;}
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <writeRegister+0xd8>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	e002      	b.n	800053a <writeRegister+0xce>
		if (status != HAL_OK){return;}
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <writeRegister+0xce>
	if (status != HAL_OK){return;}
 8000538:	bf00      	nop
	}
}
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200001f8 	.word	0x200001f8
 8000544:	200001f4 	.word	0x200001f4

08000548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <MX_DMA_Init+0x48>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <MX_DMA_Init+0x48>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <MX_DMA_Init+0x48>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2010      	movs	r0, #16
 800056c:	f000 fd1b 	bl	8000fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000570:	2010      	movs	r0, #16
 8000572:	f000 fd34 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2011      	movs	r0, #17
 800057c:	f000 fd13 	bl	8000fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000580:	2011      	movs	r0, #17
 8000582:	f000 fd2c 	bl	8000fde <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <MX_GPIO_Init+0x58>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0320 	and.w	r3, r3, #32
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <MX_GPIO_Init+0x58>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f001 f917 	bl	8001860 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f99e 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200001f8 	.word	0x200001f8
 8000644:	40005400 	.word	0x40005400
 8000648:	00061a80 	.word	0x00061a80

0800064c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a43      	ldr	r2, [pc, #268]	@ (8000774 <HAL_I2C_MspInit+0x128>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d17e      	bne.n	800076a <HAL_I2C_MspInit+0x11e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b42      	ldr	r3, [pc, #264]	@ (8000778 <HAL_I2C_MspInit+0x12c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a41      	ldr	r2, [pc, #260]	@ (8000778 <HAL_I2C_MspInit+0x12c>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b3f      	ldr	r3, [pc, #252]	@ (8000778 <HAL_I2C_MspInit+0x12c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000684:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	2312      	movs	r3, #18
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4838      	ldr	r0, [pc, #224]	@ (800077c <HAL_I2C_MspInit+0x130>)
 800069a:	f000 ff5d 	bl	8001558 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800069e:	4b38      	ldr	r3, [pc, #224]	@ (8000780 <HAL_I2C_MspInit+0x134>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <HAL_I2C_MspInit+0x134>)
 80006b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <HAL_I2C_MspInit+0x12c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a2e      	ldr	r2, [pc, #184]	@ (8000778 <HAL_I2C_MspInit+0x12c>)
 80006c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <HAL_I2C_MspInit+0x12c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000788 <HAL_I2C_MspInit+0x13c>)
 80006d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006da:	2210      	movs	r2, #16
 80006dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006de:	4b29      	ldr	r3, [pc, #164]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ea:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000702:	4820      	ldr	r0, [pc, #128]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 8000704:	f000 fc86 	bl	8001014 <HAL_DMA_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800070e:	f000 f933 	bl	8000978 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
 8000718:	4a1a      	ldr	r2, [pc, #104]	@ (8000784 <HAL_I2C_MspInit+0x138>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <HAL_I2C_MspInit+0x144>)
 8000722:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <HAL_I2C_MspInit+0x140>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <HAL_I2C_MspInit+0x140>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <HAL_I2C_MspInit+0x140>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800074e:	480f      	ldr	r0, [pc, #60]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000750:	f000 fc60 	bl	8001014 <HAL_DMA_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_I2C_MspInit+0x112>
    {
      Error_Handler();
 800075a:	f000 f90d 	bl	8000978 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
 8000764:	4a09      	ldr	r2, [pc, #36]	@ (800078c <HAL_I2C_MspInit+0x140>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	@ 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40005400 	.word	0x40005400
 8000778:	40021000 	.word	0x40021000
 800077c:	40010c00 	.word	0x40010c00
 8000780:	40010000 	.word	0x40010000
 8000784:	2000024c 	.word	0x2000024c
 8000788:	4002006c 	.word	0x4002006c
 800078c:	20000290 	.word	0x20000290
 8000790:	40020080 	.word	0x40020080

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 faa7 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f835 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f7ff fef7 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a6:	f7ff fecf 	bl	8000548 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80007aa:	f009 fc0b 	bl	8009fc4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80007ae:	f7ff ff1f 	bl	80005f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 f9f7 	bl	8000ba4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 80007b6:	f7ff fd20 	bl	80001fa <OLED_init>
  mpr121_init();
 80007ba:	f7ff fd8f 	bl	80002dc <mpr121_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t data = touched();
 80007be:	f7ff fe14 	bl	80003ea <touched>
 80007c2:	4603      	mov	r3, r0
 80007c4:	81fb      	strh	r3, [r7, #14]

	  HAL_I2C_Mem_Read_DMA(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_TOUCHSTATUS_L, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&dmadata, 1);
 80007c6:	2301      	movs	r3, #1
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <main+0x68>)
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	2200      	movs	r2, #0
 80007d2:	21b4      	movs	r1, #180	@ 0xb4
 80007d4:	480a      	ldr	r0, [pc, #40]	@ (8000800 <main+0x6c>)
 80007d6:	f001 fdf3 	bl	80023c0 <HAL_I2C_Mem_Read_DMA>
	  HAL_Delay(50);
 80007da:	2032      	movs	r0, #50	@ 0x32
 80007dc:	f000 fae8 	bl	8000db0 <HAL_Delay>
	  printf("%d\n", dmadata);
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <main+0x68>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4807      	ldr	r0, [pc, #28]	@ (8000804 <main+0x70>)
 80007e8:	f00a f924 	bl	800aa34 <iprintf>
//	  printf("为了解决神秘bug而诞生了这一行\n");
	  sprintf(buffer, "%ld    ", data);
 80007ec:	89fa      	ldrh	r2, [r7, #14]
 80007ee:	463b      	mov	r3, r7
 80007f0:	4905      	ldr	r1, [pc, #20]	@ (8000808 <main+0x74>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00a f930 	bl	800aa58 <siprintf>
  {
 80007f8:	bf00      	nop
 80007fa:	e7e0      	b.n	80007be <main+0x2a>
 80007fc:	200002d4 	.word	0x200002d4
 8000800:	200001f8 	.word	0x200001f8
 8000804:	0800bae8 	.word	0x0800bae8
 8000808:	0800baec 	.word	0x0800baec

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000816:	2228      	movs	r2, #40	@ 0x28
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00a f97f 	bl	800ab1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084a:	2301      	movs	r3, #1
 800084c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000858:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fa02 	bl	8004c6c <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800086e:	f000 f883 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000882:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fc6e 	bl	8005170 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800089a:	f000 f86d 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800089e:	2310      	movs	r3, #16
 80008a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4618      	mov	r0, r3
 80008aa:	f004 fdef 	bl	800548c <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008b4:	f000 f860 	bl	8000978 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3750      	adds	r7, #80	@ 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *buffer, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, 1000);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <_write+0x28>)
 80008d8:	f004 fede 	bl	8005698 <HAL_UART_Transmit>
    return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200002e0 	.word	0x200002e0

080008ec <HAL_I2C_MemRxCpltCallback>:
	return ch;
}


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	6078      	str	r0, [r7, #4]
//	static uint8_t mpr121_address_index[1];
	static uint8_t count;
	static uint8_t databuf_H;
	static uint8_t databuf_L;
	static uint8_t mpr121_mem_index[2]={MPR121_TOUCHSTATUS_H, MPR121_TOUCHSTATUS_L};
	if(hi2c==&hi2c1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <HAL_I2C_MemRxCpltCallback+0x78>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d12e      	bne.n	800095a <HAL_I2C_MemRxCpltCallback+0x6e>
	{
		switch(count)
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_I2C_MemRxCpltCallback+0x7c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <HAL_I2C_MemRxCpltCallback+0x1e>
 8000904:	2b01      	cmp	r3, #1
 8000906:	d00e      	beq.n	8000926 <HAL_I2C_MemRxCpltCallback+0x3a>
 8000908:	e01b      	b.n	8000942 <HAL_I2C_MemRxCpltCallback+0x56>
		{
			case 0:
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_TOUCHSTATUS_H, I2C_MEMADD_SIZE_8BIT, &databuf_H, 1);
 800090a:	2301      	movs	r3, #1
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <HAL_I2C_MemRxCpltCallback+0x80>)
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	2201      	movs	r2, #1
 8000916:	21b4      	movs	r1, #180	@ 0xb4
 8000918:	4812      	ldr	r0, [pc, #72]	@ (8000964 <HAL_I2C_MemRxCpltCallback+0x78>)
 800091a:	f001 fd51 	bl	80023c0 <HAL_I2C_Mem_Read_DMA>
				count=1;
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_I2C_MemRxCpltCallback+0x7c>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
				break;
 8000924:	e00d      	b.n	8000942 <HAL_I2C_MemRxCpltCallback+0x56>
			case 1:
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPR121_I2CADDR_DEFAULT, MPR121_TOUCHSTATUS_L, I2C_MEMADD_SIZE_8BIT, &databuf_L, 1);
 8000926:	2301      	movs	r3, #1
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_I2C_MemRxCpltCallback+0x84>)
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2301      	movs	r3, #1
 8000930:	2200      	movs	r2, #0
 8000932:	21b4      	movs	r1, #180	@ 0xb4
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <HAL_I2C_MemRxCpltCallback+0x78>)
 8000936:	f001 fd43 	bl	80023c0 <HAL_I2C_Mem_Read_DMA>
				count=0;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <HAL_I2C_MemRxCpltCallback+0x7c>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
				break;
 8000940:	bf00      	nop
		}
		dmadata=( databuf_H<<8 | databuf_L );
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_I2C_MemRxCpltCallback+0x80>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_I2C_MemRxCpltCallback+0x84>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <HAL_I2C_MemRxCpltCallback+0x88>)
 8000958:	801a      	strh	r2, [r3, #0]

	}
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001f8 	.word	0x200001f8
 8000968:	200002d6 	.word	0x200002d6
 800096c:	200002d7 	.word	0x200002d7
 8000970:	200002d8 	.word	0x200002d8
 8000974:	200002d4 	.word	0x200002d4

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <HAL_MspInit+0x5c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_MspInit+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <HAL_MspInit+0x5c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_MspInit+0x5c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_MspInit+0x60>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <HAL_MspInit+0x60>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f99e 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <DMA1_Channel6_IRQHandler+0x10>)
 8000a46:	f000 fc53 	bl	80012f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000024c 	.word	0x2000024c

08000a54 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <DMA1_Channel7_IRQHandler+0x10>)
 8000a5a:	f000 fc49 	bl	80012f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000290 	.word	0x20000290

08000a68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a6e:	f002 fcb8 	bl	80033e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000ff4 	.word	0x20000ff4

08000a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <USART1_IRQHandler+0x10>)
 8000a82:	f004 fe95 	bl	80057b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002e0 	.word	0x200002e0

08000a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00a      	b.n	8000ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa2:	f3af 8000 	nop.w
 8000aa6:	4601      	mov	r1, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dbf0      	blt.n	8000aa2 <_read+0x12>
  }

  return len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af0:	605a      	str	r2, [r3, #4]
  return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <_isatty>:

int _isatty(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b085      	sub	sp, #20
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f00a f82e 	bl	800abbc <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20005000 	.word	0x20005000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200002dc 	.word	0x200002dc
 8000b94:	20001638 	.word	0x20001638

08000b98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <MX_USART1_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	f004 fd0c 	bl	80055f8 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f7ff fec7 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200002e0 	.word	0x200002e0
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a20      	ldr	r2, [pc, #128]	@ (8000c94 <HAL_UART_MspInit+0x9c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d139      	bne.n	8000c8c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_UART_MspInit+0xa0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <HAL_UART_MspInit+0xa4>)
 8000c5e:	f000 fc7b 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <HAL_UART_MspInit+0xa4>)
 8000c78:	f000 fc6e 	bl	8001558 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2025      	movs	r0, #37	@ 0x25
 8000c82:	f000 f990 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c86:	2025      	movs	r0, #37	@ 0x25
 8000c88:	f000 f9a9 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca0:	f7ff ff7a 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ca6:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cbc:	4c09      	ldr	r4, [pc, #36]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f009 ff7d 	bl	800abc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cce:	f7ff fd61 	bl	8000794 <main>
  bx lr
 8000cd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000cdc:	0800bba4 	.word	0x0800bba4
  ldr r2, =_sbss
 8000ce0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000ce4:	20001638 	.word	0x20001638

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x28>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x28>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f947 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe3c 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40022000 	.word	0x40022000

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f95f 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f927 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a03      	ldr	r2, [pc, #12]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000328 	.word	0x20000328

08000d9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b02      	ldr	r3, [pc, #8]	@ (8000dac <HAL_GetTick+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	20000328 	.word	0x20000328

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff fff0 	bl	8000d9c <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffe0 	bl	8000d9c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4906      	ldr	r1, [pc, #24]	@ (8000e90 <__NVIC_EnableIRQ+0x34>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff2d 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff42 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff90 	bl	8000ee8 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5f 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff35 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e043      	b.n	80010b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <HAL_DMA_Init+0xa8>)
 8001032:	4413      	add	r3, r2
 8001034:	4a22      	ldr	r2, [pc, #136]	@ (80010c0 <HAL_DMA_Init+0xac>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	009a      	lsls	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a1f      	ldr	r2, [pc, #124]	@ (80010c4 <HAL_DMA_Init+0xb0>)
 8001046:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800105e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800106c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	bffdfff8 	.word	0xbffdfff8
 80010c0:	cccccccd 	.word	0xcccccccd
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_DMA_Start_IT+0x20>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e04b      	b.n	8001180 <HAL_DMA_Start_IT+0xb8>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d13a      	bne.n	8001172 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2202      	movs	r2, #2
 8001100:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f9eb 	bl	80014fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 020e 	orr.w	r2, r2, #14
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00f      	b.n	8001160 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0204 	bic.w	r2, r2, #4
 800114e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 020a 	orr.w	r2, r2, #10
 800115e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e005      	b.n	800117e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800117a:	2302      	movs	r3, #2
 800117c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800117e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d008      	beq.n	80011b2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2204      	movs	r2, #4
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e020      	b.n	80011f4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 020e 	bic.w	r2, r2, #14
 80011c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d005      	beq.n	8001224 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2204      	movs	r2, #4
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e051      	b.n	80012c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020e 	bic.w	r2, r2, #14
 8001232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <HAL_DMA_Abort_IT+0xd4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d029      	beq.n	80012a2 <HAL_DMA_Abort_IT+0xa2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a21      	ldr	r2, [pc, #132]	@ (80012d8 <HAL_DMA_Abort_IT+0xd8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d022      	beq.n	800129e <HAL_DMA_Abort_IT+0x9e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1f      	ldr	r2, [pc, #124]	@ (80012dc <HAL_DMA_Abort_IT+0xdc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01a      	beq.n	8001298 <HAL_DMA_Abort_IT+0x98>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <HAL_DMA_Abort_IT+0xe0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d012      	beq.n	8001292 <HAL_DMA_Abort_IT+0x92>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <HAL_DMA_Abort_IT+0xe4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00a      	beq.n	800128c <HAL_DMA_Abort_IT+0x8c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <HAL_DMA_Abort_IT+0xe8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d102      	bne.n	8001286 <HAL_DMA_Abort_IT+0x86>
 8001280:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001284:	e00e      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 8001286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800128a:	e00b      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 800128c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001290:	e008      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	e005      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 8001298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129c:	e002      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 800129e:	2310      	movs	r3, #16
 80012a0:	e000      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 80012a2:	2301      	movs	r3, #1
 80012a4:	4a11      	ldr	r2, [pc, #68]	@ (80012ec <HAL_DMA_Abort_IT+0xec>)
 80012a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
    } 
  }
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020008 	.word	0x40020008
 80012d8:	4002001c 	.word	0x4002001c
 80012dc:	40020030 	.word	0x40020030
 80012e0:	40020044 	.word	0x40020044
 80012e4:	40020058 	.word	0x40020058
 80012e8:	4002006c 	.word	0x4002006c
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	2204      	movs	r2, #4
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d04f      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xc8>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d04a      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0204 	bic.w	r2, r2, #4
 800133e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a66      	ldr	r2, [pc, #408]	@ (80014e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d029      	beq.n	800139e <HAL_DMA_IRQHandler+0xae>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a65      	ldr	r2, [pc, #404]	@ (80014e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d022      	beq.n	800139a <HAL_DMA_IRQHandler+0xaa>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a63      	ldr	r2, [pc, #396]	@ (80014e8 <HAL_DMA_IRQHandler+0x1f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d01a      	beq.n	8001394 <HAL_DMA_IRQHandler+0xa4>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a62      	ldr	r2, [pc, #392]	@ (80014ec <HAL_DMA_IRQHandler+0x1fc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d012      	beq.n	800138e <HAL_DMA_IRQHandler+0x9e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a60      	ldr	r2, [pc, #384]	@ (80014f0 <HAL_DMA_IRQHandler+0x200>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00a      	beq.n	8001388 <HAL_DMA_IRQHandler+0x98>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5f      	ldr	r2, [pc, #380]	@ (80014f4 <HAL_DMA_IRQHandler+0x204>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d102      	bne.n	8001382 <HAL_DMA_IRQHandler+0x92>
 800137c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001380:	e00e      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 8001382:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001386:	e00b      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 8001388:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800138c:	e008      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 800138e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001392:	e005      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	e002      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	e000      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 800139e:	2304      	movs	r3, #4
 80013a0:	4a55      	ldr	r2, [pc, #340]	@ (80014f8 <HAL_DMA_IRQHandler+0x208>)
 80013a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 8094 	beq.w	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013b6:	e08e      	b.n	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	2202      	movs	r2, #2
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d056      	beq.n	8001476 <HAL_DMA_IRQHandler+0x186>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d051      	beq.n	8001476 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10b      	bne.n	80013f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 020a 	bic.w	r2, r2, #10
 80013ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a38      	ldr	r2, [pc, #224]	@ (80014e0 <HAL_DMA_IRQHandler+0x1f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d029      	beq.n	8001456 <HAL_DMA_IRQHandler+0x166>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a37      	ldr	r2, [pc, #220]	@ (80014e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <HAL_DMA_IRQHandler+0x162>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a35      	ldr	r2, [pc, #212]	@ (80014e8 <HAL_DMA_IRQHandler+0x1f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01a      	beq.n	800144c <HAL_DMA_IRQHandler+0x15c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a34      	ldr	r2, [pc, #208]	@ (80014ec <HAL_DMA_IRQHandler+0x1fc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d012      	beq.n	8001446 <HAL_DMA_IRQHandler+0x156>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <HAL_DMA_IRQHandler+0x200>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00a      	beq.n	8001440 <HAL_DMA_IRQHandler+0x150>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a31      	ldr	r2, [pc, #196]	@ (80014f4 <HAL_DMA_IRQHandler+0x204>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d102      	bne.n	800143a <HAL_DMA_IRQHandler+0x14a>
 8001434:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001438:	e00e      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 800143a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800143e:	e00b      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001444:	e008      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144a:	e005      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 800144c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001450:	e002      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001452:	2320      	movs	r3, #32
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001456:	2302      	movs	r3, #2
 8001458:	4a27      	ldr	r2, [pc, #156]	@ (80014f8 <HAL_DMA_IRQHandler+0x208>)
 800145a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d034      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001474:	e02f      	b.n	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	2208      	movs	r2, #8
 800147c:	409a      	lsls	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d028      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1e8>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020e 	bic.w	r2, r2, #14
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
    }
  }
  return;
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
}
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40020008 	.word	0x40020008
 80014e4:	4002001c 	.word	0x4002001c
 80014e8:	40020030 	.word	0x40020030
 80014ec:	40020044 	.word	0x40020044
 80014f0:	40020058 	.word	0x40020058
 80014f4:	4002006c 	.word	0x4002006c
 80014f8:	40020000 	.word	0x40020000

080014fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d108      	bne.n	800153c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800153a:	e007      	b.n	800154c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b08b      	sub	sp, #44	@ 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	e169      	b.n	8001840 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800156c:	2201      	movs	r2, #1
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8158 	bne.w	800183a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a9a      	ldr	r2, [pc, #616]	@ (80017f8 <HAL_GPIO_Init+0x2a0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 8001594:	4a98      	ldr	r2, [pc, #608]	@ (80017f8 <HAL_GPIO_Init+0x2a0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d875      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 800159a:	4a98      	ldr	r2, [pc, #608]	@ (80017fc <HAL_GPIO_Init+0x2a4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d058      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015a0:	4a96      	ldr	r2, [pc, #600]	@ (80017fc <HAL_GPIO_Init+0x2a4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d86f      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015a6:	4a96      	ldr	r2, [pc, #600]	@ (8001800 <HAL_GPIO_Init+0x2a8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d052      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015ac:	4a94      	ldr	r2, [pc, #592]	@ (8001800 <HAL_GPIO_Init+0x2a8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d869      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015b2:	4a94      	ldr	r2, [pc, #592]	@ (8001804 <HAL_GPIO_Init+0x2ac>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04c      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015b8:	4a92      	ldr	r2, [pc, #584]	@ (8001804 <HAL_GPIO_Init+0x2ac>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d863      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015be:	4a92      	ldr	r2, [pc, #584]	@ (8001808 <HAL_GPIO_Init+0x2b0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d046      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015c4:	4a90      	ldr	r2, [pc, #576]	@ (8001808 <HAL_GPIO_Init+0x2b0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d85d      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d82a      	bhi.n	8001624 <HAL_GPIO_Init+0xcc>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d859      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <HAL_GPIO_Init+0x80>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001653 	.word	0x08001653
 80015dc:	0800162d 	.word	0x0800162d
 80015e0:	0800163f 	.word	0x0800163f
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001687 	.word	0x08001687
 80015ec:	08001687 	.word	0x08001687
 80015f0:	08001687 	.word	0x08001687
 80015f4:	08001687 	.word	0x08001687
 80015f8:	08001687 	.word	0x08001687
 80015fc:	08001687 	.word	0x08001687
 8001600:	08001687 	.word	0x08001687
 8001604:	08001687 	.word	0x08001687
 8001608:	08001687 	.word	0x08001687
 800160c:	08001687 	.word	0x08001687
 8001610:	08001687 	.word	0x08001687
 8001614:	08001687 	.word	0x08001687
 8001618:	08001687 	.word	0x08001687
 800161c:	08001635 	.word	0x08001635
 8001620:	08001649 	.word	0x08001649
 8001624:	4a79      	ldr	r2, [pc, #484]	@ (800180c <HAL_GPIO_Init+0x2b4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162a:	e02c      	b.n	8001686 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e029      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e024      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	3308      	adds	r3, #8
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e01f      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	330c      	adds	r3, #12
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e01a      	b.n	8001688 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165a:	2304      	movs	r3, #4
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e013      	b.n	8001688 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	611a      	str	r2, [r3, #16]
          break;
 8001672:	e009      	b.n	8001688 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	615a      	str	r2, [r3, #20]
          break;
 800167e:	e003      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x130>
          break;
 8001686:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	@ 0xff
 800168c:	d801      	bhi.n	8001692 <HAL_GPIO_Init+0x13a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_Init+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	@ 0xff
 800169c:	d802      	bhi.n	80016a4 <HAL_GPIO_Init+0x14c>
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x152>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	3b08      	subs	r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	210f      	movs	r1, #15
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80b1 	beq.w	800183a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001810 <HAL_GPIO_Init+0x2b8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001810 <HAL_GPIO_Init+0x2b8>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <HAL_GPIO_Init+0x2b8>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f0:	4a48      	ldr	r2, [pc, #288]	@ (8001814 <HAL_GPIO_Init+0x2bc>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a40      	ldr	r2, [pc, #256]	@ (8001818 <HAL_GPIO_Init+0x2c0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d013      	beq.n	8001744 <HAL_GPIO_Init+0x1ec>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3f      	ldr	r2, [pc, #252]	@ (800181c <HAL_GPIO_Init+0x2c4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00d      	beq.n	8001740 <HAL_GPIO_Init+0x1e8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3e      	ldr	r2, [pc, #248]	@ (8001820 <HAL_GPIO_Init+0x2c8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d007      	beq.n	800173c <HAL_GPIO_Init+0x1e4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3d      	ldr	r2, [pc, #244]	@ (8001824 <HAL_GPIO_Init+0x2cc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_GPIO_Init+0x1e0>
 8001734:	2303      	movs	r3, #3
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001738:	2304      	movs	r3, #4
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001744:	2300      	movs	r3, #0
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001756:	492f      	ldr	r1, [pc, #188]	@ (8001814 <HAL_GPIO_Init+0x2bc>)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	492c      	ldr	r1, [pc, #176]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4928      	ldr	r1, [pc, #160]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4922      	ldr	r1, [pc, #136]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	491e      	ldr	r1, [pc, #120]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4918      	ldr	r1, [pc, #96]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4914      	ldr	r1, [pc, #80]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d021      	beq.n	800182c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	490e      	ldr	r1, [pc, #56]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e021      	b.n	800183a <HAL_GPIO_Init+0x2e2>
 80017f6:	bf00      	nop
 80017f8:	10320000 	.word	0x10320000
 80017fc:	10310000 	.word	0x10310000
 8001800:	10220000 	.word	0x10220000
 8001804:	10210000 	.word	0x10210000
 8001808:	10120000 	.word	0x10120000
 800180c:	10110000 	.word	0x10110000
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	40010800 	.word	0x40010800
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000
 8001824:	40011400 	.word	0x40011400
 8001828:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_GPIO_Init+0x304>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	43db      	mvns	r3, r3
 8001834:	4909      	ldr	r1, [pc, #36]	@ (800185c <HAL_GPIO_Init+0x304>)
 8001836:	4013      	ands	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	3301      	adds	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f ae8e 	bne.w	800156c <HAL_GPIO_Init+0x14>
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	372c      	adds	r7, #44	@ 0x2c
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e12b      	b.n	8001aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fee0 	bl	800064c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	@ 0x24
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c4:	f003 fd9c 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 80018c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a81      	ldr	r2, [pc, #516]	@ (8001ad4 <HAL_I2C_Init+0x274>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d807      	bhi.n	80018e4 <HAL_I2C_Init+0x84>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a80      	ldr	r2, [pc, #512]	@ (8001ad8 <HAL_I2C_Init+0x278>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	bf94      	ite	ls
 80018dc:	2301      	movls	r3, #1
 80018de:	2300      	movhi	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	e006      	b.n	80018f2 <HAL_I2C_Init+0x92>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a7d      	ldr	r2, [pc, #500]	@ (8001adc <HAL_I2C_Init+0x27c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e7      	b.n	8001aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4a78      	ldr	r2, [pc, #480]	@ (8001ae0 <HAL_I2C_Init+0x280>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad4 <HAL_I2C_Init+0x274>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d802      	bhi.n	8001934 <HAL_I2C_Init+0xd4>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	e009      	b.n	8001948 <HAL_I2C_Init+0xe8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	4a69      	ldr	r2, [pc, #420]	@ (8001ae4 <HAL_I2C_Init+0x284>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	3301      	adds	r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	430b      	orrs	r3, r1
 800194e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800195a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	495c      	ldr	r1, [pc, #368]	@ (8001ad4 <HAL_I2C_Init+0x274>)
 8001964:	428b      	cmp	r3, r1
 8001966:	d819      	bhi.n	800199c <HAL_I2C_Init+0x13c>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e59      	subs	r1, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fbb1 f3f3 	udiv	r3, r1, r3
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <HAL_I2C_Init+0x138>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e59      	subs	r1, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	e051      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001998:	2304      	movs	r3, #4
 800199a:	e04f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d111      	bne.n	80019c8 <HAL_I2C_Init+0x168>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e012      	b.n	80019ee <HAL_I2C_Init+0x18e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x196>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e022      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10e      	bne.n	8001a1c <HAL_I2C_Init+0x1bc>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e58      	subs	r0, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	440b      	add	r3, r1
 8001a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1a:	e00f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	0099      	lsls	r1, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6809      	ldr	r1, [r1, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6911      	ldr	r1, [r2, #16]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68d2      	ldr	r2, [r2, #12]
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	001e847f 	.word	0x001e847f
 8001adc:	003d08ff 	.word	0x003d08ff
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	10624dd3 	.word	0x10624dd3

08001ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	817b      	strh	r3, [r7, #10]
 8001af8:	4613      	mov	r3, r2
 8001afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff f94e 	bl	8000d9c <HAL_GetTick>
 8001b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	f040 80e0 	bne.w	8001cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2319      	movs	r3, #25
 8001b16:	2201      	movs	r2, #1
 8001b18:	4970      	ldr	r1, [pc, #448]	@ (8001cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f001 f910 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	e0d3      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_I2C_Master_Transmit+0x50>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e0cc      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d007      	beq.n	8001b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2221      	movs	r2, #33	@ 0x21
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	893a      	ldrh	r2, [r7, #8]
 8001b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	6a3a      	ldr	r2, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fdb4 	bl	8002714 <I2C_MasterRequestWrite>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e08d      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bcc:	e066      	b.n	8001c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f001 f9ce 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00d      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d107      	bne.n	8001bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06b      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d11b      	bne.n	8001c70 <HAL_I2C_Master_Transmit+0x188>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d017      	beq.n	8001c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6a39      	ldr	r1, [r7, #32]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f001 f9c5 	bl	8003004 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d107      	bne.n	8001c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01a      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d194      	bne.n	8001bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	00100002 	.word	0x00100002
 8001ce0:	ffff0000 	.word	0xffff0000

08001ce4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	817b      	strh	r3, [r7, #10]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	813b      	strh	r3, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cfe:	f7ff f84d 	bl	8000d9c <HAL_GetTick>
 8001d02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	f040 80d9 	bne.w	8001ec4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2319      	movs	r3, #25
 8001d18:	2201      	movs	r2, #1
 8001d1a:	496d      	ldr	r1, [pc, #436]	@ (8001ed0 <HAL_I2C_Mem_Write+0x1ec>)
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f001 f80f 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Mem_Write+0x56>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e0c5      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d007      	beq.n	8001d60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2221      	movs	r2, #33	@ 0x21
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a3a      	ldr	r2, [r7, #32]
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed4 <HAL_I2C_Mem_Write+0x1f0>)
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da2:	88f8      	ldrh	r0, [r7, #6]
 8001da4:	893a      	ldrh	r2, [r7, #8]
 8001da6:	8979      	ldrh	r1, [r7, #10]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fd30 	bl	8002818 <I2C_RequestMemoryWrite>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d052      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e081      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f001 f8d4 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x180>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1aa      	bne.n	8001dc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f001 f8c7 	bl	8003004 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d107      	bne.n	8001e94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e016      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00100002 	.word	0x00100002
 8001ed4:	ffff0000 	.word	0xffff0000

08001ed8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	@ 0x30
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	817b      	strh	r3, [r7, #10]
 8001eea:	460b      	mov	r3, r1
 8001eec:	813b      	strh	r3, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef6:	f7fe ff51 	bl	8000d9c <HAL_GetTick>
 8001efa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	f040 8250 	bne.w	80023aa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2319      	movs	r3, #25
 8001f10:	2201      	movs	r2, #1
 8001f12:	4982      	ldr	r1, [pc, #520]	@ (800211c <HAL_I2C_Mem_Read+0x244>)
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 ff13 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	e243      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2C_Mem_Read+0x5a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e23c      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d007      	beq.n	8001f58 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2222      	movs	r2, #34	@ 0x22
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a62      	ldr	r2, [pc, #392]	@ (8002120 <HAL_I2C_Mem_Read+0x248>)
 8001f98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f9a:	88f8      	ldrh	r0, [r7, #6]
 8001f9c:	893a      	ldrh	r2, [r7, #8]
 8001f9e:	8979      	ldrh	r1, [r7, #10]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	4603      	mov	r3, r0
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fcca 	bl	8002944 <I2C_RequestMemoryRead>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1f8      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d113      	bne.n	8001fea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e1cc      	b.n	8002384 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d11e      	bne.n	8002030 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002000:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002002:	b672      	cpsid	i
}
 8002004:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800202a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800202c:	b662      	cpsie	i
}
 800202e:	e035      	b.n	800209c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	2b02      	cmp	r3, #2
 8002036:	d11e      	bne.n	8002076 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002046:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002070:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002072:	b662      	cpsie	i
}
 8002074:	e012      	b.n	800209c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002084:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800209c:	e172      	b.n	8002384 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f200 811f 	bhi.w	80022e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d123      	bne.n	80020f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 ffed 	bl	8003094 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e173      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020f6:	e145      	b.n	8002384 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d152      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002106:	2200      	movs	r2, #0
 8002108:	4906      	ldr	r1, [pc, #24]	@ (8002124 <HAL_I2C_Mem_Read+0x24c>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fe18 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e148      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
 800211a:	bf00      	nop
 800211c:	00100002 	.word	0x00100002
 8002120:	ffff0000 	.word	0xffff0000
 8002124:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800216e:	b662      	cpsie	i
}
 8002170:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021a4:	e0ee      	b.n	8002384 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ac:	2200      	movs	r2, #0
 80021ae:	4981      	ldr	r1, [pc, #516]	@ (80023b4 <HAL_I2C_Mem_Read+0x4dc>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fdc5 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0f5      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002206:	4b6c      	ldr	r3, [pc, #432]	@ (80023b8 <HAL_I2C_Mem_Read+0x4e0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	4a6b      	ldr	r2, [pc, #428]	@ (80023bc <HAL_I2C_Mem_Read+0x4e4>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a1a      	lsrs	r2, r3, #8
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00da      	lsls	r2, r3, #3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	3b01      	subs	r3, #1
 8002224:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d118      	bne.n	800225e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f043 0220 	orr.w	r2, r3, #32
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800224e:	b662      	cpsie	i
}
 8002250:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0a6      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d1d9      	bne.n	8002220 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022ae:	b662      	cpsie	i
}
 80022b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022e4:	e04e      	b.n	8002384 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fed2 	bl	8003094 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e058      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d124      	bne.n	8002384 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002350:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f ae88 	bne.w	800209e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3728      	adds	r7, #40	@ 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	00010004 	.word	0x00010004
 80023b8:	20000000 	.word	0x20000000
 80023bc:	14f8b589 	.word	0x14f8b589

080023c0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	@ 0x30
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	817b      	strh	r3, [r7, #10]
 80023d2:	460b      	mov	r3, r1
 80023d4:	813b      	strh	r3, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023da:	f7fe fcdf 	bl	8000d9c <HAL_GetTick>
 80023de:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	f040 8168 	bne.w	80026c2 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80023f2:	4b98      	ldr	r3, [pc, #608]	@ (8002654 <HAL_I2C_Mem_Read_DMA+0x294>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	08db      	lsrs	r3, r3, #3
 80023f8:	4a97      	ldr	r2, [pc, #604]	@ (8002658 <HAL_I2C_Mem_Read_DMA+0x298>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a1a      	lsrs	r2, r3, #8
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009a      	lsls	r2, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3b01      	subs	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d112      	bne.n	800243e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
 800243c:	e142      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d0df      	beq.n	800240c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2C_Mem_Read_DMA+0x9a>
 8002456:	2302      	movs	r3, #2
 8002458:	e134      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d007      	beq.n	8002480 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2222      	movs	r2, #34	@ 0x22
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2240      	movs	r2, #64	@ 0x40
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a67      	ldr	r2, [pc, #412]	@ (800265c <HAL_I2C_Mem_Read_DMA+0x29c>)
 80024c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80024c2:	897a      	ldrh	r2, [r7, #10]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80c2 	beq.w	8002668 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d024      	beq.n	8002536 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	4a5b      	ldr	r2, [pc, #364]	@ (8002660 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002664 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	2200      	movs	r2, #0
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	2200      	movs	r2, #0
 800250a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3310      	adds	r3, #16
 8002516:	4619      	mov	r1, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002522:	f7fe fdd1 	bl	80010c8 <HAL_DMA_Start_IT>
 8002526:	4603      	mov	r3, r0
 8002528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800252c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002530:	2b00      	cmp	r3, #0
 8002532:	d17b      	bne.n	800262c <HAL_I2C_Mem_Read_DMA+0x26c>
 8002534:	e013      	b.n	800255e <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0b2      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800255e:	88f8      	ldrh	r0, [r7, #6]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2323      	movs	r3, #35	@ 0x23
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4603      	mov	r3, r0
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f9e8 	bl	8002944 <I2C_RequestMemoryRead>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d023      	beq.n	80025c2 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fe3e 	bl	8001200 <HAL_DMA_Abort_IT>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	2200      	movs	r2, #0
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a0:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e080      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d108      	bne.n	80025dc <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e007      	b.n	80025ec <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002618:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e048      	b.n	80026be <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e037      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
 8002654:	20000000 	.word	0x20000000
 8002658:	14f8b589 	.word	0x14f8b589
 800265c:	ffff0000 	.word	0xffff0000
 8002660:	08002b15 	.word	0x08002b15
 8002664:	08002cd3 	.word	0x08002cd3
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002668:	88f8      	ldrh	r0, [r7, #6]
 800266a:	893a      	ldrh	r2, [r7, #8]
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2323      	movs	r3, #35	@ 0x23
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4603      	mov	r3, r0
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f963 	bl	8002944 <I2C_RequestMemoryRead>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e01d      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ac:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	460b      	mov	r3, r1
 8002722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d006      	beq.n	800273e <I2C_MasterRequestWrite+0x2a>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d003      	beq.n	800273e <I2C_MasterRequestWrite+0x2a>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800273c:	d108      	bne.n	8002750 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e00b      	b.n	8002768 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	2b12      	cmp	r3, #18
 8002756:	d107      	bne.n	8002768 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fae3 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800278e:	d103      	bne.n	8002798 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002796:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e035      	b.n	8002808 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e01b      	b.n	80027f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027b8:	897b      	ldrh	r3, [r7, #10]
 80027ba:	11db      	asrs	r3, r3, #7
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0306 	and.w	r3, r3, #6
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f063 030f 	orn	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	490e      	ldr	r1, [pc, #56]	@ (8002810 <I2C_MasterRequestWrite+0xfc>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fb2c 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e010      	b.n	8002808 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4907      	ldr	r1, [pc, #28]	@ (8002814 <I2C_MasterRequestWrite+0x100>)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fb1c 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	00010008 	.word	0x00010008
 8002814:	00010002 	.word	0x00010002

08002818 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2200      	movs	r2, #0
 800284a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fa76 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002868:	d103      	bne.n	8002872 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002870:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e05f      	b.n	8002936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	492d      	ldr	r1, [pc, #180]	@ (8002940 <I2C_RequestMemoryWrite+0x128>)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fad1 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e04c      	b.n	8002936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	6a39      	ldr	r1, [r7, #32]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fb5c 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d107      	bne.n	80028da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e02b      	b.n	8002936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028e4:	893b      	ldrh	r3, [r7, #8]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	e021      	b.n	8002934 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002900:	6a39      	ldr	r1, [r7, #32]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fb36 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	2b04      	cmp	r3, #4
 8002914:	d107      	bne.n	8002926 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e005      	b.n	8002936 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	00010002 	.word	0x00010002

08002944 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	4603      	mov	r3, r0
 8002954:	817b      	strh	r3, [r7, #10]
 8002956:	460b      	mov	r3, r1
 8002958:	813b      	strh	r3, [r7, #8]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800296c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800297c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2200      	movs	r2, #0
 8002986:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f9d8 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a4:	d103      	bne.n	80029ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0aa      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	4952      	ldr	r1, [pc, #328]	@ (8002b10 <I2C_RequestMemoryRead+0x1cc>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa33 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e097      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fabe 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d107      	bne.n	8002a16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e076      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e021      	b.n	8002a70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa98 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d107      	bne.n	8002a62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e050      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	6a39      	ldr	r1, [r7, #32]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fa7d 	bl	8002f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d107      	bne.n	8002a98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e035      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f941 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad2:	d103      	bne.n	8002adc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e013      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ae0:	897b      	ldrh	r3, [r7, #10]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	6a3a      	ldr	r2, [r7, #32]
 8002af4:	4906      	ldr	r1, [pc, #24]	@ (8002b10 <I2C_RequestMemoryRead+0x1cc>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f99c 	bl	8002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	00010002 	.word	0x00010002

08002b14 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b28:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b30:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b46:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	2200      	movs	r2, #0
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	2200      	movs	r2, #0
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002b6e:	2b21      	cmp	r3, #33	@ 0x21
 8002b70:	d007      	beq.n	8002b82 <I2C_DMAXferCplt+0x6e>
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8002b78:	2b22      	cmp	r3, #34	@ 0x22
 8002b7a:	d131      	bne.n	8002be0 <I2C_DMAXferCplt+0xcc>
 8002b7c:	7cbb      	ldrb	r3, [r7, #18]
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d12e      	bne.n	8002be0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b90:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	2b29      	cmp	r3, #41	@ 0x29
 8002b9c:	d10a      	bne.n	8002bb4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2221      	movs	r2, #33	@ 0x21
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2228      	movs	r2, #40	@ 0x28
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bac:	6978      	ldr	r0, [r7, #20]
 8002bae:	f7ff fd96 	bl	80026de <HAL_I2C_SlaveTxCpltCallback>
 8002bb2:	e00c      	b.n	8002bce <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bb8:	d109      	bne.n	8002bce <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2222      	movs	r2, #34	@ 0x22
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2228      	movs	r2, #40	@ 0x28
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f7ff fd91 	bl	80026f0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002bdc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002bde:	e074      	b.n	8002cca <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d06e      	beq.n	8002cca <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c04:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c14:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c1c:	d009      	beq.n	8002c32 <I2C_DMAXferCplt+0x11e>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d006      	beq.n	8002c32 <I2C_DMAXferCplt+0x11e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c2a:	d002      	beq.n	8002c32 <I2C_DMAXferCplt+0x11e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d107      	bne.n	8002c42 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c40:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c50:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c60:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f7ff fd46 	bl	8002702 <HAL_I2C_ErrorCallback>
}
 8002c76:	e028      	b.n	8002cca <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b40      	cmp	r3, #64	@ 0x40
 8002c8a:	d10a      	bne.n	8002ca2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7fd fe26 	bl	80008ec <HAL_I2C_MemRxCpltCallback>
}
 8002ca0:	e013      	b.n	8002cca <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d002      	beq.n	8002cb6 <I2C_DMAXferCplt+0x1a2>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d103      	bne.n	8002cbe <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cbc:	e002      	b.n	8002cc4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2212      	movs	r2, #18
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f7ff fd01 	bl	80026cc <HAL_I2C_MasterRxCpltCallback>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	2200      	movs	r2, #0
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f043 0210 	orr.w	r2, r3, #16
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fce5 	bl	8002702 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	e048      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d044      	beq.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe f81f 	bl	8000d9c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d139      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	e00c      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d116      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e023      	b.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10d      	bne.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	e00c      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d093      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e42:	e071      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e52:	d123      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e067      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d041      	beq.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fd ff7a 	bl	8000d9c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d136      	bne.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10c      	bne.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e00b      	b.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e021      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10c      	bne.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e00b      	b.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f af6d 	bne.w	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f80:	e034      	b.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8e3 	bl	800314e <I2C_IsAcknowledgeFailed>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e034      	b.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d028      	beq.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fd feff 	bl	8000d9c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11d      	bne.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d016      	beq.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff6:	2b80      	cmp	r3, #128	@ 0x80
 8002ff8:	d1c3      	bne.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003010:	e034      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f89b 	bl	800314e <I2C_IsAcknowledgeFailed>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e034      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d028      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fd feb7 	bl	8000d9c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11d      	bne.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d016      	beq.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d1c3      	bne.n	8003012 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a0:	e049      	b.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d119      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0210 	mvn.w	r2, #16
 80030b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e030      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fd fe5a 	bl	8000d9c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11d      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d016      	beq.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d1ae      	bne.n	80030a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003164:	d11b      	bne.n	800319e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800316e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0e8      	b.n	800338e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f007 f8c3 	bl	800a35c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2203      	movs	r2, #3
 80031da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 f83e 	bl	800626a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f8:	f003 f814 	bl	8006224 <USB_CoreInit>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0bf      	b.n	800338e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f003 f842 	bl	800629e <USB_SetCurrentMode>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b0      	b.n	800338e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e03e      	b.n	80032b0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	3311      	adds	r3, #17
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3310      	adds	r3, #16
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	3313      	adds	r3, #19
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	3320      	adds	r3, #32
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	3324      	adds	r3, #36	@ 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3301      	adds	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	791b      	ldrb	r3, [r3, #4]
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d3bb      	bcc.n	8003232 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e044      	b.n	800334a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	3301      	adds	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	791b      	ldrb	r3, [r3, #4]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	429a      	cmp	r2, r3
 8003352:	d3b5      	bcc.n	80032c0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800335e:	f002 ffaa 	bl	80062b6 <USB_DevInit>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e00c      	b.n	800338e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f005 fa29 	bl	80087de <USB_DevDisconnect>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_PCD_Start+0x16>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e016      	b.n	80033da <HAL_PCD_Start+0x44>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f002 ff40 	bl	800623e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033be:	2101      	movs	r1, #1
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f007 fa3e 	bl	800a842 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f005 f9fd 	bl	80087ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b088      	sub	sp, #32
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 f9ff 	bl	80087f2 <USB_ReadInterrupts>
 80033f4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb1a 	bl	8003a3a <PCD_EP_ISR_Handler>

    return;
 8003406:	e119      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003424:	b292      	uxth	r2, r2
 8003426:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f007 f811 	bl	800a452 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003430:	2100      	movs	r1, #0
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f905 	bl	8003642 <HAL_PCD_SetAddress>

    return;
 8003438:	e100      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003456:	b292      	uxth	r2, r2
 8003458:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800345c:	e0ee      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00c      	beq.n	8003482 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800347a:	b292      	uxth	r2, r2
 800347c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003480:	e0dc      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d027      	beq.n	80034dc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0204 	bic.w	r2, r2, #4
 800349e:	b292      	uxth	r2, r2
 80034a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	b292      	uxth	r2, r2
 80034b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f007 f801 	bl	800a4c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034d4:	b292      	uxth	r2, r2
 80034d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034da:	e0af      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8083 	beq.w	80035ee <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e010      	b.n	8003510 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	7ffb      	ldrb	r3, [r7, #31]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	441a      	add	r2, r3
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	b292      	uxth	r2, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	3320      	adds	r3, #32
 8003504:	443b      	add	r3, r7
 8003506:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	3301      	adds	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	2b07      	cmp	r3, #7
 8003514:	d9eb      	bls.n	80034ee <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	b292      	uxth	r2, r2
 800352a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	b292      	uxth	r2, r2
 8003542:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003546:	bf00      	nop
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003550:	b29b      	uxth	r3, r3
 8003552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f6      	beq.n	8003548 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e00f      	b.n	8003598 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	4611      	mov	r1, r2
 8003580:	7ffa      	ldrb	r2, [r7, #31]
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	440a      	add	r2, r1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	3320      	adds	r3, #32
 800358a:	443b      	add	r3, r7
 800358c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003590:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	3301      	adds	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	7ffb      	ldrb	r3, [r7, #31]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d9ec      	bls.n	8003578 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0208 	orr.w	r2, r2, #8
 80035b0:	b292      	uxth	r2, r2
 80035b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c8:	b292      	uxth	r2, r2
 80035ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0204 	orr.w	r2, r2, #4
 80035e0:	b292      	uxth	r2, r2
 80035e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f006 ff52 	bl	800a490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80035ec:	e026      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800360a:	b292      	uxth	r2, r2
 800360c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f006 ff10 	bl	800a436 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003616:	e011      	b.n	800363c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003634:	b292      	uxth	r2, r2
 8003636:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800363a:	bf00      	nop
  }
}
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_SetAddress+0x1a>
 8003658:	2302      	movs	r3, #2
 800365a:	e012      	b.n	8003682 <HAL_PCD_SetAddress+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f005 f896 	bl	80087a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	4608      	mov	r0, r1
 8003694:	4611      	mov	r1, r2
 8003696:	461a      	mov	r2, r3
 8003698:	4603      	mov	r3, r0
 800369a:	70fb      	strb	r3, [r7, #3]
 800369c:	460b      	mov	r3, r1
 800369e:	803b      	strh	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	da0e      	bge.n	80036ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 0207 	and.w	r2, r3, #7
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	3310      	adds	r3, #16
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	705a      	strb	r2, [r3, #1]
 80036cc:	e00e      	b.n	80036ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 0207 	and.w	r2, r3, #7
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036f8:	883a      	ldrh	r2, [r7, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	78ba      	ldrb	r2, [r7, #2]
 8003702:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003704:	78bb      	ldrb	r3, [r7, #2]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d102      	bne.n	8003710 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_PCD_EP_Open+0x94>
 800371a:	2302      	movs	r3, #2
 800371c:	e00e      	b.n	800373c <HAL_PCD_EP_Open+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fddf 	bl	80062f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800373a:	7afb      	ldrb	r3, [r7, #11]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003754:	2b00      	cmp	r3, #0
 8003756:	da0e      	bge.n	8003776 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 0207 	and.w	r2, r3, #7
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	3310      	adds	r3, #16
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	705a      	strb	r2, [r3, #1]
 8003774:	e00e      	b.n	8003794 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	f003 0207 	and.w	r2, r3, #7
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_PCD_EP_Close+0x6a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e00e      	b.n	80037cc <HAL_PCD_EP_Close+0x88>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 f957 	bl	8006a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	460b      	mov	r3, r1
 80037e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4413      	add	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	b2da      	uxtb	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fb0e 	bl	8006e48 <USB_EPStartXfer>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 0207 	and.w	r2, r3, #7
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003858:	681b      	ldr	r3, [r3, #0]
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	460b      	mov	r3, r1
 8003872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	f003 0207 	and.w	r2, r3, #7
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	3310      	adds	r3, #16
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2201      	movs	r2, #1
 80038ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6979      	ldr	r1, [r7, #20]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 fac0 	bl	8006e48 <USB_EPStartXfer>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	7912      	ldrb	r2, [r2, #4]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e04c      	b.n	800398a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da0e      	bge.n	8003916 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	f003 0207 	and.w	r2, r3, #7
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	3310      	adds	r3, #16
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	705a      	strb	r2, [r3, #1]
 8003914:	e00c      	b.n	8003930 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_PCD_EP_SetStall+0x7e>
 800394c:	2302      	movs	r3, #2
 800394e:	e01c      	b.n	800398a <HAL_PCD_EP_SetStall+0xb8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fe23 	bl	80085aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f004 ff48 	bl	8008810 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	7912      	ldrb	r2, [r2, #4]
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e040      	b.n	8003a32 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da0e      	bge.n	80039d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 0207 	and.w	r2, r3, #7
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	3310      	adds	r3, #16
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	705a      	strb	r2, [r3, #1]
 80039d4:	e00e      	b.n	80039f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 0207 	and.w	r2, r3, #7
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_EP_ClrStall+0x82>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e00e      	b.n	8003a32 <HAL_PCD_EP_ClrStall+0xa0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 fe11 	bl	800864a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b096      	sub	sp, #88	@ 0x58
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a42:	e3bb      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003a5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8175 	bne.w	8003d52 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d14e      	bne.n	8003b12 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a84:	81fb      	strh	r3, [r7, #14]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3310      	adds	r3, #16
 8003a9c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	441a      	add	r2, r3
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f006 fc91 	bl	800a402 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7b5b      	ldrb	r3, [r3, #13]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8368 	beq.w	80041bc <PCD_EP_ISR_Handler+0x782>
 8003aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 8363 	bne.w	80041bc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	7b5b      	ldrb	r3, [r3, #13]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	735a      	strb	r2, [r3, #13]
 8003b10:	e354      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b18:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d034      	beq.n	8003b9a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	3306      	adds	r3, #6
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f004 fe9e 	bl	80088b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b80:	4013      	ands	r3, r2
 8003b82:	823b      	strh	r3, [r7, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	8a3a      	ldrh	r2, [r7, #16]
 8003b8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f006 fc08 	bl	800a3a8 <HAL_PCD_SetupStageCallback>
 8003b98:	e310      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b9a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f280 830c 	bge.w	80041bc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	83fb      	strh	r3, [r7, #30]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	8bfa      	ldrh	r2, [r7, #30]
 8003bba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3306      	adds	r3, #6
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d019      	beq.n	8003c2a <PCD_EP_ISR_Handler+0x1f0>
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d015      	beq.n	8003c2a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c04:	6959      	ldr	r1, [r3, #20]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f004 fe4e 	bl	80088b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c22:	2100      	movs	r1, #0
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f006 fbd1 	bl	800a3cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003c34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 82bd 	bne.w	80041bc <PCD_EP_ISR_Handler+0x782>
 8003c42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c4e:	f000 82b5 	beq.w	80041bc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	4413      	add	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	801a      	strh	r2, [r3, #0]
 8003c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c88:	d91d      	bls.n	8003cc6 <PCD_EP_ISR_Handler+0x28c>
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <PCD_EP_ISR_Handler+0x26a>
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e026      	b.n	8003d14 <PCD_EP_ISR_Handler+0x2da>
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <PCD_EP_ISR_Handler+0x2aa>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	e017      	b.n	8003d14 <PCD_EP_ISR_Handler+0x2da>
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <PCD_EP_ISR_Handler+0x2c4>
 8003cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	029b      	lsls	r3, r3, #10
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d24:	827b      	strh	r3, [r7, #18]
 8003d26:	8a7b      	ldrh	r3, [r7, #18]
 8003d28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003d2c:	827b      	strh	r3, [r7, #18]
 8003d2e:	8a7b      	ldrh	r3, [r7, #18]
 8003d30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d34:	827b      	strh	r3, [r7, #18]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	8a7b      	ldrh	r3, [r7, #18]
 8003d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8013      	strh	r3, [r2, #0]
 8003d50:	e234      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d66:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f280 80fc 	bge.w	8003f68 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d86:	4013      	ands	r3, r2
 8003d88:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003d9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003da2:	b292      	uxth	r2, r2
 8003da4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003da6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	7b1b      	ldrb	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d125      	bne.n	8003e10 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3306      	adds	r3, #6
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8092 	beq.w	8003f1e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e00:	6959      	ldr	r1, [r3, #20]
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	88da      	ldrh	r2, [r3, #6]
 8003e06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e0a:	f004 fd51 	bl	80088b0 <USB_ReadPMA>
 8003e0e:	e086      	b.n	8003f1e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e12:	78db      	ldrb	r3, [r3, #3]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d10a      	bne.n	8003e2e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f9d9 	bl	80041d8 <HAL_PCD_EP_DB_Receive>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003e2c:	e077      	b.n	8003f1e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e48:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d024      	beq.n	8003ed6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003eb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02e      	beq.n	8003f1e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eca:	891a      	ldrh	r2, [r3, #8]
 8003ecc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ed0:	f004 fcee 	bl	80088b0 <USB_ReadPMA>
 8003ed4:	e023      	b.n	8003f1e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3306      	adds	r3, #6
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003f02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f10:	6959      	ldr	r1, [r3, #20]
 8003f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f14:	895a      	ldrh	r2, [r3, #10]
 8003f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f1a:	f004 fcc9 	bl	80088b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f26:	441a      	add	r2, r3
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f34:	441a      	add	r2, r3
 8003f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f38:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <PCD_EP_ISR_Handler+0x514>
 8003f42:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d206      	bcs.n	8003f5c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f006 fa39 	bl	800a3cc <HAL_PCD_DataOutStageCallback>
 8003f5a:	e005      	b.n	8003f68 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 ff70 	bl	8006e48 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8123 	beq.w	80041bc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f76:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	3310      	adds	r3, #16
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	78db      	ldrb	r3, [r3, #3]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	f040 80a2 	bne.w	8004114 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd8:	7b1b      	ldrb	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8093 	beq.w	8004106 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fe0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d046      	beq.n	800407a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fee:	785b      	ldrb	r3, [r3, #1]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d126      	bne.n	8004042 <PCD_EP_ISR_Handler+0x608>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004002:	b29b      	uxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	4413      	add	r3, r2
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
 800400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	011a      	lsls	r2, r3, #4
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	4413      	add	r3, r2
 8004016:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004026:	b29a      	uxth	r2, r3
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800403a:	b29a      	uxth	r2, r3
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e061      	b.n	8004106 <PCD_EP_ISR_Handler+0x6cc>
 8004042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d15d      	bne.n	8004106 <PCD_EP_ISR_Handler+0x6cc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004058:	b29b      	uxth	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405e:	4413      	add	r3, r2
 8004060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	011a      	lsls	r2, r3, #4
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406a:	4413      	add	r3, r2
 800406c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	2200      	movs	r2, #0
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	e045      	b.n	8004106 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d126      	bne.n	80040d6 <PCD_EP_ISR_Handler+0x69c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	4413      	add	r3, r2
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	e017      	b.n	8004106 <PCD_EP_ISR_Handler+0x6cc>
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d113      	bne.n	8004106 <PCD_EP_ISR_Handler+0x6cc>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ec:	4413      	add	r3, r2
 80040ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	011a      	lsls	r2, r3, #4
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	4413      	add	r3, r2
 80040fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	2200      	movs	r2, #0
 8004104:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f006 f978 	bl	800a402 <HAL_PCD_DataInStageCallback>
 8004112:	e053      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004114:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d146      	bne.n	80041ae <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	3302      	adds	r3, #2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004148:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800414c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004154:	429a      	cmp	r2, r3
 8004156:	d907      	bls.n	8004168 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004164:	619a      	str	r2, [r3, #24]
 8004166:	e002      	b.n	800416e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f006 f940 	bl	800a402 <HAL_PCD_DataInStageCallback>
 8004182:	e01b      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800418c:	441a      	add	r2, r3
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800419a:	441a      	add	r2, r3
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 fe4e 	bl	8006e48 <USB_EPStartXfer>
 80041ac:	e006      	b.n	80041bc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80041ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041b2:	461a      	mov	r2, r3
 80041b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f91b 	bl	80043f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b21b      	sxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f6ff ac3b 	blt.w	8003a44 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3758      	adds	r7, #88	@ 0x58
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d07e      	beq.n	80042ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	3302      	adds	r3, #2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004218:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	8b7b      	ldrh	r3, [r7, #26]
 8004220:	429a      	cmp	r2, r3
 8004222:	d306      	bcc.n	8004232 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	8b7b      	ldrh	r3, [r7, #26]
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	619a      	str	r2, [r3, #24]
 8004230:	e002      	b.n	8004238 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d123      	bne.n	8004288 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	833b      	strh	r3, [r7, #24]
 800425c:	8b3b      	ldrh	r3, [r7, #24]
 800425e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004262:	833b      	strh	r3, [r7, #24]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	8b3b      	ldrh	r3, [r7, #24]
 8004274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800427c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01f      	beq.n	80042d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ac:	82fb      	strh	r3, [r7, #22]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	8afb      	ldrh	r3, [r7, #22]
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042d2:	8b7b      	ldrh	r3, [r7, #26]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8087 	beq.w	80043e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6959      	ldr	r1, [r3, #20]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	891a      	ldrh	r2, [r3, #8]
 80042e6:	8b7b      	ldrh	r3, [r7, #26]
 80042e8:	f004 fae2 	bl	80088b0 <USB_ReadPMA>
 80042ec:	e07c      	b.n	80043e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	3306      	adds	r3, #6
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004316:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	8b7b      	ldrh	r3, [r7, #26]
 800431e:	429a      	cmp	r2, r3
 8004320:	d306      	bcc.n	8004330 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	8b7b      	ldrh	r3, [r7, #26]
 8004328:	1ad2      	subs	r2, r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	619a      	str	r2, [r3, #24]
 800432e:	e002      	b.n	8004336 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d123      	bne.n	8004386 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004358:	83fb      	strh	r3, [r7, #30]
 800435a:	8bfb      	ldrh	r3, [r7, #30]
 800435c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004360:	83fb      	strh	r3, [r7, #30]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	8bfb      	ldrh	r3, [r7, #30]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800437a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800437e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11f      	bne.n	80043d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043aa:	83bb      	strh	r3, [r7, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	8bbb      	ldrh	r3, [r7, #28]
 80043bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043d0:	8b7b      	ldrh	r3, [r7, #26]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6959      	ldr	r1, [r3, #20]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	895a      	ldrh	r2, [r3, #10]
 80043e2:	8b7b      	ldrh	r3, [r7, #26]
 80043e4:	f004 fa64 	bl	80088b0 <USB_ReadPMA>
    }
  }

  return count;
 80043e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b0a4      	sub	sp, #144	@ 0x90
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 81dd 	beq.w	80047c6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004414:	b29b      	uxth	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	3302      	adds	r3, #2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004434:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004440:	429a      	cmp	r2, r3
 8004442:	d907      	bls.n	8004454 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800444c:	1ad2      	subs	r2, r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	619a      	str	r2, [r3, #24]
 8004452:	e002      	b.n	800445a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 80b9 	bne.w	80045d6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d126      	bne.n	80044ba <HAL_PCD_EP_DB_Transmit+0xc8>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	4413      	add	r3, r2
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	011a      	lsls	r2, r3, #4
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	4413      	add	r3, r2
 800448e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	e01a      	b.n	80044f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d116      	bne.n	80044f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d6:	4413      	add	r3, r2
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	011a      	lsls	r2, r3, #4
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d126      	bne.n	800454c <HAL_PCD_EP_DB_Transmit+0x15a>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800450c:	b29b      	uxth	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	011a      	lsls	r2, r3, #4
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004530:	b29a      	uxth	r2, r3
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004544:	b29a      	uxth	r2, r3
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	e017      	b.n	800457c <HAL_PCD_EP_DB_Transmit+0x18a>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d113      	bne.n	800457c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	4413      	add	r3, r2
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	011a      	lsls	r2, r3, #4
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	4413      	add	r3, r2
 8004570:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	2200      	movs	r2, #0
 800457a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f005 ff3d 	bl	800a402 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 82fc 	beq.w	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	82fb      	strh	r3, [r7, #22]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	8afb      	ldrh	r3, [r7, #22]
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]
 80045d4:	e2da      	b.n	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d021      	beq.n	8004624 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800461c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800462a:	2b01      	cmp	r3, #1
 800462c:	f040 82ae 	bne.w	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004638:	441a      	add	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004646:	441a      	add	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d30b      	bcc.n	8004670 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	621a      	str	r2, [r3, #32]
 800466e:	e017      	b.n	80046a0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d108      	bne.n	800468a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004678:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800467c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004688:	e00a      	b.n	80046a0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2200      	movs	r2, #0
 800469e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d165      	bne.n	8004774 <HAL_PCD_EP_DB_Transmit+0x382>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046bc:	4413      	add	r3, r2
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	011a      	lsls	r2, r3, #4
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	4413      	add	r3, r2
 80046ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046da:	b29a      	uxth	r2, r3
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80046e6:	d91d      	bls.n	8004724 <HAL_PCD_EP_DB_Transmit+0x332>
 80046e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <HAL_PCD_EP_DB_Transmit+0x310>
 80046fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046fe:	3b01      	subs	r3, #1
 8004700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29a      	uxth	r2, r3
 8004708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800470a:	b29b      	uxth	r3, r3
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	b29b      	uxth	r3, r3
 8004710:	4313      	orrs	r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471c:	b29a      	uxth	r2, r3
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e044      	b.n	80047ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_PCD_EP_DB_Transmit+0x350>
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473a:	b29a      	uxth	r2, r3
 800473c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	e035      	b.n	80047ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004758:	3301      	adds	r3, #1
 800475a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29a      	uxth	r2, r3
 8004762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004764:	b29b      	uxth	r3, r3
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	b29b      	uxth	r3, r3
 800476a:	4313      	orrs	r3, r2
 800476c:	b29a      	uxth	r2, r3
 800476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e01c      	b.n	80047ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d118      	bne.n	80047ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	647b      	str	r3, [r7, #68]	@ 0x44
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004790:	4413      	add	r3, r2
 8004792:	647b      	str	r3, [r7, #68]	@ 0x44
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800479c:	4413      	add	r3, r2
 800479e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6959      	ldr	r1, [r3, #20]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	891a      	ldrh	r2, [r3, #8]
 80047ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f004 f831 	bl	8008826 <USB_WritePMA>
 80047c4:	e1e2      	b.n	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	3306      	adds	r3, #6
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d307      	bcc.n	800480e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	619a      	str	r2, [r3, #24]
 800480c:	e002      	b.n	8004814 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 80c0 	bne.w	800499e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d126      	bne.n	8004874 <HAL_PCD_EP_DB_Transmit+0x482>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800483a:	4413      	add	r3, r2
 800483c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	011a      	lsls	r2, r3, #4
 8004844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004846:	4413      	add	r3, r2
 8004848:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800484c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800484e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004858:	b29a      	uxth	r2, r3
 800485a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486c:	b29a      	uxth	r2, r3
 800486e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e01a      	b.n	80048aa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d116      	bne.n	80048aa <HAL_PCD_EP_DB_Transmit+0x4b8>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	667b      	str	r3, [r7, #100]	@ 0x64
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004890:	4413      	add	r3, r2
 8004892:	667b      	str	r3, [r7, #100]	@ 0x64
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	011a      	lsls	r2, r3, #4
 800489a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800489c:	4413      	add	r3, r2
 800489e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80048a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048a6:	2200      	movs	r2, #0
 80048a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d12b      	bne.n	8004910 <HAL_PCD_EP_DB_Transmit+0x51e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048cc:	4413      	add	r3, r2
 80048ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	011a      	lsls	r2, r3, #4
 80048d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048d8:	4413      	add	r3, r2
 80048da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004906:	b29a      	uxth	r2, r3
 8004908:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e017      	b.n	8004940 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d113      	bne.n	8004940 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004926:	4413      	add	r3, r2
 8004928:	677b      	str	r3, [r7, #116]	@ 0x74
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	011a      	lsls	r2, r3, #4
 8004930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004932:	4413      	add	r3, r2
 8004934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004938:	673b      	str	r3, [r7, #112]	@ 0x70
 800493a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800493c:	2200      	movs	r2, #0
 800493e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	4619      	mov	r1, r3
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f005 fd5b 	bl	800a402 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 811a 	bne.w	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800498c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]
 800499c:	e0f6      	b.n	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d121      	bne.n	80049ec <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	f040 80ca 	bne.w	8004b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a00:	441a      	add	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a0e:	441a      	add	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d30b      	bcc.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	621a      	str	r2, [r3, #32]
 8004a36:	e017      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004a40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a50:	e00a      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d165      	bne.n	8004b42 <HAL_PCD_EP_DB_Transmit+0x750>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a8a:	4413      	add	r3, r2
 8004a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	011a      	lsls	r2, r3, #4
 8004a94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a96:	4413      	add	r3, r2
 8004a98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ab2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ab4:	d91d      	bls.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x700>
 8004ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004acc:	3b01      	subs	r3, #1
 8004ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	029b      	lsls	r3, r3, #10
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	e041      	b.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8004af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	e032      	b.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_PCD_EP_DB_Transmit+0x738>
 8004b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b26:	3301      	adds	r3, #1
 8004b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	e019      	b.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d115      	bne.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b58:	4413      	add	r3, r2
 8004b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	011a      	lsls	r2, r3, #4
 8004b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b64:	4413      	add	r3, r2
 8004b66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6959      	ldr	r1, [r3, #20]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	895a      	ldrh	r2, [r3, #10]
 8004b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f003 fe4d 	bl	8008826 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba6:	82bb      	strh	r3, [r7, #20]
 8004ba8:	8abb      	ldrh	r3, [r7, #20]
 8004baa:	f083 0310 	eor.w	r3, r3, #16
 8004bae:	82bb      	strh	r3, [r7, #20]
 8004bb0:	8abb      	ldrh	r3, [r7, #20]
 8004bb2:	f083 0320 	eor.w	r3, r3, #32
 8004bb6:	82bb      	strh	r3, [r7, #20]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	8abb      	ldrh	r3, [r7, #20]
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3790      	adds	r7, #144	@ 0x90
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b087      	sub	sp, #28
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	817b      	strh	r3, [r7, #10]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004bf8:	897b      	ldrh	r3, [r7, #10]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c04:	897b      	ldrh	r3, [r7, #10]
 8004c06:	f003 0207 	and.w	r2, r3, #7
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	3310      	adds	r3, #16
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e009      	b.n	8004c30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c1c:	897a      	ldrh	r2, [r7, #10]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c30:	893b      	ldrh	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d107      	bne.n	8004c46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	80da      	strh	r2, [r3, #6]
 8004c44:	e00b      	b.n	8004c5e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e272      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8087 	beq.w	8004d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c8c:	4b92      	ldr	r3, [pc, #584]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d00c      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c98:	4b8f      	ldr	r3, [pc, #572]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d112      	bne.n	8004cca <HAL_RCC_OscConfig+0x5e>
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb0:	d10b      	bne.n	8004cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb2:	4b89      	ldr	r3, [pc, #548]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d06c      	beq.n	8004d98 <HAL_RCC_OscConfig+0x12c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d168      	bne.n	8004d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e24c      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x76>
 8004cd4:	4b80      	ldr	r3, [pc, #512]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e02e      	b.n	8004d40 <HAL_RCC_OscConfig+0xd4>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x98>
 8004cea:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7a      	ldr	r2, [pc, #488]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b78      	ldr	r3, [pc, #480]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a77      	ldr	r2, [pc, #476]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e01d      	b.n	8004d40 <HAL_RCC_OscConfig+0xd4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0xbc>
 8004d0e:	4b72      	ldr	r3, [pc, #456]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a71      	ldr	r2, [pc, #452]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e00b      	b.n	8004d40 <HAL_RCC_OscConfig+0xd4>
 8004d28:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	4b68      	ldr	r3, [pc, #416]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a67      	ldr	r2, [pc, #412]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fc f828 	bl	8000d9c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fc f824 	bl	8000d9c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	@ 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e200      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	4b5d      	ldr	r3, [pc, #372]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0xe4>
 8004d6e:	e014      	b.n	8004d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fc f814 	bl	8000d9c <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fc f810 	bl	8000d9c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	@ 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e1ec      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x10c>
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d063      	beq.n	8004e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004da6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004db2:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d11c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x18c>
 8004dbe:	4b46      	ldr	r3, [pc, #280]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d116      	bne.n	8004df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	4b43      	ldr	r3, [pc, #268]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_RCC_OscConfig+0x176>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e1c0      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4939      	ldr	r1, [pc, #228]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	e03a      	b.n	8004e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e00:	4b36      	ldr	r3, [pc, #216]	@ (8004edc <HAL_RCC_OscConfig+0x270>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fb ffc9 	bl	8000d9c <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0e:	f7fb ffc5 	bl	8000d9c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e1a1      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4927      	ldr	r1, [pc, #156]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	600b      	str	r3, [r1, #0]
 8004e40:	e015      	b.n	8004e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e42:	4b26      	ldr	r3, [pc, #152]	@ (8004edc <HAL_RCC_OscConfig+0x270>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fb ffa8 	bl	8000d9c <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e50:	f7fb ffa4 	bl	8000d9c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e180      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d03a      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d019      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e82:	4b17      	ldr	r3, [pc, #92]	@ (8004ee0 <HAL_RCC_OscConfig+0x274>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e88:	f7fb ff88 	bl	8000d9c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fb ff84 	bl	8000d9c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e160      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eae:	2001      	movs	r0, #1
 8004eb0:	f000 face 	bl	8005450 <RCC_Delay>
 8004eb4:	e01c      	b.n	8004ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7fb ff6e 	bl	8000d9c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec2:	e00f      	b.n	8004ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec4:	f7fb ff6a 	bl	8000d9c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d908      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e146      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	42420000 	.word	0x42420000
 8004ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b92      	ldr	r3, [pc, #584]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e9      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a6 	beq.w	800504a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f02:	4b8b      	ldr	r3, [pc, #556]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10d      	bne.n	8004f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0e:	4b88      	ldr	r3, [pc, #544]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4a87      	ldr	r2, [pc, #540]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f18:	61d3      	str	r3, [r2, #28]
 8004f1a:	4b85      	ldr	r3, [pc, #532]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2a:	4b82      	ldr	r3, [pc, #520]	@ (8005134 <HAL_RCC_OscConfig+0x4c8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d118      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f36:	4b7f      	ldr	r3, [pc, #508]	@ (8005134 <HAL_RCC_OscConfig+0x4c8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005134 <HAL_RCC_OscConfig+0x4c8>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f42:	f7fb ff2b 	bl	8000d9c <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fb ff27 	bl	8000d9c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b64      	cmp	r3, #100	@ 0x64
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e103      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	4b75      	ldr	r3, [pc, #468]	@ (8005134 <HAL_RCC_OscConfig+0x4c8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x312>
 8004f70:	4b6f      	ldr	r3, [pc, #444]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4a6e      	ldr	r2, [pc, #440]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6213      	str	r3, [r2, #32]
 8004f7c:	e02d      	b.n	8004fda <HAL_RCC_OscConfig+0x36e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x334>
 8004f86:	4b6a      	ldr	r3, [pc, #424]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4a69      	ldr	r2, [pc, #420]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6213      	str	r3, [r2, #32]
 8004f92:	4b67      	ldr	r3, [pc, #412]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a66      	ldr	r2, [pc, #408]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	6213      	str	r3, [r2, #32]
 8004f9e:	e01c      	b.n	8004fda <HAL_RCC_OscConfig+0x36e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x356>
 8004fa8:	4b61      	ldr	r3, [pc, #388]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4a60      	ldr	r2, [pc, #384]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fae:	f043 0304 	orr.w	r3, r3, #4
 8004fb2:	6213      	str	r3, [r2, #32]
 8004fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6213      	str	r3, [r2, #32]
 8004fc0:	e00b      	b.n	8004fda <HAL_RCC_OscConfig+0x36e>
 8004fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	6213      	str	r3, [r2, #32]
 8004fce:	4b58      	ldr	r3, [pc, #352]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4a57      	ldr	r2, [pc, #348]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d015      	beq.n	800500e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe2:	f7fb fedb 	bl	8000d9c <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fb fed7 	bl	8000d9c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e0b1      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	4b4b      	ldr	r3, [pc, #300]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0ee      	beq.n	8004fea <HAL_RCC_OscConfig+0x37e>
 800500c:	e014      	b.n	8005038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500e:	f7fb fec5 	bl	8000d9c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fb fec1 	bl	8000d9c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e09b      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	4b40      	ldr	r3, [pc, #256]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ee      	bne.n	8005016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503e:	4b3c      	ldr	r3, [pc, #240]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4a3b      	ldr	r2, [pc, #236]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8005044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8087 	beq.w	8005162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005054:	4b36      	ldr	r3, [pc, #216]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b08      	cmp	r3, #8
 800505e:	d061      	beq.n	8005124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d146      	bne.n	80050f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005068:	4b33      	ldr	r3, [pc, #204]	@ (8005138 <HAL_RCC_OscConfig+0x4cc>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506e:	f7fb fe95 	bl	8000d9c <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005076:	f7fb fe91 	bl	8000d9c <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e06d      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005088:	4b29      	ldr	r3, [pc, #164]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509c:	d108      	bne.n	80050b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4921      	ldr	r1, [pc, #132]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a19      	ldr	r1, [r3, #32]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	430b      	orrs	r3, r1
 80050c2:	491b      	ldr	r1, [pc, #108]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005138 <HAL_RCC_OscConfig+0x4cc>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fb fe65 	bl	8000d9c <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fb fe61 	bl	8000d9c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e03d      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x46a>
 80050f4:	e035      	b.n	8005162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	4b10      	ldr	r3, [pc, #64]	@ (8005138 <HAL_RCC_OscConfig+0x4cc>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fb fe4e 	bl	8000d9c <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fb fe4a 	bl	8000d9c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e026      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005116:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <HAL_RCC_OscConfig+0x4c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x498>
 8005122:	e01e      	b.n	8005162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d107      	bne.n	800513c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e019      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
 8005130:	40021000 	.word	0x40021000
 8005134:	40007000 	.word	0x40007000
 8005138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_OscConfig+0x500>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	429a      	cmp	r2, r3
 800514e:	d106      	bne.n	800515e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000

08005170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d0      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b67      	ldr	r3, [pc, #412]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	4965      	ldr	r1, [pc, #404]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b63      	ldr	r3, [pc, #396]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0b8      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051cc:	4b59      	ldr	r3, [pc, #356]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a58      	ldr	r2, [pc, #352]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e4:	4b53      	ldr	r3, [pc, #332]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a52      	ldr	r2, [pc, #328]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80051ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f0:	4b50      	ldr	r3, [pc, #320]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	494d      	ldr	r1, [pc, #308]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d040      	beq.n	8005290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d115      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b41      	ldr	r3, [pc, #260]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e073      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b3d      	ldr	r3, [pc, #244]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e06b      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b39      	ldr	r3, [pc, #228]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4936      	ldr	r1, [pc, #216]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005260:	f7fb fd9c 	bl	8000d9c <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fb fd98 	bl	8000d9c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e053      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b2d      	ldr	r3, [pc, #180]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f003 020c 	and.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1eb      	bne.n	8005268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005290:	4b27      	ldr	r3, [pc, #156]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d210      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 0207 	bic.w	r2, r3, #7
 80052a6:	4922      	ldr	r1, [pc, #136]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b20      	ldr	r3, [pc, #128]	@ (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e032      	b.n	8005326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4916      	ldr	r1, [pc, #88]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ea:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	490e      	ldr	r1, [pc, #56]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052fe:	f000 f821 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490a      	ldr	r1, [pc, #40]	@ (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	4a09      	ldr	r2, [pc, #36]	@ (800533c <HAL_RCC_ClockConfig+0x1cc>)
 8005318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800531a:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1d0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb fcfa 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40022000 	.word	0x40022000
 8005334:	40021000 	.word	0x40021000
 8005338:	0800bb3c 	.word	0x0800bb3c
 800533c:	20000000 	.word	0x20000000
 8005340:	20000004 	.word	0x20000004

08005344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800535e:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b04      	cmp	r3, #4
 800536c:	d002      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0x30>
 800536e:	2b08      	cmp	r3, #8
 8005370:	d003      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x36>
 8005372:	e027      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005374:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x98>)
 8005376:	613b      	str	r3, [r7, #16]
      break;
 8005378:	e027      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	0c9b      	lsrs	r3, r3, #18
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	4a17      	ldr	r2, [pc, #92]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005384:	5cd3      	ldrb	r3, [r2, r3]
 8005386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	0c5b      	lsrs	r3, r3, #17
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	4a11      	ldr	r2, [pc, #68]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800539e:	5cd3      	ldrb	r3, [r2, r3]
 80053a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a0d      	ldr	r2, [pc, #52]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x98>)
 80053a6:	fb03 f202 	mul.w	r2, r3, r2
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e004      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	613b      	str	r3, [r7, #16]
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x98>)
 80053c6:	613b      	str	r3, [r7, #16]
      break;
 80053c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ca:	693b      	ldr	r3, [r7, #16]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	007a1200 	.word	0x007a1200
 80053e0:	0800bb54 	.word	0x0800bb54
 80053e4:	0800bb64 	.word	0x0800bb64
 80053e8:	003d0900 	.word	0x003d0900

080053ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f0:	4b02      	ldr	r3, [pc, #8]	@ (80053fc <HAL_RCC_GetHCLKFreq+0x10>)
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	20000000 	.word	0x20000000

08005400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005404:	f7ff fff2 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	@ (8005424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000
 8005424:	0800bb4c 	.word	0x0800bb4c

08005428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800542c:	f7ff ffde 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0adb      	lsrs	r3, r3, #11
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	@ (800544c <HAL_RCC_GetPCLK2Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	0800bb4c 	.word	0x0800bb4c

08005450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <RCC_Delay+0x34>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0a      	ldr	r2, [pc, #40]	@ (8005488 <RCC_Delay+0x38>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	0a5b      	lsrs	r3, r3, #9
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800546c:	bf00      	nop
  }
  while (Delay --);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f9      	bne.n	800546c <RCC_Delay+0x1c>
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20000000 	.word	0x20000000
 8005488:	10624dd3 	.word	0x10624dd3

0800548c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d07d      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054a8:	2300      	movs	r3, #0
 80054aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ac:	4b4f      	ldr	r3, [pc, #316]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b8:	4b4c      	ldr	r3, [pc, #304]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	4a4b      	ldr	r2, [pc, #300]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	61d3      	str	r3, [r2, #28]
 80054c4:	4b49      	ldr	r3, [pc, #292]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d0:	2301      	movs	r3, #1
 80054d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d4:	4b46      	ldr	r3, [pc, #280]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d118      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e0:	4b43      	ldr	r3, [pc, #268]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a42      	ldr	r2, [pc, #264]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ec:	f7fb fc56 	bl	8000d9c <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f4:	f7fb fc52 	bl	8000d9c <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e06d      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b3a      	ldr	r3, [pc, #232]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005512:	4b36      	ldr	r3, [pc, #216]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800551a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02e      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d027      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005530:	4b2e      	ldr	r3, [pc, #184]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553a:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005540:	4b2c      	ldr	r3, [pc, #176]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005546:	4a29      	ldr	r2, [pc, #164]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fb fc21 	bl	8000d9c <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555c:	e00a      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555e:	f7fb fc1d 	bl	8000d9c <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e036      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005574:	4b1d      	ldr	r3, [pc, #116]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ee      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005580:	4b1a      	ldr	r3, [pc, #104]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4917      	ldr	r1, [pc, #92]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558e:	4313      	orrs	r3, r2
 8005590:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b14      	ldr	r3, [pc, #80]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	4a13      	ldr	r2, [pc, #76]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b0:	4b0e      	ldr	r3, [pc, #56]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	490b      	ldr	r1, [pc, #44]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ce:	4b07      	ldr	r3, [pc, #28]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	4904      	ldr	r1, [pc, #16]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40007000 	.word	0x40007000
 80055f4:	42420440 	.word	0x42420440

080055f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e042      	b.n	8005690 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb faea 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	@ 0x24
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800563a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fd63 	bl	8006108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d175      	bne.n	80057a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_UART_Transmit+0x2c>
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e06e      	b.n	80057a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2221      	movs	r2, #33	@ 0x21
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d6:	f7fb fb61 	bl	8000d9c <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f0:	d108      	bne.n	8005704 <HAL_UART_Transmit+0x6c>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e003      	b.n	800570c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800570c:	e02e      	b.n	800576c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fb01 	bl	8005d20 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e03a      	b.n	80057a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005744:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	3302      	adds	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e007      	b.n	800575e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1cb      	bne.n	800570e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	2140      	movs	r1, #64	@ 0x40
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 facd 	bl	8005d20 <UART_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e006      	b.n	80057a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b0ba      	sub	sp, #232	@ 0xe8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10f      	bne.n	8005816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <HAL_UART_IRQHandler+0x66>
 8005802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fbbc 	bl	8005f8c <UART_Receive_IT>
      return;
 8005814:	e25b      	b.n	8005cce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80de 	beq.w	80059dc <HAL_UART_IRQHandler+0x22c>
 8005820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005830:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80d1 	beq.w	80059dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_UART_IRQHandler+0xae>
 8005846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005856:	f043 0201 	orr.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_UART_IRQHandler+0xd2>
 800586a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	f043 0202 	orr.w	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_UART_IRQHandler+0xf6>
 800588e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589e:	f043 0204 	orr.w	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d011      	beq.n	80058d6 <HAL_UART_IRQHandler+0x126>
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f043 0208 	orr.w	r2, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 81f2 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_UART_IRQHandler+0x14e>
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fb47 	bl	8005f8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <HAL_UART_IRQHandler+0x17a>
 8005922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d04f      	beq.n	80059ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa51 	bl	8005dd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d041      	beq.n	80059c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005954:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800595c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800596a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800596e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1d9      	bne.n	800593e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d013      	beq.n	80059ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005996:	4a7e      	ldr	r2, [pc, #504]	@ (8005b90 <HAL_UART_IRQHandler+0x3e0>)
 8005998:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fb fc2e 	bl	8001200 <HAL_DMA_Abort_IT>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d016      	beq.n	80059d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	e00e      	b.n	80059d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f99c 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e00a      	b.n	80059d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f998 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c8:	e006      	b.n	80059d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f994 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059d6:	e175      	b.n	8005cc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d8:	bf00      	nop
    return;
 80059da:	e173      	b.n	8005cc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 814f 	bne.w	8005c84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8148 	beq.w	8005c84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8141 	beq.w	8005c84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80b6 	beq.w	8005b94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8145 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a46:	429a      	cmp	r2, r3
 8005a48:	f080 813e 	bcs.w	8005cc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	f000 8088 	beq.w	8005b70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1d9      	bne.n	8005a60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005abc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ad0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ad8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ae2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e1      	bne.n	8005aac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b40:	f023 0310 	bic.w	r3, r3, #16
 8005b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e3      	bne.n	8005b2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fb fb0c 	bl	8001188 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8bf 	bl	8005d0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b8c:	e09c      	b.n	8005cc8 <HAL_UART_IRQHandler+0x518>
 8005b8e:	bf00      	nop
 8005b90:	08005e97 	.word	0x08005e97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 808e 	beq.w	8005ccc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8089 	beq.w	8005ccc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bde:	647a      	str	r2, [r7, #68]	@ 0x44
 8005be0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005be4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e3      	bne.n	8005bba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	623b      	str	r3, [r7, #32]
   return(result);
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e3      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0310 	bic.w	r3, r3, #16
 8005c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c5c:	61fa      	str	r2, [r7, #28]
 8005c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	69b9      	ldr	r1, [r7, #24]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	617b      	str	r3, [r7, #20]
   return(result);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e3      	bne.n	8005c38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f844 	bl	8005d0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c82:	e023      	b.n	8005ccc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x4f4>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f90e 	bl	8005ebe <UART_Transmit_IT>
    return;
 8005ca2:	e014      	b.n	8005cce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00e      	beq.n	8005cce <HAL_UART_IRQHandler+0x51e>
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f94d 	bl	8005f5c <UART_EndTransmit_IT>
    return;
 8005cc2:	e004      	b.n	8005cce <HAL_UART_IRQHandler+0x51e>
    return;
 8005cc4:	bf00      	nop
 8005cc6:	e002      	b.n	8005cce <HAL_UART_IRQHandler+0x51e>
      return;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <HAL_UART_IRQHandler+0x51e>
      return;
 8005ccc:	bf00      	nop
  }
}
 8005cce:	37e8      	adds	r7, #232	@ 0xe8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d30:	e03b      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d037      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3a:	f7fb f82f 	bl	8000d9c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e03a      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d023      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b80      	cmp	r3, #128	@ 0x80
 8005d66:	d020      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d01d      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d116      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f81d 	bl	8005dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00f      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d0b4      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b095      	sub	sp, #84	@ 0x54
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3314      	adds	r3, #20
 8005e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d119      	bne.n	8005e7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e6a:	61ba      	str	r2, [r7, #24]
 8005e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6979      	ldr	r1, [r7, #20]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	613b      	str	r3, [r7, #16]
   return(result);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e8c:	bf00      	nop
 8005e8e:	3754      	adds	r7, #84	@ 0x54
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ff21 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b21      	cmp	r3, #33	@ 0x21
 8005ed0:	d13e      	bne.n	8005f50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eda:	d114      	bne.n	8005f06 <UART_Transmit_IT+0x48>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d110      	bne.n	8005f06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	1c9a      	adds	r2, r3, #2
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	621a      	str	r2, [r3, #32]
 8005f04:	e008      	b.n	8005f18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6211      	str	r1, [r2, #32]
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4619      	mov	r1, r3
 8005f26:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10f      	bne.n	8005f4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fea9 	bl	8005cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08c      	sub	sp, #48	@ 0x30
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b22      	cmp	r3, #34	@ 0x22
 8005f9e:	f040 80ae 	bne.w	80060fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005faa:	d117      	bne.n	8005fdc <UART_Receive_IT+0x50>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d113      	bne.n	8005fdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	1c9a      	adds	r2, r3, #2
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fda:	e026      	b.n	800602a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fee:	d007      	beq.n	8006000 <UART_Receive_IT+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <UART_Receive_IT+0x82>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b2da      	uxtb	r2, r3
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e008      	b.n	8006020 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800601a:	b2da      	uxtb	r2, r3
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29b      	uxth	r3, r3
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	4619      	mov	r1, r3
 8006038:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800603a:	2b00      	cmp	r3, #0
 800603c:	d15d      	bne.n	80060fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0220 	bic.w	r2, r2, #32
 800604c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800605c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695a      	ldr	r2, [r3, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006080:	2b01      	cmp	r3, #1
 8006082:	d135      	bne.n	80060f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	613b      	str	r3, [r7, #16]
   return(result);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060aa:	623a      	str	r2, [r7, #32]
 80060ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	69f9      	ldr	r1, [r7, #28]
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d10a      	bne.n	80060e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff fe0e 	bl	8005d0a <HAL_UARTEx_RxEventCallback>
 80060ee:	e002      	b.n	80060f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fdf8 	bl	8005ce6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e002      	b.n	8006100 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3730      	adds	r7, #48	@ 0x30
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006142:	f023 030c 	bic.w	r3, r3, #12
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	430b      	orrs	r3, r1
 800614e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2c      	ldr	r2, [pc, #176]	@ (800621c <UART_SetConfig+0x114>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d103      	bne.n	8006178 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006170:	f7ff f95a 	bl	8005428 <HAL_RCC_GetPCLK2Freq>
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	e002      	b.n	800617e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006178:	f7ff f942 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 800617c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009a      	lsls	r2, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	4a22      	ldr	r2, [pc, #136]	@ (8006220 <UART_SetConfig+0x118>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	0119      	lsls	r1, r3, #4
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009a      	lsls	r2, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006220 <UART_SetConfig+0x118>)
 80061b6:	fba3 0302 	umull	r0, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2064      	movs	r0, #100	@ 0x64
 80061be:	fb00 f303 	mul.w	r3, r0, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	3332      	adds	r3, #50	@ 0x32
 80061c8:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <UART_SetConfig+0x118>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061d4:	4419      	add	r1, r3
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009a      	lsls	r2, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006220 <UART_SetConfig+0x118>)
 80061ee:	fba3 0302 	umull	r0, r3, r3, r2
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2064      	movs	r0, #100	@ 0x64
 80061f6:	fb00 f303 	mul.w	r3, r0, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	3332      	adds	r3, #50	@ 0x32
 8006200:	4a07      	ldr	r2, [pc, #28]	@ (8006220 <UART_SetConfig+0x118>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	440a      	add	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40013800 	.word	0x40013800
 8006220:	51eb851f 	.word	0x51eb851f

08006224 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	4638      	mov	r0, r7
 800622e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800624e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006252:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr

0800626a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006272:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006276:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	b29b      	uxth	r3, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	b29b      	uxth	r3, r3
 8006288:	4013      	ands	r3, r2
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr

0800629e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	4638      	mov	r0, r7
 80062c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b09d      	sub	sp, #116	@ 0x74
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006316:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	78db      	ldrb	r3, [r3, #3]
 800631e:	2b03      	cmp	r3, #3
 8006320:	d81f      	bhi.n	8006362 <USB_ActivateEndpoint+0x72>
 8006322:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <USB_ActivateEndpoint+0x38>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	08006339 	.word	0x08006339
 800632c:	08006355 	.word	0x08006355
 8006330:	0800636b 	.word	0x0800636b
 8006334:	08006347 	.word	0x08006347
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006338:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800633c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006340:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006344:	e012      	b.n	800636c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006346:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800634a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800634e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006352:	e00b      	b.n	800636c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006354:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800635c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006360:	e004      	b.n	800636c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006368:	e000      	b.n	800636c <USB_ActivateEndpoint+0x7c>
      break;
 800636a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800637a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800637e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80063be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	7b1b      	ldrb	r3, [r3, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 8178 	bne.w	80066cc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8084 	beq.w	80064ee <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4413      	add	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	011a      	lsls	r2, r3, #4
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	88db      	ldrh	r3, [r3, #6]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	827b      	strh	r3, [r7, #18]
 8006428:	8a7b      	ldrh	r3, [r7, #18]
 800642a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01b      	beq.n	800646a <USB_ActivateEndpoint+0x17a>
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006448:	823b      	strh	r3, [r7, #16]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	8a3b      	ldrh	r3, [r7, #16]
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006462:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	78db      	ldrb	r3, [r3, #3]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d020      	beq.n	80064b4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006488:	81bb      	strh	r3, [r7, #12]
 800648a:	89bb      	ldrh	r3, [r7, #12]
 800648c:	f083 0320 	eor.w	r3, r3, #32
 8006490:	81bb      	strh	r3, [r7, #12]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	89bb      	ldrh	r3, [r7, #12]
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]
 80064b2:	e2d5      	b.n	8006a60 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ca:	81fb      	strh	r3, [r7, #14]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	89fb      	ldrh	r3, [r7, #14]
 80064d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	8013      	strh	r3, [r2, #0]
 80064ec:	e2b8      	b.n	8006a60 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	4413      	add	r3, r2
 8006500:	633b      	str	r3, [r7, #48]	@ 0x30
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	011a      	lsls	r2, r3, #4
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	4413      	add	r3, r2
 800650c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	88db      	ldrh	r3, [r3, #6]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	b29b      	uxth	r3, r3
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	4413      	add	r3, r2
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	011a      	lsls	r2, r3, #4
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	4413      	add	r3, r2
 8006540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006550:	b29a      	uxth	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b3e      	cmp	r3, #62	@ 0x3e
 800655c:	d91d      	bls.n	800659a <USB_ActivateEndpoint+0x2aa>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <USB_ActivateEndpoint+0x288>
 8006572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006574:	3b01      	subs	r3, #1
 8006576:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29a      	uxth	r2, r3
 800657e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006580:	b29b      	uxth	r3, r3
 8006582:	029b      	lsls	r3, r3, #10
 8006584:	b29b      	uxth	r3, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006592:	b29a      	uxth	r2, r3
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e026      	b.n	80065e8 <USB_ActivateEndpoint+0x2f8>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <USB_ActivateEndpoint+0x2c8>
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e017      	b.n	80065e8 <USB_ActivateEndpoint+0x2f8>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <USB_ActivateEndpoint+0x2e2>
 80065cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065ce:	3301      	adds	r3, #1
 80065d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29b      	uxth	r3, r3
 80065e0:	4313      	orrs	r3, r2
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80065f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <USB_ActivateEndpoint+0x348>
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006616:	843b      	strh	r3, [r7, #32]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	8c3b      	ldrh	r3, [r7, #32]
 8006624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006634:	b29b      	uxth	r3, r3
 8006636:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d124      	bne.n	800668a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006656:	83bb      	strh	r3, [r7, #28]
 8006658:	8bbb      	ldrh	r3, [r7, #28]
 800665a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800665e:	83bb      	strh	r3, [r7, #28]
 8006660:	8bbb      	ldrh	r3, [r7, #28]
 8006662:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006666:	83bb      	strh	r3, [r7, #28]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	441a      	add	r2, r3
 8006672:	8bbb      	ldrh	r3, [r7, #28]
 8006674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800667c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006684:	b29b      	uxth	r3, r3
 8006686:	8013      	strh	r3, [r2, #0]
 8006688:	e1ea      	b.n	8006a60 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800669c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a0:	83fb      	strh	r3, [r7, #30]
 80066a2:	8bfb      	ldrh	r3, [r7, #30]
 80066a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066a8:	83fb      	strh	r3, [r7, #30]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8bfb      	ldrh	r3, [r7, #30]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
 80066ca:	e1c9      	b.n	8006a60 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	78db      	ldrb	r3, [r3, #3]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d11e      	bne.n	8006712 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006704:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]
 8006710:	e01d      	b.n	800674e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006728:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800673a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800673e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674a:	b29b      	uxth	r3, r3
 800674c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006758:	b29b      	uxth	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800675e:	4413      	add	r3, r2
 8006760:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	011a      	lsls	r2, r3, #4
 8006768:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800676a:	4413      	add	r3, r2
 800676c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006770:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	891b      	ldrh	r3, [r3, #8]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	657b      	str	r3, [r7, #84]	@ 0x54
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006792:	4413      	add	r3, r2
 8006794:	657b      	str	r3, [r7, #84]	@ 0x54
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	011a      	lsls	r2, r3, #4
 800679c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80067a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	895b      	ldrh	r3, [r3, #10]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 8093 	bne.w	80068e6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80067d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01b      	beq.n	8006814 <USB_ActivateEndpoint+0x524>
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800680c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006822:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01b      	beq.n	8006864 <USB_ActivateEndpoint+0x574>
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006842:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800687c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800687e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006882:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006884:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006886:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800688a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]
 80068e4:	e0bc      	b.n	8006a60 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80068f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80068fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01d      	beq.n	800693e <USB_ActivateEndpoint+0x64e>
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006918:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800694e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01d      	beq.n	8006996 <USB_ActivateEndpoint+0x6a6>
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006970:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d024      	beq.n	80069e8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80069b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80069bc:	f083 0320 	eor.w	r3, r3, #32
 80069c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80069d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8013      	strh	r3, [r2, #0]
 80069e6:	e01d      	b.n	8006a24 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006a60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3774      	adds	r7, #116	@ 0x74
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop

08006a70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b08d      	sub	sp, #52	@ 0x34
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	7b1b      	ldrb	r3, [r3, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f040 808e 	bne.w	8006ba0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d044      	beq.n	8006b16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	81bb      	strh	r3, [r7, #12]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01b      	beq.n	8006adc <USB_DeactivateEndpoint+0x6c>
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aba:	817b      	strh	r3, [r7, #10]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	897b      	ldrh	r3, [r7, #10]
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af2:	813b      	strh	r3, [r7, #8]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	893b      	ldrh	r3, [r7, #8]
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
 8006b14:	e192      	b.n	8006e3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	827b      	strh	r3, [r7, #18]
 8006b24:	8a7b      	ldrh	r3, [r7, #18]
 8006b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01b      	beq.n	8006b66 <USB_DeactivateEndpoint+0xf6>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b44:	823b      	strh	r3, [r7, #16]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8a3b      	ldrh	r3, [r7, #16]
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7c:	81fb      	strh	r3, [r7, #14]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e14d      	b.n	8006e3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 80a5 	bne.w	8006cf4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	843b      	strh	r3, [r7, #32]
 8006bb8:	8c3b      	ldrh	r3, [r7, #32]
 8006bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01b      	beq.n	8006bfa <USB_DeactivateEndpoint+0x18a>
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd8:	83fb      	strh	r3, [r7, #30]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	8bfb      	ldrh	r3, [r7, #30]
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	83bb      	strh	r3, [r7, #28]
 8006c08:	8bbb      	ldrh	r3, [r7, #28]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <USB_DeactivateEndpoint+0x1da>
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c28:	837b      	strh	r3, [r7, #26]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	8b7b      	ldrh	r3, [r7, #26]
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c60:	833b      	strh	r3, [r7, #24]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8b3b      	ldrh	r3, [r7, #24]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c98:	82fb      	strh	r3, [r7, #22]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	8afb      	ldrh	r3, [r7, #22]
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd0:	82bb      	strh	r3, [r7, #20]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	441a      	add	r2, r3
 8006cdc:	8abb      	ldrh	r3, [r7, #20]
 8006cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	8013      	strh	r3, [r2, #0]
 8006cf2:	e0a3      	b.n	8006e3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006d02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01b      	beq.n	8006d44 <USB_DeactivateEndpoint+0x2d4>
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d22:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006d52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <USB_DeactivateEndpoint+0x324>
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d72:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3734      	adds	r7, #52	@ 0x34
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b0c2      	sub	sp, #264	@ 0x108
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e56:	6018      	str	r0, [r3, #0]
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e60:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	f040 86b7 	bne.w	8007be2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d908      	bls.n	8006ea2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ea0:	e007      	b.n	8006eb2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	7b1b      	ldrb	r3, [r3, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d13a      	bne.n	8006f38 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6959      	ldr	r1, [r3, #20]
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	88da      	ldrh	r2, [r3, #6]
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ee4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ee8:	6800      	ldr	r0, [r0, #0]
 8006eea:	f001 fc9c 	bl	8008826 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	011a      	lsls	r2, r3, #4
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	f000 be1f 	b.w	8007b76 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	f040 8462 	bne.w	800780e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a1a      	ldr	r2, [r3, #32]
 8006f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f240 83df 	bls.w	8007726 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd4:	1ad2      	subs	r2, r2, r3
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 81c7 	beq.w	8007398 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800700a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30
 8007016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d177      	bne.n	8007116 <USB_EPStartXfer+0x2ce>
 8007026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	4413      	add	r3, r2
 8007048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	011a      	lsls	r2, r3, #4
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	4413      	add	r3, r2
 800705c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800706c:	b29a      	uxth	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007076:	2b3e      	cmp	r3, #62	@ 0x3e
 8007078:	d921      	bls.n	80070be <USB_EPStartXfer+0x276>
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <USB_EPStartXfer+0x252>
 8007090:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007094:	3b01      	subs	r3, #1
 8007096:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	e050      	b.n	8007160 <USB_EPStartXfer+0x318>
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <USB_EPStartXfer+0x294>
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e041      	b.n	8007160 <USB_EPStartXfer+0x318>
 80070dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <USB_EPStartXfer+0x2b4>
 80070f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070f6:	3301      	adds	r3, #1
 80070f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29a      	uxth	r2, r3
 8007102:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29b      	uxth	r3, r3
 800710c:	4313      	orrs	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	e024      	b.n	8007160 <USB_EPStartXfer+0x318>
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d11c      	bne.n	8007160 <USB_EPStartXfer+0x318>
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007134:	b29b      	uxth	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	4413      	add	r3, r2
 800713c:	633b      	str	r3, [r7, #48]	@ 0x30
 800713e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	011a      	lsls	r2, r3, #4
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	4413      	add	r3, r2
 8007150:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	b29a      	uxth	r2, r3
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	895b      	ldrh	r3, [r3, #10]
 800716c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6959      	ldr	r1, [r3, #20]
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	b29b      	uxth	r3, r3
 8007182:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007186:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800718a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800718e:	6800      	ldr	r0, [r0, #0]
 8007190:	f001 fb49 	bl	8008826 <USB_WritePMA>
            ep->xfer_buff += len;
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	441a      	add	r2, r3
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d90f      	bls.n	80071ee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80071ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	621a      	str	r2, [r3, #32]
 80071ec:	e00e      	b.n	800720c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2200      	movs	r2, #0
 800720a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d177      	bne.n	800730c <USB_EPStartXfer+0x4c4>
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007236:	b29b      	uxth	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	4413      	add	r3, r2
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	011a      	lsls	r2, r3, #4
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	4413      	add	r3, r2
 8007252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007262:	b29a      	uxth	r2, r3
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	2b3e      	cmp	r3, #62	@ 0x3e
 800726e:	d921      	bls.n	80072b4 <USB_EPStartXfer+0x46c>
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <USB_EPStartXfer+0x448>
 8007286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728a:	3b01      	subs	r3, #1
 800728c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800729a:	b29b      	uxth	r3, r3
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	b29b      	uxth	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e056      	b.n	8007362 <USB_EPStartXfer+0x51a>
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <USB_EPStartXfer+0x48a>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e047      	b.n	8007362 <USB_EPStartXfer+0x51a>
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <USB_EPStartXfer+0x4aa>
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ec:	3301      	adds	r3, #1
 80072ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29b      	uxth	r3, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	e02a      	b.n	8007362 <USB_EPStartXfer+0x51a>
 800730c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d122      	bne.n	8007362 <USB_EPStartXfer+0x51a>
 800731c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	623b      	str	r3, [r7, #32]
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	4413      	add	r3, r2
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	011a      	lsls	r2, r3, #4
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	4413      	add	r3, r2
 8007352:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735c:	b29a      	uxth	r2, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	891b      	ldrh	r3, [r3, #8]
 800736e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6959      	ldr	r1, [r3, #20]
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	b29b      	uxth	r3, r3
 8007384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007388:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800738c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007390:	6800      	ldr	r0, [r0, #0]
 8007392:	f001 fa48 	bl	8008826 <USB_WritePMA>
 8007396:	e3ee      	b.n	8007b76 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d177      	bne.n	8007498 <USB_EPStartXfer+0x650>
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073c8:	4413      	add	r3, r2
 80073ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073dc:	4413      	add	r3, r2
 80073de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80073fa:	d921      	bls.n	8007440 <USB_EPStartXfer+0x5f8>
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <USB_EPStartXfer+0x5d4>
 8007412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007416:	3b01      	subs	r3, #1
 8007418:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800741c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29b      	uxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b29b      	uxth	r3, r3
 8007430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007438:	b29a      	uxth	r2, r3
 800743a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e056      	b.n	80074ee <USB_EPStartXfer+0x6a6>
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <USB_EPStartXfer+0x616>
 8007448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007456:	b29a      	uxth	r2, r3
 8007458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e047      	b.n	80074ee <USB_EPStartXfer+0x6a6>
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <USB_EPStartXfer+0x636>
 8007474:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007478:	3301      	adds	r3, #1
 800747a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800747e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007488:	b29b      	uxth	r3, r3
 800748a:	029b      	lsls	r3, r3, #10
 800748c:	b29b      	uxth	r3, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	b29a      	uxth	r2, r3
 8007492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e02a      	b.n	80074ee <USB_EPStartXfer+0x6a6>
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d122      	bne.n	80074ee <USB_EPStartXfer+0x6a6>
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c8:	4413      	add	r3, r2
 80074ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	011a      	lsls	r2, r3, #4
 80074da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074dc:	4413      	add	r3, r2
 80074de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	891b      	ldrh	r3, [r3, #8]
 80074fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6959      	ldr	r1, [r3, #20]
 800750a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750e:	b29b      	uxth	r3, r3
 8007510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007514:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007518:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800751c:	6800      	ldr	r0, [r0, #0]
 800751e:	f001 f982 	bl	8008826 <USB_WritePMA>
            ep->xfer_buff += len;
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007532:	441a      	add	r2, r3
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	429a      	cmp	r2, r3
 800755a:	d90f      	bls.n	800757c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756c:	1ad2      	subs	r2, r2, r3
 800756e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	621a      	str	r2, [r3, #32]
 800757a:	e00e      	b.n	800759a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800758c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2200      	movs	r2, #0
 8007598:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d177      	bne.n	80076a6 <USB_EPStartXfer+0x85e>
 80075b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d6:	4413      	add	r3, r2
 80075d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	011a      	lsls	r2, r3, #4
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007606:	2b3e      	cmp	r3, #62	@ 0x3e
 8007608:	d921      	bls.n	800764e <USB_EPStartXfer+0x806>
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	f003 031f 	and.w	r3, r3, #31
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <USB_EPStartXfer+0x7e2>
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007624:	3b01      	subs	r3, #1
 8007626:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800762a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007634:	b29b      	uxth	r3, r3
 8007636:	029b      	lsls	r3, r3, #10
 8007638:	b29b      	uxth	r3, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	b29b      	uxth	r3, r3
 800763e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007646:	b29a      	uxth	r2, r3
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	e050      	b.n	80076f0 <USB_EPStartXfer+0x8a8>
 800764e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <USB_EPStartXfer+0x824>
 8007656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007664:	b29a      	uxth	r2, r3
 8007666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e041      	b.n	80076f0 <USB_EPStartXfer+0x8a8>
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d004      	beq.n	800768c <USB_EPStartXfer+0x844>
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007686:	3301      	adds	r3, #1
 8007688:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007696:	b29b      	uxth	r3, r3
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	b29b      	uxth	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	b29a      	uxth	r2, r3
 80076a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e024      	b.n	80076f0 <USB_EPStartXfer+0x8a8>
 80076a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d11c      	bne.n	80076f0 <USB_EPStartXfer+0x8a8>
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ca:	4413      	add	r3, r2
 80076cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	011a      	lsls	r2, r3, #4
 80076dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076de:	4413      	add	r3, r2
 80076e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	895b      	ldrh	r3, [r3, #10]
 80076fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6959      	ldr	r1, [r3, #20]
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007710:	b29b      	uxth	r3, r3
 8007712:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007716:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800771a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800771e:	6800      	ldr	r0, [r0, #0]
 8007720:	f001 f881 	bl	8008826 <USB_WritePMA>
 8007724:	e227      	b.n	8007b76 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800775c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	441a      	add	r2, r3
 800777a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800777e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	b29b      	uxth	r3, r3
 8007790:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800779e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077b2:	4413      	add	r3, r2
 80077b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	011a      	lsls	r2, r3, #4
 80077c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c6:	4413      	add	r3, r2
 80077c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	891b      	ldrh	r3, [r3, #8]
 80077e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6959      	ldr	r1, [r3, #20]
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007802:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007806:	6800      	ldr	r0, [r0, #0]
 8007808:	f001 f80d 	bl	8008826 <USB_WritePMA>
 800780c:	e1b3      	b.n	8007b76 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800780e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6a1a      	ldr	r2, [r3, #32]
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800782c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 80c6 	beq.w	80079e0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d177      	bne.n	8007960 <USB_EPStartXfer+0xb18>
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800787c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800788a:	b29b      	uxth	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007890:	4413      	add	r3, r2
 8007892:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	011a      	lsls	r2, r3, #4
 80078a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078a4:	4413      	add	r3, r2
 80078a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80078ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80078c2:	d921      	bls.n	8007908 <USB_EPStartXfer+0xac0>
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	095b      	lsrs	r3, r3, #5
 80078ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <USB_EPStartXfer+0xa9c>
 80078da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078de:	3b01      	subs	r3, #1
 80078e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4313      	orrs	r3, r2
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	e050      	b.n	80079aa <USB_EPStartXfer+0xb62>
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <USB_EPStartXfer+0xade>
 8007910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791e:	b29a      	uxth	r2, r3
 8007920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	e041      	b.n	80079aa <USB_EPStartXfer+0xb62>
 8007926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792a:	085b      	lsrs	r3, r3, #1
 800792c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <USB_EPStartXfer+0xafe>
 800793c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007940:	3301      	adds	r3, #1
 8007942:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29a      	uxth	r2, r3
 800794c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007950:	b29b      	uxth	r3, r3
 8007952:	029b      	lsls	r3, r3, #10
 8007954:	b29b      	uxth	r3, r3
 8007956:	4313      	orrs	r3, r2
 8007958:	b29a      	uxth	r2, r3
 800795a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e024      	b.n	80079aa <USB_EPStartXfer+0xb62>
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d11c      	bne.n	80079aa <USB_EPStartXfer+0xb62>
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800797e:	b29b      	uxth	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007984:	4413      	add	r3, r2
 8007986:	673b      	str	r3, [r7, #112]	@ 0x70
 8007988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	011a      	lsls	r2, r3, #4
 8007996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007998:	4413      	add	r3, r2
 800799a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800799e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	895b      	ldrh	r3, [r3, #10]
 80079b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6959      	ldr	r1, [r3, #20]
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079d8:	6800      	ldr	r0, [r0, #0]
 80079da:	f000 ff24 	bl	8008826 <USB_WritePMA>
 80079de:	e0ca      	b.n	8007b76 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d177      	bne.n	8007ae0 <USB_EPStartXfer+0xc98>
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a10:	4413      	add	r3, r2
 8007a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	011a      	lsls	r2, r3, #4
 8007a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a24:	4413      	add	r3, r2
 8007a26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a3a:	801a      	strh	r2, [r3, #0]
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a42:	d921      	bls.n	8007a88 <USB_EPStartXfer+0xc40>
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <USB_EPStartXfer+0xc1c>
 8007a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	e05c      	b.n	8007b42 <USB_EPStartXfer+0xcfa>
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <USB_EPStartXfer+0xc5e>
 8007a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e04d      	b.n	8007b42 <USB_EPStartXfer+0xcfa>
 8007aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <USB_EPStartXfer+0xc7e>
 8007abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	029b      	lsls	r3, r3, #10
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e030      	b.n	8007b42 <USB_EPStartXfer+0xcfa>
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d128      	bne.n	8007b42 <USB_EPStartXfer+0xcfa>
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b14:	4413      	add	r3, r2
 8007b16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	011a      	lsls	r2, r3, #4
 8007b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	891b      	ldrh	r3, [r3, #8]
 8007b4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6959      	ldr	r1, [r3, #20]
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b70:	6800      	ldr	r0, [r0, #0]
 8007b72:	f000 fe58 	bl	8008826 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b9c:	817b      	strh	r3, [r7, #10]
 8007b9e:	897b      	ldrh	r3, [r7, #10]
 8007ba0:	f083 0310 	eor.w	r3, r3, #16
 8007ba4:	817b      	strh	r3, [r7, #10]
 8007ba6:	897b      	ldrh	r3, [r7, #10]
 8007ba8:	f083 0320 	eor.w	r3, r3, #32
 8007bac:	817b      	strh	r3, [r7, #10]
 8007bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	441a      	add	r2, r3
 8007bc8:	897b      	ldrh	r3, [r7, #10]
 8007bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	8013      	strh	r3, [r2, #0]
 8007bde:	f000 bcde 	b.w	800859e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	7b1b      	ldrb	r3, [r3, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f040 80bb 	bne.w	8007d6a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	699a      	ldr	r2, [r3, #24]
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d917      	bls.n	8007c40 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	619a      	str	r2, [r3, #24]
 8007c3e:	e00e      	b.n	8007c5e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c82:	4413      	add	r3, r2
 8007c84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	011a      	lsls	r2, r3, #4
 8007c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cbe:	d924      	bls.n	8007d0a <USB_EPStartXfer+0xec2>
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <USB_EPStartXfer+0xe98>
 8007cd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	f000 bc10 	b.w	800852a <USB_EPStartXfer+0x16e2>
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10c      	bne.n	8007d2c <USB_EPStartXfer+0xee4>
 8007d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e3fe      	b.n	800852a <USB_EPStartXfer+0x16e2>
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <USB_EPStartXfer+0xf04>
 8007d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d46:	3301      	adds	r3, #1
 8007d48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	029b      	lsls	r3, r3, #10
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	e3df      	b.n	800852a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	78db      	ldrb	r3, [r3, #3]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	f040 8218 	bne.w	80081ac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 809d 	bne.w	8007ec8 <USB_EPStartXfer+0x1080>
 8007d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007db2:	4413      	add	r3, r2
 8007db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	011a      	lsls	r2, r3, #4
 8007dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dca:	4413      	add	r3, r2
 8007dcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007df6:	d92b      	bls.n	8007e50 <USB_EPStartXfer+0x1008>
 8007df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 031f 	and.w	r3, r3, #31
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d104      	bne.n	8007e28 <USB_EPStartXfer+0xfe0>
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e22:	3b01      	subs	r3, #1
 8007e24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	e070      	b.n	8007f32 <USB_EPStartXfer+0x10ea>
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10c      	bne.n	8007e7a <USB_EPStartXfer+0x1032>
 8007e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e76:	801a      	strh	r2, [r3, #0]
 8007e78:	e05b      	b.n	8007f32 <USB_EPStartXfer+0x10ea>
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <USB_EPStartXfer+0x1062>
 8007ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	029b      	lsls	r3, r3, #10
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	e034      	b.n	8007f32 <USB_EPStartXfer+0x10ea>
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d12c      	bne.n	8007f32 <USB_EPStartXfer+0x10ea>
 8007ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007efc:	4413      	add	r3, r2
 8007efe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	011a      	lsls	r2, r3, #4
 8007f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f14:	4413      	add	r3, r2
 8007f16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007f30:	801a      	strh	r2, [r3, #0]
 8007f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f040 809d 	bne.w	800808c <USB_EPStartXfer+0x1244>
 8007f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f76:	4413      	add	r3, r2
 8007f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	011a      	lsls	r2, r3, #4
 8007f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f8e:	4413      	add	r3, r2
 8007f90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fba:	d92b      	bls.n	8008014 <USB_EPStartXfer+0x11cc>
 8007fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <USB_EPStartXfer+0x11a4>
 8007fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	029b      	lsls	r3, r3, #10
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	e069      	b.n	80080e8 <USB_EPStartXfer+0x12a0>
 8008014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10c      	bne.n	800803e <USB_EPStartXfer+0x11f6>
 8008024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008034:	b29a      	uxth	r2, r3
 8008036:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	e054      	b.n	80080e8 <USB_EPStartXfer+0x12a0>
 800803e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	085b      	lsrs	r3, r3, #1
 800804c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <USB_EPStartXfer+0x1226>
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008068:	3301      	adds	r3, #1
 800806a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800806e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29a      	uxth	r2, r3
 8008076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807a:	b29b      	uxth	r3, r3
 800807c:	029b      	lsls	r3, r3, #10
 800807e:	b29b      	uxth	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b29a      	uxth	r2, r3
 8008084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	e02d      	b.n	80080e8 <USB_EPStartXfer+0x12a0>
 800808c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d125      	bne.n	80080e8 <USB_EPStartXfer+0x12a0>
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080b2:	4413      	add	r3, r2
 80080b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80080b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	011a      	lsls	r2, r3, #4
 80080c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080ca:	4413      	add	r3, r2
 80080cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8218 	beq.w	800852a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80080fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800811a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800811e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <USB_EPStartXfer+0x12ea>
 8008126:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800812a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008132:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 81f5 	bne.w	800852a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008140:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 81ee 	bne.w	800852a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800814e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008174:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800819e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	8013      	strh	r3, [r2, #0]
 80081aa:	e1be      	b.n	800852a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80081ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	78db      	ldrb	r3, [r3, #3]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f040 81b4 	bne.w	8008526 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80081be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d917      	bls.n	800820a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80081da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	619a      	str	r2, [r3, #24]
 8008208:	e00e      	b.n	8008228 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800820a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2200      	movs	r2, #0
 8008226:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f040 8085 	bne.w	8008344 <USB_EPStartXfer+0x14fc>
 800823a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800825e:	4413      	add	r3, r2
 8008260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	011a      	lsls	r2, r3, #4
 8008272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008276:	4413      	add	r3, r2
 8008278:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800827c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828c:	b29a      	uxth	r2, r3
 800828e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	2b3e      	cmp	r3, #62	@ 0x3e
 800829a:	d923      	bls.n	80082e4 <USB_EPStartXfer+0x149c>
 800829c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <USB_EPStartXfer+0x1474>
 80082b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b6:	3b01      	subs	r3, #1
 80082b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	029b      	lsls	r3, r3, #10
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082da:	b29a      	uxth	r2, r3
 80082dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082e0:	801a      	strh	r2, [r3, #0]
 80082e2:	e060      	b.n	80083a6 <USB_EPStartXfer+0x155e>
 80082e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10c      	bne.n	8008306 <USB_EPStartXfer+0x14be>
 80082ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008302:	801a      	strh	r2, [r3, #0]
 8008304:	e04f      	b.n	80083a6 <USB_EPStartXfer+0x155e>
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <USB_EPStartXfer+0x14de>
 800831c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008320:	3301      	adds	r3, #1
 8008322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008332:	b29b      	uxth	r3, r3
 8008334:	029b      	lsls	r3, r3, #10
 8008336:	b29b      	uxth	r3, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	b29a      	uxth	r2, r3
 800833c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008340:	801a      	strh	r2, [r3, #0]
 8008342:	e030      	b.n	80083a6 <USB_EPStartXfer+0x155e>
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d128      	bne.n	80083a6 <USB_EPStartXfer+0x155e>
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008370:	b29b      	uxth	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008378:	4413      	add	r3, r2
 800837a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	011a      	lsls	r2, r3, #4
 800838c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008390:	4413      	add	r3, r2
 8008392:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008396:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839e:	b29a      	uxth	r2, r3
 80083a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80083a4:	801a      	strh	r2, [r3, #0]
 80083a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8085 	bne.w	80084d0 <USB_EPStartXfer+0x1688>
 80083c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083ea:	4413      	add	r3, r2
 80083ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80083f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	011a      	lsls	r2, r3, #4
 80083fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008402:	4413      	add	r3, r2
 8008404:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800840c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008418:	b29a      	uxth	r2, r3
 800841a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	2b3e      	cmp	r3, #62	@ 0x3e
 8008426:	d923      	bls.n	8008470 <USB_EPStartXfer+0x1628>
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <USB_EPStartXfer+0x1600>
 800843e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008442:	3b01      	subs	r3, #1
 8008444:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29a      	uxth	r2, r3
 8008450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008454:	b29b      	uxth	r3, r3
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	b29b      	uxth	r3, r3
 800845a:	4313      	orrs	r3, r2
 800845c:	b29b      	uxth	r3, r3
 800845e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008466:	b29a      	uxth	r2, r3
 8008468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	e05c      	b.n	800852a <USB_EPStartXfer+0x16e2>
 8008470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10c      	bne.n	8008492 <USB_EPStartXfer+0x164a>
 8008478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008488:	b29a      	uxth	r2, r3
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	e04b      	b.n	800852a <USB_EPStartXfer+0x16e2>
 8008492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <USB_EPStartXfer+0x166a>
 80084a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084ac:	3301      	adds	r3, #1
 80084ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084be:	b29b      	uxth	r3, r3
 80084c0:	029b      	lsls	r3, r3, #10
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4313      	orrs	r3, r2
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	e02c      	b.n	800852a <USB_EPStartXfer+0x16e2>
 80084d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d124      	bne.n	800852a <USB_EPStartXfer+0x16e2>
 80084e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084f6:	4413      	add	r3, r2
 80084f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	011a      	lsls	r2, r3, #4
 800850a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800850e:	4413      	add	r3, r2
 8008510:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008514:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e001      	b.n	800852a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e03a      	b.n	80085a0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800854c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008550:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008554:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008558:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800855c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008560:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008564:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008568:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800856c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	441a      	add	r2, r3
 8008586:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800858a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859a:	b29b      	uxth	r3, r3
 800859c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d020      	beq.n	80085fe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085d2:	81bb      	strh	r3, [r7, #12]
 80085d4:	89bb      	ldrh	r3, [r7, #12]
 80085d6:	f083 0310 	eor.w	r3, r3, #16
 80085da:	81bb      	strh	r3, [r7, #12]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	89bb      	ldrh	r3, [r7, #12]
 80085e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8013      	strh	r3, [r2, #0]
 80085fc:	e01f      	b.n	800863e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008614:	81fb      	strh	r3, [r7, #14]
 8008616:	89fb      	ldrh	r3, [r7, #14]
 8008618:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800861c:	81fb      	strh	r3, [r7, #14]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	441a      	add	r2, r3
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800862e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863a:	b29b      	uxth	r3, r3
 800863c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	bc80      	pop	{r7}
 8008648:	4770      	bx	lr

0800864a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800864a:	b480      	push	{r7}
 800864c:	b087      	sub	sp, #28
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	7b1b      	ldrb	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 809d 	bne.w	8008798 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d04c      	beq.n	8008700 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	823b      	strh	r3, [r7, #16]
 8008674:	8a3b      	ldrh	r3, [r7, #16]
 8008676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01b      	beq.n	80086b6 <USB_EPClearStall+0x6c>
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008694:	81fb      	strh	r3, [r7, #14]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	441a      	add	r2, r3
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	78db      	ldrb	r3, [r3, #3]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d06c      	beq.n	8008798 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086d4:	81bb      	strh	r3, [r7, #12]
 80086d6:	89bb      	ldrh	r3, [r7, #12]
 80086d8:	f083 0320 	eor.w	r3, r3, #32
 80086dc:	81bb      	strh	r3, [r7, #12]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	441a      	add	r2, r3
 80086e8:	89bb      	ldrh	r3, [r7, #12]
 80086ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	8013      	strh	r3, [r2, #0]
 80086fe:	e04b      	b.n	8008798 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	82fb      	strh	r3, [r7, #22]
 800870e:	8afb      	ldrh	r3, [r7, #22]
 8008710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01b      	beq.n	8008750 <USB_EPClearStall+0x106>
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800872a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872e:	82bb      	strh	r3, [r7, #20]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	8abb      	ldrh	r3, [r7, #20]
 800873c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874c:	b29b      	uxth	r3, r3
 800874e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008766:	827b      	strh	r3, [r7, #18]
 8008768:	8a7b      	ldrh	r3, [r7, #18]
 800876a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800876e:	827b      	strh	r3, [r7, #18]
 8008770:	8a7b      	ldrh	r3, [r7, #18]
 8008772:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008776:	827b      	strh	r3, [r7, #18]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	8a7b      	ldrh	r3, [r7, #18]
 8008784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800878c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008794:	b29b      	uxth	r3, r3
 8008796:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d103      	bne.n	80087be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2280      	movs	r2, #128	@ 0x80
 80087ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr

080087ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr

080087de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr

080087f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008800:	b29b      	uxth	r3, r3
 8008802:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008804:	68fb      	ldr	r3, [r7, #12]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr

08008826 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008826:	b480      	push	{r7}
 8008828:	b08b      	sub	sp, #44	@ 0x2c
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	4611      	mov	r1, r2
 8008832:	461a      	mov	r2, r3
 8008834:	460b      	mov	r3, r1
 8008836:	80fb      	strh	r3, [r7, #6]
 8008838:	4613      	mov	r3, r2
 800883a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800883c:	88bb      	ldrh	r3, [r7, #4]
 800883e:	3301      	adds	r3, #1
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	005a      	lsls	r2, r3, #1
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008858:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	627b      	str	r3, [r7, #36]	@ 0x24
 800885e:	e01e      	b.n	800889e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	3301      	adds	r3, #1
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b21a      	sxth	r2, r3
 8008870:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008874:	4313      	orrs	r3, r2
 8008876:	b21b      	sxth	r3, r3
 8008878:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	8a7a      	ldrh	r2, [r7, #18]
 800887e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	3302      	adds	r3, #2
 8008884:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	3302      	adds	r3, #2
 800888a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3301      	adds	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	3301      	adds	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	3b01      	subs	r3, #1
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1dd      	bne.n	8008860 <USB_WritePMA+0x3a>
  }
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	372c      	adds	r7, #44	@ 0x2c
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr

080088b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b08b      	sub	sp, #44	@ 0x2c
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	460b      	mov	r3, r1
 80088c0:	80fb      	strh	r3, [r7, #6]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80088c6:	88bb      	ldrh	r3, [r7, #4]
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	005a      	lsls	r2, r3, #1
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e8:	e01b      	b.n	8008922 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	3302      	adds	r3, #2
 80088f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3301      	adds	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	0a1b      	lsrs	r3, r3, #8
 800890a:	b2da      	uxtb	r2, r3
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	3301      	adds	r3, #1
 8008914:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	3302      	adds	r3, #2
 800891a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	3b01      	subs	r3, #1
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e0      	bne.n	80088ea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008928:	88bb      	ldrh	r3, [r7, #4]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d007      	beq.n	8008944 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	701a      	strb	r2, [r3, #0]
  }
}
 8008944:	bf00      	nop
 8008946:	372c      	adds	r7, #44	@ 0x2c
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr

0800894e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7c1b      	ldrb	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d115      	bne.n	8008992 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008966:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800896a:	2202      	movs	r2, #2
 800896c:	2181      	movs	r1, #129	@ 0x81
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fe2b 	bl	800a5ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800897a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800897e:	2202      	movs	r2, #2
 8008980:	2101      	movs	r1, #1
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 fe21 	bl	800a5ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008990:	e012      	b.n	80089b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008992:	2340      	movs	r3, #64	@ 0x40
 8008994:	2202      	movs	r2, #2
 8008996:	2181      	movs	r1, #129	@ 0x81
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 fe16 	bl	800a5ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089a4:	2340      	movs	r3, #64	@ 0x40
 80089a6:	2202      	movs	r2, #2
 80089a8:	2101      	movs	r1, #1
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fe0d 	bl	800a5ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089b8:	2308      	movs	r3, #8
 80089ba:	2203      	movs	r2, #3
 80089bc:	2182      	movs	r1, #130	@ 0x82
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fe03 	bl	800a5ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089ca:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80089ce:	f001 ff23 	bl	800a818 <USBD_static_malloc>
 80089d2:	4602      	mov	r2, r0
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	e026      	b.n	8008a38 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7c1b      	ldrb	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d109      	bne.n	8008a28 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a1e:	2101      	movs	r1, #1
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fec2 	bl	800a7aa <USBD_LL_PrepareReceive>
 8008a26:	e007      	b.n	8008a38 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a2e:	2340      	movs	r3, #64	@ 0x40
 8008a30:	2101      	movs	r1, #1
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 feb9 	bl	800a7aa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a52:	2181      	movs	r1, #129	@ 0x81
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 fdde 	bl	800a616 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a60:	2101      	movs	r1, #1
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fdd7 	bl	800a616 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a70:	2182      	movs	r1, #130	@ 0x82
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 fdcf 	bl	800a616 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 fec9 	bl	800a830 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d039      	beq.n	8008b4e <USBD_CDC_Setup+0x9e>
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d17f      	bne.n	8008bde <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d029      	beq.n	8008b3a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	b25b      	sxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da11      	bge.n	8008b14 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008afc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	88d2      	ldrh	r2, [r2, #6]
 8008b02:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b04:	6939      	ldr	r1, [r7, #16]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	88db      	ldrh	r3, [r3, #6]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f9d5 	bl	8009ebc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b12:	e06b      	b.n	8008bec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	785a      	ldrb	r2, [r3, #1]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b2a:	6939      	ldr	r1, [r7, #16]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	88db      	ldrh	r3, [r3, #6]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f9f0 	bl	8009f18 <USBD_CtlPrepareRx>
      break;
 8008b38:	e058      	b.n	8008bec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	7850      	ldrb	r0, [r2, #1]
 8008b46:	2200      	movs	r2, #0
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	4798      	blx	r3
      break;
 8008b4c:	e04e      	b.n	8008bec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	2b0b      	cmp	r3, #11
 8008b54:	d02e      	beq.n	8008bb4 <USBD_CDC_Setup+0x104>
 8008b56:	2b0b      	cmp	r3, #11
 8008b58:	dc38      	bgt.n	8008bcc <USBD_CDC_Setup+0x11c>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <USBD_CDC_Setup+0xb4>
 8008b5e:	2b0a      	cmp	r3, #10
 8008b60:	d014      	beq.n	8008b8c <USBD_CDC_Setup+0xdc>
 8008b62:	e033      	b.n	8008bcc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d107      	bne.n	8008b7e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b6e:	f107 030c 	add.w	r3, r7, #12
 8008b72:	2202      	movs	r2, #2
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f9a0 	bl	8009ebc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b7c:	e02e      	b.n	8008bdc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f931 	bl	8009de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b86:	2302      	movs	r3, #2
 8008b88:	75fb      	strb	r3, [r7, #23]
          break;
 8008b8a:	e027      	b.n	8008bdc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d107      	bne.n	8008ba6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b96:	f107 030f 	add.w	r3, r7, #15
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 f98c 	bl	8009ebc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ba4:	e01a      	b.n	8008bdc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f91d 	bl	8009de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bb2:	e013      	b.n	8008bdc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d00d      	beq.n	8008bda <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f911 	bl	8009de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bca:	e006      	b.n	8008bda <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 f90a 	bl	8009de8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8008bd8:	e000      	b.n	8008bdc <USBD_CDC_Setup+0x12c>
          break;
 8008bda:	bf00      	nop
      }
      break;
 8008bdc:	e006      	b.n	8008bec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 f901 	bl	8009de8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008be6:	2302      	movs	r3, #2
 8008be8:	75fb      	strb	r3, [r7, #23]
      break;
 8008bea:	bf00      	nop
  }

  return ret;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c08:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c10:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d03a      	beq.n	8008c92 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c1c:	78fa      	ldrb	r2, [r7, #3]
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	440b      	add	r3, r1
 8008c2a:	331c      	adds	r3, #28
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d029      	beq.n	8008c86 <USBD_CDC_DataIn+0x90>
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	331c      	adds	r3, #28
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	78f9      	ldrb	r1, [r7, #3]
 8008c46:	68b8      	ldr	r0, [r7, #8]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4403      	add	r3, r0
 8008c52:	3320      	adds	r3, #32
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c5a:	fb01 f303 	mul.w	r3, r1, r3
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d110      	bne.n	8008c86 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	331c      	adds	r3, #28
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c78:	78f9      	ldrb	r1, [r7, #3]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fd70 	bl	800a764 <USBD_LL_Transmit>
 8008c84:	e003      	b.n	8008c8e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fd9b 	bl	800a7f0 <USBD_LL_GetRxDataSize>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00d      	beq.n	8008ce8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4798      	blx	r3

    return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e000      	b.n	8008cea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ce8:	2302      	movs	r3, #2
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d00:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d014      	beq.n	8008d36 <USBD_CDC_EP0_RxReady+0x44>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d12:	2bff      	cmp	r3, #255	@ 0xff
 8008d14:	d00f      	beq.n	8008d36 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	22ff      	movs	r2, #255	@ 0xff
 8008d32:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2243      	movs	r2, #67	@ 0x43
 8008d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d4e:	4b03      	ldr	r3, [pc, #12]	@ (8008d5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000094 	.word	0x20000094

08008d60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2243      	movs	r2, #67	@ 0x43
 8008d6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000050 	.word	0x20000050

08008d80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2243      	movs	r2, #67	@ 0x43
 8008d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d8e:	4b03      	ldr	r3, [pc, #12]	@ (8008d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	200000d8 	.word	0x200000d8

08008da0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	220a      	movs	r2, #10
 8008dac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008dae:	4b03      	ldr	r3, [pc, #12]	@ (8008dbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	2000000c 	.word	0x2000000c

08008dc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc80      	pop	{r7}
 8008dea:	4770      	bx	lr

08008dec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr

08008e1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr

08008e44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d017      	beq.n	8008e8e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7c1b      	ldrb	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e70:	2101      	movs	r1, #1
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 fc99 	bl	800a7aa <USBD_LL_PrepareReceive>
 8008e78:	e007      	b.n	8008e8a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e80:	2340      	movs	r3, #64	@ 0x40
 8008e82:	2101      	movs	r1, #1
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 fc90 	bl	800a7aa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e000      	b.n	8008e90 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e8e:	2302      	movs	r3, #2
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008eac:	2302      	movs	r3, #2
 8008eae:	e01a      	b.n	8008ee6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	79fa      	ldrb	r2, [r7, #7]
 8008edc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f001 fafe 	bl	800a4e0 <USBD_LL_Init>

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d006      	beq.n	8008f10 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
 8008f0e:	e001      	b.n	8008f14 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f10:	2302      	movs	r3, #2
 8008f12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bc80      	pop	{r7}
 8008f1e:	4770      	bx	lr

08008f20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 fb33 	bl	800a594 <USBD_LL_Start>

  return USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr

08008f4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00c      	beq.n	8008f80 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	4611      	mov	r1, r2
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fed7 	bl	8009d76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d016      	beq.n	800901a <USBD_LL_SetupStage+0x6a>
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d81c      	bhi.n	800902a <USBD_LL_SetupStage+0x7a>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <USBD_LL_SetupStage+0x4a>
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d008      	beq.n	800900a <USBD_LL_SetupStage+0x5a>
 8008ff8:	e017      	b.n	800902a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f9ca 	bl	800939c <USBD_StdDevReq>
      break;
 8009008:	e01a      	b.n	8009040 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa2c 	bl	8009470 <USBD_StdItfReq>
      break;
 8009018:	e012      	b.n	8009040 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa6c 	bl	8009500 <USBD_StdEPReq>
      break;
 8009028:	e00a      	b.n	8009040 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009030:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009034:	b2db      	uxtb	r3, r3
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fb0b 	bl	800a654 <USBD_LL_StallEP>
      break;
 800903e:	bf00      	nop
  }

  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b086      	sub	sp, #24
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	460b      	mov	r3, r1
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d14b      	bne.n	80090f6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009064:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800906c:	2b03      	cmp	r3, #3
 800906e:	d134      	bne.n	80090da <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	d919      	bls.n	80090b0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009092:	429a      	cmp	r2, r3
 8009094:	d203      	bcs.n	800909e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800909a:	b29b      	uxth	r3, r3
 800909c:	e002      	b.n	80090a4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	461a      	mov	r2, r3
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 ff53 	bl	8009f54 <USBD_CtlContinueRx>
 80090ae:	e038      	b.n	8009122 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00a      	beq.n	80090d2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d105      	bne.n	80090d2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 ff50 	bl	8009f78 <USBD_CtlSendStatus>
 80090d8:	e023      	b.n	8009122 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090e0:	2b05      	cmp	r3, #5
 80090e2:	d11e      	bne.n	8009122 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80090ec:	2100      	movs	r1, #0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f001 fab0 	bl	800a654 <USBD_LL_StallEP>
 80090f4:	e015      	b.n	8009122 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00d      	beq.n	800911e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009108:	2b03      	cmp	r3, #3
 800910a:	d108      	bne.n	800911e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	7afa      	ldrb	r2, [r7, #11]
 8009116:	4611      	mov	r1, r2
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	4798      	blx	r3
 800911c:	e001      	b.n	8009122 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800911e:	2302      	movs	r3, #2
 8009120:	e000      	b.n	8009124 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	460b      	mov	r3, r1
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800913a:	7afb      	ldrb	r3, [r7, #11]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d17f      	bne.n	8009240 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3314      	adds	r3, #20
 8009144:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800914c:	2b02      	cmp	r3, #2
 800914e:	d15c      	bne.n	800920a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	429a      	cmp	r2, r3
 800915a:	d915      	bls.n	8009188 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	1ad2      	subs	r2, r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	b29b      	uxth	r3, r3
 8009170:	461a      	mov	r2, r3
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 febd 	bl	8009ef4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f001 fb12 	bl	800a7aa <USBD_LL_PrepareReceive>
 8009186:	e04e      	b.n	8009226 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	6912      	ldr	r2, [r2, #16]
 8009190:	fbb3 f1f2 	udiv	r1, r3, r2
 8009194:	fb01 f202 	mul.w	r2, r1, r2
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d11c      	bne.n	80091d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d316      	bcc.n	80091d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d20f      	bcs.n	80091d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091b8:	2200      	movs	r2, #0
 80091ba:	2100      	movs	r1, #0
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fe99 	bl	8009ef4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ca:	2300      	movs	r3, #0
 80091cc:	2200      	movs	r2, #0
 80091ce:	2100      	movs	r1, #0
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f001 faea 	bl	800a7aa <USBD_LL_PrepareReceive>
 80091d6:	e026      	b.n	8009226 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d105      	bne.n	80091fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091fa:	2180      	movs	r1, #128	@ 0x80
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f001 fa29 	bl	800a654 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fecb 	bl	8009f9e <USBD_CtlReceiveStatus>
 8009208:	e00d      	b.n	8009226 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009210:	2b04      	cmp	r3, #4
 8009212:	d004      	beq.n	800921e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800921a:	2b00      	cmp	r3, #0
 800921c:	d103      	bne.n	8009226 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800921e:	2180      	movs	r1, #128	@ 0x80
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f001 fa17 	bl	800a654 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800922c:	2b01      	cmp	r3, #1
 800922e:	d11d      	bne.n	800926c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff fe81 	bl	8008f38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800923e:	e015      	b.n	800926c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00d      	beq.n	8009268 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009252:	2b03      	cmp	r3, #3
 8009254:	d108      	bne.n	8009268 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	7afa      	ldrb	r2, [r7, #11]
 8009260:	4611      	mov	r1, r2
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	4798      	blx	r3
 8009266:	e001      	b.n	800926c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009268:	2302      	movs	r3, #2
 800926a:	e000      	b.n	800926e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3718      	adds	r7, #24
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800927e:	2340      	movs	r3, #64	@ 0x40
 8009280:	2200      	movs	r2, #0
 8009282:	2100      	movs	r1, #0
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f9a0 	bl	800a5ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2240      	movs	r2, #64	@ 0x40
 8009296:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800929a:	2340      	movs	r3, #64	@ 0x40
 800929c:	2200      	movs	r2, #0
 800929e:	2180      	movs	r1, #128	@ 0x80
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 f992 	bl	800a5ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2240      	movs	r2, #64	@ 0x40
 80092b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6852      	ldr	r2, [r2, #4]
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	4611      	mov	r1, r2
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
  }

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr

08009316 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2204      	movs	r2, #4
 800932e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr

0800933e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800934c:	2b04      	cmp	r3, #4
 800934e:	d105      	bne.n	800935c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr

08009368 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009376:	2b03      	cmp	r3, #3
 8009378:	d10b      	bne.n	8009392 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d005      	beq.n	80093c2 <USBD_StdDevReq+0x26>
 80093b6:	2b40      	cmp	r3, #64	@ 0x40
 80093b8:	d84f      	bhi.n	800945a <USBD_StdDevReq+0xbe>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <USBD_StdDevReq+0x36>
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d14b      	bne.n	800945a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
      break;
 80093d0:	e048      	b.n	8009464 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b09      	cmp	r3, #9
 80093d8:	d839      	bhi.n	800944e <USBD_StdDevReq+0xb2>
 80093da:	a201      	add	r2, pc, #4	@ (adr r2, 80093e0 <USBD_StdDevReq+0x44>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	08009431 	.word	0x08009431
 80093e4:	08009445 	.word	0x08009445
 80093e8:	0800944f 	.word	0x0800944f
 80093ec:	0800943b 	.word	0x0800943b
 80093f0:	0800944f 	.word	0x0800944f
 80093f4:	08009413 	.word	0x08009413
 80093f8:	08009409 	.word	0x08009409
 80093fc:	0800944f 	.word	0x0800944f
 8009400:	08009427 	.word	0x08009427
 8009404:	0800941d 	.word	0x0800941d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f9dc 	bl	80097c8 <USBD_GetDescriptor>
          break;
 8009410:	e022      	b.n	8009458 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fb3f 	bl	8009a98 <USBD_SetAddress>
          break;
 800941a:	e01d      	b.n	8009458 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fb7e 	bl	8009b20 <USBD_SetConfig>
          break;
 8009424:	e018      	b.n	8009458 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fc07 	bl	8009c3c <USBD_GetConfig>
          break;
 800942e:	e013      	b.n	8009458 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fc37 	bl	8009ca6 <USBD_GetStatus>
          break;
 8009438:	e00e      	b.n	8009458 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc65 	bl	8009d0c <USBD_SetFeature>
          break;
 8009442:	e009      	b.n	8009458 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fc74 	bl	8009d34 <USBD_ClrFeature>
          break;
 800944c:	e004      	b.n	8009458 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fcc9 	bl	8009de8 <USBD_CtlError>
          break;
 8009456:	bf00      	nop
      }
      break;
 8009458:	e004      	b.n	8009464 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fcc3 	bl	8009de8 <USBD_CtlError>
      break;
 8009462:	bf00      	nop
  }

  return ret;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop

08009470 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d005      	beq.n	8009496 <USBD_StdItfReq+0x26>
 800948a:	2b40      	cmp	r3, #64	@ 0x40
 800948c:	d82e      	bhi.n	80094ec <USBD_StdItfReq+0x7c>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <USBD_StdItfReq+0x26>
 8009492:	2b20      	cmp	r3, #32
 8009494:	d12a      	bne.n	80094ec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949c:	3b01      	subs	r3, #1
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d81d      	bhi.n	80094de <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d813      	bhi.n	80094d4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d110      	bne.n	80094e8 <USBD_StdItfReq+0x78>
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10d      	bne.n	80094e8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fd53 	bl	8009f78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094d2:	e009      	b.n	80094e8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fc86 	bl	8009de8 <USBD_CtlError>
          break;
 80094dc:	e004      	b.n	80094e8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc81 	bl	8009de8 <USBD_CtlError>
          break;
 80094e6:	e000      	b.n	80094ea <USBD_StdItfReq+0x7a>
          break;
 80094e8:	bf00      	nop
      }
      break;
 80094ea:	e004      	b.n	80094f6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fc7a 	bl	8009de8 <USBD_CtlError>
      break;
 80094f4:	bf00      	nop
  }

  return USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	889b      	ldrh	r3, [r3, #4]
 8009512:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d007      	beq.n	8009530 <USBD_StdEPReq+0x30>
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	f200 8146 	bhi.w	80097b2 <USBD_StdEPReq+0x2b2>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <USBD_StdEPReq+0x40>
 800952a:	2b20      	cmp	r3, #32
 800952c:	f040 8141 	bne.w	80097b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
      break;
 800953e:	e13d      	b.n	80097bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009548:	2b20      	cmp	r3, #32
 800954a:	d10a      	bne.n	8009562 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	e12d      	b.n	80097be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	2b03      	cmp	r3, #3
 8009568:	d007      	beq.n	800957a <USBD_StdEPReq+0x7a>
 800956a:	2b03      	cmp	r3, #3
 800956c:	f300 811b 	bgt.w	80097a6 <USBD_StdEPReq+0x2a6>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d072      	beq.n	800965a <USBD_StdEPReq+0x15a>
 8009574:	2b01      	cmp	r3, #1
 8009576:	d03a      	beq.n	80095ee <USBD_StdEPReq+0xee>
 8009578:	e115      	b.n	80097a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009580:	2b02      	cmp	r3, #2
 8009582:	d002      	beq.n	800958a <USBD_StdEPReq+0x8a>
 8009584:	2b03      	cmp	r3, #3
 8009586:	d015      	beq.n	80095b4 <USBD_StdEPReq+0xb4>
 8009588:	e02b      	b.n	80095e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00c      	beq.n	80095aa <USBD_StdEPReq+0xaa>
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b80      	cmp	r3, #128	@ 0x80
 8009594:	d009      	beq.n	80095aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f85a 	bl	800a654 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095a0:	2180      	movs	r1, #128	@ 0x80
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 f856 	bl	800a654 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095a8:	e020      	b.n	80095ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fc1b 	bl	8009de8 <USBD_CtlError>
              break;
 80095b2:	e01b      	b.n	80095ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	885b      	ldrh	r3, [r3, #2]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10e      	bne.n	80095da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <USBD_StdEPReq+0xda>
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	2b80      	cmp	r3, #128	@ 0x80
 80095c6:	d008      	beq.n	80095da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	88db      	ldrh	r3, [r3, #6]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 f83d 	bl	800a654 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fccc 	bl	8009f78 <USBD_CtlSendStatus>

              break;
 80095e0:	e004      	b.n	80095ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fbff 	bl	8009de8 <USBD_CtlError>
              break;
 80095ea:	bf00      	nop
          }
          break;
 80095ec:	e0e0      	b.n	80097b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d002      	beq.n	80095fe <USBD_StdEPReq+0xfe>
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d015      	beq.n	8009628 <USBD_StdEPReq+0x128>
 80095fc:	e026      	b.n	800964c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00c      	beq.n	800961e <USBD_StdEPReq+0x11e>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b80      	cmp	r3, #128	@ 0x80
 8009608:	d009      	beq.n	800961e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 f820 	bl	800a654 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009614:	2180      	movs	r1, #128	@ 0x80
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 f81c 	bl	800a654 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800961c:	e01c      	b.n	8009658 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fbe1 	bl	8009de8 <USBD_CtlError>
              break;
 8009626:	e017      	b.n	8009658 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	885b      	ldrh	r3, [r3, #2]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d112      	bne.n	8009656 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 f827 	bl	800a692 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fc97 	bl	8009f78 <USBD_CtlSendStatus>
              }
              break;
 800964a:	e004      	b.n	8009656 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fbca 	bl	8009de8 <USBD_CtlError>
              break;
 8009654:	e000      	b.n	8009658 <USBD_StdEPReq+0x158>
              break;
 8009656:	bf00      	nop
          }
          break;
 8009658:	e0aa      	b.n	80097b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009660:	2b02      	cmp	r3, #2
 8009662:	d002      	beq.n	800966a <USBD_StdEPReq+0x16a>
 8009664:	2b03      	cmp	r3, #3
 8009666:	d032      	beq.n	80096ce <USBD_StdEPReq+0x1ce>
 8009668:	e097      	b.n	800979a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d007      	beq.n	8009680 <USBD_StdEPReq+0x180>
 8009670:	7bbb      	ldrb	r3, [r7, #14]
 8009672:	2b80      	cmp	r3, #128	@ 0x80
 8009674:	d004      	beq.n	8009680 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fbb5 	bl	8009de8 <USBD_CtlError>
                break;
 800967e:	e091      	b.n	80097a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	da0b      	bge.n	80096a0 <USBD_StdEPReq+0x1a0>
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	3310      	adds	r3, #16
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	3304      	adds	r3, #4
 800969e:	e00b      	b.n	80096b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	4413      	add	r3, r2
 80096b6:	3304      	adds	r3, #4
 80096b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2200      	movs	r2, #0
 80096be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2202      	movs	r2, #2
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fbf8 	bl	8009ebc <USBD_CtlSendData>
              break;
 80096cc:	e06a      	b.n	80097a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	da11      	bge.n	80096fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	3318      	adds	r3, #24
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d117      	bne.n	8009720 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fb78 	bl	8009de8 <USBD_CtlError>
                  break;
 80096f8:	e054      	b.n	80097a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	f003 020f 	and.w	r2, r3, #15
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fb65 	bl	8009de8 <USBD_CtlError>
                  break;
 800971e:	e041      	b.n	80097a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009724:	2b00      	cmp	r3, #0
 8009726:	da0b      	bge.n	8009740 <USBD_StdEPReq+0x240>
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	3310      	adds	r3, #16
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	4413      	add	r3, r2
 800973c:	3304      	adds	r3, #4
 800973e:	e00b      	b.n	8009758 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	3304      	adds	r3, #4
 8009758:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <USBD_StdEPReq+0x266>
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	2b80      	cmp	r3, #128	@ 0x80
 8009764:	d103      	bne.n	800976e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e00e      	b.n	800978c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 ffac 	bl	800a6d0 <USBD_LL_IsStallEP>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2201      	movs	r2, #1
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e002      	b.n	800978c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2202      	movs	r2, #2
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fb92 	bl	8009ebc <USBD_CtlSendData>
              break;
 8009798:	e004      	b.n	80097a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fb23 	bl	8009de8 <USBD_CtlError>
              break;
 80097a2:	bf00      	nop
          }
          break;
 80097a4:	e004      	b.n	80097b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fb1d 	bl	8009de8 <USBD_CtlError>
          break;
 80097ae:	bf00      	nop
      }
      break;
 80097b0:	e004      	b.n	80097bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fb17 	bl	8009de8 <USBD_CtlError>
      break;
 80097ba:	bf00      	nop
  }

  return ret;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	885b      	ldrh	r3, [r3, #2]
 80097e2:	0a1b      	lsrs	r3, r3, #8
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	f200 8128 	bhi.w	8009a3e <USBD_GetDescriptor+0x276>
 80097ee:	a201      	add	r2, pc, #4	@ (adr r2, 80097f4 <USBD_GetDescriptor+0x2c>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009829 	.word	0x08009829
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009a3f 	.word	0x08009a3f
 8009804:	08009a3f 	.word	0x08009a3f
 8009808:	080099df 	.word	0x080099df
 800980c:	08009a0b 	.word	0x08009a0b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7c12      	ldrb	r2, [r2, #16]
 800981c:	f107 0108 	add.w	r1, r7, #8
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
 8009824:	60f8      	str	r0, [r7, #12]
      break;
 8009826:	e112      	b.n	8009a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7c1b      	ldrb	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10d      	bne.n	800984c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	f107 0208 	add.w	r2, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	2202      	movs	r2, #2
 8009848:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800984a:	e100      	b.n	8009a4e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	f107 0208 	add.w	r2, r7, #8
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3301      	adds	r3, #1
 8009862:	2202      	movs	r2, #2
 8009864:	701a      	strb	r2, [r3, #0]
      break;
 8009866:	e0f2      	b.n	8009a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	885b      	ldrh	r3, [r3, #2]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b05      	cmp	r3, #5
 8009870:	f200 80ac 	bhi.w	80099cc <USBD_GetDescriptor+0x204>
 8009874:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <USBD_GetDescriptor+0xb4>)
 8009876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987a:	bf00      	nop
 800987c:	08009895 	.word	0x08009895
 8009880:	080098c9 	.word	0x080098c9
 8009884:	080098fd 	.word	0x080098fd
 8009888:	08009931 	.word	0x08009931
 800988c:	08009965 	.word	0x08009965
 8009890:	08009999 	.word	0x08009999
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	7c12      	ldrb	r2, [r2, #16]
 80098ac:	f107 0108 	add.w	r1, r7, #8
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
 80098b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b6:	e091      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa94 	bl	8009de8 <USBD_CtlError>
            err++;
 80098c0:	7afb      	ldrb	r3, [r7, #11]
 80098c2:	3301      	adds	r3, #1
 80098c4:	72fb      	strb	r3, [r7, #11]
          break;
 80098c6:	e089      	b.n	80099dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	7c12      	ldrb	r2, [r2, #16]
 80098e0:	f107 0108 	add.w	r1, r7, #8
 80098e4:	4610      	mov	r0, r2
 80098e6:	4798      	blx	r3
 80098e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ea:	e077      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa7a 	bl	8009de8 <USBD_CtlError>
            err++;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	3301      	adds	r3, #1
 80098f8:	72fb      	strb	r3, [r7, #11]
          break;
 80098fa:	e06f      	b.n	80099dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991e:	e05d      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa60 	bl	8009de8 <USBD_CtlError>
            err++;
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	3301      	adds	r3, #1
 800992c:	72fb      	strb	r3, [r7, #11]
          break;
 800992e:	e055      	b.n	80099dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009952:	e043      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa46 	bl	8009de8 <USBD_CtlError>
            err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
          break;
 8009962:	e03b      	b.n	80099dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00b      	beq.n	8009988 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7c12      	ldrb	r2, [r2, #16]
 800997c:	f107 0108 	add.w	r1, r7, #8
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
 8009984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009986:	e029      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa2c 	bl	8009de8 <USBD_CtlError>
            err++;
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	3301      	adds	r3, #1
 8009994:	72fb      	strb	r3, [r7, #11]
          break;
 8009996:	e021      	b.n	80099dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7c12      	ldrb	r2, [r2, #16]
 80099b0:	f107 0108 	add.w	r1, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ba:	e00f      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa12 	bl	8009de8 <USBD_CtlError>
            err++;
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	3301      	adds	r3, #1
 80099c8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ca:	e007      	b.n	80099dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa0a 	bl	8009de8 <USBD_CtlError>
          err++;
 80099d4:	7afb      	ldrb	r3, [r7, #11]
 80099d6:	3301      	adds	r3, #1
 80099d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80099da:	e038      	b.n	8009a4e <USBD_GetDescriptor+0x286>
 80099dc:	e037      	b.n	8009a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7c1b      	ldrb	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ee:	f107 0208 	add.w	r2, r7, #8
 80099f2:	4610      	mov	r0, r2
 80099f4:	4798      	blx	r3
 80099f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f8:	e029      	b.n	8009a4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f9f3 	bl	8009de8 <USBD_CtlError>
        err++;
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	3301      	adds	r3, #1
 8009a06:	72fb      	strb	r3, [r7, #11]
      break;
 8009a08:	e021      	b.n	8009a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	7c1b      	ldrb	r3, [r3, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10d      	bne.n	8009a2e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1a:	f107 0208 	add.w	r2, r7, #8
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4798      	blx	r3
 8009a22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3301      	adds	r3, #1
 8009a28:	2207      	movs	r2, #7
 8009a2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a2c:	e00f      	b.n	8009a4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f9d9 	bl	8009de8 <USBD_CtlError>
        err++;
 8009a36:	7afb      	ldrb	r3, [r7, #11]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a3c:	e007      	b.n	8009a4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f9d1 	bl	8009de8 <USBD_CtlError>
      err++;
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a4c:	bf00      	nop
  }

  if (err != 0U)
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11c      	bne.n	8009a8e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a54:	893b      	ldrh	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d011      	beq.n	8009a7e <USBD_GetDescriptor+0x2b6>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	88db      	ldrh	r3, [r3, #6]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00d      	beq.n	8009a7e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	88da      	ldrh	r2, [r3, #6]
 8009a66:	893b      	ldrh	r3, [r7, #8]
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	bf28      	it	cs
 8009a6c:	4613      	movcs	r3, r2
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a72:	893b      	ldrh	r3, [r7, #8]
 8009a74:	461a      	mov	r2, r3
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa1f 	bl	8009ebc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	88db      	ldrh	r3, [r3, #6]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d104      	bne.n	8009a90 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa76 	bl	8009f78 <USBD_CtlSendStatus>
 8009a8c:	e000      	b.n	8009a90 <USBD_GetDescriptor+0x2c8>
    return;
 8009a8e:	bf00      	nop
    }
  }
}
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop

08009a98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	889b      	ldrh	r3, [r3, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d130      	bne.n	8009b0c <USBD_SetAddress+0x74>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88db      	ldrh	r3, [r3, #6]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d12c      	bne.n	8009b0c <USBD_SetAddress+0x74>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	885b      	ldrh	r3, [r3, #2]
 8009ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ab8:	d828      	bhi.n	8009b0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	885b      	ldrh	r3, [r3, #2]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ac4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d104      	bne.n	8009ada <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f988 	bl	8009de8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad8:	e01d      	b.n	8009b16 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	7bfa      	ldrb	r2, [r7, #15]
 8009ade:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fe1d 	bl	800a726 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa43 	bl	8009f78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b00:	e009      	b.n	8009b16 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b0a:	e004      	b.n	8009b16 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f96a 	bl	8009de8 <USBD_CtlError>
  }
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	4b41      	ldr	r3, [pc, #260]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009b32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b34:	4b40      	ldr	r3, [pc, #256]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d904      	bls.n	8009b46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f952 	bl	8009de8 <USBD_CtlError>
 8009b44:	e075      	b.n	8009c32 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d002      	beq.n	8009b56 <USBD_SetConfig+0x36>
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d023      	beq.n	8009b9c <USBD_SetConfig+0x7c>
 8009b54:	e062      	b.n	8009c1c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b56:	4b38      	ldr	r3, [pc, #224]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01a      	beq.n	8009b94 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b5e:	4b36      	ldr	r3, [pc, #216]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2203      	movs	r2, #3
 8009b6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b70:	4b31      	ldr	r3, [pc, #196]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff f9e8 	bl	8008f4c <USBD_SetClassConfig>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d104      	bne.n	8009b8c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f92f 	bl	8009de8 <USBD_CtlError>
            return;
 8009b8a:	e052      	b.n	8009c32 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f9f3 	bl	8009f78 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b92:	e04e      	b.n	8009c32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f9ef 	bl	8009f78 <USBD_CtlSendStatus>
        break;
 8009b9a:	e04a      	b.n	8009c32 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b9c:	4b26      	ldr	r3, [pc, #152]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d112      	bne.n	8009bca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009bac:	4b22      	ldr	r3, [pc, #136]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009bb6:	4b20      	ldr	r3, [pc, #128]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff f9e4 	bl	8008f8a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f9d8 	bl	8009f78 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009bc8:	e033      	b.n	8009c32 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009bca:	4b1b      	ldr	r3, [pc, #108]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d01d      	beq.n	8009c14 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff f9d2 	bl	8008f8a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009be6:	4b14      	ldr	r3, [pc, #80]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bf0:	4b11      	ldr	r3, [pc, #68]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff f9a8 	bl	8008f4c <USBD_SetClassConfig>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d104      	bne.n	8009c0c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f8ef 	bl	8009de8 <USBD_CtlError>
            return;
 8009c0a:	e012      	b.n	8009c32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9b3 	bl	8009f78 <USBD_CtlSendStatus>
        break;
 8009c12:	e00e      	b.n	8009c32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f9af 	bl	8009f78 <USBD_CtlSendStatus>
        break;
 8009c1a:	e00a      	b.n	8009c32 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f8e2 	bl	8009de8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <USBD_SetConfig+0x118>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff f9ad 	bl	8008f8a <USBD_ClrClassConfig>
        break;
 8009c30:	bf00      	nop
    }
  }
}
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	2000032c 	.word	0x2000032c

08009c3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	88db      	ldrh	r3, [r3, #6]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d004      	beq.n	8009c58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f8c9 	bl	8009de8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c56:	e022      	b.n	8009c9e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	dc02      	bgt.n	8009c68 <USBD_GetConfig+0x2c>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	dc03      	bgt.n	8009c6e <USBD_GetConfig+0x32>
 8009c66:	e015      	b.n	8009c94 <USBD_GetConfig+0x58>
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d00b      	beq.n	8009c84 <USBD_GetConfig+0x48>
 8009c6c:	e012      	b.n	8009c94 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3308      	adds	r3, #8
 8009c78:	2201      	movs	r2, #1
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f91d 	bl	8009ebc <USBD_CtlSendData>
        break;
 8009c82:	e00c      	b.n	8009c9e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	2201      	movs	r2, #1
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f915 	bl	8009ebc <USBD_CtlSendData>
        break;
 8009c92:	e004      	b.n	8009c9e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f8a6 	bl	8009de8 <USBD_CtlError>
        break;
 8009c9c:	bf00      	nop
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d81e      	bhi.n	8009cfa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	88db      	ldrh	r3, [r3, #6]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d004      	beq.n	8009cce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f88e 	bl	8009de8 <USBD_CtlError>
        break;
 8009ccc:	e01a      	b.n	8009d04 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f043 0202 	orr.w	r2, r3, #2
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	330c      	adds	r3, #12
 8009cee:	2202      	movs	r2, #2
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f8e2 	bl	8009ebc <USBD_CtlSendData>
      break;
 8009cf8:	e004      	b.n	8009d04 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f873 	bl	8009de8 <USBD_CtlError>
      break;
 8009d02:	bf00      	nop
  }
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	885b      	ldrh	r3, [r3, #2]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d106      	bne.n	8009d2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f926 	bl	8009f78 <USBD_CtlSendStatus>
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d44:	3b01      	subs	r3, #1
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d80b      	bhi.n	8009d62 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d10c      	bne.n	8009d6c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f90c 	bl	8009f78 <USBD_CtlSendStatus>
      }
      break;
 8009d60:	e004      	b.n	8009d6c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f83f 	bl	8009de8 <USBD_CtlError>
      break;
 8009d6a:	e000      	b.n	8009d6e <USBD_ClrFeature+0x3a>
      break;
 8009d6c:	bf00      	nop
  }
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781a      	ldrb	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	785a      	ldrb	r2, [r3, #1]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	3302      	adds	r3, #2
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	3303      	adds	r3, #3
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	021b      	lsls	r3, r3, #8
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	3304      	adds	r3, #4
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	3305      	adds	r3, #5
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	4413      	add	r3, r2
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	3306      	adds	r3, #6
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	3307      	adds	r3, #7
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	80da      	strh	r2, [r3, #6]

}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr

08009de8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009df2:	2180      	movs	r1, #128	@ 0x80
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fc2d 	bl	800a654 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc29 	bl	800a654 <USBD_LL_StallEP>
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d032      	beq.n	8009e86 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f834 	bl	8009e8e <USBD_GetLen>
 8009e26:	4603      	mov	r3, r0
 8009e28:	3301      	adds	r3, #1
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	75fa      	strb	r2, [r7, #23]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4413      	add	r3, r2
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	7812      	ldrb	r2, [r2, #0]
 8009e44:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	75fa      	strb	r2, [r7, #23]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	4413      	add	r3, r2
 8009e52:	2203      	movs	r2, #3
 8009e54:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e56:	e012      	b.n	8009e7e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	60fa      	str	r2, [r7, #12]
 8009e5e:	7dfa      	ldrb	r2, [r7, #23]
 8009e60:	1c51      	adds	r1, r2, #1
 8009e62:	75f9      	strb	r1, [r7, #23]
 8009e64:	4611      	mov	r1, r2
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	440a      	add	r2, r1
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	75fa      	strb	r2, [r7, #23]
 8009e74:	461a      	mov	r2, r3
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	4413      	add	r3, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e8      	bne.n	8009e58 <USBD_GetString+0x4e>
    }
  }
}
 8009e86:	bf00      	nop
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e9a:	e005      	b.n	8009ea8 <USBD_GetLen+0x1a>
  {
    len++;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1f5      	bne.n	8009e9c <USBD_GetLen+0xe>
  }

  return len;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr

08009ebc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ed2:	88fa      	ldrh	r2, [r7, #6]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ed8:	88fa      	ldrh	r2, [r7, #6]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ede:	88fb      	ldrh	r3, [r7, #6]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f000 fc3d 	bl	800a764 <USBD_LL_Transmit>

  return USBD_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f02:	88fb      	ldrh	r3, [r7, #6]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	2100      	movs	r1, #0
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fc2b 	bl	800a764 <USBD_LL_Transmit>

  return USBD_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2203      	movs	r2, #3
 8009f2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	2100      	movs	r1, #0
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 fc30 	bl	800a7aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	2100      	movs	r1, #0
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fc1e 	bl	800a7aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2204      	movs	r2, #4
 8009f84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f88:	2300      	movs	r3, #0
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fbe8 	bl	800a764 <USBD_LL_Transmit>

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2205      	movs	r2, #5
 8009faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fbf8 	bl	800a7aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4912      	ldr	r1, [pc, #72]	@ (800a014 <MX_USB_DEVICE_Init+0x50>)
 8009fcc:	4812      	ldr	r0, [pc, #72]	@ (800a018 <MX_USB_DEVICE_Init+0x54>)
 8009fce:	f7fe ff63 	bl	8008e98 <USBD_Init>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fd8:	f7f6 fcce 	bl	8000978 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fdc:	490f      	ldr	r1, [pc, #60]	@ (800a01c <MX_USB_DEVICE_Init+0x58>)
 8009fde:	480e      	ldr	r0, [pc, #56]	@ (800a018 <MX_USB_DEVICE_Init+0x54>)
 8009fe0:	f7fe ff85 	bl	8008eee <USBD_RegisterClass>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fea:	f7f6 fcc5 	bl	8000978 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fee:	490c      	ldr	r1, [pc, #48]	@ (800a020 <MX_USB_DEVICE_Init+0x5c>)
 8009ff0:	4809      	ldr	r0, [pc, #36]	@ (800a018 <MX_USB_DEVICE_Init+0x54>)
 8009ff2:	f7fe fee5 	bl	8008dc0 <USBD_CDC_RegisterInterface>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ffc:	f7f6 fcbc 	bl	8000978 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a000:	4805      	ldr	r0, [pc, #20]	@ (800a018 <MX_USB_DEVICE_Init+0x54>)
 800a002:	f7fe ff8d 	bl	8008f20 <USBD_Start>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a00c:	f7f6 fcb4 	bl	8000978 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a010:	bf00      	nop
 800a012:	bd80      	pop	{r7, pc}
 800a014:	2000012c 	.word	0x2000012c
 800a018:	20000330 	.word	0x20000330
 800a01c:	20000018 	.word	0x20000018
 800a020:	2000011c 	.word	0x2000011c

0800a024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a028:	2200      	movs	r2, #0
 800a02a:	4905      	ldr	r1, [pc, #20]	@ (800a040 <CDC_Init_FS+0x1c>)
 800a02c:	4805      	ldr	r0, [pc, #20]	@ (800a044 <CDC_Init_FS+0x20>)
 800a02e:	f7fe fedd 	bl	8008dec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a032:	4905      	ldr	r1, [pc, #20]	@ (800a048 <CDC_Init_FS+0x24>)
 800a034:	4803      	ldr	r0, [pc, #12]	@ (800a044 <CDC_Init_FS+0x20>)
 800a036:	f7fe fef2 	bl	8008e1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a03a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	200009f4 	.word	0x200009f4
 800a044:	20000330 	.word	0x20000330
 800a048:	200005f4 	.word	0x200005f4

0800a04c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a052:	4618      	mov	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	bc80      	pop	{r7}
 800a058:	4770      	bx	lr
	...

0800a05c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	71fb      	strb	r3, [r7, #7]
 800a068:	4613      	mov	r3, r2
 800a06a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	2b23      	cmp	r3, #35	@ 0x23
 800a070:	d84a      	bhi.n	800a108 <CDC_Control_FS+0xac>
 800a072:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <CDC_Control_FS+0x1c>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a109 	.word	0x0800a109
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a109 	.word	0x0800a109
 800a084:	0800a109 	.word	0x0800a109
 800a088:	0800a109 	.word	0x0800a109
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a109 	.word	0x0800a109
 800a094:	0800a109 	.word	0x0800a109
 800a098:	0800a109 	.word	0x0800a109
 800a09c:	0800a109 	.word	0x0800a109
 800a0a0:	0800a109 	.word	0x0800a109
 800a0a4:	0800a109 	.word	0x0800a109
 800a0a8:	0800a109 	.word	0x0800a109
 800a0ac:	0800a109 	.word	0x0800a109
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a109 	.word	0x0800a109
 800a0b8:	0800a109 	.word	0x0800a109
 800a0bc:	0800a109 	.word	0x0800a109
 800a0c0:	0800a109 	.word	0x0800a109
 800a0c4:	0800a109 	.word	0x0800a109
 800a0c8:	0800a109 	.word	0x0800a109
 800a0cc:	0800a109 	.word	0x0800a109
 800a0d0:	0800a109 	.word	0x0800a109
 800a0d4:	0800a109 	.word	0x0800a109
 800a0d8:	0800a109 	.word	0x0800a109
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	0800a109 	.word	0x0800a109
 800a0e4:	0800a109 	.word	0x0800a109
 800a0e8:	0800a109 	.word	0x0800a109
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a109 	.word	0x0800a109
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a109 	.word	0x0800a109
 800a100:	0800a109 	.word	0x0800a109
 800a104:	0800a109 	.word	0x0800a109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a108:	bf00      	nop
  }

  return (USBD_OK);
 800a10a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop

0800a118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4805      	ldr	r0, [pc, #20]	@ (800a13c <CDC_Receive_FS+0x24>)
 800a126:	f7fe fe7a 	bl	8008e1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a12a:	4804      	ldr	r0, [pc, #16]	@ (800a13c <CDC_Receive_FS+0x24>)
 800a12c:	f7fe fe8a 	bl	8008e44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000330 	.word	0x20000330

0800a140 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	6039      	str	r1, [r7, #0]
 800a14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	2212      	movs	r2, #18
 800a150:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a152:	4b03      	ldr	r3, [pc, #12]	@ (800a160 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	bc80      	pop	{r7}
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	20000148 	.word	0x20000148

0800a164 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2204      	movs	r2, #4
 800a174:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	@ (800a184 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bc80      	pop	{r7}
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	2000015c 	.word	0x2000015c

0800a188 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	6039      	str	r1, [r7, #0]
 800a192:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d105      	bne.n	800a1a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	4907      	ldr	r1, [pc, #28]	@ (800a1bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a19e:	4808      	ldr	r0, [pc, #32]	@ (800a1c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1a0:	f7ff fe33 	bl	8009e0a <USBD_GetString>
 800a1a4:	e004      	b.n	800a1b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	4904      	ldr	r1, [pc, #16]	@ (800a1bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a1aa:	4805      	ldr	r0, [pc, #20]	@ (800a1c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1ac:	f7ff fe2d 	bl	8009e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1b0:	4b02      	ldr	r3, [pc, #8]	@ (800a1bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000df4 	.word	0x20000df4
 800a1c0:	0800baf4 	.word	0x0800baf4

0800a1c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1d4:	4804      	ldr	r0, [pc, #16]	@ (800a1e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1d6:	f7ff fe18 	bl	8009e0a <USBD_GetString>
  return USBD_StrDesc;
 800a1da:	4b02      	ldr	r3, [pc, #8]	@ (800a1e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000df4 	.word	0x20000df4
 800a1e8:	0800bb0c 	.word	0x0800bb0c

0800a1ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6039      	str	r1, [r7, #0]
 800a1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	221a      	movs	r2, #26
 800a1fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1fe:	f000 f843 	bl	800a288 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a202:	4b02      	ldr	r3, [pc, #8]	@ (800a20c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20000160 	.word	0x20000160

0800a210 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d105      	bne.n	800a22e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	4907      	ldr	r1, [pc, #28]	@ (800a244 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a226:	4808      	ldr	r0, [pc, #32]	@ (800a248 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a228:	f7ff fdef 	bl	8009e0a <USBD_GetString>
 800a22c:	e004      	b.n	800a238 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	4904      	ldr	r1, [pc, #16]	@ (800a244 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a232:	4805      	ldr	r0, [pc, #20]	@ (800a248 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a234:	f7ff fde9 	bl	8009e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a238:	4b02      	ldr	r3, [pc, #8]	@ (800a244 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000df4 	.word	0x20000df4
 800a248:	0800bb20 	.word	0x0800bb20

0800a24c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	4603      	mov	r3, r0
 800a254:	6039      	str	r1, [r7, #0]
 800a256:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a258:	79fb      	ldrb	r3, [r7, #7]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d105      	bne.n	800a26a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4907      	ldr	r1, [pc, #28]	@ (800a280 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a262:	4808      	ldr	r0, [pc, #32]	@ (800a284 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a264:	f7ff fdd1 	bl	8009e0a <USBD_GetString>
 800a268:	e004      	b.n	800a274 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	4904      	ldr	r1, [pc, #16]	@ (800a280 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a26e:	4805      	ldr	r0, [pc, #20]	@ (800a284 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a270:	f7ff fdcb 	bl	8009e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a274:	4b02      	ldr	r3, [pc, #8]	@ (800a280 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000df4 	.word	0x20000df4
 800a284:	0800bb2c 	.word	0x0800bb2c

0800a288 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a28e:	4b0f      	ldr	r3, [pc, #60]	@ (800a2cc <Get_SerialNum+0x44>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a294:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d0 <Get_SerialNum+0x48>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a29a:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d4 <Get_SerialNum+0x4c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2ae:	2208      	movs	r2, #8
 800a2b0:	4909      	ldr	r1, [pc, #36]	@ (800a2d8 <Get_SerialNum+0x50>)
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 f814 	bl	800a2e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2b8:	2204      	movs	r2, #4
 800a2ba:	4908      	ldr	r1, [pc, #32]	@ (800a2dc <Get_SerialNum+0x54>)
 800a2bc:	68b8      	ldr	r0, [r7, #8]
 800a2be:	f000 f80f 	bl	800a2e0 <IntToUnicode>
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	1ffff7e8 	.word	0x1ffff7e8
 800a2d0:	1ffff7ec 	.word	0x1ffff7ec
 800a2d4:	1ffff7f0 	.word	0x1ffff7f0
 800a2d8:	20000162 	.word	0x20000162
 800a2dc:	20000172 	.word	0x20000172

0800a2e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	75fb      	strb	r3, [r7, #23]
 800a2f6:	e027      	b.n	800a348 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	0f1b      	lsrs	r3, r3, #28
 800a2fc:	2b09      	cmp	r3, #9
 800a2fe:	d80b      	bhi.n	800a318 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	0f1b      	lsrs	r3, r3, #28
 800a304:	b2da      	uxtb	r2, r3
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	4619      	mov	r1, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	440b      	add	r3, r1
 800a310:	3230      	adds	r2, #48	@ 0x30
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	e00a      	b.n	800a32e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0f1b      	lsrs	r3, r3, #28
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4619      	mov	r1, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	440b      	add	r3, r1
 800a328:	3237      	adds	r2, #55	@ 0x37
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	3301      	adds	r3, #1
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	3301      	adds	r3, #1
 800a346:	75fb      	strb	r3, [r7, #23]
 800a348:	7dfa      	ldrb	r2, [r7, #23]
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d3d3      	bcc.n	800a2f8 <IntToUnicode+0x18>
  }
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	371c      	adds	r7, #28
 800a356:	46bd      	mov	sp, r7
 800a358:	bc80      	pop	{r7}
 800a35a:	4770      	bx	lr

0800a35c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a0d      	ldr	r2, [pc, #52]	@ (800a3a0 <HAL_PCD_MspInit+0x44>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d113      	bne.n	800a396 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a36e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a4 <HAL_PCD_MspInit+0x48>)
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a4 <HAL_PCD_MspInit+0x48>)
 800a374:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a378:	61d3      	str	r3, [r2, #28]
 800a37a:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a4 <HAL_PCD_MspInit+0x48>)
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a386:	2200      	movs	r2, #0
 800a388:	2100      	movs	r1, #0
 800a38a:	2014      	movs	r0, #20
 800a38c:	f7f6 fe0b 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a390:	2014      	movs	r0, #20
 800a392:	f7f6 fe24 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	40005c00 	.word	0x40005c00
 800a3a4:	40021000 	.word	0x40021000

0800a3a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fe fdf6 	bl	8008fb0 <USBD_LL_SetupStage>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	440b      	add	r3, r1
 800a3ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7fe fe28 	bl	800904a <USBD_LL_DataOutStage>
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	440b      	add	r3, r1
 800a422:	3324      	adds	r3, #36	@ 0x24
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	4619      	mov	r1, r3
 800a42a:	f7fe fe7f 	bl	800912c <USBD_LL_DataInStage>
}
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe ff8f 	bl	8009368 <USBD_LL_SOF>
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a45a:	2301      	movs	r3, #1
 800a45c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	799b      	ldrb	r3, [r3, #6]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d001      	beq.n	800a46a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a466:	f7f6 fa87 	bl	8000978 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a470:	7bfa      	ldrb	r2, [r7, #15]
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe ff3f 	bl	80092f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fef8 	bl	8009276 <USBD_LL_Reset>
}
 800a486:	bf00      	nop
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe ff39 	bl	8009316 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7a9b      	ldrb	r3, [r3, #10]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4ac:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <HAL_PCD_SuspendCallback+0x30>)
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	4a03      	ldr	r2, [pc, #12]	@ (800a4c0 <HAL_PCD_SuspendCallback+0x30>)
 800a4b2:	f043 0306 	orr.w	r3, r3, #6
 800a4b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	e000ed00 	.word	0xe000ed00

0800a4c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fe ff33 	bl	800933e <USBD_LL_Resume>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a4e8:	4a28      	ldr	r2, [pc, #160]	@ (800a58c <USBD_LL_Init+0xac>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a26      	ldr	r2, [pc, #152]	@ (800a58c <USBD_LL_Init+0xac>)
 800a4f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a4f8:	4b24      	ldr	r3, [pc, #144]	@ (800a58c <USBD_LL_Init+0xac>)
 800a4fa:	4a25      	ldr	r2, [pc, #148]	@ (800a590 <USBD_LL_Init+0xb0>)
 800a4fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a4fe:	4b23      	ldr	r3, [pc, #140]	@ (800a58c <USBD_LL_Init+0xac>)
 800a500:	2208      	movs	r2, #8
 800a502:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a504:	4b21      	ldr	r3, [pc, #132]	@ (800a58c <USBD_LL_Init+0xac>)
 800a506:	2202      	movs	r2, #2
 800a508:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a50a:	4b20      	ldr	r3, [pc, #128]	@ (800a58c <USBD_LL_Init+0xac>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a510:	4b1e      	ldr	r3, [pc, #120]	@ (800a58c <USBD_LL_Init+0xac>)
 800a512:	2200      	movs	r2, #0
 800a514:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a516:	4b1d      	ldr	r3, [pc, #116]	@ (800a58c <USBD_LL_Init+0xac>)
 800a518:	2200      	movs	r2, #0
 800a51a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a51c:	481b      	ldr	r0, [pc, #108]	@ (800a58c <USBD_LL_Init+0xac>)
 800a51e:	f7f8 fe44 	bl	80031aa <HAL_PCD_Init>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a528:	f7f6 fa26 	bl	8000978 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a532:	2318      	movs	r3, #24
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	f7fa fb55 	bl	8004be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a542:	2358      	movs	r3, #88	@ 0x58
 800a544:	2200      	movs	r2, #0
 800a546:	2180      	movs	r1, #128	@ 0x80
 800a548:	f7fa fb4d 	bl	8004be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a552:	23c0      	movs	r3, #192	@ 0xc0
 800a554:	2200      	movs	r2, #0
 800a556:	2181      	movs	r1, #129	@ 0x81
 800a558:	f7fa fb45 	bl	8004be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a562:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a566:	2200      	movs	r2, #0
 800a568:	2101      	movs	r1, #1
 800a56a:	f7fa fb3c 	bl	8004be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a578:	2200      	movs	r2, #0
 800a57a:	2182      	movs	r1, #130	@ 0x82
 800a57c:	f7fa fb33 	bl	8004be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000ff4 	.word	0x20000ff4
 800a590:	40005c00 	.word	0x40005c00

0800a594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7f8 fef3 	bl	8003396 <HAL_PCD_Start>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f94e 	bl	800a858 <USBD_Get_USB_Status>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	4603      	mov	r3, r0
 800a5da:	70fb      	strb	r3, [r7, #3]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70bb      	strb	r3, [r7, #2]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5f2:	78bb      	ldrb	r3, [r7, #2]
 800a5f4:	883a      	ldrh	r2, [r7, #0]
 800a5f6:	78f9      	ldrb	r1, [r7, #3]
 800a5f8:	f7f9 f847 	bl	800368a <HAL_PCD_EP_Open>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f928 	bl	800a858 <USBD_Get_USB_Status>
 800a608:	4603      	mov	r3, r0
 800a60a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a630:	78fa      	ldrb	r2, [r7, #3]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f7f9 f885 	bl	8003744 <HAL_PCD_EP_Close>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 f909 	bl	800a858 <USBD_Get_USB_Status>
 800a646:	4603      	mov	r3, r0
 800a648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f7f9 f92d 	bl	80038d2 <HAL_PCD_EP_SetStall>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f8ea 	bl	800a858 <USBD_Get_USB_Status>
 800a684:	4603      	mov	r3, r0
 800a686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a688:	7bbb      	ldrb	r3, [r7, #14]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	460b      	mov	r3, r1
 800a69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f9 f96e 	bl	8003992 <HAL_PCD_EP_ClrStall>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f8cb 	bl	800a858 <USBD_Get_USB_Status>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da0b      	bge.n	800a704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6f2:	68f9      	ldr	r1, [r7, #12]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	440b      	add	r3, r1
 800a6fe:	3312      	adds	r3, #18
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	e00b      	b.n	800a71c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	440b      	add	r3, r1
 800a716:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a71a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	bc80      	pop	{r7}
 800a724:	4770      	bx	lr

0800a726 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	460b      	mov	r3, r1
 800a730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a740:	78fa      	ldrb	r2, [r7, #3]
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f7f8 ff7c 	bl	8003642 <HAL_PCD_SetAddress>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f881 	bl	800a858 <USBD_Get_USB_Status>
 800a756:	4603      	mov	r3, r0
 800a758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	607a      	str	r2, [r7, #4]
 800a76e:	461a      	mov	r2, r3
 800a770:	460b      	mov	r3, r1
 800a772:	72fb      	strb	r3, [r7, #11]
 800a774:	4613      	mov	r3, r2
 800a776:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a786:	893b      	ldrh	r3, [r7, #8]
 800a788:	7af9      	ldrb	r1, [r7, #11]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	f7f9 f86a 	bl	8003864 <HAL_PCD_EP_Transmit>
 800a790:	4603      	mov	r3, r0
 800a792:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a794:	7dfb      	ldrb	r3, [r7, #23]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f85e 	bl	800a858 <USBD_Get_USB_Status>
 800a79c:	4603      	mov	r3, r0
 800a79e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	72fb      	strb	r3, [r7, #11]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7cc:	893b      	ldrh	r3, [r7, #8]
 800a7ce:	7af9      	ldrb	r1, [r7, #11]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	f7f8 ffff 	bl	80037d4 <HAL_PCD_EP_Receive>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 f83b 	bl	800a858 <USBD_Get_USB_Status>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7f9 f815 	bl	8003836 <HAL_PCD_EP_GetRxCount>
 800a80c:	4603      	mov	r3, r0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a820:	4b02      	ldr	r3, [pc, #8]	@ (800a82c <USBD_static_malloc+0x14>)
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	bc80      	pop	{r7}
 800a82a:	4770      	bx	lr
 800a82c:	200012cc 	.word	0x200012cc

0800a830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr

0800a842 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	bc80      	pop	{r7}
 800a856:	4770      	bx	lr

0800a858 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d817      	bhi.n	800a89c <USBD_Get_USB_Status+0x44>
 800a86c:	a201      	add	r2, pc, #4	@ (adr r2, 800a874 <USBD_Get_USB_Status+0x1c>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a885 	.word	0x0800a885
 800a878:	0800a88b 	.word	0x0800a88b
 800a87c:	0800a891 	.word	0x0800a891
 800a880:	0800a897 	.word	0x0800a897
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
    break;
 800a888:	e00b      	b.n	800a8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a88a:	2302      	movs	r3, #2
 800a88c:	73fb      	strb	r3, [r7, #15]
    break;
 800a88e:	e008      	b.n	800a8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a890:	2301      	movs	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
    break;
 800a894:	e005      	b.n	800a8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a896:	2302      	movs	r3, #2
 800a898:	73fb      	strb	r3, [r7, #15]
    break;
 800a89a:	e002      	b.n	800a8a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a89c:	2302      	movs	r3, #2
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	bf00      	nop
  }
  return usb_status;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bc80      	pop	{r7}
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop

0800a8b0 <std>:
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	b510      	push	{r4, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8be:	6083      	str	r3, [r0, #8]
 800a8c0:	8181      	strh	r1, [r0, #12]
 800a8c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8c4:	81c2      	strh	r2, [r0, #14]
 800a8c6:	6183      	str	r3, [r0, #24]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	305c      	adds	r0, #92	@ 0x5c
 800a8ce:	f000 f926 	bl	800ab1e <memset>
 800a8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a908 <std+0x58>)
 800a8d4:	6224      	str	r4, [r4, #32]
 800a8d6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <std+0x5c>)
 800a8da:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a910 <std+0x60>)
 800a8de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a914 <std+0x64>)
 800a8e2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a918 <std+0x68>)
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d006      	beq.n	800a8f8 <std+0x48>
 800a8ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8ee:	4294      	cmp	r4, r2
 800a8f0:	d002      	beq.n	800a8f8 <std+0x48>
 800a8f2:	33d0      	adds	r3, #208	@ 0xd0
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	d105      	bne.n	800a904 <std+0x54>
 800a8f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a900:	f000 b986 	b.w	800ac10 <__retarget_lock_init_recursive>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	bf00      	nop
 800a908:	0800aa99 	.word	0x0800aa99
 800a90c:	0800aabb 	.word	0x0800aabb
 800a910:	0800aaf3 	.word	0x0800aaf3
 800a914:	0800ab17 	.word	0x0800ab17
 800a918:	200014ec 	.word	0x200014ec

0800a91c <stdio_exit_handler>:
 800a91c:	4a02      	ldr	r2, [pc, #8]	@ (800a928 <stdio_exit_handler+0xc>)
 800a91e:	4903      	ldr	r1, [pc, #12]	@ (800a92c <stdio_exit_handler+0x10>)
 800a920:	4803      	ldr	r0, [pc, #12]	@ (800a930 <stdio_exit_handler+0x14>)
 800a922:	f000 b869 	b.w	800a9f8 <_fwalk_sglue>
 800a926:	bf00      	nop
 800a928:	2000017c 	.word	0x2000017c
 800a92c:	0800b759 	.word	0x0800b759
 800a930:	2000018c 	.word	0x2000018c

0800a934 <cleanup_stdio>:
 800a934:	6841      	ldr	r1, [r0, #4]
 800a936:	4b0c      	ldr	r3, [pc, #48]	@ (800a968 <cleanup_stdio+0x34>)
 800a938:	b510      	push	{r4, lr}
 800a93a:	4299      	cmp	r1, r3
 800a93c:	4604      	mov	r4, r0
 800a93e:	d001      	beq.n	800a944 <cleanup_stdio+0x10>
 800a940:	f000 ff0a 	bl	800b758 <_fflush_r>
 800a944:	68a1      	ldr	r1, [r4, #8]
 800a946:	4b09      	ldr	r3, [pc, #36]	@ (800a96c <cleanup_stdio+0x38>)
 800a948:	4299      	cmp	r1, r3
 800a94a:	d002      	beq.n	800a952 <cleanup_stdio+0x1e>
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 ff03 	bl	800b758 <_fflush_r>
 800a952:	68e1      	ldr	r1, [r4, #12]
 800a954:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <cleanup_stdio+0x3c>)
 800a956:	4299      	cmp	r1, r3
 800a958:	d004      	beq.n	800a964 <cleanup_stdio+0x30>
 800a95a:	4620      	mov	r0, r4
 800a95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a960:	f000 befa 	b.w	800b758 <_fflush_r>
 800a964:	bd10      	pop	{r4, pc}
 800a966:	bf00      	nop
 800a968:	200014ec 	.word	0x200014ec
 800a96c:	20001554 	.word	0x20001554
 800a970:	200015bc 	.word	0x200015bc

0800a974 <global_stdio_init.part.0>:
 800a974:	b510      	push	{r4, lr}
 800a976:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <global_stdio_init.part.0+0x30>)
 800a978:	4c0b      	ldr	r4, [pc, #44]	@ (800a9a8 <global_stdio_init.part.0+0x34>)
 800a97a:	4a0c      	ldr	r2, [pc, #48]	@ (800a9ac <global_stdio_init.part.0+0x38>)
 800a97c:	4620      	mov	r0, r4
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	2104      	movs	r1, #4
 800a982:	2200      	movs	r2, #0
 800a984:	f7ff ff94 	bl	800a8b0 <std>
 800a988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a98c:	2201      	movs	r2, #1
 800a98e:	2109      	movs	r1, #9
 800a990:	f7ff ff8e 	bl	800a8b0 <std>
 800a994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a998:	2202      	movs	r2, #2
 800a99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a99e:	2112      	movs	r1, #18
 800a9a0:	f7ff bf86 	b.w	800a8b0 <std>
 800a9a4:	20001624 	.word	0x20001624
 800a9a8:	200014ec 	.word	0x200014ec
 800a9ac:	0800a91d 	.word	0x0800a91d

0800a9b0 <__sfp_lock_acquire>:
 800a9b0:	4801      	ldr	r0, [pc, #4]	@ (800a9b8 <__sfp_lock_acquire+0x8>)
 800a9b2:	f000 b92e 	b.w	800ac12 <__retarget_lock_acquire_recursive>
 800a9b6:	bf00      	nop
 800a9b8:	2000162d 	.word	0x2000162d

0800a9bc <__sfp_lock_release>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	@ (800a9c4 <__sfp_lock_release+0x8>)
 800a9be:	f000 b929 	b.w	800ac14 <__retarget_lock_release_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	2000162d 	.word	0x2000162d

0800a9c8 <__sinit>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	f7ff fff0 	bl	800a9b0 <__sfp_lock_acquire>
 800a9d0:	6a23      	ldr	r3, [r4, #32]
 800a9d2:	b11b      	cbz	r3, 800a9dc <__sinit+0x14>
 800a9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d8:	f7ff bff0 	b.w	800a9bc <__sfp_lock_release>
 800a9dc:	4b04      	ldr	r3, [pc, #16]	@ (800a9f0 <__sinit+0x28>)
 800a9de:	6223      	str	r3, [r4, #32]
 800a9e0:	4b04      	ldr	r3, [pc, #16]	@ (800a9f4 <__sinit+0x2c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1f5      	bne.n	800a9d4 <__sinit+0xc>
 800a9e8:	f7ff ffc4 	bl	800a974 <global_stdio_init.part.0>
 800a9ec:	e7f2      	b.n	800a9d4 <__sinit+0xc>
 800a9ee:	bf00      	nop
 800a9f0:	0800a935 	.word	0x0800a935
 800a9f4:	20001624 	.word	0x20001624

0800a9f8 <_fwalk_sglue>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	4688      	mov	r8, r1
 800aa00:	4614      	mov	r4, r2
 800aa02:	2600      	movs	r6, #0
 800aa04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa08:	f1b9 0901 	subs.w	r9, r9, #1
 800aa0c:	d505      	bpl.n	800aa1a <_fwalk_sglue+0x22>
 800aa0e:	6824      	ldr	r4, [r4, #0]
 800aa10:	2c00      	cmp	r4, #0
 800aa12:	d1f7      	bne.n	800aa04 <_fwalk_sglue+0xc>
 800aa14:	4630      	mov	r0, r6
 800aa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	89ab      	ldrh	r3, [r5, #12]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d907      	bls.n	800aa30 <_fwalk_sglue+0x38>
 800aa20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa24:	3301      	adds	r3, #1
 800aa26:	d003      	beq.n	800aa30 <_fwalk_sglue+0x38>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	47c0      	blx	r8
 800aa2e:	4306      	orrs	r6, r0
 800aa30:	3568      	adds	r5, #104	@ 0x68
 800aa32:	e7e9      	b.n	800aa08 <_fwalk_sglue+0x10>

0800aa34 <iprintf>:
 800aa34:	b40f      	push	{r0, r1, r2, r3}
 800aa36:	b507      	push	{r0, r1, r2, lr}
 800aa38:	4906      	ldr	r1, [pc, #24]	@ (800aa54 <iprintf+0x20>)
 800aa3a:	ab04      	add	r3, sp, #16
 800aa3c:	6808      	ldr	r0, [r1, #0]
 800aa3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa42:	6881      	ldr	r1, [r0, #8]
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	f000 fb5d 	bl	800b104 <_vfiprintf_r>
 800aa4a:	b003      	add	sp, #12
 800aa4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa50:	b004      	add	sp, #16
 800aa52:	4770      	bx	lr
 800aa54:	20000188 	.word	0x20000188

0800aa58 <siprintf>:
 800aa58:	b40e      	push	{r1, r2, r3}
 800aa5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa5e:	b500      	push	{lr}
 800aa60:	b09c      	sub	sp, #112	@ 0x70
 800aa62:	ab1d      	add	r3, sp, #116	@ 0x74
 800aa64:	9002      	str	r0, [sp, #8]
 800aa66:	9006      	str	r0, [sp, #24]
 800aa68:	9107      	str	r1, [sp, #28]
 800aa6a:	9104      	str	r1, [sp, #16]
 800aa6c:	4808      	ldr	r0, [pc, #32]	@ (800aa90 <siprintf+0x38>)
 800aa6e:	4909      	ldr	r1, [pc, #36]	@ (800aa94 <siprintf+0x3c>)
 800aa70:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa74:	9105      	str	r1, [sp, #20]
 800aa76:	6800      	ldr	r0, [r0, #0]
 800aa78:	a902      	add	r1, sp, #8
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	f000 fa1e 	bl	800aebc <_svfiprintf_r>
 800aa80:	2200      	movs	r2, #0
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	b01c      	add	sp, #112	@ 0x70
 800aa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa8c:	b003      	add	sp, #12
 800aa8e:	4770      	bx	lr
 800aa90:	20000188 	.word	0x20000188
 800aa94:	ffff0208 	.word	0xffff0208

0800aa98 <__sread>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	f000 f868 	bl	800ab74 <_read_r>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	bfab      	itete	ge
 800aaa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aaaa:	89a3      	ldrhlt	r3, [r4, #12]
 800aaac:	181b      	addge	r3, r3, r0
 800aaae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aab2:	bfac      	ite	ge
 800aab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aab6:	81a3      	strhlt	r3, [r4, #12]
 800aab8:	bd10      	pop	{r4, pc}

0800aaba <__swrite>:
 800aaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabe:	461f      	mov	r7, r3
 800aac0:	898b      	ldrh	r3, [r1, #12]
 800aac2:	4605      	mov	r5, r0
 800aac4:	05db      	lsls	r3, r3, #23
 800aac6:	460c      	mov	r4, r1
 800aac8:	4616      	mov	r6, r2
 800aaca:	d505      	bpl.n	800aad8 <__swrite+0x1e>
 800aacc:	2302      	movs	r3, #2
 800aace:	2200      	movs	r2, #0
 800aad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad4:	f000 f83c 	bl	800ab50 <_lseek_r>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	4632      	mov	r2, r6
 800aadc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aae0:	81a3      	strh	r3, [r4, #12]
 800aae2:	4628      	mov	r0, r5
 800aae4:	463b      	mov	r3, r7
 800aae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	f000 b853 	b.w	800ab98 <_write_r>

0800aaf2 <__sseek>:
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafa:	f000 f829 	bl	800ab50 <_lseek_r>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	bf15      	itete	ne
 800ab04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab0e:	81a3      	strheq	r3, [r4, #12]
 800ab10:	bf18      	it	ne
 800ab12:	81a3      	strhne	r3, [r4, #12]
 800ab14:	bd10      	pop	{r4, pc}

0800ab16 <__sclose>:
 800ab16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1a:	f000 b809 	b.w	800ab30 <_close_r>

0800ab1e <memset>:
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4402      	add	r2, r0
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d100      	bne.n	800ab28 <memset+0xa>
 800ab26:	4770      	bx	lr
 800ab28:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2c:	e7f9      	b.n	800ab22 <memset+0x4>
	...

0800ab30 <_close_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	2300      	movs	r3, #0
 800ab34:	4d05      	ldr	r5, [pc, #20]	@ (800ab4c <_close_r+0x1c>)
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f5 ffc5 	bl	8000aca <_close>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_close_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_close_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	20001628 	.word	0x20001628

0800ab50 <_lseek_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	4611      	mov	r1, r2
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4d05      	ldr	r5, [pc, #20]	@ (800ab70 <_lseek_r+0x20>)
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f5 ffd7 	bl	8000b12 <_lseek>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_lseek_r+0x1e>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_lseek_r+0x1e>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20001628 	.word	0x20001628

0800ab74 <_read_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4d05      	ldr	r5, [pc, #20]	@ (800ab94 <_read_r+0x20>)
 800ab80:	602a      	str	r2, [r5, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	f7f5 ff84 	bl	8000a90 <_read>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d102      	bne.n	800ab92 <_read_r+0x1e>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b103      	cbz	r3, 800ab92 <_read_r+0x1e>
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	20001628 	.word	0x20001628

0800ab98 <_write_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	2200      	movs	r2, #0
 800aba2:	4d05      	ldr	r5, [pc, #20]	@ (800abb8 <_write_r+0x20>)
 800aba4:	602a      	str	r2, [r5, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f7f5 fe8a 	bl	80008c0 <_write>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_write_r+0x1e>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_write_r+0x1e>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	20001628 	.word	0x20001628

0800abbc <__errno>:
 800abbc:	4b01      	ldr	r3, [pc, #4]	@ (800abc4 <__errno+0x8>)
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20000188 	.word	0x20000188

0800abc8 <__libc_init_array>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	2600      	movs	r6, #0
 800abcc:	4d0c      	ldr	r5, [pc, #48]	@ (800ac00 <__libc_init_array+0x38>)
 800abce:	4c0d      	ldr	r4, [pc, #52]	@ (800ac04 <__libc_init_array+0x3c>)
 800abd0:	1b64      	subs	r4, r4, r5
 800abd2:	10a4      	asrs	r4, r4, #2
 800abd4:	42a6      	cmp	r6, r4
 800abd6:	d109      	bne.n	800abec <__libc_init_array+0x24>
 800abd8:	f000 ff7a 	bl	800bad0 <_init>
 800abdc:	2600      	movs	r6, #0
 800abde:	4d0a      	ldr	r5, [pc, #40]	@ (800ac08 <__libc_init_array+0x40>)
 800abe0:	4c0a      	ldr	r4, [pc, #40]	@ (800ac0c <__libc_init_array+0x44>)
 800abe2:	1b64      	subs	r4, r4, r5
 800abe4:	10a4      	asrs	r4, r4, #2
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	d105      	bne.n	800abf6 <__libc_init_array+0x2e>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf0:	4798      	blx	r3
 800abf2:	3601      	adds	r6, #1
 800abf4:	e7ee      	b.n	800abd4 <__libc_init_array+0xc>
 800abf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfa:	4798      	blx	r3
 800abfc:	3601      	adds	r6, #1
 800abfe:	e7f2      	b.n	800abe6 <__libc_init_array+0x1e>
 800ac00:	0800bb9c 	.word	0x0800bb9c
 800ac04:	0800bb9c 	.word	0x0800bb9c
 800ac08:	0800bb9c 	.word	0x0800bb9c
 800ac0c:	0800bba0 	.word	0x0800bba0

0800ac10 <__retarget_lock_init_recursive>:
 800ac10:	4770      	bx	lr

0800ac12 <__retarget_lock_acquire_recursive>:
 800ac12:	4770      	bx	lr

0800ac14 <__retarget_lock_release_recursive>:
 800ac14:	4770      	bx	lr
	...

0800ac18 <_free_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d040      	beq.n	800aca2 <_free_r+0x8a>
 800ac20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac24:	1f0c      	subs	r4, r1, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bfb8      	it	lt
 800ac2a:	18e4      	addlt	r4, r4, r3
 800ac2c:	f000 f8de 	bl	800adec <__malloc_lock>
 800ac30:	4a1c      	ldr	r2, [pc, #112]	@ (800aca4 <_free_r+0x8c>)
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	b933      	cbnz	r3, 800ac44 <_free_r+0x2c>
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	6014      	str	r4, [r2, #0]
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac40:	f000 b8da 	b.w	800adf8 <__malloc_unlock>
 800ac44:	42a3      	cmp	r3, r4
 800ac46:	d908      	bls.n	800ac5a <_free_r+0x42>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	1821      	adds	r1, r4, r0
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf01      	itttt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	1809      	addeq	r1, r1, r0
 800ac56:	6021      	streq	r1, [r4, #0]
 800ac58:	e7ed      	b.n	800ac36 <_free_r+0x1e>
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	b10b      	cbz	r3, 800ac64 <_free_r+0x4c>
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	d9fa      	bls.n	800ac5a <_free_r+0x42>
 800ac64:	6811      	ldr	r1, [r2, #0]
 800ac66:	1850      	adds	r0, r2, r1
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d10b      	bne.n	800ac84 <_free_r+0x6c>
 800ac6c:	6820      	ldr	r0, [r4, #0]
 800ac6e:	4401      	add	r1, r0
 800ac70:	1850      	adds	r0, r2, r1
 800ac72:	4283      	cmp	r3, r0
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	d1e0      	bne.n	800ac3a <_free_r+0x22>
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4408      	add	r0, r1
 800ac7e:	6010      	str	r0, [r2, #0]
 800ac80:	6053      	str	r3, [r2, #4]
 800ac82:	e7da      	b.n	800ac3a <_free_r+0x22>
 800ac84:	d902      	bls.n	800ac8c <_free_r+0x74>
 800ac86:	230c      	movs	r3, #12
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	e7d6      	b.n	800ac3a <_free_r+0x22>
 800ac8c:	6820      	ldr	r0, [r4, #0]
 800ac8e:	1821      	adds	r1, r4, r0
 800ac90:	428b      	cmp	r3, r1
 800ac92:	bf01      	itttt	eq
 800ac94:	6819      	ldreq	r1, [r3, #0]
 800ac96:	685b      	ldreq	r3, [r3, #4]
 800ac98:	1809      	addeq	r1, r1, r0
 800ac9a:	6021      	streq	r1, [r4, #0]
 800ac9c:	6063      	str	r3, [r4, #4]
 800ac9e:	6054      	str	r4, [r2, #4]
 800aca0:	e7cb      	b.n	800ac3a <_free_r+0x22>
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20001634 	.word	0x20001634

0800aca8 <sbrk_aligned>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4e0f      	ldr	r6, [pc, #60]	@ (800ace8 <sbrk_aligned+0x40>)
 800acac:	460c      	mov	r4, r1
 800acae:	6831      	ldr	r1, [r6, #0]
 800acb0:	4605      	mov	r5, r0
 800acb2:	b911      	cbnz	r1, 800acba <sbrk_aligned+0x12>
 800acb4:	f000 fe26 	bl	800b904 <_sbrk_r>
 800acb8:	6030      	str	r0, [r6, #0]
 800acba:	4621      	mov	r1, r4
 800acbc:	4628      	mov	r0, r5
 800acbe:	f000 fe21 	bl	800b904 <_sbrk_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d103      	bne.n	800acce <sbrk_aligned+0x26>
 800acc6:	f04f 34ff 	mov.w	r4, #4294967295
 800acca:	4620      	mov	r0, r4
 800accc:	bd70      	pop	{r4, r5, r6, pc}
 800acce:	1cc4      	adds	r4, r0, #3
 800acd0:	f024 0403 	bic.w	r4, r4, #3
 800acd4:	42a0      	cmp	r0, r4
 800acd6:	d0f8      	beq.n	800acca <sbrk_aligned+0x22>
 800acd8:	1a21      	subs	r1, r4, r0
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 fe12 	bl	800b904 <_sbrk_r>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d1f2      	bne.n	800acca <sbrk_aligned+0x22>
 800ace4:	e7ef      	b.n	800acc6 <sbrk_aligned+0x1e>
 800ace6:	bf00      	nop
 800ace8:	20001630 	.word	0x20001630

0800acec <_malloc_r>:
 800acec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf0:	1ccd      	adds	r5, r1, #3
 800acf2:	f025 0503 	bic.w	r5, r5, #3
 800acf6:	3508      	adds	r5, #8
 800acf8:	2d0c      	cmp	r5, #12
 800acfa:	bf38      	it	cc
 800acfc:	250c      	movcc	r5, #12
 800acfe:	2d00      	cmp	r5, #0
 800ad00:	4606      	mov	r6, r0
 800ad02:	db01      	blt.n	800ad08 <_malloc_r+0x1c>
 800ad04:	42a9      	cmp	r1, r5
 800ad06:	d904      	bls.n	800ad12 <_malloc_r+0x26>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	6033      	str	r3, [r6, #0]
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ade8 <_malloc_r+0xfc>
 800ad16:	f000 f869 	bl	800adec <__malloc_lock>
 800ad1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad1e:	461c      	mov	r4, r3
 800ad20:	bb44      	cbnz	r4, 800ad74 <_malloc_r+0x88>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff ffbf 	bl	800aca8 <sbrk_aligned>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	d158      	bne.n	800ade2 <_malloc_r+0xf6>
 800ad30:	f8d8 4000 	ldr.w	r4, [r8]
 800ad34:	4627      	mov	r7, r4
 800ad36:	2f00      	cmp	r7, #0
 800ad38:	d143      	bne.n	800adc2 <_malloc_r+0xd6>
 800ad3a:	2c00      	cmp	r4, #0
 800ad3c:	d04b      	beq.n	800add6 <_malloc_r+0xea>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	4639      	mov	r1, r7
 800ad42:	4630      	mov	r0, r6
 800ad44:	eb04 0903 	add.w	r9, r4, r3
 800ad48:	f000 fddc 	bl	800b904 <_sbrk_r>
 800ad4c:	4581      	cmp	r9, r0
 800ad4e:	d142      	bne.n	800add6 <_malloc_r+0xea>
 800ad50:	6821      	ldr	r1, [r4, #0]
 800ad52:	4630      	mov	r0, r6
 800ad54:	1a6d      	subs	r5, r5, r1
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7ff ffa6 	bl	800aca8 <sbrk_aligned>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d03a      	beq.n	800add6 <_malloc_r+0xea>
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	442b      	add	r3, r5
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	f8d8 3000 	ldr.w	r3, [r8]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	bb62      	cbnz	r2, 800adc8 <_malloc_r+0xdc>
 800ad6e:	f8c8 7000 	str.w	r7, [r8]
 800ad72:	e00f      	b.n	800ad94 <_malloc_r+0xa8>
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	1b52      	subs	r2, r2, r5
 800ad78:	d420      	bmi.n	800adbc <_malloc_r+0xd0>
 800ad7a:	2a0b      	cmp	r2, #11
 800ad7c:	d917      	bls.n	800adae <_malloc_r+0xc2>
 800ad7e:	1961      	adds	r1, r4, r5
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	6025      	str	r5, [r4, #0]
 800ad84:	bf18      	it	ne
 800ad86:	6059      	strne	r1, [r3, #4]
 800ad88:	6863      	ldr	r3, [r4, #4]
 800ad8a:	bf08      	it	eq
 800ad8c:	f8c8 1000 	streq.w	r1, [r8]
 800ad90:	5162      	str	r2, [r4, r5]
 800ad92:	604b      	str	r3, [r1, #4]
 800ad94:	4630      	mov	r0, r6
 800ad96:	f000 f82f 	bl	800adf8 <__malloc_unlock>
 800ad9a:	f104 000b 	add.w	r0, r4, #11
 800ad9e:	1d23      	adds	r3, r4, #4
 800ada0:	f020 0007 	bic.w	r0, r0, #7
 800ada4:	1ac2      	subs	r2, r0, r3
 800ada6:	bf1c      	itt	ne
 800ada8:	1a1b      	subne	r3, r3, r0
 800adaa:	50a3      	strne	r3, [r4, r2]
 800adac:	e7af      	b.n	800ad0e <_malloc_r+0x22>
 800adae:	6862      	ldr	r2, [r4, #4]
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	bf0c      	ite	eq
 800adb4:	f8c8 2000 	streq.w	r2, [r8]
 800adb8:	605a      	strne	r2, [r3, #4]
 800adba:	e7eb      	b.n	800ad94 <_malloc_r+0xa8>
 800adbc:	4623      	mov	r3, r4
 800adbe:	6864      	ldr	r4, [r4, #4]
 800adc0:	e7ae      	b.n	800ad20 <_malloc_r+0x34>
 800adc2:	463c      	mov	r4, r7
 800adc4:	687f      	ldr	r7, [r7, #4]
 800adc6:	e7b6      	b.n	800ad36 <_malloc_r+0x4a>
 800adc8:	461a      	mov	r2, r3
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	42a3      	cmp	r3, r4
 800adce:	d1fb      	bne.n	800adc8 <_malloc_r+0xdc>
 800add0:	2300      	movs	r3, #0
 800add2:	6053      	str	r3, [r2, #4]
 800add4:	e7de      	b.n	800ad94 <_malloc_r+0xa8>
 800add6:	230c      	movs	r3, #12
 800add8:	4630      	mov	r0, r6
 800adda:	6033      	str	r3, [r6, #0]
 800addc:	f000 f80c 	bl	800adf8 <__malloc_unlock>
 800ade0:	e794      	b.n	800ad0c <_malloc_r+0x20>
 800ade2:	6005      	str	r5, [r0, #0]
 800ade4:	e7d6      	b.n	800ad94 <_malloc_r+0xa8>
 800ade6:	bf00      	nop
 800ade8:	20001634 	.word	0x20001634

0800adec <__malloc_lock>:
 800adec:	4801      	ldr	r0, [pc, #4]	@ (800adf4 <__malloc_lock+0x8>)
 800adee:	f7ff bf10 	b.w	800ac12 <__retarget_lock_acquire_recursive>
 800adf2:	bf00      	nop
 800adf4:	2000162c 	.word	0x2000162c

0800adf8 <__malloc_unlock>:
 800adf8:	4801      	ldr	r0, [pc, #4]	@ (800ae00 <__malloc_unlock+0x8>)
 800adfa:	f7ff bf0b 	b.w	800ac14 <__retarget_lock_release_recursive>
 800adfe:	bf00      	nop
 800ae00:	2000162c 	.word	0x2000162c

0800ae04 <__ssputs_r>:
 800ae04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	461f      	mov	r7, r3
 800ae0a:	688e      	ldr	r6, [r1, #8]
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	42be      	cmp	r6, r7
 800ae10:	460c      	mov	r4, r1
 800ae12:	4690      	mov	r8, r2
 800ae14:	680b      	ldr	r3, [r1, #0]
 800ae16:	d82d      	bhi.n	800ae74 <__ssputs_r+0x70>
 800ae18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae20:	d026      	beq.n	800ae70 <__ssputs_r+0x6c>
 800ae22:	6965      	ldr	r5, [r4, #20]
 800ae24:	6909      	ldr	r1, [r1, #16]
 800ae26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae2a:	eba3 0901 	sub.w	r9, r3, r1
 800ae2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae32:	1c7b      	adds	r3, r7, #1
 800ae34:	444b      	add	r3, r9
 800ae36:	106d      	asrs	r5, r5, #1
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	bf38      	it	cc
 800ae3c:	461d      	movcc	r5, r3
 800ae3e:	0553      	lsls	r3, r2, #21
 800ae40:	d527      	bpl.n	800ae92 <__ssputs_r+0x8e>
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7ff ff52 	bl	800acec <_malloc_r>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	b360      	cbz	r0, 800aea6 <__ssputs_r+0xa2>
 800ae4c:	464a      	mov	r2, r9
 800ae4e:	6921      	ldr	r1, [r4, #16]
 800ae50:	f000 fd76 	bl	800b940 <memcpy>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae5e:	81a3      	strh	r3, [r4, #12]
 800ae60:	6126      	str	r6, [r4, #16]
 800ae62:	444e      	add	r6, r9
 800ae64:	6026      	str	r6, [r4, #0]
 800ae66:	463e      	mov	r6, r7
 800ae68:	6165      	str	r5, [r4, #20]
 800ae6a:	eba5 0509 	sub.w	r5, r5, r9
 800ae6e:	60a5      	str	r5, [r4, #8]
 800ae70:	42be      	cmp	r6, r7
 800ae72:	d900      	bls.n	800ae76 <__ssputs_r+0x72>
 800ae74:	463e      	mov	r6, r7
 800ae76:	4632      	mov	r2, r6
 800ae78:	4641      	mov	r1, r8
 800ae7a:	6820      	ldr	r0, [r4, #0]
 800ae7c:	f000 fd28 	bl	800b8d0 <memmove>
 800ae80:	2000      	movs	r0, #0
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	1b9b      	subs	r3, r3, r6
 800ae86:	60a3      	str	r3, [r4, #8]
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	4433      	add	r3, r6
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae92:	462a      	mov	r2, r5
 800ae94:	f000 fd62 	bl	800b95c <_realloc_r>
 800ae98:	4606      	mov	r6, r0
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d1e0      	bne.n	800ae60 <__ssputs_r+0x5c>
 800ae9e:	4650      	mov	r0, sl
 800aea0:	6921      	ldr	r1, [r4, #16]
 800aea2:	f7ff feb9 	bl	800ac18 <_free_r>
 800aea6:	230c      	movs	r3, #12
 800aea8:	f8ca 3000 	str.w	r3, [sl]
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	e7e9      	b.n	800ae8e <__ssputs_r+0x8a>
	...

0800aebc <_svfiprintf_r>:
 800aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	4698      	mov	r8, r3
 800aec2:	898b      	ldrh	r3, [r1, #12]
 800aec4:	4607      	mov	r7, r0
 800aec6:	061b      	lsls	r3, r3, #24
 800aec8:	460d      	mov	r5, r1
 800aeca:	4614      	mov	r4, r2
 800aecc:	b09d      	sub	sp, #116	@ 0x74
 800aece:	d510      	bpl.n	800aef2 <_svfiprintf_r+0x36>
 800aed0:	690b      	ldr	r3, [r1, #16]
 800aed2:	b973      	cbnz	r3, 800aef2 <_svfiprintf_r+0x36>
 800aed4:	2140      	movs	r1, #64	@ 0x40
 800aed6:	f7ff ff09 	bl	800acec <_malloc_r>
 800aeda:	6028      	str	r0, [r5, #0]
 800aedc:	6128      	str	r0, [r5, #16]
 800aede:	b930      	cbnz	r0, 800aeee <_svfiprintf_r+0x32>
 800aee0:	230c      	movs	r3, #12
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	b01d      	add	sp, #116	@ 0x74
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeee:	2340      	movs	r3, #64	@ 0x40
 800aef0:	616b      	str	r3, [r5, #20]
 800aef2:	2300      	movs	r3, #0
 800aef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef6:	2320      	movs	r3, #32
 800aef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aefc:	2330      	movs	r3, #48	@ 0x30
 800aefe:	f04f 0901 	mov.w	r9, #1
 800af02:	f8cd 800c 	str.w	r8, [sp, #12]
 800af06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b0a0 <_svfiprintf_r+0x1e4>
 800af0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af0e:	4623      	mov	r3, r4
 800af10:	469a      	mov	sl, r3
 800af12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af16:	b10a      	cbz	r2, 800af1c <_svfiprintf_r+0x60>
 800af18:	2a25      	cmp	r2, #37	@ 0x25
 800af1a:	d1f9      	bne.n	800af10 <_svfiprintf_r+0x54>
 800af1c:	ebba 0b04 	subs.w	fp, sl, r4
 800af20:	d00b      	beq.n	800af3a <_svfiprintf_r+0x7e>
 800af22:	465b      	mov	r3, fp
 800af24:	4622      	mov	r2, r4
 800af26:	4629      	mov	r1, r5
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff ff6b 	bl	800ae04 <__ssputs_r>
 800af2e:	3001      	adds	r0, #1
 800af30:	f000 80a7 	beq.w	800b082 <_svfiprintf_r+0x1c6>
 800af34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af36:	445a      	add	r2, fp
 800af38:	9209      	str	r2, [sp, #36]	@ 0x24
 800af3a:	f89a 3000 	ldrb.w	r3, [sl]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 809f 	beq.w	800b082 <_svfiprintf_r+0x1c6>
 800af44:	2300      	movs	r3, #0
 800af46:	f04f 32ff 	mov.w	r2, #4294967295
 800af4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af4e:	f10a 0a01 	add.w	sl, sl, #1
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	9307      	str	r3, [sp, #28]
 800af56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af5c:	4654      	mov	r4, sl
 800af5e:	2205      	movs	r2, #5
 800af60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af64:	484e      	ldr	r0, [pc, #312]	@ (800b0a0 <_svfiprintf_r+0x1e4>)
 800af66:	f000 fcdd 	bl	800b924 <memchr>
 800af6a:	9a04      	ldr	r2, [sp, #16]
 800af6c:	b9d8      	cbnz	r0, 800afa6 <_svfiprintf_r+0xea>
 800af6e:	06d0      	lsls	r0, r2, #27
 800af70:	bf44      	itt	mi
 800af72:	2320      	movmi	r3, #32
 800af74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af78:	0711      	lsls	r1, r2, #28
 800af7a:	bf44      	itt	mi
 800af7c:	232b      	movmi	r3, #43	@ 0x2b
 800af7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af82:	f89a 3000 	ldrb.w	r3, [sl]
 800af86:	2b2a      	cmp	r3, #42	@ 0x2a
 800af88:	d015      	beq.n	800afb6 <_svfiprintf_r+0xfa>
 800af8a:	4654      	mov	r4, sl
 800af8c:	2000      	movs	r0, #0
 800af8e:	f04f 0c0a 	mov.w	ip, #10
 800af92:	9a07      	ldr	r2, [sp, #28]
 800af94:	4621      	mov	r1, r4
 800af96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af9a:	3b30      	subs	r3, #48	@ 0x30
 800af9c:	2b09      	cmp	r3, #9
 800af9e:	d94b      	bls.n	800b038 <_svfiprintf_r+0x17c>
 800afa0:	b1b0      	cbz	r0, 800afd0 <_svfiprintf_r+0x114>
 800afa2:	9207      	str	r2, [sp, #28]
 800afa4:	e014      	b.n	800afd0 <_svfiprintf_r+0x114>
 800afa6:	eba0 0308 	sub.w	r3, r0, r8
 800afaa:	fa09 f303 	lsl.w	r3, r9, r3
 800afae:	4313      	orrs	r3, r2
 800afb0:	46a2      	mov	sl, r4
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	e7d2      	b.n	800af5c <_svfiprintf_r+0xa0>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	1d19      	adds	r1, r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	9103      	str	r1, [sp, #12]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bfbb      	ittet	lt
 800afc2:	425b      	neglt	r3, r3
 800afc4:	f042 0202 	orrlt.w	r2, r2, #2
 800afc8:	9307      	strge	r3, [sp, #28]
 800afca:	9307      	strlt	r3, [sp, #28]
 800afcc:	bfb8      	it	lt
 800afce:	9204      	strlt	r2, [sp, #16]
 800afd0:	7823      	ldrb	r3, [r4, #0]
 800afd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800afd4:	d10a      	bne.n	800afec <_svfiprintf_r+0x130>
 800afd6:	7863      	ldrb	r3, [r4, #1]
 800afd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afda:	d132      	bne.n	800b042 <_svfiprintf_r+0x186>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	3402      	adds	r4, #2
 800afe0:	1d1a      	adds	r2, r3, #4
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	9203      	str	r2, [sp, #12]
 800afe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b0a4 <_svfiprintf_r+0x1e8>
 800aff0:	2203      	movs	r2, #3
 800aff2:	4650      	mov	r0, sl
 800aff4:	7821      	ldrb	r1, [r4, #0]
 800aff6:	f000 fc95 	bl	800b924 <memchr>
 800affa:	b138      	cbz	r0, 800b00c <_svfiprintf_r+0x150>
 800affc:	2240      	movs	r2, #64	@ 0x40
 800affe:	9b04      	ldr	r3, [sp, #16]
 800b000:	eba0 000a 	sub.w	r0, r0, sl
 800b004:	4082      	lsls	r2, r0
 800b006:	4313      	orrs	r3, r2
 800b008:	3401      	adds	r4, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	2206      	movs	r2, #6
 800b012:	4825      	ldr	r0, [pc, #148]	@ (800b0a8 <_svfiprintf_r+0x1ec>)
 800b014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b018:	f000 fc84 	bl	800b924 <memchr>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d036      	beq.n	800b08e <_svfiprintf_r+0x1d2>
 800b020:	4b22      	ldr	r3, [pc, #136]	@ (800b0ac <_svfiprintf_r+0x1f0>)
 800b022:	bb1b      	cbnz	r3, 800b06c <_svfiprintf_r+0x1b0>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	3307      	adds	r3, #7
 800b028:	f023 0307 	bic.w	r3, r3, #7
 800b02c:	3308      	adds	r3, #8
 800b02e:	9303      	str	r3, [sp, #12]
 800b030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b032:	4433      	add	r3, r6
 800b034:	9309      	str	r3, [sp, #36]	@ 0x24
 800b036:	e76a      	b.n	800af0e <_svfiprintf_r+0x52>
 800b038:	460c      	mov	r4, r1
 800b03a:	2001      	movs	r0, #1
 800b03c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b040:	e7a8      	b.n	800af94 <_svfiprintf_r+0xd8>
 800b042:	2300      	movs	r3, #0
 800b044:	f04f 0c0a 	mov.w	ip, #10
 800b048:	4619      	mov	r1, r3
 800b04a:	3401      	adds	r4, #1
 800b04c:	9305      	str	r3, [sp, #20]
 800b04e:	4620      	mov	r0, r4
 800b050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b054:	3a30      	subs	r2, #48	@ 0x30
 800b056:	2a09      	cmp	r2, #9
 800b058:	d903      	bls.n	800b062 <_svfiprintf_r+0x1a6>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0c6      	beq.n	800afec <_svfiprintf_r+0x130>
 800b05e:	9105      	str	r1, [sp, #20]
 800b060:	e7c4      	b.n	800afec <_svfiprintf_r+0x130>
 800b062:	4604      	mov	r4, r0
 800b064:	2301      	movs	r3, #1
 800b066:	fb0c 2101 	mla	r1, ip, r1, r2
 800b06a:	e7f0      	b.n	800b04e <_svfiprintf_r+0x192>
 800b06c:	ab03      	add	r3, sp, #12
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	462a      	mov	r2, r5
 800b072:	4638      	mov	r0, r7
 800b074:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b0 <_svfiprintf_r+0x1f4>)
 800b076:	a904      	add	r1, sp, #16
 800b078:	f3af 8000 	nop.w
 800b07c:	1c42      	adds	r2, r0, #1
 800b07e:	4606      	mov	r6, r0
 800b080:	d1d6      	bne.n	800b030 <_svfiprintf_r+0x174>
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	065b      	lsls	r3, r3, #25
 800b086:	f53f af2d 	bmi.w	800aee4 <_svfiprintf_r+0x28>
 800b08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b08c:	e72c      	b.n	800aee8 <_svfiprintf_r+0x2c>
 800b08e:	ab03      	add	r3, sp, #12
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	462a      	mov	r2, r5
 800b094:	4638      	mov	r0, r7
 800b096:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <_svfiprintf_r+0x1f4>)
 800b098:	a904      	add	r1, sp, #16
 800b09a:	f000 f9bd 	bl	800b418 <_printf_i>
 800b09e:	e7ed      	b.n	800b07c <_svfiprintf_r+0x1c0>
 800b0a0:	0800bb66 	.word	0x0800bb66
 800b0a4:	0800bb6c 	.word	0x0800bb6c
 800b0a8:	0800bb70 	.word	0x0800bb70
 800b0ac:	00000000 	.word	0x00000000
 800b0b0:	0800ae05 	.word	0x0800ae05

0800b0b4 <__sfputc_r>:
 800b0b4:	6893      	ldr	r3, [r2, #8]
 800b0b6:	b410      	push	{r4}
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	6093      	str	r3, [r2, #8]
 800b0be:	da07      	bge.n	800b0d0 <__sfputc_r+0x1c>
 800b0c0:	6994      	ldr	r4, [r2, #24]
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	db01      	blt.n	800b0ca <__sfputc_r+0x16>
 800b0c6:	290a      	cmp	r1, #10
 800b0c8:	d102      	bne.n	800b0d0 <__sfputc_r+0x1c>
 800b0ca:	bc10      	pop	{r4}
 800b0cc:	f000 bb6c 	b.w	800b7a8 <__swbuf_r>
 800b0d0:	6813      	ldr	r3, [r2, #0]
 800b0d2:	1c58      	adds	r0, r3, #1
 800b0d4:	6010      	str	r0, [r2, #0]
 800b0d6:	7019      	strb	r1, [r3, #0]
 800b0d8:	4608      	mov	r0, r1
 800b0da:	bc10      	pop	{r4}
 800b0dc:	4770      	bx	lr

0800b0de <__sfputs_r>:
 800b0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	460f      	mov	r7, r1
 800b0e4:	4614      	mov	r4, r2
 800b0e6:	18d5      	adds	r5, r2, r3
 800b0e8:	42ac      	cmp	r4, r5
 800b0ea:	d101      	bne.n	800b0f0 <__sfputs_r+0x12>
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	e007      	b.n	800b100 <__sfputs_r+0x22>
 800b0f0:	463a      	mov	r2, r7
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f8:	f7ff ffdc 	bl	800b0b4 <__sfputc_r>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d1f3      	bne.n	800b0e8 <__sfputs_r+0xa>
 800b100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b104 <_vfiprintf_r>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	460d      	mov	r5, r1
 800b10a:	4614      	mov	r4, r2
 800b10c:	4698      	mov	r8, r3
 800b10e:	4606      	mov	r6, r0
 800b110:	b09d      	sub	sp, #116	@ 0x74
 800b112:	b118      	cbz	r0, 800b11c <_vfiprintf_r+0x18>
 800b114:	6a03      	ldr	r3, [r0, #32]
 800b116:	b90b      	cbnz	r3, 800b11c <_vfiprintf_r+0x18>
 800b118:	f7ff fc56 	bl	800a9c8 <__sinit>
 800b11c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b11e:	07d9      	lsls	r1, r3, #31
 800b120:	d405      	bmi.n	800b12e <_vfiprintf_r+0x2a>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	059a      	lsls	r2, r3, #22
 800b126:	d402      	bmi.n	800b12e <_vfiprintf_r+0x2a>
 800b128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b12a:	f7ff fd72 	bl	800ac12 <__retarget_lock_acquire_recursive>
 800b12e:	89ab      	ldrh	r3, [r5, #12]
 800b130:	071b      	lsls	r3, r3, #28
 800b132:	d501      	bpl.n	800b138 <_vfiprintf_r+0x34>
 800b134:	692b      	ldr	r3, [r5, #16]
 800b136:	b99b      	cbnz	r3, 800b160 <_vfiprintf_r+0x5c>
 800b138:	4629      	mov	r1, r5
 800b13a:	4630      	mov	r0, r6
 800b13c:	f000 fb72 	bl	800b824 <__swsetup_r>
 800b140:	b170      	cbz	r0, 800b160 <_vfiprintf_r+0x5c>
 800b142:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b144:	07dc      	lsls	r4, r3, #31
 800b146:	d504      	bpl.n	800b152 <_vfiprintf_r+0x4e>
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
 800b14c:	b01d      	add	sp, #116	@ 0x74
 800b14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b152:	89ab      	ldrh	r3, [r5, #12]
 800b154:	0598      	lsls	r0, r3, #22
 800b156:	d4f7      	bmi.n	800b148 <_vfiprintf_r+0x44>
 800b158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b15a:	f7ff fd5b 	bl	800ac14 <__retarget_lock_release_recursive>
 800b15e:	e7f3      	b.n	800b148 <_vfiprintf_r+0x44>
 800b160:	2300      	movs	r3, #0
 800b162:	9309      	str	r3, [sp, #36]	@ 0x24
 800b164:	2320      	movs	r3, #32
 800b166:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b16a:	2330      	movs	r3, #48	@ 0x30
 800b16c:	f04f 0901 	mov.w	r9, #1
 800b170:	f8cd 800c 	str.w	r8, [sp, #12]
 800b174:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b320 <_vfiprintf_r+0x21c>
 800b178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b17c:	4623      	mov	r3, r4
 800b17e:	469a      	mov	sl, r3
 800b180:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b184:	b10a      	cbz	r2, 800b18a <_vfiprintf_r+0x86>
 800b186:	2a25      	cmp	r2, #37	@ 0x25
 800b188:	d1f9      	bne.n	800b17e <_vfiprintf_r+0x7a>
 800b18a:	ebba 0b04 	subs.w	fp, sl, r4
 800b18e:	d00b      	beq.n	800b1a8 <_vfiprintf_r+0xa4>
 800b190:	465b      	mov	r3, fp
 800b192:	4622      	mov	r2, r4
 800b194:	4629      	mov	r1, r5
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff ffa1 	bl	800b0de <__sfputs_r>
 800b19c:	3001      	adds	r0, #1
 800b19e:	f000 80a7 	beq.w	800b2f0 <_vfiprintf_r+0x1ec>
 800b1a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a4:	445a      	add	r2, fp
 800b1a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 809f 	beq.w	800b2f0 <_vfiprintf_r+0x1ec>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1bc:	f10a 0a01 	add.w	sl, sl, #1
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	9307      	str	r3, [sp, #28]
 800b1c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1ca:	4654      	mov	r4, sl
 800b1cc:	2205      	movs	r2, #5
 800b1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d2:	4853      	ldr	r0, [pc, #332]	@ (800b320 <_vfiprintf_r+0x21c>)
 800b1d4:	f000 fba6 	bl	800b924 <memchr>
 800b1d8:	9a04      	ldr	r2, [sp, #16]
 800b1da:	b9d8      	cbnz	r0, 800b214 <_vfiprintf_r+0x110>
 800b1dc:	06d1      	lsls	r1, r2, #27
 800b1de:	bf44      	itt	mi
 800b1e0:	2320      	movmi	r3, #32
 800b1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1e6:	0713      	lsls	r3, r2, #28
 800b1e8:	bf44      	itt	mi
 800b1ea:	232b      	movmi	r3, #43	@ 0x2b
 800b1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1f6:	d015      	beq.n	800b224 <_vfiprintf_r+0x120>
 800b1f8:	4654      	mov	r4, sl
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	f04f 0c0a 	mov.w	ip, #10
 800b200:	9a07      	ldr	r2, [sp, #28]
 800b202:	4621      	mov	r1, r4
 800b204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b208:	3b30      	subs	r3, #48	@ 0x30
 800b20a:	2b09      	cmp	r3, #9
 800b20c:	d94b      	bls.n	800b2a6 <_vfiprintf_r+0x1a2>
 800b20e:	b1b0      	cbz	r0, 800b23e <_vfiprintf_r+0x13a>
 800b210:	9207      	str	r2, [sp, #28]
 800b212:	e014      	b.n	800b23e <_vfiprintf_r+0x13a>
 800b214:	eba0 0308 	sub.w	r3, r0, r8
 800b218:	fa09 f303 	lsl.w	r3, r9, r3
 800b21c:	4313      	orrs	r3, r2
 800b21e:	46a2      	mov	sl, r4
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	e7d2      	b.n	800b1ca <_vfiprintf_r+0xc6>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	1d19      	adds	r1, r3, #4
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	9103      	str	r1, [sp, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bfbb      	ittet	lt
 800b230:	425b      	neglt	r3, r3
 800b232:	f042 0202 	orrlt.w	r2, r2, #2
 800b236:	9307      	strge	r3, [sp, #28]
 800b238:	9307      	strlt	r3, [sp, #28]
 800b23a:	bfb8      	it	lt
 800b23c:	9204      	strlt	r2, [sp, #16]
 800b23e:	7823      	ldrb	r3, [r4, #0]
 800b240:	2b2e      	cmp	r3, #46	@ 0x2e
 800b242:	d10a      	bne.n	800b25a <_vfiprintf_r+0x156>
 800b244:	7863      	ldrb	r3, [r4, #1]
 800b246:	2b2a      	cmp	r3, #42	@ 0x2a
 800b248:	d132      	bne.n	800b2b0 <_vfiprintf_r+0x1ac>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	3402      	adds	r4, #2
 800b24e:	1d1a      	adds	r2, r3, #4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	9203      	str	r2, [sp, #12]
 800b254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b324 <_vfiprintf_r+0x220>
 800b25e:	2203      	movs	r2, #3
 800b260:	4650      	mov	r0, sl
 800b262:	7821      	ldrb	r1, [r4, #0]
 800b264:	f000 fb5e 	bl	800b924 <memchr>
 800b268:	b138      	cbz	r0, 800b27a <_vfiprintf_r+0x176>
 800b26a:	2240      	movs	r2, #64	@ 0x40
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	eba0 000a 	sub.w	r0, r0, sl
 800b272:	4082      	lsls	r2, r0
 800b274:	4313      	orrs	r3, r2
 800b276:	3401      	adds	r4, #1
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27e:	2206      	movs	r2, #6
 800b280:	4829      	ldr	r0, [pc, #164]	@ (800b328 <_vfiprintf_r+0x224>)
 800b282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b286:	f000 fb4d 	bl	800b924 <memchr>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d03f      	beq.n	800b30e <_vfiprintf_r+0x20a>
 800b28e:	4b27      	ldr	r3, [pc, #156]	@ (800b32c <_vfiprintf_r+0x228>)
 800b290:	bb1b      	cbnz	r3, 800b2da <_vfiprintf_r+0x1d6>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	3307      	adds	r3, #7
 800b296:	f023 0307 	bic.w	r3, r3, #7
 800b29a:	3308      	adds	r3, #8
 800b29c:	9303      	str	r3, [sp, #12]
 800b29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a0:	443b      	add	r3, r7
 800b2a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2a4:	e76a      	b.n	800b17c <_vfiprintf_r+0x78>
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ae:	e7a8      	b.n	800b202 <_vfiprintf_r+0xfe>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f04f 0c0a 	mov.w	ip, #10
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	3401      	adds	r4, #1
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2c2:	3a30      	subs	r2, #48	@ 0x30
 800b2c4:	2a09      	cmp	r2, #9
 800b2c6:	d903      	bls.n	800b2d0 <_vfiprintf_r+0x1cc>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0c6      	beq.n	800b25a <_vfiprintf_r+0x156>
 800b2cc:	9105      	str	r1, [sp, #20]
 800b2ce:	e7c4      	b.n	800b25a <_vfiprintf_r+0x156>
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2d8:	e7f0      	b.n	800b2bc <_vfiprintf_r+0x1b8>
 800b2da:	ab03      	add	r3, sp, #12
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	462a      	mov	r2, r5
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4b13      	ldr	r3, [pc, #76]	@ (800b330 <_vfiprintf_r+0x22c>)
 800b2e4:	a904      	add	r1, sp, #16
 800b2e6:	f3af 8000 	nop.w
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	1c78      	adds	r0, r7, #1
 800b2ee:	d1d6      	bne.n	800b29e <_vfiprintf_r+0x19a>
 800b2f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2f2:	07d9      	lsls	r1, r3, #31
 800b2f4:	d405      	bmi.n	800b302 <_vfiprintf_r+0x1fe>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	059a      	lsls	r2, r3, #22
 800b2fa:	d402      	bmi.n	800b302 <_vfiprintf_r+0x1fe>
 800b2fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2fe:	f7ff fc89 	bl	800ac14 <__retarget_lock_release_recursive>
 800b302:	89ab      	ldrh	r3, [r5, #12]
 800b304:	065b      	lsls	r3, r3, #25
 800b306:	f53f af1f 	bmi.w	800b148 <_vfiprintf_r+0x44>
 800b30a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b30c:	e71e      	b.n	800b14c <_vfiprintf_r+0x48>
 800b30e:	ab03      	add	r3, sp, #12
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	462a      	mov	r2, r5
 800b314:	4630      	mov	r0, r6
 800b316:	4b06      	ldr	r3, [pc, #24]	@ (800b330 <_vfiprintf_r+0x22c>)
 800b318:	a904      	add	r1, sp, #16
 800b31a:	f000 f87d 	bl	800b418 <_printf_i>
 800b31e:	e7e4      	b.n	800b2ea <_vfiprintf_r+0x1e6>
 800b320:	0800bb66 	.word	0x0800bb66
 800b324:	0800bb6c 	.word	0x0800bb6c
 800b328:	0800bb70 	.word	0x0800bb70
 800b32c:	00000000 	.word	0x00000000
 800b330:	0800b0df 	.word	0x0800b0df

0800b334 <_printf_common>:
 800b334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	4616      	mov	r6, r2
 800b33a:	4698      	mov	r8, r3
 800b33c:	688a      	ldr	r2, [r1, #8]
 800b33e:	690b      	ldr	r3, [r1, #16]
 800b340:	4607      	mov	r7, r0
 800b342:	4293      	cmp	r3, r2
 800b344:	bfb8      	it	lt
 800b346:	4613      	movlt	r3, r2
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b34e:	460c      	mov	r4, r1
 800b350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b354:	b10a      	cbz	r2, 800b35a <_printf_common+0x26>
 800b356:	3301      	adds	r3, #1
 800b358:	6033      	str	r3, [r6, #0]
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	0699      	lsls	r1, r3, #26
 800b35e:	bf42      	ittt	mi
 800b360:	6833      	ldrmi	r3, [r6, #0]
 800b362:	3302      	addmi	r3, #2
 800b364:	6033      	strmi	r3, [r6, #0]
 800b366:	6825      	ldr	r5, [r4, #0]
 800b368:	f015 0506 	ands.w	r5, r5, #6
 800b36c:	d106      	bne.n	800b37c <_printf_common+0x48>
 800b36e:	f104 0a19 	add.w	sl, r4, #25
 800b372:	68e3      	ldr	r3, [r4, #12]
 800b374:	6832      	ldr	r2, [r6, #0]
 800b376:	1a9b      	subs	r3, r3, r2
 800b378:	42ab      	cmp	r3, r5
 800b37a:	dc2b      	bgt.n	800b3d4 <_printf_common+0xa0>
 800b37c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b380:	6822      	ldr	r2, [r4, #0]
 800b382:	3b00      	subs	r3, #0
 800b384:	bf18      	it	ne
 800b386:	2301      	movne	r3, #1
 800b388:	0692      	lsls	r2, r2, #26
 800b38a:	d430      	bmi.n	800b3ee <_printf_common+0xba>
 800b38c:	4641      	mov	r1, r8
 800b38e:	4638      	mov	r0, r7
 800b390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b394:	47c8      	blx	r9
 800b396:	3001      	adds	r0, #1
 800b398:	d023      	beq.n	800b3e2 <_printf_common+0xae>
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	6922      	ldr	r2, [r4, #16]
 800b39e:	f003 0306 	and.w	r3, r3, #6
 800b3a2:	2b04      	cmp	r3, #4
 800b3a4:	bf14      	ite	ne
 800b3a6:	2500      	movne	r5, #0
 800b3a8:	6833      	ldreq	r3, [r6, #0]
 800b3aa:	f04f 0600 	mov.w	r6, #0
 800b3ae:	bf08      	it	eq
 800b3b0:	68e5      	ldreq	r5, [r4, #12]
 800b3b2:	f104 041a 	add.w	r4, r4, #26
 800b3b6:	bf08      	it	eq
 800b3b8:	1aed      	subeq	r5, r5, r3
 800b3ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b3be:	bf08      	it	eq
 800b3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	bfc4      	itt	gt
 800b3c8:	1a9b      	subgt	r3, r3, r2
 800b3ca:	18ed      	addgt	r5, r5, r3
 800b3cc:	42b5      	cmp	r5, r6
 800b3ce:	d11a      	bne.n	800b406 <_printf_common+0xd2>
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e008      	b.n	800b3e6 <_printf_common+0xb2>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4652      	mov	r2, sl
 800b3d8:	4641      	mov	r1, r8
 800b3da:	4638      	mov	r0, r7
 800b3dc:	47c8      	blx	r9
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d103      	bne.n	800b3ea <_printf_common+0xb6>
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ea:	3501      	adds	r5, #1
 800b3ec:	e7c1      	b.n	800b372 <_printf_common+0x3e>
 800b3ee:	2030      	movs	r0, #48	@ 0x30
 800b3f0:	18e1      	adds	r1, r4, r3
 800b3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3fc:	4422      	add	r2, r4
 800b3fe:	3302      	adds	r3, #2
 800b400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b404:	e7c2      	b.n	800b38c <_printf_common+0x58>
 800b406:	2301      	movs	r3, #1
 800b408:	4622      	mov	r2, r4
 800b40a:	4641      	mov	r1, r8
 800b40c:	4638      	mov	r0, r7
 800b40e:	47c8      	blx	r9
 800b410:	3001      	adds	r0, #1
 800b412:	d0e6      	beq.n	800b3e2 <_printf_common+0xae>
 800b414:	3601      	adds	r6, #1
 800b416:	e7d9      	b.n	800b3cc <_printf_common+0x98>

0800b418 <_printf_i>:
 800b418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	7e0f      	ldrb	r7, [r1, #24]
 800b41e:	4691      	mov	r9, r2
 800b420:	2f78      	cmp	r7, #120	@ 0x78
 800b422:	4680      	mov	r8, r0
 800b424:	460c      	mov	r4, r1
 800b426:	469a      	mov	sl, r3
 800b428:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b42e:	d807      	bhi.n	800b440 <_printf_i+0x28>
 800b430:	2f62      	cmp	r7, #98	@ 0x62
 800b432:	d80a      	bhi.n	800b44a <_printf_i+0x32>
 800b434:	2f00      	cmp	r7, #0
 800b436:	f000 80d3 	beq.w	800b5e0 <_printf_i+0x1c8>
 800b43a:	2f58      	cmp	r7, #88	@ 0x58
 800b43c:	f000 80ba 	beq.w	800b5b4 <_printf_i+0x19c>
 800b440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b448:	e03a      	b.n	800b4c0 <_printf_i+0xa8>
 800b44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b44e:	2b15      	cmp	r3, #21
 800b450:	d8f6      	bhi.n	800b440 <_printf_i+0x28>
 800b452:	a101      	add	r1, pc, #4	@ (adr r1, 800b458 <_printf_i+0x40>)
 800b454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b458:	0800b4b1 	.word	0x0800b4b1
 800b45c:	0800b4c5 	.word	0x0800b4c5
 800b460:	0800b441 	.word	0x0800b441
 800b464:	0800b441 	.word	0x0800b441
 800b468:	0800b441 	.word	0x0800b441
 800b46c:	0800b441 	.word	0x0800b441
 800b470:	0800b4c5 	.word	0x0800b4c5
 800b474:	0800b441 	.word	0x0800b441
 800b478:	0800b441 	.word	0x0800b441
 800b47c:	0800b441 	.word	0x0800b441
 800b480:	0800b441 	.word	0x0800b441
 800b484:	0800b5c7 	.word	0x0800b5c7
 800b488:	0800b4ef 	.word	0x0800b4ef
 800b48c:	0800b581 	.word	0x0800b581
 800b490:	0800b441 	.word	0x0800b441
 800b494:	0800b441 	.word	0x0800b441
 800b498:	0800b5e9 	.word	0x0800b5e9
 800b49c:	0800b441 	.word	0x0800b441
 800b4a0:	0800b4ef 	.word	0x0800b4ef
 800b4a4:	0800b441 	.word	0x0800b441
 800b4a8:	0800b441 	.word	0x0800b441
 800b4ac:	0800b589 	.word	0x0800b589
 800b4b0:	6833      	ldr	r3, [r6, #0]
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6032      	str	r2, [r6, #0]
 800b4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e09e      	b.n	800b602 <_printf_i+0x1ea>
 800b4c4:	6833      	ldr	r3, [r6, #0]
 800b4c6:	6820      	ldr	r0, [r4, #0]
 800b4c8:	1d19      	adds	r1, r3, #4
 800b4ca:	6031      	str	r1, [r6, #0]
 800b4cc:	0606      	lsls	r6, r0, #24
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_i+0xbc>
 800b4d0:	681d      	ldr	r5, [r3, #0]
 800b4d2:	e003      	b.n	800b4dc <_printf_i+0xc4>
 800b4d4:	0645      	lsls	r5, r0, #25
 800b4d6:	d5fb      	bpl.n	800b4d0 <_printf_i+0xb8>
 800b4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4dc:	2d00      	cmp	r5, #0
 800b4de:	da03      	bge.n	800b4e8 <_printf_i+0xd0>
 800b4e0:	232d      	movs	r3, #45	@ 0x2d
 800b4e2:	426d      	negs	r5, r5
 800b4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e8:	230a      	movs	r3, #10
 800b4ea:	4859      	ldr	r0, [pc, #356]	@ (800b650 <_printf_i+0x238>)
 800b4ec:	e011      	b.n	800b512 <_printf_i+0xfa>
 800b4ee:	6821      	ldr	r1, [r4, #0]
 800b4f0:	6833      	ldr	r3, [r6, #0]
 800b4f2:	0608      	lsls	r0, r1, #24
 800b4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4f8:	d402      	bmi.n	800b500 <_printf_i+0xe8>
 800b4fa:	0649      	lsls	r1, r1, #25
 800b4fc:	bf48      	it	mi
 800b4fe:	b2ad      	uxthmi	r5, r5
 800b500:	2f6f      	cmp	r7, #111	@ 0x6f
 800b502:	6033      	str	r3, [r6, #0]
 800b504:	bf14      	ite	ne
 800b506:	230a      	movne	r3, #10
 800b508:	2308      	moveq	r3, #8
 800b50a:	4851      	ldr	r0, [pc, #324]	@ (800b650 <_printf_i+0x238>)
 800b50c:	2100      	movs	r1, #0
 800b50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b512:	6866      	ldr	r6, [r4, #4]
 800b514:	2e00      	cmp	r6, #0
 800b516:	bfa8      	it	ge
 800b518:	6821      	ldrge	r1, [r4, #0]
 800b51a:	60a6      	str	r6, [r4, #8]
 800b51c:	bfa4      	itt	ge
 800b51e:	f021 0104 	bicge.w	r1, r1, #4
 800b522:	6021      	strge	r1, [r4, #0]
 800b524:	b90d      	cbnz	r5, 800b52a <_printf_i+0x112>
 800b526:	2e00      	cmp	r6, #0
 800b528:	d04b      	beq.n	800b5c2 <_printf_i+0x1aa>
 800b52a:	4616      	mov	r6, r2
 800b52c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b530:	fb03 5711 	mls	r7, r3, r1, r5
 800b534:	5dc7      	ldrb	r7, [r0, r7]
 800b536:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b53a:	462f      	mov	r7, r5
 800b53c:	42bb      	cmp	r3, r7
 800b53e:	460d      	mov	r5, r1
 800b540:	d9f4      	bls.n	800b52c <_printf_i+0x114>
 800b542:	2b08      	cmp	r3, #8
 800b544:	d10b      	bne.n	800b55e <_printf_i+0x146>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	07df      	lsls	r7, r3, #31
 800b54a:	d508      	bpl.n	800b55e <_printf_i+0x146>
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	6861      	ldr	r1, [r4, #4]
 800b550:	4299      	cmp	r1, r3
 800b552:	bfde      	ittt	le
 800b554:	2330      	movle	r3, #48	@ 0x30
 800b556:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b55a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b55e:	1b92      	subs	r2, r2, r6
 800b560:	6122      	str	r2, [r4, #16]
 800b562:	464b      	mov	r3, r9
 800b564:	4621      	mov	r1, r4
 800b566:	4640      	mov	r0, r8
 800b568:	f8cd a000 	str.w	sl, [sp]
 800b56c:	aa03      	add	r2, sp, #12
 800b56e:	f7ff fee1 	bl	800b334 <_printf_common>
 800b572:	3001      	adds	r0, #1
 800b574:	d14a      	bne.n	800b60c <_printf_i+0x1f4>
 800b576:	f04f 30ff 	mov.w	r0, #4294967295
 800b57a:	b004      	add	sp, #16
 800b57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	f043 0320 	orr.w	r3, r3, #32
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	2778      	movs	r7, #120	@ 0x78
 800b58a:	4832      	ldr	r0, [pc, #200]	@ (800b654 <_printf_i+0x23c>)
 800b58c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	6831      	ldr	r1, [r6, #0]
 800b594:	061f      	lsls	r7, r3, #24
 800b596:	f851 5b04 	ldr.w	r5, [r1], #4
 800b59a:	d402      	bmi.n	800b5a2 <_printf_i+0x18a>
 800b59c:	065f      	lsls	r7, r3, #25
 800b59e:	bf48      	it	mi
 800b5a0:	b2ad      	uxthmi	r5, r5
 800b5a2:	6031      	str	r1, [r6, #0]
 800b5a4:	07d9      	lsls	r1, r3, #31
 800b5a6:	bf44      	itt	mi
 800b5a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ac:	6023      	strmi	r3, [r4, #0]
 800b5ae:	b11d      	cbz	r5, 800b5b8 <_printf_i+0x1a0>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	e7ab      	b.n	800b50c <_printf_i+0xf4>
 800b5b4:	4826      	ldr	r0, [pc, #152]	@ (800b650 <_printf_i+0x238>)
 800b5b6:	e7e9      	b.n	800b58c <_printf_i+0x174>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	f023 0320 	bic.w	r3, r3, #32
 800b5be:	6023      	str	r3, [r4, #0]
 800b5c0:	e7f6      	b.n	800b5b0 <_printf_i+0x198>
 800b5c2:	4616      	mov	r6, r2
 800b5c4:	e7bd      	b.n	800b542 <_printf_i+0x12a>
 800b5c6:	6833      	ldr	r3, [r6, #0]
 800b5c8:	6825      	ldr	r5, [r4, #0]
 800b5ca:	1d18      	adds	r0, r3, #4
 800b5cc:	6961      	ldr	r1, [r4, #20]
 800b5ce:	6030      	str	r0, [r6, #0]
 800b5d0:	062e      	lsls	r6, r5, #24
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	d501      	bpl.n	800b5da <_printf_i+0x1c2>
 800b5d6:	6019      	str	r1, [r3, #0]
 800b5d8:	e002      	b.n	800b5e0 <_printf_i+0x1c8>
 800b5da:	0668      	lsls	r0, r5, #25
 800b5dc:	d5fb      	bpl.n	800b5d6 <_printf_i+0x1be>
 800b5de:	8019      	strh	r1, [r3, #0]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4616      	mov	r6, r2
 800b5e4:	6123      	str	r3, [r4, #16]
 800b5e6:	e7bc      	b.n	800b562 <_printf_i+0x14a>
 800b5e8:	6833      	ldr	r3, [r6, #0]
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	1d1a      	adds	r2, r3, #4
 800b5ee:	6032      	str	r2, [r6, #0]
 800b5f0:	681e      	ldr	r6, [r3, #0]
 800b5f2:	6862      	ldr	r2, [r4, #4]
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f000 f995 	bl	800b924 <memchr>
 800b5fa:	b108      	cbz	r0, 800b600 <_printf_i+0x1e8>
 800b5fc:	1b80      	subs	r0, r0, r6
 800b5fe:	6060      	str	r0, [r4, #4]
 800b600:	6863      	ldr	r3, [r4, #4]
 800b602:	6123      	str	r3, [r4, #16]
 800b604:	2300      	movs	r3, #0
 800b606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b60a:	e7aa      	b.n	800b562 <_printf_i+0x14a>
 800b60c:	4632      	mov	r2, r6
 800b60e:	4649      	mov	r1, r9
 800b610:	4640      	mov	r0, r8
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	47d0      	blx	sl
 800b616:	3001      	adds	r0, #1
 800b618:	d0ad      	beq.n	800b576 <_printf_i+0x15e>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	079b      	lsls	r3, r3, #30
 800b61e:	d413      	bmi.n	800b648 <_printf_i+0x230>
 800b620:	68e0      	ldr	r0, [r4, #12]
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	4298      	cmp	r0, r3
 800b626:	bfb8      	it	lt
 800b628:	4618      	movlt	r0, r3
 800b62a:	e7a6      	b.n	800b57a <_printf_i+0x162>
 800b62c:	2301      	movs	r3, #1
 800b62e:	4632      	mov	r2, r6
 800b630:	4649      	mov	r1, r9
 800b632:	4640      	mov	r0, r8
 800b634:	47d0      	blx	sl
 800b636:	3001      	adds	r0, #1
 800b638:	d09d      	beq.n	800b576 <_printf_i+0x15e>
 800b63a:	3501      	adds	r5, #1
 800b63c:	68e3      	ldr	r3, [r4, #12]
 800b63e:	9903      	ldr	r1, [sp, #12]
 800b640:	1a5b      	subs	r3, r3, r1
 800b642:	42ab      	cmp	r3, r5
 800b644:	dcf2      	bgt.n	800b62c <_printf_i+0x214>
 800b646:	e7eb      	b.n	800b620 <_printf_i+0x208>
 800b648:	2500      	movs	r5, #0
 800b64a:	f104 0619 	add.w	r6, r4, #25
 800b64e:	e7f5      	b.n	800b63c <_printf_i+0x224>
 800b650:	0800bb77 	.word	0x0800bb77
 800b654:	0800bb88 	.word	0x0800bb88

0800b658 <__sflush_r>:
 800b658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	0716      	lsls	r6, r2, #28
 800b660:	4605      	mov	r5, r0
 800b662:	460c      	mov	r4, r1
 800b664:	d454      	bmi.n	800b710 <__sflush_r+0xb8>
 800b666:	684b      	ldr	r3, [r1, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dc02      	bgt.n	800b672 <__sflush_r+0x1a>
 800b66c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	dd48      	ble.n	800b704 <__sflush_r+0xac>
 800b672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b674:	2e00      	cmp	r6, #0
 800b676:	d045      	beq.n	800b704 <__sflush_r+0xac>
 800b678:	2300      	movs	r3, #0
 800b67a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b67e:	682f      	ldr	r7, [r5, #0]
 800b680:	6a21      	ldr	r1, [r4, #32]
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	d030      	beq.n	800b6e8 <__sflush_r+0x90>
 800b686:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	0759      	lsls	r1, r3, #29
 800b68c:	d505      	bpl.n	800b69a <__sflush_r+0x42>
 800b68e:	6863      	ldr	r3, [r4, #4]
 800b690:	1ad2      	subs	r2, r2, r3
 800b692:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b694:	b10b      	cbz	r3, 800b69a <__sflush_r+0x42>
 800b696:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b698:	1ad2      	subs	r2, r2, r3
 800b69a:	2300      	movs	r3, #0
 800b69c:	4628      	mov	r0, r5
 800b69e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6a0:	6a21      	ldr	r1, [r4, #32]
 800b6a2:	47b0      	blx	r6
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	d106      	bne.n	800b6b8 <__sflush_r+0x60>
 800b6aa:	6829      	ldr	r1, [r5, #0]
 800b6ac:	291d      	cmp	r1, #29
 800b6ae:	d82b      	bhi.n	800b708 <__sflush_r+0xb0>
 800b6b0:	4a28      	ldr	r2, [pc, #160]	@ (800b754 <__sflush_r+0xfc>)
 800b6b2:	410a      	asrs	r2, r1
 800b6b4:	07d6      	lsls	r6, r2, #31
 800b6b6:	d427      	bmi.n	800b708 <__sflush_r+0xb0>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	6062      	str	r2, [r4, #4]
 800b6bc:	6922      	ldr	r2, [r4, #16]
 800b6be:	04d9      	lsls	r1, r3, #19
 800b6c0:	6022      	str	r2, [r4, #0]
 800b6c2:	d504      	bpl.n	800b6ce <__sflush_r+0x76>
 800b6c4:	1c42      	adds	r2, r0, #1
 800b6c6:	d101      	bne.n	800b6cc <__sflush_r+0x74>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b903      	cbnz	r3, 800b6ce <__sflush_r+0x76>
 800b6cc:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6d0:	602f      	str	r7, [r5, #0]
 800b6d2:	b1b9      	cbz	r1, 800b704 <__sflush_r+0xac>
 800b6d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6d8:	4299      	cmp	r1, r3
 800b6da:	d002      	beq.n	800b6e2 <__sflush_r+0x8a>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f7ff fa9b 	bl	800ac18 <_free_r>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6e6:	e00d      	b.n	800b704 <__sflush_r+0xac>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	47b0      	blx	r6
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	1c50      	adds	r0, r2, #1
 800b6f2:	d1c9      	bne.n	800b688 <__sflush_r+0x30>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0c6      	beq.n	800b688 <__sflush_r+0x30>
 800b6fa:	2b1d      	cmp	r3, #29
 800b6fc:	d001      	beq.n	800b702 <__sflush_r+0xaa>
 800b6fe:	2b16      	cmp	r3, #22
 800b700:	d11d      	bne.n	800b73e <__sflush_r+0xe6>
 800b702:	602f      	str	r7, [r5, #0]
 800b704:	2000      	movs	r0, #0
 800b706:	e021      	b.n	800b74c <__sflush_r+0xf4>
 800b708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70c:	b21b      	sxth	r3, r3
 800b70e:	e01a      	b.n	800b746 <__sflush_r+0xee>
 800b710:	690f      	ldr	r7, [r1, #16]
 800b712:	2f00      	cmp	r7, #0
 800b714:	d0f6      	beq.n	800b704 <__sflush_r+0xac>
 800b716:	0793      	lsls	r3, r2, #30
 800b718:	bf18      	it	ne
 800b71a:	2300      	movne	r3, #0
 800b71c:	680e      	ldr	r6, [r1, #0]
 800b71e:	bf08      	it	eq
 800b720:	694b      	ldreq	r3, [r1, #20]
 800b722:	1bf6      	subs	r6, r6, r7
 800b724:	600f      	str	r7, [r1, #0]
 800b726:	608b      	str	r3, [r1, #8]
 800b728:	2e00      	cmp	r6, #0
 800b72a:	ddeb      	ble.n	800b704 <__sflush_r+0xac>
 800b72c:	4633      	mov	r3, r6
 800b72e:	463a      	mov	r2, r7
 800b730:	4628      	mov	r0, r5
 800b732:	6a21      	ldr	r1, [r4, #32]
 800b734:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b738:	47e0      	blx	ip
 800b73a:	2800      	cmp	r0, #0
 800b73c:	dc07      	bgt.n	800b74e <__sflush_r+0xf6>
 800b73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b746:	f04f 30ff 	mov.w	r0, #4294967295
 800b74a:	81a3      	strh	r3, [r4, #12]
 800b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b74e:	4407      	add	r7, r0
 800b750:	1a36      	subs	r6, r6, r0
 800b752:	e7e9      	b.n	800b728 <__sflush_r+0xd0>
 800b754:	dfbffffe 	.word	0xdfbffffe

0800b758 <_fflush_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	690b      	ldr	r3, [r1, #16]
 800b75c:	4605      	mov	r5, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	b913      	cbnz	r3, 800b768 <_fflush_r+0x10>
 800b762:	2500      	movs	r5, #0
 800b764:	4628      	mov	r0, r5
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	b118      	cbz	r0, 800b772 <_fflush_r+0x1a>
 800b76a:	6a03      	ldr	r3, [r0, #32]
 800b76c:	b90b      	cbnz	r3, 800b772 <_fflush_r+0x1a>
 800b76e:	f7ff f92b 	bl	800a9c8 <__sinit>
 800b772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0f3      	beq.n	800b762 <_fflush_r+0xa>
 800b77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b77c:	07d0      	lsls	r0, r2, #31
 800b77e:	d404      	bmi.n	800b78a <_fflush_r+0x32>
 800b780:	0599      	lsls	r1, r3, #22
 800b782:	d402      	bmi.n	800b78a <_fflush_r+0x32>
 800b784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b786:	f7ff fa44 	bl	800ac12 <__retarget_lock_acquire_recursive>
 800b78a:	4628      	mov	r0, r5
 800b78c:	4621      	mov	r1, r4
 800b78e:	f7ff ff63 	bl	800b658 <__sflush_r>
 800b792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b794:	4605      	mov	r5, r0
 800b796:	07da      	lsls	r2, r3, #31
 800b798:	d4e4      	bmi.n	800b764 <_fflush_r+0xc>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	059b      	lsls	r3, r3, #22
 800b79e:	d4e1      	bmi.n	800b764 <_fflush_r+0xc>
 800b7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7a2:	f7ff fa37 	bl	800ac14 <__retarget_lock_release_recursive>
 800b7a6:	e7dd      	b.n	800b764 <_fflush_r+0xc>

0800b7a8 <__swbuf_r>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	460e      	mov	r6, r1
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	b118      	cbz	r0, 800b7ba <__swbuf_r+0x12>
 800b7b2:	6a03      	ldr	r3, [r0, #32]
 800b7b4:	b90b      	cbnz	r3, 800b7ba <__swbuf_r+0x12>
 800b7b6:	f7ff f907 	bl	800a9c8 <__sinit>
 800b7ba:	69a3      	ldr	r3, [r4, #24]
 800b7bc:	60a3      	str	r3, [r4, #8]
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	071a      	lsls	r2, r3, #28
 800b7c2:	d501      	bpl.n	800b7c8 <__swbuf_r+0x20>
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	b943      	cbnz	r3, 800b7da <__swbuf_r+0x32>
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f000 f82a 	bl	800b824 <__swsetup_r>
 800b7d0:	b118      	cbz	r0, 800b7da <__swbuf_r+0x32>
 800b7d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	b2f6      	uxtb	r6, r6
 800b7e0:	1a98      	subs	r0, r3, r2
 800b7e2:	6963      	ldr	r3, [r4, #20]
 800b7e4:	4637      	mov	r7, r6
 800b7e6:	4283      	cmp	r3, r0
 800b7e8:	dc05      	bgt.n	800b7f6 <__swbuf_r+0x4e>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f7ff ffb3 	bl	800b758 <_fflush_r>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d1ed      	bne.n	800b7d2 <__swbuf_r+0x2a>
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	60a3      	str	r3, [r4, #8]
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	6022      	str	r2, [r4, #0]
 800b802:	701e      	strb	r6, [r3, #0]
 800b804:	6962      	ldr	r2, [r4, #20]
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	429a      	cmp	r2, r3
 800b80a:	d004      	beq.n	800b816 <__swbuf_r+0x6e>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	07db      	lsls	r3, r3, #31
 800b810:	d5e1      	bpl.n	800b7d6 <__swbuf_r+0x2e>
 800b812:	2e0a      	cmp	r6, #10
 800b814:	d1df      	bne.n	800b7d6 <__swbuf_r+0x2e>
 800b816:	4621      	mov	r1, r4
 800b818:	4628      	mov	r0, r5
 800b81a:	f7ff ff9d 	bl	800b758 <_fflush_r>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d0d9      	beq.n	800b7d6 <__swbuf_r+0x2e>
 800b822:	e7d6      	b.n	800b7d2 <__swbuf_r+0x2a>

0800b824 <__swsetup_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4b29      	ldr	r3, [pc, #164]	@ (800b8cc <__swsetup_r+0xa8>)
 800b828:	4605      	mov	r5, r0
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	460c      	mov	r4, r1
 800b82e:	b118      	cbz	r0, 800b838 <__swsetup_r+0x14>
 800b830:	6a03      	ldr	r3, [r0, #32]
 800b832:	b90b      	cbnz	r3, 800b838 <__swsetup_r+0x14>
 800b834:	f7ff f8c8 	bl	800a9c8 <__sinit>
 800b838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83c:	0719      	lsls	r1, r3, #28
 800b83e:	d422      	bmi.n	800b886 <__swsetup_r+0x62>
 800b840:	06da      	lsls	r2, r3, #27
 800b842:	d407      	bmi.n	800b854 <__swsetup_r+0x30>
 800b844:	2209      	movs	r2, #9
 800b846:	602a      	str	r2, [r5, #0]
 800b848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295
 800b850:	81a3      	strh	r3, [r4, #12]
 800b852:	e033      	b.n	800b8bc <__swsetup_r+0x98>
 800b854:	0758      	lsls	r0, r3, #29
 800b856:	d512      	bpl.n	800b87e <__swsetup_r+0x5a>
 800b858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b85a:	b141      	cbz	r1, 800b86e <__swsetup_r+0x4a>
 800b85c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b860:	4299      	cmp	r1, r3
 800b862:	d002      	beq.n	800b86a <__swsetup_r+0x46>
 800b864:	4628      	mov	r0, r5
 800b866:	f7ff f9d7 	bl	800ac18 <_free_r>
 800b86a:	2300      	movs	r3, #0
 800b86c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	2300      	movs	r3, #0
 800b878:	6063      	str	r3, [r4, #4]
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	89a3      	ldrh	r3, [r4, #12]
 800b880:	f043 0308 	orr.w	r3, r3, #8
 800b884:	81a3      	strh	r3, [r4, #12]
 800b886:	6923      	ldr	r3, [r4, #16]
 800b888:	b94b      	cbnz	r3, 800b89e <__swsetup_r+0x7a>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b894:	d003      	beq.n	800b89e <__swsetup_r+0x7a>
 800b896:	4621      	mov	r1, r4
 800b898:	4628      	mov	r0, r5
 800b89a:	f000 f8b2 	bl	800ba02 <__smakebuf_r>
 800b89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a2:	f013 0201 	ands.w	r2, r3, #1
 800b8a6:	d00a      	beq.n	800b8be <__swsetup_r+0x9a>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	60a2      	str	r2, [r4, #8]
 800b8ac:	6962      	ldr	r2, [r4, #20]
 800b8ae:	4252      	negs	r2, r2
 800b8b0:	61a2      	str	r2, [r4, #24]
 800b8b2:	6922      	ldr	r2, [r4, #16]
 800b8b4:	b942      	cbnz	r2, 800b8c8 <__swsetup_r+0xa4>
 800b8b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8ba:	d1c5      	bne.n	800b848 <__swsetup_r+0x24>
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	0799      	lsls	r1, r3, #30
 800b8c0:	bf58      	it	pl
 800b8c2:	6962      	ldrpl	r2, [r4, #20]
 800b8c4:	60a2      	str	r2, [r4, #8]
 800b8c6:	e7f4      	b.n	800b8b2 <__swsetup_r+0x8e>
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	e7f7      	b.n	800b8bc <__swsetup_r+0x98>
 800b8cc:	20000188 	.word	0x20000188

0800b8d0 <memmove>:
 800b8d0:	4288      	cmp	r0, r1
 800b8d2:	b510      	push	{r4, lr}
 800b8d4:	eb01 0402 	add.w	r4, r1, r2
 800b8d8:	d902      	bls.n	800b8e0 <memmove+0x10>
 800b8da:	4284      	cmp	r4, r0
 800b8dc:	4623      	mov	r3, r4
 800b8de:	d807      	bhi.n	800b8f0 <memmove+0x20>
 800b8e0:	1e43      	subs	r3, r0, #1
 800b8e2:	42a1      	cmp	r1, r4
 800b8e4:	d008      	beq.n	800b8f8 <memmove+0x28>
 800b8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8ee:	e7f8      	b.n	800b8e2 <memmove+0x12>
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	4402      	add	r2, r0
 800b8f4:	428a      	cmp	r2, r1
 800b8f6:	d100      	bne.n	800b8fa <memmove+0x2a>
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b902:	e7f7      	b.n	800b8f4 <memmove+0x24>

0800b904 <_sbrk_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	2300      	movs	r3, #0
 800b908:	4d05      	ldr	r5, [pc, #20]	@ (800b920 <_sbrk_r+0x1c>)
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	f7f5 f90c 	bl	8000b2c <_sbrk>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d102      	bne.n	800b91e <_sbrk_r+0x1a>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	b103      	cbz	r3, 800b91e <_sbrk_r+0x1a>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	20001628 	.word	0x20001628

0800b924 <memchr>:
 800b924:	4603      	mov	r3, r0
 800b926:	b510      	push	{r4, lr}
 800b928:	b2c9      	uxtb	r1, r1
 800b92a:	4402      	add	r2, r0
 800b92c:	4293      	cmp	r3, r2
 800b92e:	4618      	mov	r0, r3
 800b930:	d101      	bne.n	800b936 <memchr+0x12>
 800b932:	2000      	movs	r0, #0
 800b934:	e003      	b.n	800b93e <memchr+0x1a>
 800b936:	7804      	ldrb	r4, [r0, #0]
 800b938:	3301      	adds	r3, #1
 800b93a:	428c      	cmp	r4, r1
 800b93c:	d1f6      	bne.n	800b92c <memchr+0x8>
 800b93e:	bd10      	pop	{r4, pc}

0800b940 <memcpy>:
 800b940:	440a      	add	r2, r1
 800b942:	4291      	cmp	r1, r2
 800b944:	f100 33ff 	add.w	r3, r0, #4294967295
 800b948:	d100      	bne.n	800b94c <memcpy+0xc>
 800b94a:	4770      	bx	lr
 800b94c:	b510      	push	{r4, lr}
 800b94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b952:	4291      	cmp	r1, r2
 800b954:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b958:	d1f9      	bne.n	800b94e <memcpy+0xe>
 800b95a:	bd10      	pop	{r4, pc}

0800b95c <_realloc_r>:
 800b95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	4680      	mov	r8, r0
 800b962:	4615      	mov	r5, r2
 800b964:	460c      	mov	r4, r1
 800b966:	b921      	cbnz	r1, 800b972 <_realloc_r+0x16>
 800b968:	4611      	mov	r1, r2
 800b96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	f7ff b9bd 	b.w	800acec <_malloc_r>
 800b972:	b92a      	cbnz	r2, 800b980 <_realloc_r+0x24>
 800b974:	f7ff f950 	bl	800ac18 <_free_r>
 800b978:	2400      	movs	r4, #0
 800b97a:	4620      	mov	r0, r4
 800b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b980:	f000 f89e 	bl	800bac0 <_malloc_usable_size_r>
 800b984:	4285      	cmp	r5, r0
 800b986:	4606      	mov	r6, r0
 800b988:	d802      	bhi.n	800b990 <_realloc_r+0x34>
 800b98a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b98e:	d8f4      	bhi.n	800b97a <_realloc_r+0x1e>
 800b990:	4629      	mov	r1, r5
 800b992:	4640      	mov	r0, r8
 800b994:	f7ff f9aa 	bl	800acec <_malloc_r>
 800b998:	4607      	mov	r7, r0
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d0ec      	beq.n	800b978 <_realloc_r+0x1c>
 800b99e:	42b5      	cmp	r5, r6
 800b9a0:	462a      	mov	r2, r5
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	bf28      	it	cs
 800b9a6:	4632      	movcs	r2, r6
 800b9a8:	f7ff ffca 	bl	800b940 <memcpy>
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	f7ff f932 	bl	800ac18 <_free_r>
 800b9b4:	463c      	mov	r4, r7
 800b9b6:	e7e0      	b.n	800b97a <_realloc_r+0x1e>

0800b9b8 <__swhatbuf_r>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c0:	4615      	mov	r5, r2
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	461e      	mov	r6, r3
 800b9c6:	b096      	sub	sp, #88	@ 0x58
 800b9c8:	da0c      	bge.n	800b9e4 <__swhatbuf_r+0x2c>
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9d2:	bf14      	ite	ne
 800b9d4:	2340      	movne	r3, #64	@ 0x40
 800b9d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9da:	2000      	movs	r0, #0
 800b9dc:	6031      	str	r1, [r6, #0]
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	b016      	add	sp, #88	@ 0x58
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	466a      	mov	r2, sp
 800b9e6:	f000 f849 	bl	800ba7c <_fstat_r>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	dbed      	blt.n	800b9ca <__swhatbuf_r+0x12>
 800b9ee:	9901      	ldr	r1, [sp, #4]
 800b9f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9f8:	4259      	negs	r1, r3
 800b9fa:	4159      	adcs	r1, r3
 800b9fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba00:	e7eb      	b.n	800b9da <__swhatbuf_r+0x22>

0800ba02 <__smakebuf_r>:
 800ba02:	898b      	ldrh	r3, [r1, #12]
 800ba04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba06:	079d      	lsls	r5, r3, #30
 800ba08:	4606      	mov	r6, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	d507      	bpl.n	800ba1e <__smakebuf_r+0x1c>
 800ba0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	2301      	movs	r3, #1
 800ba18:	6163      	str	r3, [r4, #20]
 800ba1a:	b003      	add	sp, #12
 800ba1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba1e:	466a      	mov	r2, sp
 800ba20:	ab01      	add	r3, sp, #4
 800ba22:	f7ff ffc9 	bl	800b9b8 <__swhatbuf_r>
 800ba26:	9f00      	ldr	r7, [sp, #0]
 800ba28:	4605      	mov	r5, r0
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f7ff f95d 	bl	800acec <_malloc_r>
 800ba32:	b948      	cbnz	r0, 800ba48 <__smakebuf_r+0x46>
 800ba34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d4ee      	bmi.n	800ba1a <__smakebuf_r+0x18>
 800ba3c:	f023 0303 	bic.w	r3, r3, #3
 800ba40:	f043 0302 	orr.w	r3, r3, #2
 800ba44:	81a3      	strh	r3, [r4, #12]
 800ba46:	e7e2      	b.n	800ba0e <__smakebuf_r+0xc>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	6020      	str	r0, [r4, #0]
 800ba58:	b15b      	cbz	r3, 800ba72 <__smakebuf_r+0x70>
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba60:	f000 f81e 	bl	800baa0 <_isatty_r>
 800ba64:	b128      	cbz	r0, 800ba72 <__smakebuf_r+0x70>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	f023 0303 	bic.w	r3, r3, #3
 800ba6c:	f043 0301 	orr.w	r3, r3, #1
 800ba70:	81a3      	strh	r3, [r4, #12]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	431d      	orrs	r5, r3
 800ba76:	81a5      	strh	r5, [r4, #12]
 800ba78:	e7cf      	b.n	800ba1a <__smakebuf_r+0x18>
	...

0800ba7c <_fstat_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	2300      	movs	r3, #0
 800ba80:	4d06      	ldr	r5, [pc, #24]	@ (800ba9c <_fstat_r+0x20>)
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	4611      	mov	r1, r2
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	f7f5 f829 	bl	8000ae0 <_fstat>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	d102      	bne.n	800ba98 <_fstat_r+0x1c>
 800ba92:	682b      	ldr	r3, [r5, #0]
 800ba94:	b103      	cbz	r3, 800ba98 <_fstat_r+0x1c>
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	bd38      	pop	{r3, r4, r5, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20001628 	.word	0x20001628

0800baa0 <_isatty_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	2300      	movs	r3, #0
 800baa4:	4d05      	ldr	r5, [pc, #20]	@ (800babc <_isatty_r+0x1c>)
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7f5 f827 	bl	8000afe <_isatty>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_isatty_r+0x1a>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_isatty_r+0x1a>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001628 	.word	0x20001628

0800bac0 <_malloc_usable_size_r>:
 800bac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac4:	1f18      	subs	r0, r3, #4
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	bfbc      	itt	lt
 800baca:	580b      	ldrlt	r3, [r1, r0]
 800bacc:	18c0      	addlt	r0, r0, r3
 800bace:	4770      	bx	lr

0800bad0 <_init>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	bf00      	nop
 800bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad6:	bc08      	pop	{r3}
 800bad8:	469e      	mov	lr, r3
 800bada:	4770      	bx	lr

0800badc <_fini>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr
