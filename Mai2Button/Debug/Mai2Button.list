
Mai2Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007ec0  08007ec0  00008ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f18  08007f18  00009184  2**0
                  CONTENTS
  4 .ARM          00000000  08007f18  08007f18  00009184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f18  08007f18  00009184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f18  08007f18  00008f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08007f20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000184  080080a4  00009184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c0  080080a4  000093c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155fe  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399a  00000000  00000000  0001e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00022150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef1  00000000  00000000  00023510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211b5  00000000  00000000  00024401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ccd  00000000  00000000  000455b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c48c9  00000000  00000000  0005e283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122b4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b0  00000000  00000000  00122b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00127c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007ea8 	.word	0x08007ea8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007ea8 	.word	0x08007ea8

08000218 <HAL_TIM_PeriodElapsedCallback>:
uint8_t LED_bead[BT_LED_NUM_light*24]={0};

uint8_t r_start,g_start,b_start;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(htim==&htim1)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d107      	bne.n	8000238 <HAL_TIM_PeriodElapsedCallback+0x20>
	  {
		  HAL_GPIO_WritePin(BT_LED_GPIO_Port, BT_LED_Pin, SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2108      	movs	r1, #8
 800022c:	4805      	ldr	r0, [pc, #20]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800022e:	f000 fcd5 	bl	8000bdc <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Stop_IT(&htim1);
 8000232:	4803      	ldr	r0, [pc, #12]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000234:	f003 f9dd 	bl	80035f2 <HAL_TIM_Base_Stop_IT>
	  }
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	200001a0 	.word	0x200001a0
 8000244:	48000400 	.word	0x48000400

08000248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800025e:	4b1d      	ldr	r3, [pc, #116]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a1c      	ldr	r2, [pc, #112]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 8000264:	f043 0320 	orr.w	r3, r3, #32
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a16      	ldr	r2, [pc, #88]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028e:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000292:	4a10      	ldr	r2, [pc, #64]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 8000294:	f043 0302 	orr.w	r3, r3, #2
 8000298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <MX_GPIO_Init+0x8c>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029e:	f003 0302 	and.w	r3, r3, #2
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_LED_GPIO_Port, BT_LED_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2108      	movs	r1, #8
 80002aa:	480b      	ldr	r0, [pc, #44]	@ (80002d8 <MX_GPIO_Init+0x90>)
 80002ac:	f000 fc96 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT_LED_Pin */
  GPIO_InitStruct.Pin = BT_LED_Pin;
 80002b0:	2308      	movs	r3, #8
 80002b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_LED_GPIO_Port, &GPIO_InitStruct);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4619      	mov	r1, r3
 80002c6:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <MX_GPIO_Init+0x90>)
 80002c8:	f000 fb06 	bl	80008d8 <HAL_GPIO_Init>

}
 80002cc:	bf00      	nop
 80002ce:	3720      	adds	r7, #32
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	48000400 	.word	0x48000400

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SystemInit();
 80002e0:	f000 f8c6 	bl	8000470 <SystemInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 f977 	bl	80005d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f808 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f7ff ffac 	bl	8000248 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80002f0:	f007 f8ca 	bl	8007488 <MX_USB_Device_Init>
  MX_TIM1_Init();
 80002f4:	f000 f8ce 	bl	8000494 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <main+0x1c>

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b094      	sub	sp, #80	@ 0x50
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2238      	movs	r2, #56	@ 0x38
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f007 fda0 	bl	8007e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800031e:	2000      	movs	r0, #0
 8000320:	f002 f976 	bl	8002610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000324:	2321      	movs	r3, #33	@ 0x21
 8000326:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000336:	2303      	movs	r3, #3
 8000338:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800033e:	2350      	movs	r3, #80	@ 0x50
 8000340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fa10 	bl	8002778 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800035e:	f000 f818 	bl	8000392 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2104      	movs	r1, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fd0e 	bl	8002d9c <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000386:	f000 f804 	bl	8000392 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3750      	adds	r7, #80	@ 0x50
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000396:	b672      	cpsid	i
}
 8000398:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039a:	bf00      	nop
 800039c:	e7fd      	b.n	800039a <Error_Handler+0x8>
	...

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <HAL_MspInit+0x44>)
 80003a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003aa:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <HAL_MspInit+0x44>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <HAL_MspInit+0x44>)
 80003b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <HAL_MspInit+0x44>)
 80003c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003c2:	4a08      	ldr	r2, [pc, #32]	@ (80003e4 <HAL_MspInit+0x44>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <HAL_MspInit+0x44>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003d6:	f002 f9bf 	bl	8002758 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <NMI_Handler+0x4>

080003f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <MemManage_Handler+0x4>

08000400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <UsageFault_Handler+0x4>

08000410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043e:	f000 f91d 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800044c:	4802      	ldr	r0, [pc, #8]	@ (8000458 <USB_LP_IRQHandler+0x10>)
 800044e:	f000 fccd 	bl	8000dec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000ec4 	.word	0x20000ec4

0800045c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000460:	4802      	ldr	r0, [pc, #8]	@ (800046c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000462:	f003 f8f5 	bl	8003650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200001a0 	.word	0x200001a0

08000470 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <SystemInit+0x20>)
 8000476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800047a:	4a05      	ldr	r2, [pc, #20]	@ (8000490 <SystemInit+0x20>)
 800047c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004ba:	229f      	movs	r2, #159	@ 0x9f
 80004bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004c6:	2232      	movs	r2, #50	@ 0x32
 80004c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ca:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d0:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d6:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004dc:	4814      	ldr	r0, [pc, #80]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004de:	f003 f831 	bl	8003544 <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80004e8:	f7ff ff53 	bl	8000392 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <MX_TIM1_Init+0x9c>)
 80004fa:	f003 f9f9 	bl	80038f0 <HAL_TIM_ConfigClockSource>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000504:	f7ff ff45 	bl	8000392 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_TIM1_Init+0x9c>)
 800051a:	f003 fc43 	bl	8003da4 <HAL_TIMEx_MasterConfigSynchronization>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000524:	f7ff ff35 	bl	8000392 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200001a0 	.word	0x200001a0
 8000534:	40012c00 	.word	0x40012c00

08000538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <HAL_TIM_Base_MspInit+0x44>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d113      	bne.n	8000572 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <HAL_TIM_Base_MspInit+0x48>)
 800054c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800054e:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <HAL_TIM_Base_MspInit+0x48>)
 8000550:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000554:	6613      	str	r3, [r2, #96]	@ 0x60
 8000556:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <HAL_TIM_Base_MspInit+0x48>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800055a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2019      	movs	r0, #25
 8000568:	f000 f981 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800056c:	2019      	movs	r0, #25
 800056e:	f000 f998 	bl	80008a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40012c00 	.word	0x40012c00
 8000580:	40021000 	.word	0x40021000

08000584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	@ (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000588:	f7ff ff72 	bl	8000470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	@ (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f007 fc55 	bl	8007e60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b6:	f7ff fe91 	bl	80002dc <main>

080005ba <LoopForever>:

LoopForever:
    b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80005c8:	08007f20 	.word	0x08007f20
  ldr r2, =_sbss
 80005cc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80005d0:	200013c0 	.word	0x200013c0

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>

080005d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005dc:	2300      	movs	r3, #0
 80005de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f939 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e6:	200f      	movs	r0, #15
 80005e8:	f000 f80e 	bl	8000608 <HAL_InitTick>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e001      	b.n	80005fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f8:	f7ff fed2 	bl	80003a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005fc:	79fb      	ldrb	r3, [r7, #7]

}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <HAL_InitTick+0x68>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d022      	beq.n	8000662 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <HAL_InitTick+0x6c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <HAL_InitTick+0x68>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000628:	fbb1 f3f3 	udiv	r3, r1, r3
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f944 	bl	80008be <HAL_SYSTICK_Config>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10f      	bne.n	800065c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	d809      	bhi.n	8000656 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000642:	2200      	movs	r2, #0
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	f04f 30ff 	mov.w	r0, #4294967295
 800064a:	f000 f910 	bl	800086e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <HAL_InitTick+0x70>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	e007      	b.n	8000666 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e004      	b.n	8000666 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e001      	b.n	8000666 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000008 	.word	0x20000008
 8000674:	20000000 	.word	0x20000000
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x1c>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_IncTick+0x20>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4413      	add	r3, r2
 800068a:	4a03      	ldr	r2, [pc, #12]	@ (8000698 <HAL_IncTick+0x1c>)
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	200001ec 	.word	0x200001ec
 800069c:	20000008 	.word	0x20000008

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200001ec 	.word	0x200001ec

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	@ (8000754 <__NVIC_EnableIRQ+0x38>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	@ 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff29 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff40 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff90 	bl	80007ac <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5f 	bl	8000758 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff33 	bl	800071c <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffa4 	bl	8000814 <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008e6:	e15a      	b.n	8000b9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2101      	movs	r1, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 814c 	beq.w	8000b98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b01      	cmp	r3, #1
 800090a:	d005      	beq.n	8000918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000914:	2b02      	cmp	r3, #2
 8000916:	d130      	bne.n	800097a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094e:	2201      	movs	r2, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 0201 	and.w	r2, r3, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b03      	cmp	r3, #3
 8000984:	d017      	beq.n	80009b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2203      	movs	r2, #3
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d123      	bne.n	8000a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	08da      	lsrs	r2, r3, #3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3208      	adds	r2, #8
 80009ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	220f      	movs	r2, #15
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	691a      	ldr	r2, [r3, #16]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	f003 0307 	and.w	r3, r3, #7
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	08da      	lsrs	r2, r3, #3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3208      	adds	r2, #8
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2203      	movs	r2, #3
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 0203 	and.w	r2, r3, #3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 80a6 	beq.w	8000b98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bbc <HAL_GPIO_Init+0x2e4>)
 8000a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a50:	4a5a      	ldr	r2, [pc, #360]	@ (8000bbc <HAL_GPIO_Init+0x2e4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a58:	4b58      	ldr	r3, [pc, #352]	@ (8000bbc <HAL_GPIO_Init+0x2e4>)
 8000a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a64:	4a56      	ldr	r2, [pc, #344]	@ (8000bc0 <HAL_GPIO_Init+0x2e8>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a8e:	d01f      	beq.n	8000ad0 <HAL_GPIO_Init+0x1f8>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc4 <HAL_GPIO_Init+0x2ec>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d019      	beq.n	8000acc <HAL_GPIO_Init+0x1f4>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc8 <HAL_GPIO_Init+0x2f0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1f0>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8000bcc <HAL_GPIO_Init+0x2f4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1ec>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a49      	ldr	r2, [pc, #292]	@ (8000bd0 <HAL_GPIO_Init+0x2f8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a48      	ldr	r2, [pc, #288]	@ (8000bd4 <HAL_GPIO_Init+0x2fc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1e4>
 8000ab8:	2305      	movs	r3, #5
 8000aba:	e00a      	b.n	8000ad2 <HAL_GPIO_Init+0x1fa>
 8000abc:	2306      	movs	r3, #6
 8000abe:	e008      	b.n	8000ad2 <HAL_GPIO_Init+0x1fa>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x1fa>
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e004      	b.n	8000ad2 <HAL_GPIO_Init+0x1fa>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x1fa>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <HAL_GPIO_Init+0x1fa>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	f002 0203 	and.w	r2, r2, #3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	4093      	lsls	r3, r2
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae2:	4937      	ldr	r1, [pc, #220]	@ (8000bc0 <HAL_GPIO_Init+0x2e8>)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3302      	adds	r3, #2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b14:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b3e:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b68:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b92:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <HAL_GPIO_Init+0x300>)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f47f ae9d 	bne.w	80008e8 <HAL_GPIO_Init+0x10>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	371c      	adds	r7, #28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000c00 	.word	0x48000c00
 8000bd0:	48001000 	.word	0x48001000
 8000bd4:	48001400 	.word	0x48001400
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e0c0      	b.n	8000da0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f006 fe08 	bl	8007848 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f98c 	bl	8003f62 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e03e      	b.n	8000cce <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3311      	adds	r3, #17
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3310      	adds	r3, #16
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3313      	adds	r3, #19
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	3320      	adds	r3, #32
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3324      	adds	r3, #36	@ 0x24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3bb      	bcc.n	8000c50 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e044      	b.n	8000d68 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	3301      	adds	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	7bfa      	ldrb	r2, [r7, #15]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3b5      	bcc.n	8000cde <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d7e:	f003 f90b 	bl	8003f98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7a9b      	ldrb	r3, [r3, #10]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d102      	bne.n	8000d9e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f001 fc0e 	bl	80025ba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_PCD_Start+0x16>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e012      	b.n	8000de4 <HAL_PCD_Start+0x3c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 f8b2 	bl	8003f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fe8f 	bl	8005af8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fe94 	bl	8005b26 <USB_ReadInterrupts>
 8000dfe:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 fb06 	bl	800141c <PCD_EP_ISR_Handler>

    return;
 8000e10:	e110      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d013      	beq.n	8000e44 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f006 fd98 	bl	800796a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f8fc 	bl	800103a <HAL_PCD_SetAddress>

    return;
 8000e42:	e0f7      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00c      	beq.n	8000e68 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e60:	b292      	uxth	r2, r2
 8000e62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000e66:	e0e5      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00c      	beq.n	8000e8c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000e84:	b292      	uxth	r2, r2
 8000e86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000e8a:	e0d3      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d034      	beq.n	8000f00 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0204 	bic.w	r2, r2, #4
 8000ea8:	b292      	uxth	r2, r2
 8000eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0208 	bic.w	r2, r2, #8
 8000ec0:	b292      	uxth	r2, r2
 8000ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d107      	bne.n	8000ee0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f006 ff38 	bl	8007d50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f006 fd7b 	bl	80079dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000efe:	e099      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d027      	beq.n	8000f5a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0208 	orr.w	r2, r2, #8
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f34:	b292      	uxth	r2, r2
 8000f36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0204 	orr.w	r2, r2, #4
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f006 fd28 	bl	80079a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f58:	e06c      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d040      	beq.n	8000fe6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f76:	b292      	uxth	r2, r2
 8000f78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d12b      	bne.n	8000fde <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0204 	orr.w	r2, r2, #4
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0208 	orr.w	r2, r2, #8
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f006 feba 	bl	8007d50 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000fdc:	e02a      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f006 fce2 	bl	80079a8 <HAL_PCD_SuspendCallback>
    return;
 8000fe4:	e026      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00f      	beq.n	8001010 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001002:	b292      	uxth	r2, r2
 8001004:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f006 fca0 	bl	800794e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800100e:	e011      	b.n	8001034 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00c      	beq.n	8001034 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800102c:	b292      	uxth	r2, r2
 800102e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001032:	bf00      	nop
  }
}
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_PCD_SetAddress+0x1a>
 8001050:	2302      	movs	r3, #2
 8001052:	e012      	b.n	800107a <HAL_PCD_SetAddress+0x40>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fd30 	bl	8005ad0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	4608      	mov	r0, r1
 800108c:	4611      	mov	r1, r2
 800108e:	461a      	mov	r2, r3
 8001090:	4603      	mov	r3, r0
 8001092:	70fb      	strb	r3, [r7, #3]
 8001094:	460b      	mov	r3, r1
 8001096:	803b      	strh	r3, [r7, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da0e      	bge.n	80010c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 0207 	and.w	r2, r3, #7
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	3310      	adds	r3, #16
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2201      	movs	r2, #1
 80010c2:	705a      	strb	r2, [r3, #1]
 80010c4:	e00e      	b.n	80010e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f003 0207 	and.w	r2, r3, #7
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80010f0:	883b      	ldrh	r3, [r7, #0]
 80010f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	78ba      	ldrb	r2, [r7, #2]
 80010fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001100:	78bb      	ldrb	r3, [r7, #2]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d102      	bne.n	800110c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_PCD_EP_Open+0x98>
 8001116:	2302      	movs	r3, #2
 8001118:	e00e      	b.n	8001138 <HAL_PCD_EP_Open+0xb6>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68f9      	ldr	r1, [r7, #12]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 ff53 	bl	8003fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001136:	7afb      	ldrb	r3, [r7, #11]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800114c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da0e      	bge.n	8001172 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	f003 0207 	and.w	r2, r3, #7
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	3310      	adds	r3, #16
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2201      	movs	r2, #1
 800116e:	705a      	strb	r2, [r3, #1]
 8001170:	e00e      	b.n	8001190 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	f003 0207 	and.w	r2, r3, #7
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	b2da      	uxtb	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_PCD_EP_Close+0x6a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e00e      	b.n	80011c8 <HAL_PCD_EP_Close+0x88>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fbf3 	bl	80049a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	f003 0207 	and.w	r2, r3, #7
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2200      	movs	r2, #0
 800120e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	b2da      	uxtb	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6979      	ldr	r1, [r7, #20]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fdab 	bl	8004d7e <USB_EPStartXfer>

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	f003 0207 	and.w	r2, r3, #7
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001254:	681b      	ldr	r3, [r3, #0]
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	f003 0207 	and.w	r2, r3, #7
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	3310      	adds	r3, #16
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6979      	ldr	r1, [r7, #20]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fd5c 	bl	8004d7e <USB_EPStartXfer>

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	7912      	ldrb	r2, [r2, #4]
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e03e      	b.n	800136c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0e      	bge.n	8001314 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	f003 0207 	and.w	r2, r3, #7
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	3310      	adds	r3, #16
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	705a      	strb	r2, [r3, #1]
 8001312:	e00c      	b.n	800132e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_PCD_EP_SetStall+0x7e>
 800134a:	2302      	movs	r3, #2
 800134c:	e00e      	b.n	800136c <HAL_PCD_EP_SetStall+0x9c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fabd 	bl	80058dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	7912      	ldrb	r2, [r2, #4]
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e040      	b.n	8001414 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	da0e      	bge.n	80013b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	f003 0207 	and.w	r2, r3, #7
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	3310      	adds	r3, #16
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	705a      	strb	r2, [r3, #1]
 80013b6:	e00e      	b.n	80013d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f003 0207 	and.w	r2, r3, #7
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_PCD_EP_ClrStall+0x82>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e00e      	b.n	8001414 <HAL_PCD_EP_ClrStall+0xa0>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	4618      	mov	r0, r3
 8001406:	f004 faba 	bl	800597e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b092      	sub	sp, #72	@ 0x48
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001424:	e333      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800142e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001430:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800143c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 8108 	bne.w	8001656 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001446:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d14c      	bne.n	80014ea <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800145c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001460:	813b      	strh	r3, [r7, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	893b      	ldrh	r3, [r7, #8]
 8001468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800146c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001470:	b29b      	uxth	r3, r3
 8001472:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3310      	adds	r3, #16
 8001478:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	4413      	add	r3, r2
 8001494:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800149e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	441a      	add	r2, r3
 80014ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014b0:	2100      	movs	r1, #0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f006 fa31 	bl	800791a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7b1b      	ldrb	r3, [r3, #12]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 82e5 	beq.w	8001a8e <PCD_EP_ISR_Handler+0x672>
 80014c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f040 82e0 	bne.w	8001a8e <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7b1b      	ldrb	r3, [r3, #12]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	731a      	strb	r2, [r3, #12]
 80014e8:	e2d1      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014f0:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80014fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001500:	2b00      	cmp	r3, #0
 8001502:	d032      	beq.n	800156a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	4413      	add	r3, r2
 800151e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800152a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001538:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800153a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800153c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800153e:	b29b      	uxth	r3, r3
 8001540:	f004 fb43 	bl	8005bca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001550:	4013      	ands	r3, r2
 8001552:	817b      	strh	r3, [r7, #10]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	897a      	ldrh	r2, [r7, #10]
 800155a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800155e:	b292      	uxth	r2, r2
 8001560:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f006 f9ac 	bl	80078c0 <HAL_PCD_SetupStageCallback>
 8001568:	e291      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800156a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800156e:	2b00      	cmp	r3, #0
 8001570:	f280 828d 	bge.w	8001a8e <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b29a      	uxth	r2, r3
 800157c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001580:	4013      	ands	r3, r2
 8001582:	81fb      	strh	r3, [r7, #14]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	89fa      	ldrh	r2, [r7, #14]
 800158a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800158e:	b292      	uxth	r2, r2
 8001590:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <PCD_EP_ISR_Handler+0x1da>
 80015c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d015      	beq.n	80015f6 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d0:	6959      	ldr	r1, [r3, #20]
 80015d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f004 faf5 	bl	8005bca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	441a      	add	r2, r3
 80015ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f006 f977 	bl	80078e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80015fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 8242 	bne.w	8001a8e <PCD_EP_ISR_Handler+0x672>
 800160a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800160c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001610:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001614:	f000 823b 	beq.w	8001a8e <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001628:	81bb      	strh	r3, [r7, #12]
 800162a:	89bb      	ldrh	r3, [r7, #12]
 800162c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001630:	81bb      	strh	r3, [r7, #12]
 8001632:	89bb      	ldrh	r3, [r7, #12]
 8001634:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001638:	81bb      	strh	r3, [r7, #12]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	b29b      	uxth	r3, r3
 8001652:	8013      	strh	r3, [r2, #0]
 8001654:	e21b      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001668:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800166c:	2b00      	cmp	r3, #0
 800166e:	f280 80f1 	bge.w	8001854 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001688:	4013      	ands	r3, r2
 800168a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800169c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016a0:	b292      	uxth	r2, r2
 80016a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016a4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d123      	bne.n	800170a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80016ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 808b 	beq.w	800180a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016fa:	6959      	ldr	r1, [r3, #20]
 80016fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016fe:	88da      	ldrh	r2, [r3, #6]
 8001700:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001704:	f004 fa61 	bl	8005bca <USB_ReadPMA>
 8001708:	e07f      	b.n	800180a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800170a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d109      	bne.n	8001726 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001712:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001714:	461a      	mov	r2, r3
 8001716:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f9c6 	bl	8001aaa <HAL_PCD_EP_DB_Receive>
 800171e:	4603      	mov	r3, r0
 8001720:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001724:	e071      	b.n	800180a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800173c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001740:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	441a      	add	r2, r3
 8001750:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800175a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800175e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001762:	b29b      	uxth	r3, r3
 8001764:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d022      	beq.n	80017c6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4413      	add	r3, r2
 800179a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80017a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d02c      	beq.n	800180a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017b6:	6959      	ldr	r1, [r3, #20]
 80017b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ba:	891a      	ldrh	r2, [r3, #8]
 80017bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80017c0:	f004 fa03 	bl	8005bca <USB_ReadPMA>
 80017c4:	e021      	b.n	800180a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80017ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001800:	895a      	ldrh	r2, [r3, #10]
 8001802:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001806:	f004 f9e0 	bl	8005bca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800180a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001812:	441a      	add	r2, r3
 8001814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001816:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001820:	441a      	add	r2, r3
 8001822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001824:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <PCD_EP_ISR_Handler+0x41e>
 800182e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	429a      	cmp	r2, r3
 8001838:	d206      	bcs.n	8001848 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800183a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f006 f84f 	bl	80078e4 <HAL_PCD_DataOutStageCallback>
 8001846:	e005      	b.n	8001854 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fa95 	bl	8004d7e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001854:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8117 	beq.w	8001a8e <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001860:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	3310      	adds	r3, #16
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800188a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800188e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	441a      	add	r2, r3
 800189e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80018a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 80a1 	bne.w	80019f8 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80018b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8092 	beq.w	80019ea <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80018c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d046      	beq.n	800195e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d126      	bne.n	8001926 <PCD_EP_ISR_Handler+0x50a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	00da      	lsls	r2, r3, #3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4413      	add	r3, r2
 80018fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800190a:	b29a      	uxth	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	801a      	strh	r2, [r3, #0]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800191a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800191e:	b29a      	uxth	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	e061      	b.n	80019ea <PCD_EP_ISR_Handler+0x5ce>
 8001926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d15d      	bne.n	80019ea <PCD_EP_ISR_Handler+0x5ce>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	00da      	lsls	r2, r3, #3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2200      	movs	r2, #0
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	e045      	b.n	80019ea <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d126      	bne.n	80019ba <PCD_EP_ISR_Handler+0x59e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	4413      	add	r3, r2
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
 8001984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	00da      	lsls	r2, r3, #3
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	4413      	add	r3, r2
 800198e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199e:	b29a      	uxth	r2, r3
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	801a      	strh	r2, [r3, #0]
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	e017      	b.n	80019ea <PCD_EP_ISR_Handler+0x5ce>
 80019ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d113      	bne.n	80019ea <PCD_EP_ISR_Handler+0x5ce>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d0:	4413      	add	r3, r2
 80019d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	00da      	lsls	r2, r3, #3
 80019da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019dc:	4413      	add	r3, r2
 80019de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	2200      	movs	r2, #0
 80019e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f005 ff92 	bl	800791a <HAL_PCD_DataInStageCallback>
 80019f6:	e04a      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80019fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13f      	bne.n	8001a82 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a26:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8001a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d906      	bls.n	8001a40 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8001a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a3c:	619a      	str	r2, [r3, #24]
 8001a3e:	e002      	b.n	8001a46 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 ff60 	bl	800791a <HAL_PCD_DataInStageCallback>
 8001a5a:	e018      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001a62:	441a      	add	r2, r3
 8001a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a66:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001a6e:	441a      	add	r2, r3
 8001a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a72:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f97f 	bl	8004d7e <USB_EPStartXfer>
 8001a80:	e005      	b.n	8001a8e <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a84:	461a      	mov	r2, r3
 8001a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f917 	bl	8001cbc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f6ff acc3 	blt.w	8001426 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3748      	adds	r7, #72	@ 0x48
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b088      	sub	sp, #32
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d07c      	beq.n	8001bbc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	8b7b      	ldrh	r3, [r7, #26]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d306      	bcc.n	8001b00 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	8b7b      	ldrh	r3, [r7, #26]
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	e002      	b.n	8001b06 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d123      	bne.n	8001b56 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b28:	833b      	strh	r3, [r7, #24]
 8001b2a:	8b3b      	ldrh	r3, [r7, #24]
 8001b2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b30:	833b      	strh	r3, [r7, #24]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	441a      	add	r2, r3
 8001b40:	8b3b      	ldrh	r3, [r7, #24]
 8001b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b7a:	82fb      	strh	r3, [r7, #22]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	441a      	add	r2, r3
 8001b8a:	8afb      	ldrh	r3, [r7, #22]
 8001b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ba0:	8b7b      	ldrh	r3, [r7, #26]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8085 	beq.w	8001cb2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	6959      	ldr	r1, [r3, #20]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	891a      	ldrh	r2, [r3, #8]
 8001bb4:	8b7b      	ldrh	r3, [r7, #26]
 8001bb6:	f004 f808 	bl	8005bca <USB_ReadPMA>
 8001bba:	e07a      	b.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	8b7b      	ldrh	r3, [r7, #26]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d306      	bcc.n	8001bfa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	8b7b      	ldrh	r3, [r7, #26]
 8001bf2:	1ad2      	subs	r2, r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	619a      	str	r2, [r3, #24]
 8001bf8:	e002      	b.n	8001c00 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d123      	bne.n	8001c50 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c22:	83fb      	strh	r3, [r7, #30]
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c2a:	83fb      	strh	r3, [r7, #30]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	441a      	add	r2, r3
 8001c3a:	8bfb      	ldrh	r3, [r7, #30]
 8001c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d11f      	bne.n	8001c9a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c74:	83bb      	strh	r3, [r7, #28]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	441a      	add	r2, r3
 8001c84:	8bbb      	ldrh	r3, [r7, #28]
 8001c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c9a:	8b7b      	ldrh	r3, [r7, #26]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	895a      	ldrh	r2, [r3, #10]
 8001cac:	8b7b      	ldrh	r3, [r7, #26]
 8001cae:	f003 ff8c 	bl	8005bca <USB_ReadPMA>
    }
  }

  return count;
 8001cb2:	8b7b      	ldrh	r3, [r7, #26]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0a6      	sub	sp, #152	@ 0x98
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 81f7 	beq.w	80020c4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d907      	bls.n	8001d1a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001d12:	1ad2      	subs	r2, r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	e002      	b.n	8001d20 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 80e1 	bne.w	8001eec <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d126      	bne.n	8001d80 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d46:	4413      	add	r3, r2
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	00da      	lsls	r2, r3, #3
 8001d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d52:	4413      	add	r3, r2
 8001d54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	e01a      	b.n	8001db6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	785b      	ldrb	r3, [r3, #1]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d116      	bne.n	8001db6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9c:	4413      	add	r3, r2
 8001d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	00da      	lsls	r2, r3, #3
 8001da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da8:	4413      	add	r3, r2
 8001daa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db2:	2200      	movs	r2, #0
 8001db4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d126      	bne.n	8001e12 <HAL_PCD_EP_DB_Transmit+0x156>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	4413      	add	r3, r2
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	00da      	lsls	r2, r3, #3
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	4413      	add	r3, r2
 8001de6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	801a      	strh	r2, [r3, #0]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	e017      	b.n	8001e42 <HAL_PCD_EP_DB_Transmit+0x186>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d113      	bne.n	8001e42 <HAL_PCD_EP_DB_Transmit+0x186>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e28:	4413      	add	r3, r2
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	00da      	lsls	r2, r3, #3
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	4413      	add	r3, r2
 8001e36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d123      	bne.n	8001e92 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e64:	837b      	strh	r3, [r7, #26]
 8001e66:	8b7b      	ldrh	r3, [r7, #26]
 8001e68:	f083 0320 	eor.w	r3, r3, #32
 8001e6c:	837b      	strh	r3, [r7, #26]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	8b7b      	ldrh	r3, [r7, #26]
 8001e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f005 fd3e 	bl	800791a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01f      	beq.n	8001ee8 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec2:	833b      	strh	r3, [r7, #24]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	441a      	add	r2, r3
 8001ed2:	8b3b      	ldrh	r3, [r7, #24]
 8001ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e31f      	b.n	800252c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d021      	beq.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 82ca 	bne.w	80024da <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001f4e:	441a      	add	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001f5c:	441a      	add	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d309      	bcc.n	8001f82 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f7a:	1ad2      	subs	r2, r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	621a      	str	r2, [r3, #32]
 8001f80:	e015      	b.n	8001fae <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8001f8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001f98:	e009      	b.n	8001fae <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	785b      	ldrb	r3, [r3, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d15f      	bne.n	8002076 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fca:	4413      	add	r3, r2
 8001fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	00da      	lsls	r2, r3, #3
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HAL_PCD_EP_DB_Transmit+0x34e>
 8001ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002002:	b29a      	uxth	r2, r3
 8002004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002006:	801a      	strh	r2, [r3, #0]
 8002008:	e051      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 800200a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800200c:	2b3e      	cmp	r3, #62	@ 0x3e
 800200e:	d816      	bhi.n	800203e <HAL_PCD_EP_DB_Transmit+0x382>
 8002010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	653b      	str	r3, [r7, #80]	@ 0x50
 8002016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002022:	3301      	adds	r3, #1
 8002024:	653b      	str	r3, [r7, #80]	@ 0x50
 8002026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29a      	uxth	r2, r3
 800202c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800202e:	b29b      	uxth	r3, r3
 8002030:	029b      	lsls	r3, r3, #10
 8002032:	b29b      	uxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b29a      	uxth	r2, r3
 8002038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	e037      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 800203e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	653b      	str	r3, [r7, #80]	@ 0x50
 8002044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_PCD_EP_DB_Transmit+0x398>
 800204e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002050:	3b01      	subs	r3, #1
 8002052:	653b      	str	r3, [r7, #80]	@ 0x50
 8002054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
 800205a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	b29b      	uxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800206a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800206e:	b29a      	uxth	r2, r3
 8002070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e01b      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d117      	bne.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3f2>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002092:	4413      	add	r3, r2
 8002094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	00da      	lsls	r2, r3, #3
 800209c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800209e:	4413      	add	r3, r2
 80020a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	891a      	ldrh	r2, [r3, #8]
 80020ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f003 fd42 	bl	8005b46 <USB_WritePMA>
 80020c2:	e20a      	b.n	80024da <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d307      	bcc.n	8002108 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	619a      	str	r2, [r3, #24]
 8002106:	e002      	b.n	800210e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80f6 	bne.w	8002304 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	785b      	ldrb	r3, [r3, #1]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d126      	bne.n	800216e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	677b      	str	r3, [r7, #116]	@ 0x74
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002134:	4413      	add	r3, r2
 8002136:	677b      	str	r3, [r7, #116]	@ 0x74
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	00da      	lsls	r2, r3, #3
 800213e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002140:	4413      	add	r3, r2
 8002142:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002146:	673b      	str	r3, [r7, #112]	@ 0x70
 8002148:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002152:	b29a      	uxth	r2, r3
 8002154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002166:	b29a      	uxth	r2, r3
 8002168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800216a:	801a      	strh	r2, [r3, #0]
 800216c:	e01a      	b.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d116      	bne.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800218a:	4413      	add	r3, r2
 800218c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	00da      	lsls	r2, r3, #3
 8002194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002196:	4413      	add	r3, r2
 8002198:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800219c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800219e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021a0:	2200      	movs	r2, #0
 80021a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12f      	bne.n	8002214 <HAL_PCD_EP_DB_Transmit+0x558>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021cc:	4413      	add	r3, r2
 80021ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021dc:	4413      	add	r3, r2
 80021de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220a:	b29a      	uxth	r2, r3
 800220c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	e01c      	b.n	800224e <HAL_PCD_EP_DB_Transmit+0x592>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	785b      	ldrb	r3, [r3, #1]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d118      	bne.n	800224e <HAL_PCD_EP_DB_Transmit+0x592>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002224:	b29b      	uxth	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800222c:	4413      	add	r3, r2
 800222e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00da      	lsls	r2, r3, #3
 8002238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800223c:	4413      	add	r3, r2
 800223e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002246:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800224a:	2200      	movs	r2, #0
 800224c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d127      	bne.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800226c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002270:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002274:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002278:	f083 0320 	eor.w	r3, r3, #32
 800227c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	441a      	add	r2, r3
 800228e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800229a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f005 fb34 	bl	800791a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d121      	bne.n	8002300 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	441a      	add	r2, r3
 80022e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80022ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e113      	b.n	800252c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d121      	bne.n	8002352 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002328:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800233e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800234e:	b29b      	uxth	r3, r3
 8002350:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	f040 80be 	bne.w	80024da <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002366:	441a      	add	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002374:	441a      	add	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d309      	bcc.n	800239a <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	621a      	str	r2, [r3, #32]
 8002398:	e015      	b.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80023a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80023a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023b0:	e009      	b.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d15f      	bne.n	8002494 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023e8:	4413      	add	r3, r2
 80023ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	00da      	lsls	r2, r3, #3
 80023f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023f4:	4413      	add	r3, r2
 80023f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80023fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002406:	b29a      	uxth	r2, r3
 8002408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002420:	b29a      	uxth	r2, r3
 8002422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	e04e      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800242a:	2b3e      	cmp	r3, #62	@ 0x3e
 800242c:	d816      	bhi.n	800245c <HAL_PCD_EP_DB_Transmit+0x7a0>
 800242e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	663b      	str	r3, [r7, #96]	@ 0x60
 8002434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_PCD_EP_DB_Transmit+0x788>
 800243e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002440:	3301      	adds	r3, #1
 8002442:	663b      	str	r3, [r7, #96]	@ 0x60
 8002444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29a      	uxth	r2, r3
 800244a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800244c:	b29b      	uxth	r3, r3
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	b29b      	uxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b29a      	uxth	r2, r3
 8002456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	e034      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800245c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	663b      	str	r3, [r7, #96]	@ 0x60
 8002462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800246c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246e:	3b01      	subs	r3, #1
 8002470:	663b      	str	r3, [r7, #96]	@ 0x60
 8002472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
 8002478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800247a:	b29b      	uxth	r3, r3
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	b29b      	uxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248c:	b29a      	uxth	r2, r3
 800248e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e018      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d114      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024aa:	4413      	add	r3, r2
 80024ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	00da      	lsls	r2, r3, #3
 80024b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024b6:	4413      	add	r3, r2
 80024b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6959      	ldr	r1, [r3, #20]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	895a      	ldrh	r2, [r3, #10]
 80024d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f003 fb36 	bl	8005b46 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024f4:	82fb      	strh	r3, [r7, #22]
 80024f6:	8afb      	ldrh	r3, [r7, #22]
 80024f8:	f083 0310 	eor.w	r3, r3, #16
 80024fc:	82fb      	strh	r3, [r7, #22]
 80024fe:	8afb      	ldrh	r3, [r7, #22]
 8002500:	f083 0320 	eor.w	r3, r3, #32
 8002504:	82fb      	strh	r3, [r7, #22]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	8afb      	ldrh	r3, [r7, #22]
 8002516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800251a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800251e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002526:	b29b      	uxth	r3, r3
 8002528:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3798      	adds	r7, #152	@ 0x98
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	817b      	strh	r3, [r7, #10]
 8002542:	4613      	mov	r3, r2
 8002544:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002546:	897b      	ldrh	r3, [r7, #10]
 8002548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	f003 0207 	and.w	r2, r3, #7
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	3310      	adds	r3, #16
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e009      	b.n	800257e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800256a:	897a      	ldrh	r2, [r7, #10]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800257e:	893b      	ldrh	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	80da      	strh	r2, [r3, #6]
 8002592:	e00b      	b.n	80025ac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2201      	movs	r2, #1
 8002598:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	b29a      	uxth	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d141      	bne.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262a:	d131      	bne.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800262c:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002632:	4a46      	ldr	r2, [pc, #280]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002638:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800263c:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002644:	4a41      	ldr	r2, [pc, #260]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800264a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800264c:	4b40      	ldr	r3, [pc, #256]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2232      	movs	r2, #50	@ 0x32
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a3f      	ldr	r2, [pc, #252]	@ (8002754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002662:	e002      	b.n	800266a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3b01      	subs	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002676:	d102      	bne.n	800267e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f2      	bne.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267e:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268a:	d158      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e057      	b.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002690:	4b2e      	ldr	r3, [pc, #184]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002696:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800269c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026a0:	e04d      	b.n	800273e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a8:	d141      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026aa:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b6:	d131      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026be:	4a23      	ldr	r2, [pc, #140]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c8:	4b20      	ldr	r3, [pc, #128]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026d0:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2232      	movs	r2, #50	@ 0x32
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	3301      	adds	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ee:	e002      	b.n	80026f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002702:	d102      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f2      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002716:	d112      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e011      	b.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002722:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800272c:	e007      	b.n	800273e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002736:	4a05      	ldr	r2, [pc, #20]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800273c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40007000 	.word	0x40007000
 8002750:	20000000 	.word	0x20000000
 8002754:	431bde83 	.word	0x431bde83

08002758 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002766:	6093      	str	r3, [r2, #8]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e2fe      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d075      	beq.n	8002882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b97      	ldr	r3, [pc, #604]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a0:	4b94      	ldr	r3, [pc, #592]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d102      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3e>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_OscConfig+0x44>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d10b      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	4b8d      	ldr	r3, [pc, #564]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d05b      	beq.n	8002880 <HAL_RCC_OscConfig+0x108>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d157      	bne.n	8002880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e2d9      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x74>
 80027de:	4b85      	ldr	r3, [pc, #532]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a84      	ldr	r2, [pc, #528]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e01d      	b.n	8002828 <HAL_RCC_OscConfig+0xb0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x98>
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7e      	ldr	r2, [pc, #504]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80027fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b7c      	ldr	r3, [pc, #496]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7b      	ldr	r2, [pc, #492]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0xb0>
 8002810:	4b78      	ldr	r3, [pc, #480]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a77      	ldr	r2, [pc, #476]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b75      	ldr	r3, [pc, #468]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a74      	ldr	r2, [pc, #464]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fd ff36 	bl	80006a0 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002838:	f7fd ff32 	bl	80006a0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	@ 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e29e      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0xc0>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fd ff22 	bl	80006a0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7fd ff1e 	bl	80006a0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	@ 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e28a      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002872:	4b60      	ldr	r3, [pc, #384]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0xe8>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d075      	beq.n	800297a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	4b59      	ldr	r3, [pc, #356]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002898:	4b56      	ldr	r3, [pc, #344]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_OscConfig+0x136>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d002      	beq.n	80028b4 <HAL_RCC_OscConfig+0x13c>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d11f      	bne.n	80028f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x154>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e25d      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4946      	ldr	r1, [pc, #280]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028e0:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <HAL_RCC_OscConfig+0x280>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe8f 	bl	8000608 <HAL_InitTick>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d043      	beq.n	8002978 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e249      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b3d      	ldr	r3, [pc, #244]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3c      	ldr	r2, [pc, #240]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fd feca 	bl	80006a0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002910:	f7fd fec6 	bl	80006a0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e232      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	492d      	ldr	r1, [pc, #180]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
 8002942:	e01a      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2a      	ldr	r2, [pc, #168]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 800294a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800294e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fd fea6 	bl	80006a0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002958:	f7fd fea2 	bl	80006a0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e20e      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800296a:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x1e0>
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d041      	beq.n	8002a0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002994:	4a17      	ldr	r2, [pc, #92]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fd fe7f 	bl	80006a0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fd fe7b 	bl	80006a0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1e7      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b8:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0ef      	beq.n	80029a6 <HAL_RCC_OscConfig+0x22e>
 80029c6:	e020      	b.n	8002a0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ce:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fd fe62 	bl	80006a0 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029de:	e00d      	b.n	80029fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e0:	f7fd fe5e 	bl	80006a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d906      	bls.n	80029fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1ca      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ea      	bne.n	80029e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80a6 	beq.w	8002b64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a1c:	4b84      	ldr	r3, [pc, #528]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2b4>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x2b6>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b7f      	ldr	r3, [pc, #508]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	4a7e      	ldr	r2, [pc, #504]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4e:	4b79      	ldr	r3, [pc, #484]	@ (8002c34 <HAL_RCC_OscConfig+0x4bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5a:	4b76      	ldr	r3, [pc, #472]	@ (8002c34 <HAL_RCC_OscConfig+0x4bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a75      	ldr	r2, [pc, #468]	@ (8002c34 <HAL_RCC_OscConfig+0x4bc>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fd fe1b 	bl	80006a0 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fd fe17 	bl	80006a0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e183      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	4b6c      	ldr	r3, [pc, #432]	@ (8002c34 <HAL_RCC_OscConfig+0x4bc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d108      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x32e>
 8002a94:	4b66      	ldr	r3, [pc, #408]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a65      	ldr	r2, [pc, #404]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa4:	e024      	b.n	8002af0 <HAL_RCC_OscConfig+0x378>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d110      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x358>
 8002aae:	4b60      	ldr	r3, [pc, #384]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002abe:	4b5c      	ldr	r3, [pc, #368]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ace:	e00f      	b.n	8002af0 <HAL_RCC_OscConfig+0x378>
 8002ad0:	4b57      	ldr	r3, [pc, #348]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	4a56      	ldr	r2, [pc, #344]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae0:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	4a52      	ldr	r2, [pc, #328]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fd fdd2 	bl	80006a0 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fd fdce 	bl	80006a0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e138      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b16:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ed      	beq.n	8002b00 <HAL_RCC_OscConfig+0x388>
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fd fdbb 	bl	80006a0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fd fdb7 	bl	80006a0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e121      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b44:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ed      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b52:	7ffb      	ldrb	r3, [r7, #31]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b35      	ldr	r3, [pc, #212]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	4a34      	ldr	r2, [pc, #208]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03c      	beq.n	8002bea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fd fd8a 	bl	80006a0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b90:	f7fd fd86 	bl	80006a0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0f2      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ef      	beq.n	8002b90 <HAL_RCC_OscConfig+0x418>
 8002bb0:	e01b      	b.n	8002bea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fd fd6d 	bl	80006a0 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bca:	f7fd fd69 	bl	80006a0 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0d5      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ef      	bne.n	8002bca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80c9 	beq.w	8002d86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	f000 8083 	beq.w	8002d08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d15e      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a08      	ldr	r2, [pc, #32]	@ (8002c30 <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fd fd43 	bl	80006a0 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1c:	e00c      	b.n	8002c38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fd fd3f 	bl	80006a0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d905      	bls.n	8002c38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0ab      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	4b55      	ldr	r3, [pc, #340]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ec      	bne.n	8002c1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c44:	4b52      	ldr	r3, [pc, #328]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	4b52      	ldr	r3, [pc, #328]	@ (8002d94 <HAL_RCC_OscConfig+0x61c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6a11      	ldr	r1, [r2, #32]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c54:	3a01      	subs	r2, #1
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c5e:	0212      	lsls	r2, r2, #8
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c66:	0852      	lsrs	r2, r2, #1
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0552      	lsls	r2, r2, #21
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0652      	lsls	r2, r2, #25
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c7e:	06d2      	lsls	r2, r2, #27
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4943      	ldr	r1, [pc, #268]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a40      	ldr	r2, [pc, #256]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c94:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a3d      	ldr	r2, [pc, #244]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fd fcfe 	bl	80006a0 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fd fcfa 	bl	80006a0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e066      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b35      	ldr	r3, [pc, #212]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x530>
 8002cc6:	e05e      	b.n	8002d86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b31      	ldr	r3, [pc, #196]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fd fce4 	bl	80006a0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fd fce0 	bl	80006a0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e04c      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4924      	ldr	r1, [pc, #144]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	60cb      	str	r3, [r1, #12]
 8002d06:	e03e      	b.n	8002d86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e039      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d14:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCC_OscConfig+0x618>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d12c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	3b01      	subs	r3, #1
 8002d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d123      	bne.n	8002d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d11b      	bne.n	8002d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d113      	bne.n	8002d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	3b01      	subs	r3, #1
 8002d68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	019f800c 	.word	0x019f800c
 8002d98:	feeefffc 	.word	0xfeeefffc

08002d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e11e      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b91      	ldr	r3, [pc, #580]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b8e      	ldr	r3, [pc, #568]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	498c      	ldr	r1, [pc, #560]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b8a      	ldr	r3, [pc, #552]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e106      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d073      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d129      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df8:	4b81      	ldr	r3, [pc, #516]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0f4      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e08:	f000 f966 	bl	80030d8 <RCC_GetSysClockFreqFromPLLSource>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4a7c      	ldr	r2, [pc, #496]	@ (8003004 <HAL_RCC_ClockConfig+0x268>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d93f      	bls.n	8002e96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e16:	4b7a      	ldr	r3, [pc, #488]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d033      	beq.n	8002e96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12f      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e36:	4b72      	ldr	r3, [pc, #456]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e3e:	4a70      	ldr	r2, [pc, #448]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e024      	b.n	8002e96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e54:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0c6      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	4b66      	ldr	r3, [pc, #408]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0be      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e74:	f000 f8ce 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4a61      	ldr	r2, [pc, #388]	@ (8003004 <HAL_RCC_ClockConfig+0x268>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d909      	bls.n	8002e96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e82:	4b5f      	ldr	r3, [pc, #380]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b5a      	ldr	r3, [pc, #360]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4957      	ldr	r1, [pc, #348]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fd fbfa 	bl	80006a0 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fd fbf6 	bl	80006a0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e095      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b4e      	ldr	r3, [pc, #312]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002efa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f08:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f10:	4a3b      	ldr	r2, [pc, #236]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4936      	ldr	r1, [pc, #216]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f32:	4b33      	ldr	r3, [pc, #204]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	4a32      	ldr	r2, [pc, #200]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d21d      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 020f 	bic.w	r2, r3, #15
 8002f54:	4929      	ldr	r1, [pc, #164]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f5c:	f7fd fba0 	bl	80006a0 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fd fb9c 	bl	80006a0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e03b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1ed      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f94:	4b1a      	ldr	r3, [pc, #104]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4917      	ldr	r1, [pc, #92]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fb2:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	490f      	ldr	r1, [pc, #60]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fc6:	f000 f825 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <HAL_RCC_ClockConfig+0x264>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	490c      	ldr	r1, [pc, #48]	@ (8003008 <HAL_RCC_ClockConfig+0x26c>)
 8002fd8:	5ccb      	ldrb	r3, [r1, r3]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <HAL_RCC_ClockConfig+0x270>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x274>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fb0c 	bl	8000608 <HAL_InitTick>
 8002ff0:	4603      	mov	r3, r0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40022000 	.word	0x40022000
 8003000:	40021000 	.word	0x40021000
 8003004:	04c4b400 	.word	0x04c4b400
 8003008:	08007f08 	.word	0x08007f08
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800301a:	4b2c      	ldr	r3, [pc, #176]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b04      	cmp	r3, #4
 8003024:	d102      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003026:	4b2a      	ldr	r3, [pc, #168]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e047      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d102      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003038:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e03e      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800303e:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d136      	bne.n	80030b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304a:	4b20      	ldr	r3, [pc, #128]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003054:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3301      	adds	r3, #1
 8003060:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003068:	4a1a      	ldr	r2, [pc, #104]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	0a12      	lsrs	r2, r2, #8
 8003076:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
      break;
 8003080:	e00c      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003082:	4a13      	ldr	r2, [pc, #76]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4a10      	ldr	r2, [pc, #64]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	0a12      	lsrs	r2, r2, #8
 8003090:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
      break;
 800309a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0e5b      	lsrs	r3, r3, #25
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e001      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030bc:	693b      	ldr	r3, [r7, #16]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	007a1200 	.word	0x007a1200

080030d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030de:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3301      	adds	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d10c      	bne.n	8003116 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030fc:	4a17      	ldr	r2, [pc, #92]	@ (800315c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003106:	68d2      	ldr	r2, [r2, #12]
 8003108:	0a12      	lsrs	r2, r2, #8
 800310a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	617b      	str	r3, [r7, #20]
    break;
 8003114:	e00c      	b.n	8003130 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003116:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4a0e      	ldr	r2, [pc, #56]	@ (8003158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	0a12      	lsrs	r2, r2, #8
 8003124:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    break;
 800312e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0e5b      	lsrs	r3, r3, #25
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	3301      	adds	r3, #1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800314a:	687b      	ldr	r3, [r7, #4]
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	007a1200 	.word	0x007a1200
 8003160:	00f42400 	.word	0x00f42400

08003164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800316c:	2300      	movs	r3, #0
 800316e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003170:	2300      	movs	r3, #0
 8003172:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8098 	beq.w	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b43      	ldr	r3, [pc, #268]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	4a3f      	ldr	r2, [pc, #252]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	@ 0x58
 800319e:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a39      	ldr	r2, [pc, #228]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ba:	f7fd fa71 	bl	80006a0 <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031c0:	e009      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fd fa6d 	bl	80006a0 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d902      	bls.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	74fb      	strb	r3, [r7, #19]
        break;
 80031d4:	e005      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d6:	4b30      	ldr	r3, [pc, #192]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d159      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01e      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	d019      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003204:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800320e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003210:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003216:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003220:	4b1c      	ldr	r3, [pc, #112]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	4a1b      	ldr	r2, [pc, #108]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003230:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fd fa2d 	bl	80006a0 <HAL_GetTick>
 8003246:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003248:	e00b      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fa29 	bl	80006a0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d902      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	74fb      	strb	r3, [r7, #19]
            break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003262:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ec      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	4903      	ldr	r1, [pc, #12]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800328c:	e008      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
 8003292:	e005      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a0:	7c7b      	ldrb	r3, [r7, #17]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4ba6      	ldr	r3, [pc, #664]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	4aa5      	ldr	r2, [pc, #660]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032be:	4ba0      	ldr	r3, [pc, #640]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	f023 0203 	bic.w	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	499c      	ldr	r1, [pc, #624]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e0:	4b97      	ldr	r3, [pc, #604]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	f023 020c 	bic.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4994      	ldr	r1, [pc, #592]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003302:	4b8f      	ldr	r3, [pc, #572]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003308:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	498b      	ldr	r1, [pc, #556]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003324:	4b86      	ldr	r3, [pc, #536]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4983      	ldr	r1, [pc, #524]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003346:	4b7e      	ldr	r3, [pc, #504]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	497a      	ldr	r1, [pc, #488]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003368:	4b75      	ldr	r3, [pc, #468]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	4972      	ldr	r1, [pc, #456]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338a:	4b6d      	ldr	r3, [pc, #436]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003390:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4969      	ldr	r1, [pc, #420]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ac:	4b64      	ldr	r3, [pc, #400]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4961      	ldr	r1, [pc, #388]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	4958      	ldr	r1, [pc, #352]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f0:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	4950      	ldr	r1, [pc, #320]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003410:	4b4b      	ldr	r3, [pc, #300]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a4a      	ldr	r2, [pc, #296]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800341a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003428:	4b45      	ldr	r3, [pc, #276]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	4942      	ldr	r1, [pc, #264]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003446:	d105      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003448:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a3c      	ldr	r2, [pc, #240]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003452:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003460:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	4934      	ldr	r1, [pc, #208]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800347e:	d105      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003480:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a2e      	ldr	r2, [pc, #184]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800348a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d015      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003498:	4b29      	ldr	r3, [pc, #164]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a6:	4926      	ldr	r1, [pc, #152]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034b6:	d105      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b8:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4a20      	ldr	r2, [pc, #128]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034de:	4918      	ldr	r1, [pc, #96]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ee:	d105      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f0:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003508:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003516:	490a      	ldr	r1, [pc, #40]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003532:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003534:	7cbb      	ldrb	r3, [r7, #18]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e049      	b.n	80035ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fc ffe4 	bl	8000538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f000 fad6 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a1a      	ldr	r2, [r3, #32]
 8003610:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_TIM_Base_Stop_IT+0x48>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	f244 4344 	movw	r3, #17476	@ 0x4444
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_TIM_Base_Stop_IT+0x48>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0202 	mvn.w	r2, #2
 8003684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa2c 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa1e 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa2f 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0204 	mvn.w	r2, #4
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa06 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9f8 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fa09 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0208 	mvn.w	r2, #8
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2204      	movs	r2, #4
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9e0 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9d2 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f9e3 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0210 	mvn.w	r2, #16
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2208      	movs	r2, #8
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f9ba 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9ac 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f9bd 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0201 	mvn.w	r2, #1
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc fd2e 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00c      	beq.n	80037ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fb69 	bl	8003ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00c      	beq.n	800380e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb61 	bl	8003ed0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00c      	beq.n	8003832 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f977 	bl	8003b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00c      	beq.n	8003856 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f06f 0220 	mvn.w	r2, #32
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fb29 	bl	8003ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00c      	beq.n	800387a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fb35 	bl	8003ee4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fb2d 	bl	8003ef8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb25 	bl	8003f0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fb1d 	bl	8003f20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIM_ConfigClockSource+0x1c>
 8003908:	2302      	movs	r3, #2
 800390a:	e0de      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x1da>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800392a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800392e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a63      	ldr	r2, [pc, #396]	@ (8003ad4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	f000 80a9 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800394c:	4a61      	ldr	r2, [pc, #388]	@ (8003ad4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	f200 80ae 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003954:	4a60      	ldr	r2, [pc, #384]	@ (8003ad8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	f000 80a1 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800395c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ad8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	f200 80a6 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003964:	4a5d      	ldr	r2, [pc, #372]	@ (8003adc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	f000 8099 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800396c:	4a5b      	ldr	r2, [pc, #364]	@ (8003adc <HAL_TIM_ConfigClockSource+0x1ec>)
 800396e:	4293      	cmp	r3, r2
 8003970:	f200 809e 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003974:	4a5a      	ldr	r2, [pc, #360]	@ (8003ae0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	f000 8091 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800397c:	4a58      	ldr	r2, [pc, #352]	@ (8003ae0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	f200 8096 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003984:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003988:	f000 8089 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 800398c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003990:	f200 808e 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003998:	d03e      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x128>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399e:	f200 8087 	bhi.w	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_TIM_ConfigClockSource+0x1c6>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ae:	d87f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039b0:	2b70      	cmp	r3, #112	@ 0x70
 80039b2:	d01a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xfa>
 80039b4:	2b70      	cmp	r3, #112	@ 0x70
 80039b6:	d87b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039b8:	2b60      	cmp	r3, #96	@ 0x60
 80039ba:	d050      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x16e>
 80039bc:	2b60      	cmp	r3, #96	@ 0x60
 80039be:	d877      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039c0:	2b50      	cmp	r3, #80	@ 0x50
 80039c2:	d03c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x14e>
 80039c4:	2b50      	cmp	r3, #80	@ 0x50
 80039c6:	d873      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d058      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x18e>
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	d86f      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039d0:	2b30      	cmp	r3, #48	@ 0x30
 80039d2:	d064      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80039d4:	2b30      	cmp	r3, #48	@ 0x30
 80039d6:	d86b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d060      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d867      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d05a      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x1ae>
 80039e8:	e062      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039fa:	f000 f9b3 	bl	8003d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	609a      	str	r2, [r3, #8]
      break;
 8003a16:	e04f      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a28:	f000 f99c 	bl	8003d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e03c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 f90e 	bl	8003c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2150      	movs	r1, #80	@ 0x50
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f967 	bl	8003d2a <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e02c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 f92d 	bl	8003cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2160      	movs	r1, #96	@ 0x60
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f957 	bl	8003d2a <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e01c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 f8ee 	bl	8003c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f947 	bl	8003d2a <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e00c      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f000 f93e 	bl	8003d2a <TIM_ITRx_SetConfig>
      break;
 8003aae:	e003      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	00100070 	.word	0x00100070
 8003ad8:	00100040 	.word	0x00100040
 8003adc:	00100030 	.word	0x00100030
 8003ae0:	00100020 	.word	0x00100020

08003ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a42      	ldr	r2, [pc, #264]	@ (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00f      	beq.n	8003b6c <TIM_Base_SetConfig+0x38>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b52:	d00b      	beq.n	8003b6c <TIM_Base_SetConfig+0x38>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3f      	ldr	r2, [pc, #252]	@ (8003c54 <TIM_Base_SetConfig+0x120>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <TIM_Base_SetConfig+0x38>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c58 <TIM_Base_SetConfig+0x124>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_Base_SetConfig+0x38>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	@ (8003c5c <TIM_Base_SetConfig+0x128>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d108      	bne.n	8003b7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a33      	ldr	r2, [pc, #204]	@ (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01b      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8c:	d017      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a30      	ldr	r2, [pc, #192]	@ (8003c54 <TIM_Base_SetConfig+0x120>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	@ (8003c58 <TIM_Base_SetConfig+0x124>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00f      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c5c <TIM_Base_SetConfig+0x128>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c60 <TIM_Base_SetConfig+0x12c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c64 <TIM_Base_SetConfig+0x130>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0x8a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003c68 <TIM_Base_SetConfig+0x134>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0xe8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <TIM_Base_SetConfig+0x128>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0xe8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <TIM_Base_SetConfig+0x12c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0xe8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <TIM_Base_SetConfig+0x130>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0xe8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a14      	ldr	r2, [pc, #80]	@ (8003c68 <TIM_Base_SetConfig+0x134>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d103      	bne.n	8003c24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]
  }
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 030a 	bic.w	r3, r3, #10
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0210 	bic.w	r2, r3, #16
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	031b      	lsls	r3, r3, #12
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f043 0307 	orr.w	r3, r3, #7
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e065      	b.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003df6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d018      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e32:	d013      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10c      	bne.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40014000 	.word	0x40014000

08003ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f44:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003f48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f6a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003f6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4013      	ands	r3, r2
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	1d3b      	adds	r3, r7, #4
 8003fa2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b0a7      	sub	sp, #156	@ 0x9c
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d81f      	bhi.n	8004046 <USB_ActivateEndpoint+0x72>
 8004006:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <USB_ActivateEndpoint+0x38>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	0800401d 	.word	0x0800401d
 8004010:	08004039 	.word	0x08004039
 8004014:	0800404f 	.word	0x0800404f
 8004018:	0800402b 	.word	0x0800402b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800401c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004024:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004028:	e012      	b.n	8004050 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800402a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800402e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004032:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004036:	e00b      	b.n	8004050 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004038:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800403c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004040:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004044:	e004      	b.n	8004050 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800404c:	e000      	b.n	8004050 <USB_ActivateEndpoint+0x7c>
      break;
 800404e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800405e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800406a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	b21b      	sxth	r3, r3
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408a:	b21a      	sxth	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b21b      	sxth	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b21b      	sxth	r3, r3
 8004096:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	7b1b      	ldrb	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 8180 	bne.w	80043c6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8084 	beq.w	80041d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	00da      	lsls	r2, r3, #3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	88db      	ldrh	r3, [r3, #6]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	827b      	strh	r3, [r7, #18]
 8004112:	8a7b      	ldrh	r3, [r7, #18]
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <USB_ActivateEndpoint+0x180>
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800412e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004132:	823b      	strh	r3, [r7, #16]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	8a3b      	ldrh	r3, [r7, #16]
 8004140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800414c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004150:	b29b      	uxth	r3, r3
 8004152:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d020      	beq.n	800419e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004172:	81bb      	strh	r3, [r7, #12]
 8004174:	89bb      	ldrh	r3, [r7, #12]
 8004176:	f083 0320 	eor.w	r3, r3, #32
 800417a:	81bb      	strh	r3, [r7, #12]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	89bb      	ldrh	r3, [r7, #12]
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]
 800419c:	e3f9      	b.n	8004992 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b4:	81fb      	strh	r3, [r7, #14]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	441a      	add	r2, r3
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]
 80041d6:	e3dc      	b.n	8004992 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	4413      	add	r3, r2
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	00da      	lsls	r2, r3, #3
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	4413      	add	r3, r2
 80041f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	88db      	ldrh	r3, [r3, #6]
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	4413      	add	r3, r2
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	00da      	lsls	r2, r3, #3
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	4413      	add	r3, r2
 800422a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423a:	b29a      	uxth	r2, r3
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <USB_ActivateEndpoint+0x28a>
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004256:	b29a      	uxth	r2, r3
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e041      	b.n	80042e2 <USB_ActivateEndpoint+0x30e>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b3e      	cmp	r3, #62	@ 0x3e
 8004264:	d81c      	bhi.n	80042a0 <USB_ActivateEndpoint+0x2cc>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <USB_ActivateEndpoint+0x2b2>
 800427c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004280:	3301      	adds	r3, #1
 8004282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29a      	uxth	r2, r3
 800428c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004290:	b29b      	uxth	r3, r3
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	b29b      	uxth	r3, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	b29a      	uxth	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	e020      	b.n	80042e2 <USB_ActivateEndpoint+0x30e>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <USB_ActivateEndpoint+0x2ec>
 80042b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ba:	3b01      	subs	r3, #1
 80042bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	029b      	lsls	r3, r3, #10
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80042f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80042f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01b      	beq.n	8004332 <USB_ActivateEndpoint+0x35e>
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004310:	843b      	strh	r3, [r7, #32]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	441a      	add	r2, r3
 800431c:	8c3b      	ldrh	r3, [r7, #32]
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004326:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800432a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d124      	bne.n	8004384 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800434c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004350:	83bb      	strh	r3, [r7, #28]
 8004352:	8bbb      	ldrh	r3, [r7, #28]
 8004354:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004358:	83bb      	strh	r3, [r7, #28]
 800435a:	8bbb      	ldrh	r3, [r7, #28]
 800435c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004360:	83bb      	strh	r3, [r7, #28]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	8bbb      	ldrh	r3, [r7, #28]
 800436e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800437a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437e:	b29b      	uxth	r3, r3
 8004380:	8013      	strh	r3, [r2, #0]
 8004382:	e306      	b.n	8004992 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	83fb      	strh	r3, [r7, #30]
 800439c:	8bfb      	ldrh	r3, [r7, #30]
 800439e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043a2:	83fb      	strh	r3, [r7, #30]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	8bfb      	ldrh	r3, [r7, #30]
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
 80043c4:	e2e5      	b.n	8004992 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	78db      	ldrb	r3, [r3, #3]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d11e      	bne.n	800440c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80043f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004406:	b29b      	uxth	r3, r3
 8004408:	8013      	strh	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8004434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800443c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004458:	4413      	add	r3, r2
 800445a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	00da      	lsls	r2, r3, #3
 8004462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004464:	4413      	add	r3, r2
 8004466:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800446a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	891b      	ldrh	r3, [r3, #8]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	b29b      	uxth	r3, r3
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800448c:	4413      	add	r3, r2
 800448e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	00da      	lsls	r2, r3, #3
 8004496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004498:	4413      	add	r3, r2
 800449a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800449e:	673b      	str	r3, [r7, #112]	@ 0x70
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	895b      	ldrh	r3, [r3, #10]
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 81af 	bne.w	8004818 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80044ca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80044ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01d      	beq.n	8004512 <USB_ActivateEndpoint+0x53e>
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ec:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004506:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800450a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8004522:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01d      	beq.n	800456a <USB_ActivateEndpoint+0x596>
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004544:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800455a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004562:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004566:	b29b      	uxth	r3, r3
 8004568:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d16b      	bne.n	800464a <USB_ActivateEndpoint+0x676>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800457c:	b29b      	uxth	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004582:	4413      	add	r3, r2
 8004584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	00da      	lsls	r2, r3, #3
 800458c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458e:	4413      	add	r3, r2
 8004590:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <USB_ActivateEndpoint+0x5f0>
 80045ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	e05d      	b.n	8004680 <USB_ActivateEndpoint+0x6ac>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80045ca:	d81c      	bhi.n	8004606 <USB_ActivateEndpoint+0x632>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <USB_ActivateEndpoint+0x618>
 80045e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e6:	3301      	adds	r3, #1
 80045e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e03c      	b.n	8004680 <USB_ActivateEndpoint+0x6ac>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <USB_ActivateEndpoint+0x652>
 800461c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004620:	3b01      	subs	r3, #1
 8004622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29a      	uxth	r2, r3
 800462c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004630:	b29b      	uxth	r3, r3
 8004632:	029b      	lsls	r3, r3, #10
 8004634:	b29b      	uxth	r3, r3
 8004636:	4313      	orrs	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004642:	b29a      	uxth	r2, r3
 8004644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e01a      	b.n	8004680 <USB_ActivateEndpoint+0x6ac>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d116      	bne.n	8004680 <USB_ActivateEndpoint+0x6ac>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	657b      	str	r3, [r7, #84]	@ 0x54
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004662:	4413      	add	r3, r2
 8004664:	657b      	str	r3, [r7, #84]	@ 0x54
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	00da      	lsls	r2, r3, #3
 800466c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466e:	4413      	add	r3, r2
 8004670:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004674:	653b      	str	r3, [r7, #80]	@ 0x50
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	b29a      	uxth	r2, r3
 800467c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800467e:	801a      	strh	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	647b      	str	r3, [r7, #68]	@ 0x44
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d16b      	bne.n	8004764 <USB_ActivateEndpoint+0x790>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800469c:	4413      	add	r3, r2
 800469e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	00da      	lsls	r2, r3, #3
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a8:	4413      	add	r3, r2
 80046aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <USB_ActivateEndpoint+0x70a>
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	e05b      	b.n	8004796 <USB_ActivateEndpoint+0x7c2>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80046e4:	d81c      	bhi.n	8004720 <USB_ActivateEndpoint+0x74c>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <USB_ActivateEndpoint+0x732>
 80046fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004700:	3301      	adds	r3, #1
 8004702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29a      	uxth	r2, r3
 800470c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004710:	b29b      	uxth	r3, r3
 8004712:	029b      	lsls	r3, r3, #10
 8004714:	b29b      	uxth	r3, r3
 8004716:	4313      	orrs	r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e03a      	b.n	8004796 <USB_ActivateEndpoint+0x7c2>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <USB_ActivateEndpoint+0x76c>
 8004736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800473a:	3b01      	subs	r3, #1
 800473c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29a      	uxth	r2, r3
 8004746:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29b      	uxth	r3, r3
 8004750:	4313      	orrs	r3, r2
 8004752:	b29b      	uxth	r3, r3
 8004754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475c:	b29a      	uxth	r2, r3
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	e018      	b.n	8004796 <USB_ActivateEndpoint+0x7c2>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d114      	bne.n	8004796 <USB_ActivateEndpoint+0x7c2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004778:	4413      	add	r3, r2
 800477a:	647b      	str	r3, [r7, #68]	@ 0x44
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	00da      	lsls	r2, r3, #3
 8004782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004784:	4413      	add	r3, r2
 8004786:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800478a:	643b      	str	r3, [r7, #64]	@ 0x40
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	b29a      	uxth	r2, r3
 8004792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004794:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80047ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80047b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80047b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800480a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004812:	b29b      	uxth	r3, r3
 8004814:	8013      	strh	r3, [r2, #0]
 8004816:	e0bc      	b.n	8004992 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8004828:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800482c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01d      	beq.n	8004870 <USB_ActivateEndpoint+0x89c>
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004880:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01d      	beq.n	80048c8 <USB_ActivateEndpoint+0x8f4>
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	78db      	ldrb	r3, [r3, #3]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d024      	beq.n	800491a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048e6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80048ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80048ee:	f083 0320 	eor.w	r3, r3, #32
 80048f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004914:	b29b      	uxth	r3, r3
 8004916:	8013      	strh	r3, [r2, #0]
 8004918:	e01d      	b.n	8004956 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004930:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800498a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004992:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8004996:	4618      	mov	r0, r3
 8004998:	379c      	adds	r7, #156	@ 0x9c
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop

080049a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b08d      	sub	sp, #52	@ 0x34
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	7b1b      	ldrb	r3, [r3, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 808e 	bne.w	8004ad4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d044      	beq.n	8004a4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	81bb      	strh	r3, [r7, #12]
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01b      	beq.n	8004a10 <USB_DeactivateEndpoint+0x6c>
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ee:	817b      	strh	r3, [r7, #10]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a26:	813b      	strh	r3, [r7, #8]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	893b      	ldrh	r3, [r7, #8]
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
 8004a48:	e192      	b.n	8004d70 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	827b      	strh	r3, [r7, #18]
 8004a58:	8a7b      	ldrh	r3, [r7, #18]
 8004a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01b      	beq.n	8004a9a <USB_DeactivateEndpoint+0xf6>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a78:	823b      	strh	r3, [r7, #16]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	8a3b      	ldrh	r3, [r7, #16]
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab0:	81fb      	strh	r3, [r7, #14]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	89fb      	ldrh	r3, [r7, #14]
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
 8004ad2:	e14d      	b.n	8004d70 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 80a5 	bne.w	8004c28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	843b      	strh	r3, [r7, #32]
 8004aec:	8c3b      	ldrh	r3, [r7, #32]
 8004aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01b      	beq.n	8004b2e <USB_DeactivateEndpoint+0x18a>
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0c:	83fb      	strh	r3, [r7, #30]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8bfb      	ldrh	r3, [r7, #30]
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	83bb      	strh	r3, [r7, #28]
 8004b3c:	8bbb      	ldrh	r3, [r7, #28]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01b      	beq.n	8004b7e <USB_DeactivateEndpoint+0x1da>
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5c:	837b      	strh	r3, [r7, #26]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8b7b      	ldrh	r3, [r7, #26]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b94:	833b      	strh	r3, [r7, #24]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	8b3b      	ldrh	r3, [r7, #24]
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bcc:	82fb      	strh	r3, [r7, #22]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8afb      	ldrh	r3, [r7, #22]
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c04:	82bb      	strh	r3, [r7, #20]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	8abb      	ldrh	r3, [r7, #20]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]
 8004c26:	e0a3      	b.n	8004d70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004c36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <USB_DeactivateEndpoint+0x2d4>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004c86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <USB_DeactivateEndpoint+0x324>
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3734      	adds	r7, #52	@ 0x34
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b0ac      	sub	sp, #176	@ 0xb0
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f040 84ca 	bne.w	8005726 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d904      	bls.n	8004da8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004da6:	e003      	b.n	8004db0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7b1b      	ldrb	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d122      	bne.n	8004dfe <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6959      	ldr	r1, [r3, #20]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	88da      	ldrh	r2, [r3, #6]
 8004dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 febd 	bl	8005b46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	00da      	lsls	r2, r3, #3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	f000 bc6f 	b.w	80056dc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	78db      	ldrb	r3, [r3, #3]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	f040 831e 	bne.w	8005444 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	f240 82cf 	bls.w	80053b4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 814f 	beq.w	8005116 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d16b      	bne.n	8004f5c <USB_EPStartXfer+0x1de>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	4413      	add	r3, r2
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	00da      	lsls	r2, r3, #3
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <USB_EPStartXfer+0x158>
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e05b      	b.n	8004f8e <USB_EPStartXfer+0x210>
 8004ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8004edc:	d81c      	bhi.n	8004f18 <USB_EPStartXfer+0x19a>
 8004ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <USB_EPStartXfer+0x180>
 8004ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	029b      	lsls	r3, r3, #10
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e03a      	b.n	8004f8e <USB_EPStartXfer+0x210>
 8004f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <USB_EPStartXfer+0x1ba>
 8004f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f32:	3b01      	subs	r3, #1
 8004f34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e018      	b.n	8004f8e <USB_EPStartXfer+0x210>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d114      	bne.n	8004f8e <USB_EPStartXfer+0x210>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	4413      	add	r3, r2
 8004f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	00da      	lsls	r2, r3, #3
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	895b      	ldrh	r3, [r3, #10]
 8004f92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6959      	ldr	r1, [r3, #20]
 8004f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fdce 	bl	8005b46 <USB_WritePMA>
            ep->xfer_buff += len;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fb2:	441a      	add	r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6a1a      	ldr	r2, [r3, #32]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d907      	bls.n	8004fd4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	621a      	str	r2, [r3, #32]
 8004fd2:	e006      	b.n	8004fe2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d16b      	bne.n	80050c2 <USB_EPStartXfer+0x344>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	4413      	add	r3, r2
 8005008:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005018:	b29a      	uxth	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <USB_EPStartXfer+0x2be>
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e05d      	b.n	80050f8 <USB_EPStartXfer+0x37a>
 800503c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005040:	2b3e      	cmp	r3, #62	@ 0x3e
 8005042:	d81c      	bhi.n	800507e <USB_EPStartXfer+0x300>
 8005044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800504e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <USB_EPStartXfer+0x2e6>
 800505a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800505e:	3301      	adds	r3, #1
 8005060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800506e:	b29b      	uxth	r3, r3
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	b29b      	uxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b29a      	uxth	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e03c      	b.n	80050f8 <USB_EPStartXfer+0x37a>
 800507e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <USB_EPStartXfer+0x320>
 8005094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005098:	3b01      	subs	r3, #1
 800509a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e01a      	b.n	80050f8 <USB_EPStartXfer+0x37a>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d116      	bne.n	80050f8 <USB_EPStartXfer+0x37a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	4413      	add	r3, r2
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	00da      	lsls	r2, r3, #3
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	891b      	ldrh	r3, [r3, #8]
 80050fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6959      	ldr	r1, [r3, #20]
 8005104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005108:	b29b      	uxth	r3, r3
 800510a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fd19 	bl	8005b46 <USB_WritePMA>
 8005114:	e2e2      	b.n	80056dc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d16b      	bne.n	80051f6 <USB_EPStartXfer+0x478>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800512e:	4413      	add	r3, r2
 8005130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	00da      	lsls	r2, r3, #3
 8005138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513a:	4413      	add	r3, r2
 800513c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
 8005142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514c:	b29a      	uxth	r2, r3
 800514e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <USB_EPStartXfer+0x3f2>
 800515a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005168:	b29a      	uxth	r2, r3
 800516a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	e05d      	b.n	800522c <USB_EPStartXfer+0x4ae>
 8005170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005174:	2b3e      	cmp	r3, #62	@ 0x3e
 8005176:	d81c      	bhi.n	80051b2 <USB_EPStartXfer+0x434>
 8005178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <USB_EPStartXfer+0x41a>
 800518e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005192:	3301      	adds	r3, #1
 8005194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4313      	orrs	r3, r2
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	e03c      	b.n	800522c <USB_EPStartXfer+0x4ae>
 80051b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <USB_EPStartXfer+0x454>
 80051c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051cc:	3b01      	subs	r3, #1
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051dc:	b29b      	uxth	r3, r3
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e01a      	b.n	800522c <USB_EPStartXfer+0x4ae>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d116      	bne.n	800522c <USB_EPStartXfer+0x4ae>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	653b      	str	r3, [r7, #80]	@ 0x50
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800520e:	4413      	add	r3, r2
 8005210:	653b      	str	r3, [r7, #80]	@ 0x50
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	00da      	lsls	r2, r3, #3
 8005218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521a:	4413      	add	r3, r2
 800521c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005226:	b29a      	uxth	r2, r3
 8005228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800522a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	891b      	ldrh	r3, [r3, #8]
 8005230:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6959      	ldr	r1, [r3, #20]
 8005238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800523c:	b29b      	uxth	r3, r3
 800523e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fc7f 	bl	8005b46 <USB_WritePMA>
            ep->xfer_buff += len;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005250:	441a      	add	r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	429a      	cmp	r2, r3
 8005260:	d907      	bls.n	8005272 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6a1a      	ldr	r2, [r3, #32]
 8005266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	621a      	str	r2, [r3, #32]
 8005270:	e006      	b.n	8005280 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	643b      	str	r3, [r7, #64]	@ 0x40
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d16b      	bne.n	8005364 <USB_EPStartXfer+0x5e6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005296:	b29b      	uxth	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	4413      	add	r3, r2
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	00da      	lsls	r2, r3, #3
 80052a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <USB_EPStartXfer+0x560>
 80052c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e05b      	b.n	8005396 <USB_EPStartXfer+0x618>
 80052de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80052e4:	d81c      	bhi.n	8005320 <USB_EPStartXfer+0x5a2>
 80052e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <USB_EPStartXfer+0x588>
 80052fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005300:	3301      	adds	r3, #1
 8005302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29b      	uxth	r3, r3
 8005316:	4313      	orrs	r3, r2
 8005318:	b29a      	uxth	r2, r3
 800531a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e03a      	b.n	8005396 <USB_EPStartXfer+0x618>
 8005320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800532a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <USB_EPStartXfer+0x5c2>
 8005336:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800533a:	3b01      	subs	r3, #1
 800533c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29a      	uxth	r2, r3
 8005346:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800534a:	b29b      	uxth	r3, r3
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	b29b      	uxth	r3, r3
 8005350:	4313      	orrs	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535c:	b29a      	uxth	r2, r3
 800535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e018      	b.n	8005396 <USB_EPStartXfer+0x618>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d114      	bne.n	8005396 <USB_EPStartXfer+0x618>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005378:	4413      	add	r3, r2
 800537a:	643b      	str	r3, [r7, #64]	@ 0x40
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	00da      	lsls	r2, r3, #3
 8005382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005384:	4413      	add	r3, r2
 8005386:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800538c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005390:	b29a      	uxth	r2, r3
 8005392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	895b      	ldrh	r3, [r3, #10]
 800539a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6959      	ldr	r1, [r3, #20]
 80053a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fbca 	bl	8005b46 <USB_WritePMA>
 80053b2:	e193      	b.n	80056dc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005408:	4413      	add	r3, r2
 800540a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	00da      	lsls	r2, r3, #3
 8005412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005414:	4413      	add	r3, r2
 8005416:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800541a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800541c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005420:	b29a      	uxth	r2, r3
 8005422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005424:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	891b      	ldrh	r3, [r3, #8]
 800542a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6959      	ldr	r1, [r3, #20]
 8005432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005436:	b29b      	uxth	r3, r3
 8005438:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fb82 	bl	8005b46 <USB_WritePMA>
 8005442:	e14b      	b.n	80056dc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800544c:	1ad2      	subs	r2, r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 809a 	beq.w	800559e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	673b      	str	r3, [r7, #112]	@ 0x70
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d16b      	bne.n	800554e <USB_EPStartXfer+0x7d0>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005486:	4413      	add	r3, r2
 8005488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	00da      	lsls	r2, r3, #3
 8005490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005492:	4413      	add	r3, r2
 8005494:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005498:	667b      	str	r3, [r7, #100]	@ 0x64
 800549a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <USB_EPStartXfer+0x74a>
 80054b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e05b      	b.n	8005580 <USB_EPStartXfer+0x802>
 80054c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ce:	d81c      	bhi.n	800550a <USB_EPStartXfer+0x78c>
 80054d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <USB_EPStartXfer+0x772>
 80054e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054ea:	3301      	adds	r3, #1
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29b      	uxth	r3, r3
 8005500:	4313      	orrs	r3, r2
 8005502:	b29a      	uxth	r2, r3
 8005504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	e03a      	b.n	8005580 <USB_EPStartXfer+0x802>
 800550a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <USB_EPStartXfer+0x7ac>
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005524:	3b01      	subs	r3, #1
 8005526:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800552a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29a      	uxth	r2, r3
 8005530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005534:	b29b      	uxth	r3, r3
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	b29b      	uxth	r3, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005546:	b29a      	uxth	r2, r3
 8005548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e018      	b.n	8005580 <USB_EPStartXfer+0x802>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d114      	bne.n	8005580 <USB_EPStartXfer+0x802>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555c:	b29b      	uxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005562:	4413      	add	r3, r2
 8005564:	673b      	str	r3, [r7, #112]	@ 0x70
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	00da      	lsls	r2, r3, #3
 800556c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800556e:	4413      	add	r3, r2
 8005570:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005574:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800557a:	b29a      	uxth	r2, r3
 800557c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	895b      	ldrh	r3, [r3, #10]
 8005584:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6959      	ldr	r1, [r3, #20]
 800558c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005590:	b29b      	uxth	r3, r3
 8005592:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fad5 	bl	8005b46 <USB_WritePMA>
 800559c:	e09e      	b.n	80056dc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d16b      	bne.n	800567e <USB_EPStartXfer+0x900>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055b6:	4413      	add	r3, r2
 80055b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	00da      	lsls	r2, r3, #3
 80055c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d8:	801a      	strh	r2, [r3, #0]
 80055da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <USB_EPStartXfer+0x87a>
 80055e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	e063      	b.n	80056c0 <USB_EPStartXfer+0x942>
 80055f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80055fe:	d81c      	bhi.n	800563a <USB_EPStartXfer+0x8bc>
 8005600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800560a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <USB_EPStartXfer+0x8a2>
 8005616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800561a:	3301      	adds	r3, #1
 800561c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29b      	uxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b29a      	uxth	r2, r3
 8005634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	e042      	b.n	80056c0 <USB_EPStartXfer+0x942>
 800563a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <USB_EPStartXfer+0x8dc>
 8005650:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005654:	3b01      	subs	r3, #1
 8005656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800565a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29a      	uxth	r2, r3
 8005660:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29b      	uxth	r3, r3
 800566a:	4313      	orrs	r3, r2
 800566c:	b29b      	uxth	r3, r3
 800566e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005676:	b29a      	uxth	r2, r3
 8005678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e020      	b.n	80056c0 <USB_EPStartXfer+0x942>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d11c      	bne.n	80056c0 <USB_EPStartXfer+0x942>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800569a:	4413      	add	r3, r2
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00da      	lsls	r2, r3, #3
 80056a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	891b      	ldrh	r3, [r3, #8]
 80056c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6959      	ldr	r1, [r3, #20]
 80056cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa35 	bl	8005b46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f2:	817b      	strh	r3, [r7, #10]
 80056f4:	897b      	ldrh	r3, [r7, #10]
 80056f6:	f083 0310 	eor.w	r3, r3, #16
 80056fa:	817b      	strh	r3, [r7, #10]
 80056fc:	897b      	ldrh	r3, [r7, #10]
 80056fe:	f083 0320 	eor.w	r3, r3, #32
 8005702:	817b      	strh	r3, [r7, #10]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	441a      	add	r2, r3
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800571c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005720:	b29b      	uxth	r3, r3
 8005722:	8013      	strh	r3, [r2, #0]
 8005724:	e0d5      	b.n	80058d2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	7b1b      	ldrb	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d156      	bne.n	80057dc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d122      	bne.n	800577c <USB_EPStartXfer+0x9fe>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	78db      	ldrb	r3, [r3, #3]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11e      	bne.n	800577c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005754:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800576a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800576e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005776:	b29b      	uxth	r3, r3
 8005778:	8013      	strh	r3, [r2, #0]
 800577a:	e01d      	b.n	80057b8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800578e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005792:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	441a      	add	r2, r3
 80057a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d907      	bls.n	80057d4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	619a      	str	r2, [r3, #24]
 80057d2:	e054      	b.n	800587e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]
 80057da:	e050      	b.n	800587e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d142      	bne.n	800586a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d048      	beq.n	800587e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <USB_EPStartXfer+0xa96>
 8005808:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005814:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800581c:	2b00      	cmp	r3, #0
 800581e:	d12e      	bne.n	800587e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005820:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d128      	bne.n	800587e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005842:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8005854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800585c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005860:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005864:	b29b      	uxth	r3, r3
 8005866:	8013      	strh	r3, [r2, #0]
 8005868:	e009      	b.n	800587e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d103      	bne.n	800587a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	619a      	str	r2, [r3, #24]
 8005878:	e001      	b.n	800587e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e02a      	b.n	80058d4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005894:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005898:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800589c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80058a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80058a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80058be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	37b0      	adds	r7, #176	@ 0xb0
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d020      	beq.n	8005930 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005904:	81bb      	strh	r3, [r7, #12]
 8005906:	89bb      	ldrh	r3, [r7, #12]
 8005908:	f083 0310 	eor.w	r3, r3, #16
 800590c:	81bb      	strh	r3, [r7, #12]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	89bb      	ldrh	r3, [r7, #12]
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
 800592e:	e01f      	b.n	8005970 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005946:	81fb      	strh	r3, [r7, #14]
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800594e:	81fb      	strh	r3, [r7, #14]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	89fb      	ldrh	r3, [r7, #14]
 800595c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800597e:	b480      	push	{r7}
 8005980:	b087      	sub	sp, #28
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d04c      	beq.n	8005a2a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	823b      	strh	r3, [r7, #16]
 800599e:	8a3b      	ldrh	r3, [r7, #16]
 80059a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01b      	beq.n	80059e0 <USB_EPClearStall+0x62>
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	81fb      	strh	r3, [r7, #14]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	441a      	add	r2, r3
 80059ca:	89fb      	ldrh	r3, [r7, #14]
 80059cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059dc:	b29b      	uxth	r3, r3
 80059de:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d06c      	beq.n	8005ac2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fe:	81bb      	strh	r3, [r7, #12]
 8005a00:	89bb      	ldrh	r3, [r7, #12]
 8005a02:	f083 0320 	eor.w	r3, r3, #32
 8005a06:	81bb      	strh	r3, [r7, #12]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	89bb      	ldrh	r3, [r7, #12]
 8005a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8013      	strh	r3, [r2, #0]
 8005a28:	e04b      	b.n	8005ac2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	82fb      	strh	r3, [r7, #22]
 8005a38:	8afb      	ldrh	r3, [r7, #22]
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01b      	beq.n	8005a7a <USB_EPClearStall+0xfc>
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a58:	82bb      	strh	r3, [r7, #20]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	8abb      	ldrh	r3, [r7, #20]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a90:	827b      	strh	r3, [r7, #18]
 8005a92:	8a7b      	ldrh	r3, [r7, #18]
 8005a94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a98:	827b      	strh	r3, [r7, #18]
 8005a9a:	8a7b      	ldrh	r3, [r7, #18]
 8005a9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005aa0:	827b      	strh	r3, [r7, #18]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	8a7b      	ldrh	r3, [r7, #18]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2280      	movs	r2, #128	@ 0x80
 8005ae6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b08b      	sub	sp, #44	@ 0x2c
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	4611      	mov	r1, r2
 8005b52:	461a      	mov	r2, r3
 8005b54:	460b      	mov	r3, r1
 8005b56:	80fb      	strh	r3, [r7, #6]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b5c:	88bb      	ldrh	r3, [r7, #4]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b76:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7c:	e01b      	b.n	8005bb6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	b21a      	sxth	r2, r3
 8005b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	b21b      	sxth	r3, r3
 8005b96:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	8a7a      	ldrh	r2, [r7, #18]
 8005b9c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e0      	bne.n	8005b7e <USB_WritePMA+0x38>
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	372c      	adds	r7, #44	@ 0x2c
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b08b      	sub	sp, #44	@ 0x2c
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	460b      	mov	r3, r1
 8005bda:	80fb      	strh	r3, [r7, #6]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005be0:	88bb      	ldrh	r3, [r7, #4]
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bfa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c00:	e018      	b.n	8005c34 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	3b01      	subs	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e3      	bne.n	8005c02 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005c3a:	88bb      	ldrh	r3, [r7, #4]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	701a      	strb	r2, [r3, #0]
  }
}
 8005c56:	bf00      	nop
 8005c58:	372c      	adds	r7, #44	@ 0x2c
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c6e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005c72:	f002 f8a3 	bl	8007dbc <USBD_static_malloc>
 8005c76:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c86:	2302      	movs	r3, #2
 8005c88:	e066      	b.n	8005d58 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7c1b      	ldrb	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d119      	bne.n	8005cce <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	2181      	movs	r1, #129	@ 0x81
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 ff31 	bl	8007b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 ff27 	bl	8007b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8005ccc:	e016      	b.n	8005cfc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cce:	2340      	movs	r3, #64	@ 0x40
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	2181      	movs	r1, #129	@ 0x81
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 ff18 	bl	8007b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ce0:	2340      	movs	r3, #64	@ 0x40
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 ff0f 	bl	8007b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	2203      	movs	r2, #3
 8005d00:	2182      	movs	r1, #130	@ 0x82
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 ff01 	bl	8007b0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7c1b      	ldrb	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 ffd2 	bl	8007ce8 <USBD_LL_PrepareReceive>
 8005d44:	e007      	b.n	8005d56 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d4c:	2340      	movs	r3, #64	@ 0x40
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 ffc9 	bl	8007ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d6c:	2181      	movs	r1, #129	@ 0x81
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fef1 	bl	8007b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 feea 	bl	8007b56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d8a:	2182      	movs	r1, #130	@ 0x82
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 fee2 	bl	8007b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f002 f80b 	bl	8007dd8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005de4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0af      	b.n	8005f5c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d03f      	beq.n	8005e88 <USBD_CDC_Setup+0xb4>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	f040 809f 	bne.w	8005f4c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	88db      	ldrh	r3, [r3, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02e      	beq.n	8005e74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	b25b      	sxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da16      	bge.n	8005e4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005e2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	88d2      	ldrh	r2, [r2, #6]
 8005e32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	88db      	ldrh	r3, [r3, #6]
 8005e38:	2b07      	cmp	r3, #7
 8005e3a:	bf28      	it	cs
 8005e3c:	2307      	movcs	r3, #7
 8005e3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	89fa      	ldrh	r2, [r7, #14]
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 fa9d 	bl	8007386 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e4c:	e085      	b.n	8005f5a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	785a      	ldrb	r2, [r3, #1]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	88db      	ldrh	r3, [r3, #6]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e64:	6939      	ldr	r1, [r7, #16]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	88db      	ldrh	r3, [r3, #6]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 fab6 	bl	80073de <USBD_CtlPrepareRx>
      break;
 8005e72:	e072      	b.n	8005f5a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	7850      	ldrb	r0, [r2, #1]
 8005e80:	2200      	movs	r2, #0
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	4798      	blx	r3
      break;
 8005e86:	e068      	b.n	8005f5a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b0b      	cmp	r3, #11
 8005e8e:	d852      	bhi.n	8005f36 <USBD_CDC_Setup+0x162>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <USBD_CDC_Setup+0xc4>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ec9 	.word	0x08005ec9
 8005e9c:	08005f45 	.word	0x08005f45
 8005ea0:	08005f37 	.word	0x08005f37
 8005ea4:	08005f37 	.word	0x08005f37
 8005ea8:	08005f37 	.word	0x08005f37
 8005eac:	08005f37 	.word	0x08005f37
 8005eb0:	08005f37 	.word	0x08005f37
 8005eb4:	08005f37 	.word	0x08005f37
 8005eb8:	08005f37 	.word	0x08005f37
 8005ebc:	08005f37 	.word	0x08005f37
 8005ec0:	08005ef3 	.word	0x08005ef3
 8005ec4:	08005f1d 	.word	0x08005f1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d107      	bne.n	8005ee4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ed4:	f107 030a 	add.w	r3, r7, #10
 8005ed8:	2202      	movs	r2, #2
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fa52 	bl	8007386 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ee2:	e032      	b.n	8005f4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 f9dc 	bl	80072a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eec:	2303      	movs	r3, #3
 8005eee:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef0:	e02b      	b.n	8005f4a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d107      	bne.n	8005f0e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005efe:	f107 030d 	add.w	r3, r7, #13
 8005f02:	2201      	movs	r2, #1
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 fa3d 	bl	8007386 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f0c:	e01d      	b.n	8005f4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f9c7 	bl	80072a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f16:	2303      	movs	r3, #3
 8005f18:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1a:	e016      	b.n	8005f4a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d00f      	beq.n	8005f48 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 f9ba 	bl	80072a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f30:	2303      	movs	r3, #3
 8005f32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f34:	e008      	b.n	8005f48 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 f9b3 	bl	80072a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	75fb      	strb	r3, [r7, #23]
          break;
 8005f42:	e002      	b.n	8005f4a <USBD_CDC_Setup+0x176>
          break;
 8005f44:	bf00      	nop
 8005f46:	e008      	b.n	8005f5a <USBD_CDC_Setup+0x186>
          break;
 8005f48:	bf00      	nop
      }
      break;
 8005f4a:	e006      	b.n	8005f5a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 f9a8 	bl	80072a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f54:	2303      	movs	r3, #3
 8005f56:	75fb      	strb	r3, [r7, #23]
      break;
 8005f58:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005f76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e04f      	b.n	8006026 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d029      	beq.n	8005ff8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3318      	adds	r3, #24
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	78f9      	ldrb	r1, [r7, #3]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4403      	add	r3, r0
 8005fc4:	3320      	adds	r3, #32
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d110      	bne.n	8005ff8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3318      	adds	r3, #24
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fea:	78f9      	ldrb	r1, [r7, #3]
 8005fec:	2300      	movs	r3, #0
 8005fee:	2200      	movs	r2, #0
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fe58 	bl	8007ca6 <USBD_LL_Transmit>
 8005ff6:	e015      	b.n	8006024 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006040:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800604c:	2303      	movs	r3, #3
 800604e:	e015      	b.n	800607c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe68 	bl	8007d2a <USBD_LL_GetRxDataSize>
 800605a:	4602      	mov	r2, r0
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006076:	4611      	mov	r1, r2
 8006078:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006092:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800609a:	2303      	movs	r3, #3
 800609c:	e01a      	b.n	80060d4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d014      	beq.n	80060d2 <USBD_CDC_EP0_RxReady+0x4e>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80060ae:	2bff      	cmp	r3, #255	@ 0xff
 80060b0:	d00f      	beq.n	80060d2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80060c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	22ff      	movs	r2, #255	@ 0xff
 80060ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2243      	movs	r2, #67	@ 0x43
 80060e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060ea:	4b03      	ldr	r3, [pc, #12]	@ (80060f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	20000094 	.word	0x20000094

080060fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2243      	movs	r2, #67	@ 0x43
 8006108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800610a:	4b03      	ldr	r3, [pc, #12]	@ (8006118 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	20000050 	.word	0x20000050

0800611c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2243      	movs	r2, #67	@ 0x43
 8006128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800612a:	4b03      	ldr	r3, [pc, #12]	@ (8006138 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	200000d8 	.word	0x200000d8

0800613c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	220a      	movs	r2, #10
 8006148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800614a:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	2000000c 	.word	0x2000000c

0800615c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	e004      	b.n	800617a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006186:	b480      	push	{r7}
 8006188:	b087      	sub	sp, #28
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006198:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e008      	b.n	80061b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	e004      	b.n	80061e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006202:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800620e:	2303      	movs	r3, #3
 8006210:	e016      	b.n	8006240 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7c1b      	ldrb	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006224:	2101      	movs	r1, #1
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fd5e 	bl	8007ce8 <USBD_LL_PrepareReceive>
 800622c:	e007      	b.n	800623e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006234:	2340      	movs	r3, #64	@ 0x40
 8006236:	2101      	movs	r1, #1
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fd55 	bl	8007ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800625c:	2303      	movs	r3, #3
 800625e:	e01f      	b.n	80062a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	79fa      	ldrb	r2, [r7, #7]
 8006292:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 fbbd 	bl	8007a14 <USBD_LL_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	e016      	b.n	80062ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	f107 020e 	add.w	r2, r7, #14
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fbe8 	bl	8007ad4 <USBD_LL_Start>
 8006304:	4603      	mov	r3, r0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
 800634e:	4603      	mov	r3, r0
 8006350:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	4611      	mov	r1, r2
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
  }

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 ff46 	bl	8007230 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d01a      	beq.n	80063fe <USBD_LL_SetupStage+0x72>
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d822      	bhi.n	8006412 <USBD_LL_SetupStage+0x86>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <USBD_LL_SetupStage+0x4a>
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d00a      	beq.n	80063ea <USBD_LL_SetupStage+0x5e>
 80063d4:	e01d      	b.n	8006412 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9ee 	bl	80067c0 <USBD_StdDevReq>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e020      	b.n	800642c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fa52 	bl	800689c <USBD_StdItfReq>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e016      	b.n	800642c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa91 	bl	800692e <USBD_StdEPReq>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e00c      	b.n	800642c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006418:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fbb7 	bl	8007b94 <USBD_LL_StallEP>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]
      break;
 800642a:	bf00      	nop
  }

  return ret;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	460b      	mov	r3, r1
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d138      	bne.n	80064bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006450:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006458:	2b03      	cmp	r3, #3
 800645a:	d14a      	bne.n	80064f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d913      	bls.n	8006490 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4293      	cmp	r3, r2
 8006480:	bf28      	it	cs
 8006482:	4613      	movcs	r3, r2
 8006484:	461a      	mov	r2, r3
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 ffc5 	bl	8007418 <USBD_CtlContinueRx>
 800648e:	e030      	b.n	80064f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d10b      	bne.n	80064b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 ffc0 	bl	800743a <USBD_CtlSendStatus>
 80064ba:	e01a      	b.n	80064f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d114      	bne.n	80064f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	7afa      	ldrb	r2, [r7, #11]
 80064de:	4611      	mov	r1, r2
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	4798      	blx	r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	e000      	b.n	80064f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	460b      	mov	r3, r1
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d16b      	bne.n	80065e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3314      	adds	r3, #20
 8006514:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800651c:	2b02      	cmp	r3, #2
 800651e:	d156      	bne.n	80065ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	429a      	cmp	r2, r3
 800652a:	d914      	bls.n	8006556 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	461a      	mov	r2, r3
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 ff3a 	bl	80073bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006548:	2300      	movs	r3, #0
 800654a:	2200      	movs	r2, #0
 800654c:	2100      	movs	r1, #0
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f001 fbca 	bl	8007ce8 <USBD_LL_PrepareReceive>
 8006554:	e03b      	b.n	80065ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	d11c      	bne.n	800659c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800656a:	429a      	cmp	r2, r3
 800656c:	d316      	bcc.n	800659c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006578:	429a      	cmp	r2, r3
 800657a:	d20f      	bcs.n	800659c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800657c:	2200      	movs	r2, #0
 800657e:	2100      	movs	r1, #0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 ff1b 	bl	80073bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800658e:	2300      	movs	r3, #0
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f001 fba7 	bl	8007ce8 <USBD_LL_PrepareReceive>
 800659a:	e018      	b.n	80065ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d10b      	bne.n	80065c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065c0:	2180      	movs	r1, #128	@ 0x80
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f001 fae6 	bl	8007b94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 ff49 	bl	8007460 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d122      	bne.n	800661e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff fe98 	bl	800630e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80065e6:	e01a      	b.n	800661e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d114      	bne.n	800661e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	7afa      	ldrb	r2, [r7, #11]
 800660a:	4611      	mov	r1, r2
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	4798      	blx	r3
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	e000      	b.n	8006620 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	e02f      	b.n	80066bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6852      	ldr	r2, [r2, #4]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	4611      	mov	r1, r2
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006686:	2340      	movs	r3, #64	@ 0x40
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fa3c 	bl	8007b0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2240      	movs	r2, #64	@ 0x40
 800669e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066a2:	2340      	movs	r3, #64	@ 0x40
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	@ 0x80
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fa2e 	bl	8007b0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2240      	movs	r2, #64	@ 0x40
 80066b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b04      	cmp	r3, #4
 8006722:	d106      	bne.n	8006732 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800672a:	b2da      	uxtb	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006752:	2303      	movs	r3, #3
 8006754:	e012      	b.n	800677c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b03      	cmp	r3, #3
 8006760:	d10b      	bne.n	800677a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	3301      	adds	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067a2:	8a3b      	ldrh	r3, [r7, #16]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	b21a      	sxth	r2, r3
 80067a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	b21b      	sxth	r3, r3
 80067b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067b2:	89fb      	ldrh	r3, [r7, #14]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067d6:	2b40      	cmp	r3, #64	@ 0x40
 80067d8:	d005      	beq.n	80067e6 <USBD_StdDevReq+0x26>
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	d853      	bhi.n	8006886 <USBD_StdDevReq+0xc6>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <USBD_StdDevReq+0x3a>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d14f      	bne.n	8006886 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
      break;
 80067f8:	e04a      	b.n	8006890 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	2b09      	cmp	r3, #9
 8006800:	d83b      	bhi.n	800687a <USBD_StdDevReq+0xba>
 8006802:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <USBD_StdDevReq+0x48>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800685d 	.word	0x0800685d
 800680c:	08006871 	.word	0x08006871
 8006810:	0800687b 	.word	0x0800687b
 8006814:	08006867 	.word	0x08006867
 8006818:	0800687b 	.word	0x0800687b
 800681c:	0800683b 	.word	0x0800683b
 8006820:	08006831 	.word	0x08006831
 8006824:	0800687b 	.word	0x0800687b
 8006828:	08006853 	.word	0x08006853
 800682c:	08006845 	.word	0x08006845
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9de 	bl	8006bf4 <USBD_GetDescriptor>
          break;
 8006838:	e024      	b.n	8006884 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb6d 	bl	8006f1c <USBD_SetAddress>
          break;
 8006842:	e01f      	b.n	8006884 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fbac 	bl	8006fa4 <USBD_SetConfig>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
          break;
 8006850:	e018      	b.n	8006884 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fc4b 	bl	80070f0 <USBD_GetConfig>
          break;
 800685a:	e013      	b.n	8006884 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fc7c 	bl	800715c <USBD_GetStatus>
          break;
 8006864:	e00e      	b.n	8006884 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fcab 	bl	80071c4 <USBD_SetFeature>
          break;
 800686e:	e009      	b.n	8006884 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fcba 	bl	80071ec <USBD_ClrFeature>
          break;
 8006878:	e004      	b.n	8006884 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fd11 	bl	80072a4 <USBD_CtlError>
          break;
 8006882:	bf00      	nop
      }
      break;
 8006884:	e004      	b.n	8006890 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fd0b 	bl	80072a4 <USBD_CtlError>
      break;
 800688e:	bf00      	nop
  }

  return ret;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop

0800689c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068b2:	2b40      	cmp	r3, #64	@ 0x40
 80068b4:	d005      	beq.n	80068c2 <USBD_StdItfReq+0x26>
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d82f      	bhi.n	800691a <USBD_StdItfReq+0x7e>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <USBD_StdItfReq+0x26>
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d12b      	bne.n	800691a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d81d      	bhi.n	800690c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	889b      	ldrh	r3, [r3, #4]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d813      	bhi.n	8006902 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	88db      	ldrh	r3, [r3, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d110      	bne.n	8006916 <USBD_StdItfReq+0x7a>
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fd9d 	bl	800743a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006900:	e009      	b.n	8006916 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fccd 	bl	80072a4 <USBD_CtlError>
          break;
 800690a:	e004      	b.n	8006916 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fcc8 	bl	80072a4 <USBD_CtlError>
          break;
 8006914:	e000      	b.n	8006918 <USBD_StdItfReq+0x7c>
          break;
 8006916:	bf00      	nop
      }
      break;
 8006918:	e004      	b.n	8006924 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fcc1 	bl	80072a4 <USBD_CtlError>
      break;
 8006922:	bf00      	nop
  }

  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	889b      	ldrh	r3, [r3, #4]
 8006940:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800694a:	2b40      	cmp	r3, #64	@ 0x40
 800694c:	d007      	beq.n	800695e <USBD_StdEPReq+0x30>
 800694e:	2b40      	cmp	r3, #64	@ 0x40
 8006950:	f200 8145 	bhi.w	8006bde <USBD_StdEPReq+0x2b0>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <USBD_StdEPReq+0x44>
 8006958:	2b20      	cmp	r3, #32
 800695a:	f040 8140 	bne.w	8006bde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]
      break;
 8006970:	e13a      	b.n	8006be8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d007      	beq.n	800698a <USBD_StdEPReq+0x5c>
 800697a:	2b03      	cmp	r3, #3
 800697c:	f300 8129 	bgt.w	8006bd2 <USBD_StdEPReq+0x2a4>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d07f      	beq.n	8006a84 <USBD_StdEPReq+0x156>
 8006984:	2b01      	cmp	r3, #1
 8006986:	d03c      	beq.n	8006a02 <USBD_StdEPReq+0xd4>
 8006988:	e123      	b.n	8006bd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d002      	beq.n	800699c <USBD_StdEPReq+0x6e>
 8006996:	2b03      	cmp	r3, #3
 8006998:	d016      	beq.n	80069c8 <USBD_StdEPReq+0x9a>
 800699a:	e02c      	b.n	80069f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <USBD_StdEPReq+0x90>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b80      	cmp	r3, #128	@ 0x80
 80069a6:	d00a      	beq.n	80069be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f8f1 	bl	8007b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069b2:	2180      	movs	r1, #128	@ 0x80
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f8ed 	bl	8007b94 <USBD_LL_StallEP>
 80069ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069bc:	e020      	b.n	8006a00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc6f 	bl	80072a4 <USBD_CtlError>
              break;
 80069c6:	e01b      	b.n	8006a00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	885b      	ldrh	r3, [r3, #2]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10e      	bne.n	80069ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <USBD_StdEPReq+0xc0>
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b80      	cmp	r3, #128	@ 0x80
 80069da:	d008      	beq.n	80069ee <USBD_StdEPReq+0xc0>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	88db      	ldrh	r3, [r3, #6]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 f8d3 	bl	8007b94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd23 	bl	800743a <USBD_CtlSendStatus>

              break;
 80069f4:	e004      	b.n	8006a00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc53 	bl	80072a4 <USBD_CtlError>
              break;
 80069fe:	bf00      	nop
          }
          break;
 8006a00:	e0ec      	b.n	8006bdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d002      	beq.n	8006a14 <USBD_StdEPReq+0xe6>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d016      	beq.n	8006a40 <USBD_StdEPReq+0x112>
 8006a12:	e030      	b.n	8006a76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <USBD_StdEPReq+0x108>
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b80      	cmp	r3, #128	@ 0x80
 8006a1e:	d00a      	beq.n	8006a36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f8b5 	bl	8007b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a2a:	2180      	movs	r1, #128	@ 0x80
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f8b1 	bl	8007b94 <USBD_LL_StallEP>
 8006a32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a34:	e025      	b.n	8006a82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fc33 	bl	80072a4 <USBD_CtlError>
              break;
 8006a3e:	e020      	b.n	8006a82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11b      	bne.n	8006a80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f8bb 	bl	8007bd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fcec 	bl	800743a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006a74:	e004      	b.n	8006a80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fc13 	bl	80072a4 <USBD_CtlError>
              break;
 8006a7e:	e000      	b.n	8006a82 <USBD_StdEPReq+0x154>
              break;
 8006a80:	bf00      	nop
          }
          break;
 8006a82:	e0ab      	b.n	8006bdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d002      	beq.n	8006a96 <USBD_StdEPReq+0x168>
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d032      	beq.n	8006afa <USBD_StdEPReq+0x1cc>
 8006a94:	e097      	b.n	8006bc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <USBD_StdEPReq+0x17e>
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b80      	cmp	r3, #128	@ 0x80
 8006aa0:	d004      	beq.n	8006aac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fbfd 	bl	80072a4 <USBD_CtlError>
                break;
 8006aaa:	e091      	b.n	8006bd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da0b      	bge.n	8006acc <USBD_StdEPReq+0x19e>
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	3310      	adds	r3, #16
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3304      	adds	r3, #4
 8006aca:	e00b      	b.n	8006ae4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2202      	movs	r2, #2
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fc47 	bl	8007386 <USBD_CtlSendData>
              break;
 8006af8:	e06a      	b.n	8006bd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006afa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da11      	bge.n	8006b26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3324      	adds	r3, #36	@ 0x24
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d117      	bne.n	8006b4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fbc0 	bl	80072a4 <USBD_CtlError>
                  break;
 8006b24:	e054      	b.n	8006bd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fbad 	bl	80072a4 <USBD_CtlError>
                  break;
 8006b4a:	e041      	b.n	8006bd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da0b      	bge.n	8006b6c <USBD_StdEPReq+0x23e>
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	3310      	adds	r3, #16
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	4413      	add	r3, r2
 8006b68:	3304      	adds	r3, #4
 8006b6a:	e00b      	b.n	8006b84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4413      	add	r3, r2
 8006b82:	3304      	adds	r3, #4
 8006b84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <USBD_StdEPReq+0x264>
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b80      	cmp	r3, #128	@ 0x80
 8006b90:	d103      	bne.n	8006b9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e00e      	b.n	8006bb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 f836 	bl	8007c10 <USBD_LL_IsStallEP>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2201      	movs	r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	e002      	b.n	8006bb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fbe1 	bl	8007386 <USBD_CtlSendData>
              break;
 8006bc4:	e004      	b.n	8006bd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fb6b 	bl	80072a4 <USBD_CtlError>
              break;
 8006bce:	bf00      	nop
          }
          break;
 8006bd0:	e004      	b.n	8006bdc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fb65 	bl	80072a4 <USBD_CtlError>
          break;
 8006bda:	bf00      	nop
      }
      break;
 8006bdc:	e004      	b.n	8006be8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fb5f 	bl	80072a4 <USBD_CtlError>
      break;
 8006be6:	bf00      	nop
  }

  return ret;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2b0e      	cmp	r3, #14
 8006c16:	f200 8152 	bhi.w	8006ebe <USBD_GetDescriptor+0x2ca>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <USBD_GetDescriptor+0x2c>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c91 	.word	0x08006c91
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006ce9 	.word	0x08006ce9
 8006c2c:	08006ebf 	.word	0x08006ebf
 8006c30:	08006ebf 	.word	0x08006ebf
 8006c34:	08006e5f 	.word	0x08006e5f
 8006c38:	08006e8b 	.word	0x08006e8b
 8006c3c:	08006ebf 	.word	0x08006ebf
 8006c40:	08006ebf 	.word	0x08006ebf
 8006c44:	08006ebf 	.word	0x08006ebf
 8006c48:	08006ebf 	.word	0x08006ebf
 8006c4c:	08006ebf 	.word	0x08006ebf
 8006c50:	08006ebf 	.word	0x08006ebf
 8006c54:	08006ebf 	.word	0x08006ebf
 8006c58:	08006c5d 	.word	0x08006c5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	7c12      	ldrb	r2, [r2, #16]
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4798      	blx	r3
 8006c7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c7e:	e126      	b.n	8006ece <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb0e 	bl	80072a4 <USBD_CtlError>
        err++;
 8006c88:	7afb      	ldrb	r3, [r7, #11]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c8e:	e11e      	b.n	8006ece <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7c12      	ldrb	r2, [r2, #16]
 8006c9c:	f107 0108 	add.w	r1, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
      break;
 8006ca6:	e112      	b.n	8006ece <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	7c1b      	ldrb	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb8:	f107 0208 	add.w	r2, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cca:	e100      	b.n	8006ece <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	f107 0208 	add.w	r2, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	e0f2      	b.n	8006ece <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	885b      	ldrh	r3, [r3, #2]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b05      	cmp	r3, #5
 8006cf0:	f200 80ac 	bhi.w	8006e4c <USBD_GetDescriptor+0x258>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <USBD_GetDescriptor+0x108>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d15 	.word	0x08006d15
 8006d00:	08006d49 	.word	0x08006d49
 8006d04:	08006d7d 	.word	0x08006d7d
 8006d08:	08006db1 	.word	0x08006db1
 8006d0c:	08006de5 	.word	0x08006de5
 8006d10:	08006e19 	.word	0x08006e19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	7c12      	ldrb	r2, [r2, #16]
 8006d2c:	f107 0108 	add.w	r1, r7, #8
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d36:	e091      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fab2 	bl	80072a4 <USBD_CtlError>
            err++;
 8006d40:	7afb      	ldrb	r3, [r7, #11]
 8006d42:	3301      	adds	r3, #1
 8006d44:	72fb      	strb	r3, [r7, #11]
          break;
 8006d46:	e089      	b.n	8006e5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7c12      	ldrb	r2, [r2, #16]
 8006d60:	f107 0108 	add.w	r1, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d6a:	e077      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa98 	bl	80072a4 <USBD_CtlError>
            err++;
 8006d74:	7afb      	ldrb	r3, [r7, #11]
 8006d76:	3301      	adds	r3, #1
 8006d78:	72fb      	strb	r3, [r7, #11]
          break;
 8006d7a:	e06f      	b.n	8006e5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	7c12      	ldrb	r2, [r2, #16]
 8006d94:	f107 0108 	add.w	r1, r7, #8
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4798      	blx	r3
 8006d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d9e:	e05d      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa7e 	bl	80072a4 <USBD_CtlError>
            err++;
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	3301      	adds	r3, #1
 8006dac:	72fb      	strb	r3, [r7, #11]
          break;
 8006dae:	e055      	b.n	8006e5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	7c12      	ldrb	r2, [r2, #16]
 8006dc8:	f107 0108 	add.w	r1, r7, #8
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
 8006dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dd2:	e043      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa64 	bl	80072a4 <USBD_CtlError>
            err++;
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	3301      	adds	r3, #1
 8006de0:	72fb      	strb	r3, [r7, #11]
          break;
 8006de2:	e03b      	b.n	8006e5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	7c12      	ldrb	r2, [r2, #16]
 8006dfc:	f107 0108 	add.w	r1, r7, #8
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e06:	e029      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa4a 	bl	80072a4 <USBD_CtlError>
            err++;
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	3301      	adds	r3, #1
 8006e14:	72fb      	strb	r3, [r7, #11]
          break;
 8006e16:	e021      	b.n	8006e5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	7c12      	ldrb	r2, [r2, #16]
 8006e30:	f107 0108 	add.w	r1, r7, #8
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3a:	e00f      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa30 	bl	80072a4 <USBD_CtlError>
            err++;
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	3301      	adds	r3, #1
 8006e48:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4a:	e007      	b.n	8006e5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa28 	bl	80072a4 <USBD_CtlError>
          err++;
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	3301      	adds	r3, #1
 8006e58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006e5a:	bf00      	nop
      }
      break;
 8006e5c:	e037      	b.n	8006ece <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7c1b      	ldrb	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6e:	f107 0208 	add.w	r2, r7, #8
 8006e72:	4610      	mov	r0, r2
 8006e74:	4798      	blx	r3
 8006e76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e78:	e029      	b.n	8006ece <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa11 	bl	80072a4 <USBD_CtlError>
        err++;
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	3301      	adds	r3, #1
 8006e86:	72fb      	strb	r3, [r7, #11]
      break;
 8006e88:	e021      	b.n	8006ece <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	7c1b      	ldrb	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10d      	bne.n	8006eae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9a:	f107 0208 	add.w	r2, r7, #8
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4798      	blx	r3
 8006ea2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	2207      	movs	r2, #7
 8006eaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eac:	e00f      	b.n	8006ece <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f9f7 	bl	80072a4 <USBD_CtlError>
        err++;
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	72fb      	strb	r3, [r7, #11]
      break;
 8006ebc:	e007      	b.n	8006ece <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9ef 	bl	80072a4 <USBD_CtlError>
      err++;
 8006ec6:	7afb      	ldrb	r3, [r7, #11]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	72fb      	strb	r3, [r7, #11]
      break;
 8006ecc:	bf00      	nop
  }

  if (err != 0U)
 8006ece:	7afb      	ldrb	r3, [r7, #11]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11e      	bne.n	8006f12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	88db      	ldrh	r3, [r3, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d016      	beq.n	8006f0a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006edc:	893b      	ldrh	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00e      	beq.n	8006f00 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88da      	ldrh	r2, [r3, #6]
 8006ee6:	893b      	ldrh	r3, [r7, #8]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bf28      	it	cs
 8006eec:	4613      	movcs	r3, r2
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ef2:	893b      	ldrh	r3, [r7, #8]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa44 	bl	8007386 <USBD_CtlSendData>
 8006efe:	e009      	b.n	8006f14 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f9ce 	bl	80072a4 <USBD_CtlError>
 8006f08:	e004      	b.n	8006f14 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa95 	bl	800743a <USBD_CtlSendStatus>
 8006f10:	e000      	b.n	8006f14 <USBD_GetDescriptor+0x320>
    return;
 8006f12:	bf00      	nop
  }
}
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop

08006f1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	889b      	ldrh	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d131      	bne.n	8006f92 <USBD_SetAddress+0x76>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	88db      	ldrh	r3, [r3, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d12d      	bne.n	8006f92 <USBD_SetAddress+0x76>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	885b      	ldrh	r3, [r3, #2]
 8006f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f3c:	d829      	bhi.n	8006f92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	885b      	ldrh	r3, [r3, #2]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d104      	bne.n	8006f60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f9a3 	bl	80072a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	e01d      	b.n	8006f9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7bfa      	ldrb	r2, [r7, #15]
 8006f64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fe7b 	bl	8007c68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa61 	bl	800743a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	e009      	b.n	8006f9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f90:	e004      	b.n	8006f9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f985 	bl	80072a4 <USBD_CtlError>
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80070ec <USBD_SetConfig+0x148>)
 8006fba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80070ec <USBD_SetConfig+0x148>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d905      	bls.n	8006fd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f96c 	bl	80072a4 <USBD_CtlError>
    return USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e088      	b.n	80070e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d002      	beq.n	8006fe2 <USBD_SetConfig+0x3e>
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d025      	beq.n	800702c <USBD_SetConfig+0x88>
 8006fe0:	e071      	b.n	80070c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006fe2:	4b42      	ldr	r3, [pc, #264]	@ (80070ec <USBD_SetConfig+0x148>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01c      	beq.n	8007024 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006fea:	4b40      	ldr	r3, [pc, #256]	@ (80070ec <USBD_SetConfig+0x148>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80070ec <USBD_SetConfig+0x148>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff f992 	bl	8006324 <USBD_SetClassConfig>
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f949 	bl	80072a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007012:	e065      	b.n	80070e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fa10 	bl	800743a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2203      	movs	r2, #3
 800701e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007022:	e05d      	b.n	80070e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fa08 	bl	800743a <USBD_CtlSendStatus>
      break;
 800702a:	e059      	b.n	80070e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800702c:	4b2f      	ldr	r3, [pc, #188]	@ (80070ec <USBD_SetConfig+0x148>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d112      	bne.n	800705a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800703c:	4b2b      	ldr	r3, [pc, #172]	@ (80070ec <USBD_SetConfig+0x148>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007046:	4b29      	ldr	r3, [pc, #164]	@ (80070ec <USBD_SetConfig+0x148>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff f985 	bl	800635c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f9f1 	bl	800743a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007058:	e042      	b.n	80070e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800705a:	4b24      	ldr	r3, [pc, #144]	@ (80070ec <USBD_SetConfig+0x148>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d02a      	beq.n	80070be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff f973 	bl	800635c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007076:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <USBD_SetConfig+0x148>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007080:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <USBD_SetConfig+0x148>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff f94c 	bl	8006324 <USBD_SetClassConfig>
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00f      	beq.n	80070b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f903 	bl	80072a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff f958 	bl	800635c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80070b4:	e014      	b.n	80070e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f9bf 	bl	800743a <USBD_CtlSendStatus>
      break;
 80070bc:	e010      	b.n	80070e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9bb 	bl	800743a <USBD_CtlSendStatus>
      break;
 80070c4:	e00c      	b.n	80070e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8eb 	bl	80072a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070ce:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <USBD_SetConfig+0x148>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff f941 	bl	800635c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070da:	2303      	movs	r3, #3
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	bf00      	nop
  }

  return ret;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200001f0 	.word	0x200001f0

080070f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	88db      	ldrh	r3, [r3, #6]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d004      	beq.n	800710c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8cd 	bl	80072a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800710a:	e023      	b.n	8007154 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	dc02      	bgt.n	800711e <USBD_GetConfig+0x2e>
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc03      	bgt.n	8007124 <USBD_GetConfig+0x34>
 800711c:	e015      	b.n	800714a <USBD_GetConfig+0x5a>
 800711e:	2b03      	cmp	r3, #3
 8007120:	d00b      	beq.n	800713a <USBD_GetConfig+0x4a>
 8007122:	e012      	b.n	800714a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3308      	adds	r3, #8
 800712e:	2201      	movs	r2, #1
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f927 	bl	8007386 <USBD_CtlSendData>
        break;
 8007138:	e00c      	b.n	8007154 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	2201      	movs	r2, #1
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f91f 	bl	8007386 <USBD_CtlSendData>
        break;
 8007148:	e004      	b.n	8007154 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f8a9 	bl	80072a4 <USBD_CtlError>
        break;
 8007152:	bf00      	nop
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800716c:	b2db      	uxtb	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	2b02      	cmp	r3, #2
 8007172:	d81e      	bhi.n	80071b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	88db      	ldrh	r3, [r3, #6]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d004      	beq.n	8007186 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f890 	bl	80072a4 <USBD_CtlError>
        break;
 8007184:	e01a      	b.n	80071bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f043 0202 	orr.w	r2, r3, #2
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	330c      	adds	r3, #12
 80071a6:	2202      	movs	r2, #2
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8eb 	bl	8007386 <USBD_CtlSendData>
      break;
 80071b0:	e004      	b.n	80071bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f875 	bl	80072a4 <USBD_CtlError>
      break;
 80071ba:	bf00      	nop
  }
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	885b      	ldrh	r3, [r3, #2]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d106      	bne.n	80071e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f92b 	bl	800743a <USBD_CtlSendStatus>
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b02      	cmp	r3, #2
 8007202:	d80b      	bhi.n	800721c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	885b      	ldrh	r3, [r3, #2]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10c      	bne.n	8007226 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f910 	bl	800743a <USBD_CtlSendStatus>
      }
      break;
 800721a:	e004      	b.n	8007226 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f840 	bl	80072a4 <USBD_CtlError>
      break;
 8007224:	e000      	b.n	8007228 <USBD_ClrFeature+0x3c>
      break;
 8007226:	bf00      	nop
  }
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff fa92 	bl	8006784 <SWAPBYTE>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fa85 	bl	8006784 <SWAPBYTE>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fa78 	bl	8006784 <SWAPBYTE>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	80da      	strh	r2, [r3, #6]
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ae:	2180      	movs	r1, #128	@ 0x80
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc6f 	bl	8007b94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072b6:	2100      	movs	r1, #0
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc6b 	bl	8007b94 <USBD_LL_StallEP>
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b086      	sub	sp, #24
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d036      	beq.n	800734a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	f000 f836 	bl	8007352 <USBD_GetLen>
 80072e6:	4603      	mov	r3, r0
 80072e8:	3301      	adds	r3, #1
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	4413      	add	r3, r2
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	7812      	ldrb	r2, [r2, #0]
 80072fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	3301      	adds	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4413      	add	r3, r2
 800730c:	2203      	movs	r2, #3
 800730e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	3301      	adds	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007316:	e013      	b.n	8007340 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	4413      	add	r3, r2
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	7812      	ldrb	r2, [r2, #0]
 8007322:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3301      	adds	r3, #1
 8007328:	613b      	str	r3, [r7, #16]
    idx++;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	3301      	adds	r3, #1
 800732e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	4413      	add	r3, r2
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
    idx++;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	3301      	adds	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e7      	bne.n	8007318 <USBD_GetString+0x52>
 8007348:	e000      	b.n	800734c <USBD_GetString+0x86>
    return;
 800734a:	bf00      	nop
  }
}
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007362:	e005      	b.n	8007370 <USBD_GetLen+0x1e>
  {
    len++;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	3301      	adds	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	3301      	adds	r3, #1
 800736e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f5      	bne.n	8007364 <USBD_GetLen+0x12>
  }

  return len;
 8007378:	7bfb      	ldrb	r3, [r7, #15]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2202      	movs	r2, #2
 8007396:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	2100      	movs	r1, #0
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fc7a 	bl	8007ca6 <USBD_LL_Transmit>

  return USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	2100      	movs	r1, #0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fc69 	bl	8007ca6 <USBD_LL_Transmit>

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2203      	movs	r2, #3
 80073ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	2100      	movs	r1, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fc6d 	bl	8007ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fc5c 	bl	8007ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2204      	movs	r2, #4
 8007446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc28 	bl	8007ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2205      	movs	r2, #5
 800746c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fc36 	bl	8007ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800748c:	2200      	movs	r2, #0
 800748e:	4912      	ldr	r1, [pc, #72]	@ (80074d8 <MX_USB_Device_Init+0x50>)
 8007490:	4812      	ldr	r0, [pc, #72]	@ (80074dc <MX_USB_Device_Init+0x54>)
 8007492:	f7fe fed9 	bl	8006248 <USBD_Init>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800749c:	f7f8 ff79 	bl	8000392 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80074a0:	490f      	ldr	r1, [pc, #60]	@ (80074e0 <MX_USB_Device_Init+0x58>)
 80074a2:	480e      	ldr	r0, [pc, #56]	@ (80074dc <MX_USB_Device_Init+0x54>)
 80074a4:	f7fe ff00 	bl	80062a8 <USBD_RegisterClass>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80074ae:	f7f8 ff70 	bl	8000392 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80074b2:	490c      	ldr	r1, [pc, #48]	@ (80074e4 <MX_USB_Device_Init+0x5c>)
 80074b4:	4809      	ldr	r0, [pc, #36]	@ (80074dc <MX_USB_Device_Init+0x54>)
 80074b6:	f7fe fe51 	bl	800615c <USBD_CDC_RegisterInterface>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80074c0:	f7f8 ff67 	bl	8000392 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80074c4:	4805      	ldr	r0, [pc, #20]	@ (80074dc <MX_USB_Device_Init+0x54>)
 80074c6:	f7fe ff16 	bl	80062f6 <USBD_Start>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80074d0:	f7f8 ff5f 	bl	8000392 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80074d4:	bf00      	nop
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000130 	.word	0x20000130
 80074dc:	200001f4 	.word	0x200001f4
 80074e0:	20000018 	.word	0x20000018
 80074e4:	2000011c 	.word	0x2000011c

080074e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074ec:	2200      	movs	r2, #0
 80074ee:	4905      	ldr	r1, [pc, #20]	@ (8007504 <CDC_Init_FS+0x1c>)
 80074f0:	4805      	ldr	r0, [pc, #20]	@ (8007508 <CDC_Init_FS+0x20>)
 80074f2:	f7fe fe48 	bl	8006186 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074f6:	4905      	ldr	r1, [pc, #20]	@ (800750c <CDC_Init_FS+0x24>)
 80074f8:	4803      	ldr	r0, [pc, #12]	@ (8007508 <CDC_Init_FS+0x20>)
 80074fa:	f7fe fe62 	bl	80061c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007500:	4618      	mov	r0, r3
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200008c4 	.word	0x200008c4
 8007508:	200001f4 	.word	0x200001f4
 800750c:	200004c4 	.word	0x200004c4

08007510 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007514:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007516:	4618      	mov	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
 800752c:	4613      	mov	r3, r2
 800752e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	2b23      	cmp	r3, #35	@ 0x23
 8007534:	d84a      	bhi.n	80075cc <CDC_Control_FS+0xac>
 8007536:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <CDC_Control_FS+0x1c>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	080075cd 	.word	0x080075cd
 8007540:	080075cd 	.word	0x080075cd
 8007544:	080075cd 	.word	0x080075cd
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075cd 	.word	0x080075cd
 8007550:	080075cd 	.word	0x080075cd
 8007554:	080075cd 	.word	0x080075cd
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075cd 	.word	0x080075cd
 8007560:	080075cd 	.word	0x080075cd
 8007564:	080075cd 	.word	0x080075cd
 8007568:	080075cd 	.word	0x080075cd
 800756c:	080075cd 	.word	0x080075cd
 8007570:	080075cd 	.word	0x080075cd
 8007574:	080075cd 	.word	0x080075cd
 8007578:	080075cd 	.word	0x080075cd
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080075cd 	.word	0x080075cd
 8007584:	080075cd 	.word	0x080075cd
 8007588:	080075cd 	.word	0x080075cd
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075cd 	.word	0x080075cd
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	080075cd 	.word	0x080075cd
 80075ac:	080075cd 	.word	0x080075cd
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	080075cd 	.word	0x080075cd
 80075b8:	080075cd 	.word	0x080075cd
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075cd 	.word	0x080075cd
 80075c4:	080075cd 	.word	0x080075cd
 80075c8:	080075cd 	.word	0x080075cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075cc:	bf00      	nop
  }

  return (USBD_OK);
 80075ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4805      	ldr	r0, [pc, #20]	@ (8007600 <CDC_Receive_FS+0x24>)
 80075ea:	f7fe fdea 	bl	80061c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075ee:	4804      	ldr	r0, [pc, #16]	@ (8007600 <CDC_Receive_FS+0x24>)
 80075f0:	f7fe fe00 	bl	80061f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200001f4 	.word	0x200001f4

08007604 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2212      	movs	r2, #18
 8007638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800763a:	4b03      	ldr	r3, [pc, #12]	@ (8007648 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000150 	.word	0x20000150

0800764c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2204      	movs	r2, #4
 800765c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800765e:	4b03      	ldr	r3, [pc, #12]	@ (800766c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20000164 	.word	0x20000164

08007670 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	6039      	str	r1, [r7, #0]
 800767a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d105      	bne.n	800768e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4907      	ldr	r1, [pc, #28]	@ (80076a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007686:	4808      	ldr	r0, [pc, #32]	@ (80076a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007688:	f7ff fe1d 	bl	80072c6 <USBD_GetString>
 800768c:	e004      	b.n	8007698 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	4904      	ldr	r1, [pc, #16]	@ (80076a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007692:	4805      	ldr	r0, [pc, #20]	@ (80076a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007694:	f7ff fe17 	bl	80072c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007698:	4b02      	ldr	r3, [pc, #8]	@ (80076a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000cc4 	.word	0x20000cc4
 80076a8:	08007ec0 	.word	0x08007ec0

080076ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	6039      	str	r1, [r7, #0]
 80076b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	4904      	ldr	r1, [pc, #16]	@ (80076cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80076bc:	4804      	ldr	r0, [pc, #16]	@ (80076d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80076be:	f7ff fe02 	bl	80072c6 <USBD_GetString>
  return USBD_StrDesc;
 80076c2:	4b02      	ldr	r3, [pc, #8]	@ (80076cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000cc4 	.word	0x20000cc4
 80076d0:	08007ed8 	.word	0x08007ed8

080076d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	221a      	movs	r2, #26
 80076e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076e6:	f000 f843 	bl	8007770 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80076ea:	4b02      	ldr	r3, [pc, #8]	@ (80076f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20000168 	.word	0x20000168

080076f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d105      	bne.n	8007716 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4907      	ldr	r1, [pc, #28]	@ (800772c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800770e:	4808      	ldr	r0, [pc, #32]	@ (8007730 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007710:	f7ff fdd9 	bl	80072c6 <USBD_GetString>
 8007714:	e004      	b.n	8007720 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4904      	ldr	r1, [pc, #16]	@ (800772c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800771a:	4805      	ldr	r0, [pc, #20]	@ (8007730 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800771c:	f7ff fdd3 	bl	80072c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007720:	4b02      	ldr	r3, [pc, #8]	@ (800772c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000cc4 	.word	0x20000cc4
 8007730:	08007eec 	.word	0x08007eec

08007734 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	4907      	ldr	r1, [pc, #28]	@ (8007768 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800774a:	4808      	ldr	r0, [pc, #32]	@ (800776c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800774c:	f7ff fdbb 	bl	80072c6 <USBD_GetString>
 8007750:	e004      	b.n	800775c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	4904      	ldr	r1, [pc, #16]	@ (8007768 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007756:	4805      	ldr	r0, [pc, #20]	@ (800776c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007758:	f7ff fdb5 	bl	80072c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800775c:	4b02      	ldr	r3, [pc, #8]	@ (8007768 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000cc4 	.word	0x20000cc4
 800776c:	08007ef8 	.word	0x08007ef8

08007770 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007776:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <Get_SerialNum+0x44>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800777c:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <Get_SerialNum+0x48>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007782:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <Get_SerialNum+0x4c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007796:	2208      	movs	r2, #8
 8007798:	4909      	ldr	r1, [pc, #36]	@ (80077c0 <Get_SerialNum+0x50>)
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f814 	bl	80077c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077a0:	2204      	movs	r2, #4
 80077a2:	4908      	ldr	r1, [pc, #32]	@ (80077c4 <Get_SerialNum+0x54>)
 80077a4:	68b8      	ldr	r0, [r7, #8]
 80077a6:	f000 f80f 	bl	80077c8 <IntToUnicode>
  }
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	1fff7590 	.word	0x1fff7590
 80077b8:	1fff7594 	.word	0x1fff7594
 80077bc:	1fff7598 	.word	0x1fff7598
 80077c0:	2000016a 	.word	0x2000016a
 80077c4:	2000017a 	.word	0x2000017a

080077c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077da:	2300      	movs	r3, #0
 80077dc:	75fb      	strb	r3, [r7, #23]
 80077de:	e027      	b.n	8007830 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	0f1b      	lsrs	r3, r3, #28
 80077e4:	2b09      	cmp	r3, #9
 80077e6:	d80b      	bhi.n	8007800 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	0f1b      	lsrs	r3, r3, #28
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4619      	mov	r1, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	440b      	add	r3, r1
 80077f8:	3230      	adds	r2, #48	@ 0x30
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e00a      	b.n	8007816 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	0f1b      	lsrs	r3, r3, #28
 8007804:	b2da      	uxtb	r2, r3
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	4619      	mov	r1, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	440b      	add	r3, r1
 8007810:	3237      	adds	r2, #55	@ 0x37
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	3301      	adds	r3, #1
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	4413      	add	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	3301      	adds	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
 8007830:	7dfa      	ldrb	r2, [r7, #23]
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	429a      	cmp	r2, r3
 8007836:	d3d3      	bcc.n	80077e0 <IntToUnicode+0x18>
  }
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b094      	sub	sp, #80	@ 0x50
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007850:	f107 030c 	add.w	r3, r7, #12
 8007854:	2244      	movs	r2, #68	@ 0x44
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f000 faf9 	bl	8007e50 <memset>
  if(pcdHandle->Instance==USB)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a15      	ldr	r2, [pc, #84]	@ (80078b8 <HAL_PCD_MspInit+0x70>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d122      	bne.n	80078ae <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800786c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800786e:	2300      	movs	r3, #0
 8007870:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	4618      	mov	r0, r3
 8007878:	f7fb fc74 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007882:	f7f8 fd86 	bl	8000392 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007886:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <HAL_PCD_MspInit+0x74>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	4a0c      	ldr	r2, [pc, #48]	@ (80078bc <HAL_PCD_MspInit+0x74>)
 800788c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007890:	6593      	str	r3, [r2, #88]	@ 0x58
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <HAL_PCD_MspInit+0x74>)
 8007894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800789a:	60bb      	str	r3, [r7, #8]
 800789c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800789e:	2200      	movs	r2, #0
 80078a0:	2100      	movs	r1, #0
 80078a2:	2014      	movs	r0, #20
 80078a4:	f7f8 ffe3 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80078a8:	2014      	movs	r0, #20
 80078aa:	f7f8 fffa 	bl	80008a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80078ae:	bf00      	nop
 80078b0:	3750      	adds	r7, #80	@ 0x50
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40005c00 	.word	0x40005c00
 80078bc:	40021000 	.word	0x40021000

080078c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7fe fd58 	bl	800638c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	440b      	add	r3, r1
 8007904:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	4619      	mov	r1, r3
 800790e:	f7fe fd92 	bl	8006436 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	440b      	add	r3, r1
 800793a:	3324      	adds	r3, #36	@ 0x24
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	4619      	mov	r1, r3
 8007942:	f7fe fddb 	bl	80064fc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe feef 	bl	8006740 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007972:	2301      	movs	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	795b      	ldrb	r3, [r3, #5]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d001      	beq.n	8007982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800797e:	f7f8 fd08 	bl	8000392 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007988:	7bfa      	ldrb	r2, [r7, #15]
 800798a:	4611      	mov	r1, r2
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe fe99 	bl	80066c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fe45 	bl	8006628 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fe94 	bl	80066e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7a5b      	ldrb	r3, [r3, #9]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <HAL_PCD_SuspendCallback+0x30>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	4a03      	ldr	r2, [pc, #12]	@ (80079d8 <HAL_PCD_SuspendCallback+0x30>)
 80079ca:	f043 0306 	orr.w	r3, r3, #6
 80079ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7a5b      	ldrb	r3, [r3, #9]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079ec:	4b08      	ldr	r3, [pc, #32]	@ (8007a10 <HAL_PCD_ResumeCallback+0x34>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	4a07      	ldr	r2, [pc, #28]	@ (8007a10 <HAL_PCD_ResumeCallback+0x34>)
 80079f2:	f023 0306 	bic.w	r3, r3, #6
 80079f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80079f8:	f000 f9f8 	bl	8007dec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fe84 	bl	8006710 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	e000ed00 	.word	0xe000ed00

08007a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a29      	ldr	r2, [pc, #164]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007a2c:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a2e:	4a28      	ldr	r2, [pc, #160]	@ (8007ad0 <USBD_LL_Init+0xbc>)
 8007a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a32:	4b26      	ldr	r3, [pc, #152]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a34:	2208      	movs	r2, #8
 8007a36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a38:	4b24      	ldr	r3, [pc, #144]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a3e:	4b23      	ldr	r3, [pc, #140]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a40:	2202      	movs	r2, #2
 8007a42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007a44:	4b21      	ldr	r3, [pc, #132]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a4a:	4b20      	ldr	r3, [pc, #128]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a50:	4b1e      	ldr	r3, [pc, #120]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a56:	4b1d      	ldr	r3, [pc, #116]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a5c:	481b      	ldr	r0, [pc, #108]	@ (8007acc <USBD_LL_Init+0xb8>)
 8007a5e:	f7f9 f8d5 	bl	8000c0c <HAL_PCD_Init>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007a68:	f7f8 fc93 	bl	8000392 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a72:	2318      	movs	r3, #24
 8007a74:	2200      	movs	r2, #0
 8007a76:	2100      	movs	r1, #0
 8007a78:	f7fa fd5c 	bl	8002534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a82:	2358      	movs	r3, #88	@ 0x58
 8007a84:	2200      	movs	r2, #0
 8007a86:	2180      	movs	r1, #128	@ 0x80
 8007a88:	f7fa fd54 	bl	8002534 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a92:	23c0      	movs	r3, #192	@ 0xc0
 8007a94:	2200      	movs	r2, #0
 8007a96:	2181      	movs	r1, #129	@ 0x81
 8007a98:	f7fa fd4c 	bl	8002534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007aa2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	f7fa fd43 	bl	8002534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2182      	movs	r1, #130	@ 0x82
 8007abc:	f7fa fd3a 	bl	8002534 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000ec4 	.word	0x20000ec4
 8007ad0:	40005c00 	.word	0x40005c00

08007ad4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7f9 f95c 	bl	8000da8 <HAL_PCD_Start>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f97e 	bl	8007df8 <USBD_Get_USB_Status>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	4608      	mov	r0, r1
 8007b14:	4611      	mov	r1, r2
 8007b16:	461a      	mov	r2, r3
 8007b18:	4603      	mov	r3, r0
 8007b1a:	70fb      	strb	r3, [r7, #3]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70bb      	strb	r3, [r7, #2]
 8007b20:	4613      	mov	r3, r2
 8007b22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007b32:	78bb      	ldrb	r3, [r7, #2]
 8007b34:	883a      	ldrh	r2, [r7, #0]
 8007b36:	78f9      	ldrb	r1, [r7, #3]
 8007b38:	f7f9 faa3 	bl	8001082 <HAL_PCD_EP_Open>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f958 	bl	8007df8 <USBD_Get_USB_Status>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7f9 fae3 	bl	8001140 <HAL_PCD_EP_Close>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f939 	bl	8007df8 <USBD_Get_USB_Status>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7f9 fb8c 	bl	80012d0 <HAL_PCD_EP_SetStall>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f91a 	bl	8007df8 <USBD_Get_USB_Status>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7f9 fbbf 	bl	8001374 <HAL_PCD_EP_ClrStall>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f8fb 	bl	8007df8 <USBD_Get_USB_Status>
 8007c02:	4603      	mov	r3, r0
 8007c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0b      	bge.n	8007c44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c32:	68f9      	ldr	r1, [r7, #12]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	440b      	add	r3, r1
 8007c3e:	3312      	adds	r3, #18
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	e00b      	b.n	8007c5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007c5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7f9 f9d7 	bl	800103a <HAL_PCD_SetAddress>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f8b0 	bl	8007df8 <USBD_Get_USB_Status>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007cc4:	7af9      	ldrb	r1, [r7, #11]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	f7f9 faca 	bl	8001262 <HAL_PCD_EP_Transmit>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f88f 	bl	8007df8 <USBD_Get_USB_Status>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cde:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007d06:	7af9      	ldrb	r1, [r7, #11]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f7f9 fa60 	bl	80011d0 <HAL_PCD_EP_Receive>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f86e 	bl	8007df8 <USBD_Get_USB_Status>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007d3c:	78fa      	ldrb	r2, [r7, #3]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7f9 fa76 	bl	8001232 <HAL_PCD_EP_GetRxCount>
 8007d46:	4603      	mov	r3, r0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_PCDEx_LPM_Callback+0x18>
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d013      	beq.n	8007d8e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007d66:	e023      	b.n	8007db0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7a5b      	ldrb	r3, [r3, #9]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007d70:	f000 f83c 	bl	8007dec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d74:	4b10      	ldr	r3, [pc, #64]	@ (8007db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	4a0f      	ldr	r2, [pc, #60]	@ (8007db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d7a:	f023 0306 	bic.w	r3, r3, #6
 8007d7e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fcc2 	bl	8006710 <USBD_LL_Resume>
    break;
 8007d8c:	e010      	b.n	8007db0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fca5 	bl	80066e4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7a5b      	ldrb	r3, [r3, #9]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d005      	beq.n	8007dae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007da2:	4b05      	ldr	r3, [pc, #20]	@ (8007db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	4a04      	ldr	r2, [pc, #16]	@ (8007db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007da8:	f043 0306 	orr.w	r3, r3, #6
 8007dac:	6113      	str	r3, [r2, #16]
    break;
 8007dae:	bf00      	nop
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000ed00 	.word	0xe000ed00

08007dbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	@ (8007dd4 <USBD_static_malloc+0x18>)
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	200011a0 	.word	0x200011a0

08007dd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007df0:	f7f8 fa84 	bl	80002fc <SystemClock_Config>
}
 8007df4:	bf00      	nop
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d817      	bhi.n	8007e3c <USBD_Get_USB_Status+0x44>
 8007e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <USBD_Get_USB_Status+0x1c>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e2b 	.word	0x08007e2b
 8007e1c:	08007e31 	.word	0x08007e31
 8007e20:	08007e37 	.word	0x08007e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]
    break;
 8007e28:	e00b      	b.n	8007e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e2e:	e008      	b.n	8007e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e30:	2301      	movs	r3, #1
 8007e32:	73fb      	strb	r3, [r7, #15]
    break;
 8007e34:	e005      	b.n	8007e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e36:	2303      	movs	r3, #3
 8007e38:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3a:	e002      	b.n	8007e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e40:	bf00      	nop
  }
  return usb_status;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <memset>:
 8007e50:	4402      	add	r2, r0
 8007e52:	4603      	mov	r3, r0
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d100      	bne.n	8007e5a <memset+0xa>
 8007e58:	4770      	bx	lr
 8007e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5e:	e7f9      	b.n	8007e54 <memset+0x4>

08007e60 <__libc_init_array>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4d0d      	ldr	r5, [pc, #52]	@ (8007e98 <__libc_init_array+0x38>)
 8007e64:	4c0d      	ldr	r4, [pc, #52]	@ (8007e9c <__libc_init_array+0x3c>)
 8007e66:	1b64      	subs	r4, r4, r5
 8007e68:	10a4      	asrs	r4, r4, #2
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	42a6      	cmp	r6, r4
 8007e6e:	d109      	bne.n	8007e84 <__libc_init_array+0x24>
 8007e70:	4d0b      	ldr	r5, [pc, #44]	@ (8007ea0 <__libc_init_array+0x40>)
 8007e72:	4c0c      	ldr	r4, [pc, #48]	@ (8007ea4 <__libc_init_array+0x44>)
 8007e74:	f000 f818 	bl	8007ea8 <_init>
 8007e78:	1b64      	subs	r4, r4, r5
 8007e7a:	10a4      	asrs	r4, r4, #2
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	42a6      	cmp	r6, r4
 8007e80:	d105      	bne.n	8007e8e <__libc_init_array+0x2e>
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e88:	4798      	blx	r3
 8007e8a:	3601      	adds	r6, #1
 8007e8c:	e7ee      	b.n	8007e6c <__libc_init_array+0xc>
 8007e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e92:	4798      	blx	r3
 8007e94:	3601      	adds	r6, #1
 8007e96:	e7f2      	b.n	8007e7e <__libc_init_array+0x1e>
 8007e98:	08007f18 	.word	0x08007f18
 8007e9c:	08007f18 	.word	0x08007f18
 8007ea0:	08007f18 	.word	0x08007f18
 8007ea4:	08007f1c 	.word	0x08007f1c

08007ea8 <_init>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr

08007eb4 <_fini>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	bf00      	nop
 8007eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eba:	bc08      	pop	{r3}
 8007ebc:	469e      	mov	lr, r3
 8007ebe:	4770      	bx	lr
