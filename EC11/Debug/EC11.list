
EC11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002e40  08002e40  00003e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  00004ac0  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb8  08002eb8  00004ac0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb8  08002eb8  00004ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb8  08002eb8  00003eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ac0  20000000  08002ec0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000ac0  08003980  00004ac0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  08003980  00004cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b243  00000000  00000000  00004ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e45  00000000  00000000  0000fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00011b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009eb  00000000  00000000  00012850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018837  00000000  00000000  0001323b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b1b  00000000  00000000  0002ba72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6a7  00000000  00000000  0003c58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000c6c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ca678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000ac0 	.word	0x20000ac0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e28 	.word	0x08002e28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000ac4 	.word	0x20000ac4
 8000148:	08002e28 	.word	0x08002e28

0800014c <OLED_WriteCommand>:
#define OLED_CHN_CHAR_WIDTH 3



void OLED_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 800015e:	f107 020c 	add.w	r2, r7, #12
 8000162:	f04f 33ff 	mov.w	r3, #4294967295
 8000166:	9300      	str	r3, [sp, #0]
 8000168:	2302      	movs	r3, #2
 800016a:	2178      	movs	r1, #120	@ 0x78
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <OLED_WriteCommand+0x30>)
 800016e:	f001 f837 	bl	80011e0 <HAL_I2C_Master_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000adc 	.word	0x20000adc

08000180 <OLED_WriteData>:

void OLED_WriteData(uint8_t dat)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x40;
 800018a:	2340      	movs	r3, #64	@ 0x40
 800018c:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=dat;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 8000192:	f107 020c 	add.w	r2, r7, #12
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	2302      	movs	r3, #2
 800019e:	2178      	movs	r1, #120	@ 0x78
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <OLED_WriteData+0x30>)
 80001a2:	f001 f81d 	bl	80011e0 <HAL_I2C_Master_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000adc 	.word	0x20000adc

080001b4 <OLED_SetCursor>:

void OLED_SetCursor(uint8_t Page, uint8_t X)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	460a      	mov	r2, r1
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	71bb      	strb	r3, [r7, #6]
	/*通过指令设置页地址和列地址*/
	OLED_WriteCommand(0xB0 | Page);					//设置页位置
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	4618      	mov	r0, r3
 80001ce:	f7ff ffbd 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80001d2:	79bb      	ldrb	r3, [r7, #6]
 80001d4:	091b      	lsrs	r3, r3, #4
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	f043 0310 	orr.w	r3, r3, #16
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	f003 030f 	and.w	r3, r3, #15
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffad 	bl	800014c <OLED_WriteCommand>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <OLED_init>:

void OLED_init(void)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	@ 0x64
 8000200:	f000 fc1e 	bl	8000a40 <HAL_Delay>
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 8000204:	20ae      	movs	r0, #174	@ 0xae
 8000206:	f7ff ffa1 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 800020a:	20d5      	movs	r0, #213	@ 0xd5
 800020c:	f7ff ff9e 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 8000210:	2080      	movs	r0, #128	@ 0x80
 8000212:	f7ff ff9b 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 8000216:	20a8      	movs	r0, #168	@ 0xa8
 8000218:	f7ff ff98 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 800021c:	203f      	movs	r0, #63	@ 0x3f
 800021e:	f7ff ff95 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 8000222:	20d3      	movs	r0, #211	@ 0xd3
 8000224:	f7ff ff92 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 8000228:	2000      	movs	r0, #0
 800022a:	f7ff ff8f 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 800022e:	2040      	movs	r0, #64	@ 0x40
 8000230:	f7ff ff8c 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8000234:	20a1      	movs	r0, #161	@ 0xa1
 8000236:	f7ff ff89 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800023a:	20c8      	movs	r0, #200	@ 0xc8
 800023c:	f7ff ff86 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000240:	20da      	movs	r0, #218	@ 0xda
 8000242:	f7ff ff83 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000246:	2012      	movs	r0, #18
 8000248:	f7ff ff80 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度
 800024c:	2081      	movs	r0, #129	@ 0x81
 800024e:	f7ff ff7d 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8000252:	20cf      	movs	r0, #207	@ 0xcf
 8000254:	f7ff ff7a 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8000258:	20d9      	movs	r0, #217	@ 0xd9
 800025a:	f7ff ff77 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800025e:	20f1      	movs	r0, #241	@ 0xf1
 8000260:	f7ff ff74 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8000264:	20db      	movs	r0, #219	@ 0xdb
 8000266:	f7ff ff71 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800026a:	2030      	movs	r0, #48	@ 0x30
 800026c:	f7ff ff6e 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000270:	20a4      	movs	r0, #164	@ 0xa4
 8000272:	f7ff ff6b 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 8000276:	20a6      	movs	r0, #166	@ 0xa6
 8000278:	f7ff ff68 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800027c:	208d      	movs	r0, #141	@ 0x8d
 800027e:	f7ff ff65 	bl	800014c <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000282:	2014      	movs	r0, #20
 8000284:	f7ff ff62 	bl	800014c <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8000288:	20af      	movs	r0, #175	@ 0xaf
 800028a:	f7ff ff5f 	bl	800014c <OLED_WriteCommand>
	OLED_chear();
 800028e:	f000 f802 	bl	8000296 <OLED_chear>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}

08000296 <OLED_chear>:

void OLED_chear(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; ++i)
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e014      	b.n	80002cc <OLED_chear+0x36>
	{
		OLED_SetCursor(i, 0);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff83 	bl	80001b4 <OLED_SetCursor>
		for (int j = 0; j < 128; ++j)
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	e005      	b.n	80002c0 <OLED_chear+0x2a>
		{
			OLED_WriteData(0x00);
 80002b4:	2000      	movs	r0, #0
 80002b6:	f7ff ff63 	bl	8000180 <OLED_WriteData>
		for (int j = 0; j < 128; ++j)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80002c4:	ddf6      	ble.n	80002b4 <OLED_chear+0x1e>
	for (int i = 0; i < 8; ++i)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	dde7      	ble.n	80002a2 <OLED_chear+0xc>
		}
	}
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <OLED_showChar>:

void OLED_showChar(uint8_t Page, uint8_t X,char a,uint8_t fontSize)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4604      	mov	r4, r0
 80002e4:	4608      	mov	r0, r1
 80002e6:	4611      	mov	r1, r2
 80002e8:	461a      	mov	r2, r3
 80002ea:	4623      	mov	r3, r4
 80002ec:	71fb      	strb	r3, [r7, #7]
 80002ee:	4603      	mov	r3, r0
 80002f0:	71bb      	strb	r3, [r7, #6]
 80002f2:	460b      	mov	r3, r1
 80002f4:	717b      	strb	r3, [r7, #5]
 80002f6:	4613      	mov	r3, r2
 80002f8:	713b      	strb	r3, [r7, #4]
	OLED_SetCursor(Page, X);
 80002fa:	79ba      	ldrb	r2, [r7, #6]
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4611      	mov	r1, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff57 	bl	80001b4 <OLED_SetCursor>
	if (fontSize == 8)
 8000306:	793b      	ldrb	r3, [r7, #4]
 8000308:	2b08      	cmp	r3, #8
 800030a:	d134      	bne.n	8000376 <OLED_showChar+0x9a>
	{
		for (int i = 0; i < fontSize; ++i)
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	e00d      	b.n	800032e <OLED_showChar+0x52>
		{
			OLED_WriteData(EN8_16[ a - ' ' ][i]);
 8000312:	797b      	ldrb	r3, [r7, #5]
 8000314:	3b20      	subs	r3, #32
 8000316:	4a39      	ldr	r2, [pc, #228]	@ (80003fc <OLED_showChar+0x120>)
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	441a      	add	r2, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	4413      	add	r3, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff2c 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	3301      	adds	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	793b      	ldrb	r3, [r7, #4]
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	429a      	cmp	r2, r3
 8000334:	dbed      	blt.n	8000312 <OLED_showChar+0x36>
		}
		OLED_SetCursor(Page+1, X);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	3301      	adds	r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	79ba      	ldrb	r2, [r7, #6]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff37 	bl	80001b4 <OLED_SetCursor>
		for (int i = 0; i < fontSize; ++i)
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	e00f      	b.n	800036c <OLED_showChar+0x90>
		{
			OLED_WriteData(EN8_16[ a - ' ' ][i+8]);
 800034c:	797b      	ldrb	r3, [r7, #5]
 800034e:	f1a3 0220 	sub.w	r2, r3, #32
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	3308      	adds	r3, #8
 8000356:	4929      	ldr	r1, [pc, #164]	@ (80003fc <OLED_showChar+0x120>)
 8000358:	0112      	lsls	r2, r2, #4
 800035a:	440a      	add	r2, r1
 800035c:	4413      	add	r3, r2
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff0d 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	3301      	adds	r3, #1
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	793b      	ldrb	r3, [r7, #4]
 800036e:	693a      	ldr	r2, [r7, #16]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbeb      	blt.n	800034c <OLED_showChar+0x70>
		for (int i = 0; i < fontSize; ++i)
		{
			OLED_WriteData(EN6_12[ a - ' ' ][i+6]);
		}
	}
}
 8000374:	e03d      	b.n	80003f2 <OLED_showChar+0x116>
	else if (fontSize == 6)
 8000376:	793b      	ldrb	r3, [r7, #4]
 8000378:	2b06      	cmp	r3, #6
 800037a:	d13a      	bne.n	80003f2 <OLED_showChar+0x116>
		for (int i = 0; i < fontSize; ++i)
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	e011      	b.n	80003a6 <OLED_showChar+0xca>
			OLED_WriteData(EN6_12[ a - ' ' ][i]);
 8000382:	797b      	ldrb	r3, [r7, #5]
 8000384:	f1a3 0220 	sub.w	r2, r3, #32
 8000388:	491d      	ldr	r1, [pc, #116]	@ (8000400 <OLED_showChar+0x124>)
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	18ca      	adds	r2, r1, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fef0 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	793b      	ldrb	r3, [r7, #4]
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dbe9      	blt.n	8000382 <OLED_showChar+0xa6>
		OLED_SetCursor(Page+1, X);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	3301      	adds	r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	79ba      	ldrb	r2, [r7, #6]
 80003b6:	4611      	mov	r1, r2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fefb 	bl	80001b4 <OLED_SetCursor>
		for (int i = 0; i < fontSize; ++i)
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	e012      	b.n	80003ea <OLED_showChar+0x10e>
			OLED_WriteData(EN6_12[ a - ' ' ][i+6]);
 80003c4:	797b      	ldrb	r3, [r7, #5]
 80003c6:	f1a3 0220 	sub.w	r2, r3, #32
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	1d99      	adds	r1, r3, #6
 80003ce:	480c      	ldr	r0, [pc, #48]	@ (8000400 <OLED_showChar+0x124>)
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4403      	add	r3, r0
 80003da:	440b      	add	r3, r1
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fece 	bl	8000180 <OLED_WriteData>
		for (int i = 0; i < fontSize; ++i)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	793b      	ldrb	r3, [r7, #4]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dbe8      	blt.n	80003c4 <OLED_showChar+0xe8>
}
 80003f2:	bf00      	nop
 80003f4:	371c      	adds	r7, #28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd90      	pop	{r4, r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000000 	.word	0x20000000
 8000400:	200005f0 	.word	0x200005f0

08000404 <OLED_showString>:

void OLED_showString(uint8_t Page, uint8_t X,char *String,uint8_t fontSize)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	603a      	str	r2, [r7, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]
	for (int i = 0; String[i] !='\0' ; ++i)
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e013      	b.n	8000448 <OLED_showString+0x44>
	{
		OLED_showChar(Page, X+i*fontSize ,String[i],fontSize);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	797a      	ldrb	r2, [r7, #5]
 8000426:	fb02 f303 	mul.w	r3, r2, r3
 800042a:	b2da      	uxtb	r2, r3
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	4413      	add	r3, r2
 8000430:	b2d9      	uxtb	r1, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	4413      	add	r3, r2
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	79f8      	ldrb	r0, [r7, #7]
 800043e:	f7ff ff4d 	bl	80002dc <OLED_showChar>
	for (int i = 0; String[i] !='\0' ; ++i)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3301      	adds	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	4413      	add	r3, r2
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1e5      	bne.n	8000420 <OLED_showString+0x1c>
	}
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <OLED_showSignedNUM>:
	sprintf(buffer, "%lu", num);
	OLED_showString(Page, X, buffer, fontSize);
}

void OLED_showSignedNUM(uint8_t Page, uint8_t X, int32_t num, uint8_t fontSize)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	603a      	str	r2, [r7, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	460b      	mov	r3, r1
 8000470:	71bb      	strb	r3, [r7, #6]
 8000472:	4613      	mov	r3, r2
 8000474:	717b      	strb	r3, [r7, #5]
	char buffer[11];
	sprintf(buffer, "%ld ", num);
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	683a      	ldr	r2, [r7, #0]
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <OLED_showSignedNUM+0x3c>)
 800047e:	4618      	mov	r0, r3
 8000480:	f002 f822 	bl	80024c8 <siprintf>
	OLED_showString(Page, X, buffer, fontSize);
 8000484:	797b      	ldrb	r3, [r7, #5]
 8000486:	f107 020c 	add.w	r2, r7, #12
 800048a:	79b9      	ldrb	r1, [r7, #6]
 800048c:	79f8      	ldrb	r0, [r7, #7]
 800048e:	f7ff ffb9 	bl	8000404 <OLED_showString>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	08002e48 	.word	0x08002e48

080004a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a13      	ldr	r2, [pc, #76]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0320 	and.w	r3, r3, #32
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004dc:	f043 0308 	orr.w	r3, r3, #8
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <MX_GPIO_Init+0x58>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0308 	and.w	r3, r3, #8
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000500:	4b12      	ldr	r3, [pc, #72]	@ (800054c <MX_I2C1_Init+0x50>)
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <MX_I2C1_Init+0x54>)
 8000504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_I2C1_Init+0x50>)
 8000508:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <MX_I2C1_Init+0x58>)
 800050a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_I2C1_Init+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_I2C1_Init+0x50>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_I2C1_Init+0x50>)
 800051a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800051e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <MX_I2C1_Init+0x50>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_I2C1_Init+0x50>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <MX_I2C1_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_I2C1_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <MX_I2C1_Init+0x50>)
 800053a:	f000 fd0d 	bl	8000f58 <HAL_I2C_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 f8c1 	bl	80006ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000adc 	.word	0x20000adc
 8000550:	40005400 	.word	0x40005400
 8000554:	00061a80 	.word	0x00061a80

08000558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <HAL_I2C_MspInit+0x90>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d132      	bne.n	80005de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <HAL_I2C_MspInit+0x94>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1b      	ldr	r2, [pc, #108]	@ (80005ec <HAL_I2C_MspInit+0x94>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <HAL_I2C_MspInit+0x94>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000590:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000596:	2312      	movs	r3, #18
 8000598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <HAL_I2C_MspInit+0x98>)
 80005a6:	f000 fb53 	bl	8000c50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_I2C_MspInit+0x9c>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	627b      	str	r3, [r7, #36]	@ 0x24
 80005c0:	4a0c      	ldr	r2, [pc, #48]	@ (80005f4 <HAL_I2C_MspInit+0x9c>)
 80005c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_I2C_MspInit+0x94>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <HAL_I2C_MspInit+0x94>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_I2C_MspInit+0x94>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	40010000 	.word	0x40010000

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 f9bd 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f81d 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f7ff ff4b 	bl	80004a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800060a:	f7ff ff77 	bl	80004fc <MX_I2C1_Init>
  MX_TIM4_Init();
 800060e:	f000 f8fd 	bl	800080c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 8000612:	f7ff fdf2 	bl	80001fa <OLED_init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000616:	213c      	movs	r1, #60	@ 0x3c
 8000618:	4808      	ldr	r0, [pc, #32]	@ (800063c <main+0x44>)
 800061a:	f001 fdd7 	bl	80021cc <HAL_TIM_Encoder_Start>
  int count =0;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = __HAL_TIM_GET_COUNTER(&htim4);
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <main+0x44>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000628:	607b      	str	r3, [r7, #4]
	  OLED_showSignedNUM(0, 0, count, 8);
 800062a:	2308      	movs	r3, #8
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ff15 	bl	8000460 <OLED_showSignedNUM>
	  count = __HAL_TIM_GET_COUNTER(&htim4);
 8000636:	bf00      	nop
 8000638:	e7f3      	b.n	8000622 <main+0x2a>
 800063a:	bf00      	nop
 800063c:	20000b34 	.word	0x20000b34

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	@ 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	@ 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 ff5a 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f901 	bl	8001890 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000694:	f000 f819 	bl	80006ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fb6e 	bl	8001d94 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006be:	f000 f804 	bl	80006ca <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3740      	adds	r7, #64	@ 0x40
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ce:	b672      	cpsid	i
}
 80006d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_MspInit+0x5c>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <HAL_MspInit+0x5c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_MspInit+0x5c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_MspInit+0x5c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <HAL_MspInit+0x5c>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_MspInit+0x5c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_MspInit+0x60>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <HAL_MspInit+0x60>)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000
 8000738:	40010000 	.word	0x40010000

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f93c 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f001 fea8 	bl	8002518 <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20005000 	.word	0x20005000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	20000b30 	.word	0x20000b30
 80007fc:	20000cc8 	.word	0x20000cc8

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	@ 0x30
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2224      	movs	r2, #36	@ 0x24
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fe74 	bl	8002508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000828:	4b20      	ldr	r3, [pc, #128]	@ (80008ac <MX_TIM4_Init+0xa0>)
 800082a:	4a21      	ldr	r2, [pc, #132]	@ (80008b0 <MX_TIM4_Init+0xa4>)
 800082c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800082e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_TIM4_Init+0xa0>)
 8000830:	2201      	movs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_TIM4_Init+0xa0>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_TIM4_Init+0xa0>)
 800083c:	2263      	movs	r2, #99	@ 0x63
 800083e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_TIM4_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_TIM4_Init+0xa0>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_TIM4_Init+0xa0>)
 8000878:	f001 fc06 	bl	8002088 <HAL_TIM_Encoder_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000882:	f7ff ff22 	bl	80006ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	@ (80008ac <MX_TIM4_Init+0xa0>)
 8000894:	f001 fdba 	bl	800240c <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800089e:	f7ff ff14 	bl	80006ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	@ 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000b34 	.word	0x20000b34
 80008b0:	40000800 	.word	0x40000800

080008b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x70>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d123      	bne.n	800091c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x74>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x74>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	61d3      	str	r3, [r2, #28]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x74>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x74>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x74>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x74>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000904:	23c0      	movs	r3, #192	@ 0xc0
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <HAL_TIM_Encoder_MspInit+0x78>)
 8000918:	f000 f99a 	bl	8000c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40000800 	.word	0x40000800
 8000928:	40021000 	.word	0x40021000
 800092c:	40010c00 	.word	0x40010c00

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff ff66 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000936:	490c      	ldr	r1, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000938:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <LoopFillZerobss+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800094c:	4c09      	ldr	r4, [pc, #36]	@ (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 fde3 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fe4b 	bl	80005f8 <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000ac0 	.word	0x20000ac0
  ldr r2, =_sidata
 800096c:	08002ec0 	.word	0x08002ec0
  ldr r2, =_sbss
 8000970:	20000ac0 	.word	0x20000ac0
  ldr r4, =_ebss
 8000974:	20000cc8 	.word	0x20000cc8

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f92b 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe9e 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f935 	bl	8000c36 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f90b 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000a64 	.word	0x20000a64
 8000a00:	20000a6c 	.word	0x20000a6c
 8000a04:	20000a68 	.word	0x20000a68

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000a6c 	.word	0x20000a6c
 8000a28:	20000b7c 	.word	0x20000b7c

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	@ (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000b7c 	.word	0x20000b7c

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000a6c 	.word	0x20000a6c

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	@ (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	@ (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	@ 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	@ 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff49 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b08b      	sub	sp, #44	@ 0x2c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e169      	b.n	8000f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c64:	2201      	movs	r2, #1
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8158 	bne.w	8000f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4a9a      	ldr	r2, [pc, #616]	@ (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d05e      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000c8c:	4a98      	ldr	r2, [pc, #608]	@ (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d875      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000c92:	4a98      	ldr	r2, [pc, #608]	@ (8000ef4 <HAL_GPIO_Init+0x2a4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d058      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000c98:	4a96      	ldr	r2, [pc, #600]	@ (8000ef4 <HAL_GPIO_Init+0x2a4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d86f      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000c9e:	4a96      	ldr	r2, [pc, #600]	@ (8000ef8 <HAL_GPIO_Init+0x2a8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d052      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000ca4:	4a94      	ldr	r2, [pc, #592]	@ (8000ef8 <HAL_GPIO_Init+0x2a8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d869      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000caa:	4a94      	ldr	r2, [pc, #592]	@ (8000efc <HAL_GPIO_Init+0x2ac>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d04c      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000cb0:	4a92      	ldr	r2, [pc, #584]	@ (8000efc <HAL_GPIO_Init+0x2ac>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d863      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cb6:	4a92      	ldr	r2, [pc, #584]	@ (8000f00 <HAL_GPIO_Init+0x2b0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d046      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000cbc:	4a90      	ldr	r2, [pc, #576]	@ (8000f00 <HAL_GPIO_Init+0x2b0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d85d      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d82a      	bhi.n	8000d1c <HAL_GPIO_Init+0xcc>
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d859      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cca:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <HAL_GPIO_Init+0x80>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000d4b 	.word	0x08000d4b
 8000cd4:	08000d25 	.word	0x08000d25
 8000cd8:	08000d37 	.word	0x08000d37
 8000cdc:	08000d79 	.word	0x08000d79
 8000ce0:	08000d7f 	.word	0x08000d7f
 8000ce4:	08000d7f 	.word	0x08000d7f
 8000ce8:	08000d7f 	.word	0x08000d7f
 8000cec:	08000d7f 	.word	0x08000d7f
 8000cf0:	08000d7f 	.word	0x08000d7f
 8000cf4:	08000d7f 	.word	0x08000d7f
 8000cf8:	08000d7f 	.word	0x08000d7f
 8000cfc:	08000d7f 	.word	0x08000d7f
 8000d00:	08000d7f 	.word	0x08000d7f
 8000d04:	08000d7f 	.word	0x08000d7f
 8000d08:	08000d7f 	.word	0x08000d7f
 8000d0c:	08000d7f 	.word	0x08000d7f
 8000d10:	08000d7f 	.word	0x08000d7f
 8000d14:	08000d2d 	.word	0x08000d2d
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	4a79      	ldr	r2, [pc, #484]	@ (8000f04 <HAL_GPIO_Init+0x2b4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d22:	e02c      	b.n	8000d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e029      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	3304      	adds	r3, #4
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e024      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e01f      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	330c      	adds	r3, #12
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e01a      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d52:	2304      	movs	r3, #4
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e013      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d105      	bne.n	8000d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d60:	2308      	movs	r3, #8
 8000d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	611a      	str	r2, [r3, #16]
          break;
 8000d6a:	e009      	b.n	8000d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	615a      	str	r2, [r3, #20]
          break;
 8000d76:	e003      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          break;
 8000d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	@ 0xff
 8000d84:	d801      	bhi.n	8000d8a <HAL_GPIO_Init+0x13a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <HAL_GPIO_Init+0x13e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2bff      	cmp	r3, #255	@ 0xff
 8000d94:	d802      	bhi.n	8000d9c <HAL_GPIO_Init+0x14c>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x152>
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	3b08      	subs	r3, #8
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	210f      	movs	r1, #15
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	6a39      	ldr	r1, [r7, #32]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80b1 	beq.w	8000f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000f08 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8000f08 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f08 <HAL_GPIO_Init+0x2b8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de8:	4a48      	ldr	r2, [pc, #288]	@ (8000f0c <HAL_GPIO_Init+0x2bc>)
 8000dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a40      	ldr	r2, [pc, #256]	@ (8000f10 <HAL_GPIO_Init+0x2c0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d013      	beq.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3f      	ldr	r2, [pc, #252]	@ (8000f14 <HAL_GPIO_Init+0x2c4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00d      	beq.n	8000e38 <HAL_GPIO_Init+0x1e8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f18 <HAL_GPIO_Init+0x2c8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x1e4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a3d      	ldr	r2, [pc, #244]	@ (8000f1c <HAL_GPIO_Init+0x2cc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <HAL_GPIO_Init+0x1e0>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e006      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e30:	2304      	movs	r3, #4
 8000e32:	e004      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e002      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e40:	f002 0203 	and.w	r2, r2, #3
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	4093      	lsls	r3, r2
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e4e:	492f      	ldr	r1, [pc, #188]	@ (8000f0c <HAL_GPIO_Init+0x2bc>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e68:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	492c      	ldr	r1, [pc, #176]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e76:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4928      	ldr	r1, [pc, #160]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e90:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	4922      	ldr	r1, [pc, #136]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60cb      	str	r3, [r1, #12]
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	491e      	ldr	r1, [pc, #120]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4918      	ldr	r1, [pc, #96]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4914      	ldr	r1, [pc, #80]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d021      	beq.n	8000f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	490e      	ldr	r1, [pc, #56]	@ (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
 8000eec:	e021      	b.n	8000f32 <HAL_GPIO_Init+0x2e2>
 8000eee:	bf00      	nop
 8000ef0:	10320000 	.word	0x10320000
 8000ef4:	10310000 	.word	0x10310000
 8000ef8:	10220000 	.word	0x10220000
 8000efc:	10210000 	.word	0x10210000
 8000f00:	10120000 	.word	0x10120000
 8000f04:	10110000 	.word	0x10110000
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40010c00 	.word	0x40010c00
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40011400 	.word	0x40011400
 8000f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_GPIO_Init+0x304>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4909      	ldr	r1, [pc, #36]	@ (8000f54 <HAL_GPIO_Init+0x304>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	3301      	adds	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f47f ae8e 	bne.w	8000c64 <HAL_GPIO_Init+0x14>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	372c      	adds	r7, #44	@ 0x2c
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e12b      	b.n	80011c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff faea 	bl	8000558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2224      	movs	r2, #36	@ 0x24
 8000f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fbc:	f001 f832 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8000fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a81      	ldr	r2, [pc, #516]	@ (80011cc <HAL_I2C_Init+0x274>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d807      	bhi.n	8000fdc <HAL_I2C_Init+0x84>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4a80      	ldr	r2, [pc, #512]	@ (80011d0 <HAL_I2C_Init+0x278>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	bf94      	ite	ls
 8000fd4:	2301      	movls	r3, #1
 8000fd6:	2300      	movhi	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	e006      	b.n	8000fea <HAL_I2C_Init+0x92>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4a7d      	ldr	r2, [pc, #500]	@ (80011d4 <HAL_I2C_Init+0x27c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	bf94      	ite	ls
 8000fe4:	2301      	movls	r3, #1
 8000fe6:	2300      	movhi	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0e7      	b.n	80011c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4a78      	ldr	r2, [pc, #480]	@ (80011d8 <HAL_I2C_Init+0x280>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9b      	lsrs	r3, r3, #18
 8000ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	430a      	orrs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	4a6a      	ldr	r2, [pc, #424]	@ (80011cc <HAL_I2C_Init+0x274>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d802      	bhi.n	800102c <HAL_I2C_Init+0xd4>
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3301      	adds	r3, #1
 800102a:	e009      	b.n	8001040 <HAL_I2C_Init+0xe8>
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4a69      	ldr	r2, [pc, #420]	@ (80011dc <HAL_I2C_Init+0x284>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	099b      	lsrs	r3, r3, #6
 800103e:	3301      	adds	r3, #1
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	430b      	orrs	r3, r1
 8001046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001052:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	495c      	ldr	r1, [pc, #368]	@ (80011cc <HAL_I2C_Init+0x274>)
 800105c:	428b      	cmp	r3, r1
 800105e:	d819      	bhi.n	8001094 <HAL_I2C_Init+0x13c>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1e59      	subs	r1, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fbb1 f3f3 	udiv	r3, r1, r3
 800106e:	1c59      	adds	r1, r3, #1
 8001070:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001074:	400b      	ands	r3, r1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <HAL_I2C_Init+0x138>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1e59      	subs	r1, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fbb1 f3f3 	udiv	r3, r1, r3
 8001088:	3301      	adds	r3, #1
 800108a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108e:	e051      	b.n	8001134 <HAL_I2C_Init+0x1dc>
 8001090:	2304      	movs	r3, #4
 8001092:	e04f      	b.n	8001134 <HAL_I2C_Init+0x1dc>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d111      	bne.n	80010c0 <HAL_I2C_Init+0x168>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1e58      	subs	r0, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	440b      	add	r3, r1
 80010aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf0c      	ite	eq
 80010b8:	2301      	moveq	r3, #1
 80010ba:	2300      	movne	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	e012      	b.n	80010e6 <HAL_I2C_Init+0x18e>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1e58      	subs	r0, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	0099      	lsls	r1, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_Init+0x196>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e022      	b.n	8001134 <HAL_I2C_Init+0x1dc>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10e      	bne.n	8001114 <HAL_I2C_Init+0x1bc>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1e58      	subs	r0, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6859      	ldr	r1, [r3, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	440b      	add	r3, r1
 8001104:	fbb0 f3f3 	udiv	r3, r0, r3
 8001108:	3301      	adds	r3, #1
 800110a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001112:	e00f      	b.n	8001134 <HAL_I2C_Init+0x1dc>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	0099      	lsls	r1, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	fbb0 f3f3 	udiv	r3, r0, r3
 800112a:	3301      	adds	r3, #1
 800112c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	6809      	ldr	r1, [r1, #0]
 8001138:	4313      	orrs	r3, r2
 800113a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69da      	ldr	r2, [r3, #28]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001162:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6911      	ldr	r1, [r2, #16]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68d2      	ldr	r2, [r2, #12]
 800116e:	4311      	orrs	r1, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	430b      	orrs	r3, r1
 8001176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2220      	movs	r2, #32
 80011ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	000186a0 	.word	0x000186a0
 80011d0:	001e847f 	.word	0x001e847f
 80011d4:	003d08ff 	.word	0x003d08ff
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	10624dd3 	.word	0x10624dd3

080011e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	460b      	mov	r3, r1
 80011ee:	817b      	strh	r3, [r7, #10]
 80011f0:	4613      	mov	r3, r2
 80011f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fc1a 	bl	8000a2c <HAL_GetTick>
 80011f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b20      	cmp	r3, #32
 8001204:	f040 80e0 	bne.w	80013c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2319      	movs	r3, #25
 800120e:	2201      	movs	r2, #1
 8001210:	4970      	ldr	r1, [pc, #448]	@ (80013d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f964 	bl	80014e0 <I2C_WaitOnFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800121e:	2302      	movs	r3, #2
 8001220:	e0d3      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_I2C_Master_Transmit+0x50>
 800122c:	2302      	movs	r3, #2
 800122e:	e0cc      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d007      	beq.n	8001256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2221      	movs	r2, #33	@ 0x21
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2210      	movs	r2, #16
 8001272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	893a      	ldrh	r2, [r7, #8]
 8001286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a50      	ldr	r2, [pc, #320]	@ (80013d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001298:	8979      	ldrh	r1, [r7, #10]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f89c 	bl	80013dc <I2C_MasterRequestWrite>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e08d      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012c4:	e066      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	6a39      	ldr	r1, [r7, #32]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fa22 	bl	8001714 <I2C_WaitOnTXEFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d107      	bne.n	80012ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06b      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b04      	cmp	r3, #4
 800132e:	d11b      	bne.n	8001368 <HAL_I2C_Master_Transmit+0x188>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d017      	beq.n	8001368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001352:	b29b      	uxth	r3, r3
 8001354:	3b01      	subs	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 fa19 	bl	80017a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	2b04      	cmp	r3, #4
 800137e:	d107      	bne.n	8001390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800138e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e01a      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d194      	bne.n	80012c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013c8:	2302      	movs	r3, #2
  }
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	00100002 	.word	0x00100002
 80013d8:	ffff0000 	.word	0xffff0000

080013dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	460b      	mov	r3, r1
 80013ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d006      	beq.n	8001406 <I2C_MasterRequestWrite+0x2a>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d003      	beq.n	8001406 <I2C_MasterRequestWrite+0x2a>
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001404:	d108      	bne.n	8001418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e00b      	b.n	8001430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141c:	2b12      	cmp	r3, #18
 800141e:	d107      	bne.n	8001430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800142e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f84f 	bl	80014e0 <I2C_WaitOnFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00d      	beq.n	8001464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001456:	d103      	bne.n	8001460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e035      	b.n	80014d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800146c:	d108      	bne.n	8001480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	e01b      	b.n	80014b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001480:	897b      	ldrh	r3, [r7, #10]
 8001482:	11db      	asrs	r3, r3, #7
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f003 0306 	and.w	r3, r3, #6
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f063 030f 	orn	r3, r3, #15
 8001490:	b2da      	uxtb	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	490e      	ldr	r1, [pc, #56]	@ (80014d8 <I2C_MasterRequestWrite+0xfc>)
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f898 	bl	80015d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e010      	b.n	80014d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4907      	ldr	r1, [pc, #28]	@ (80014dc <I2C_MasterRequestWrite+0x100>)
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f888 	bl	80015d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	00010008 	.word	0x00010008
 80014dc:	00010002 	.word	0x00010002

080014e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f0:	e048      	b.n	8001584 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d044      	beq.n	8001584 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fa:	f7ff fa97 	bl	8000a2c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d302      	bcc.n	8001510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d139      	bne.n	8001584 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d10d      	bne.n	8001536 <I2C_WaitOnFlagUntilTimeout+0x56>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	43da      	mvns	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4013      	ands	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	e00c      	b.n	8001550 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	43da      	mvns	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4013      	ands	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	429a      	cmp	r2, r3
 8001554:	d116      	bne.n	8001584 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e023      	b.n	80015cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10d      	bne.n	80015aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	43da      	mvns	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4013      	ands	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	e00c      	b.n	80015c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	43da      	mvns	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4013      	ands	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d093      	beq.n	80014f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015e2:	e071      	b.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f2:	d123      	bne.n	800163c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001602:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800160c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	f043 0204 	orr.w	r2, r3, #4
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e067      	b.n	800170c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001642:	d041      	beq.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001644:	f7ff f9f2 	bl	8000a2c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d302      	bcc.n	800165a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d136      	bne.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10c      	bne.n	800167e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4013      	ands	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	e00b      	b.n	8001696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	43da      	mvns	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4013      	ands	r3, r2
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	f043 0220 	orr.w	r2, r3, #32
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e021      	b.n	800170c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10c      	bne.n	80016ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	43da      	mvns	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4013      	ands	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf14      	ite	ne
 80016e4:	2301      	movne	r3, #1
 80016e6:	2300      	moveq	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e00b      	b.n	8001704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4013      	ands	r3, r2
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f af6d 	bne.w	80015e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001720:	e034      	b.n	800178c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 f886 	bl	8001834 <I2C_IsAcknowledgeFailed>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e034      	b.n	800179c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d028      	beq.n	800178c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800173a:	f7ff f977 	bl	8000a2c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	429a      	cmp	r2, r3
 8001748:	d302      	bcc.n	8001750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11d      	bne.n	800178c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800175a:	2b80      	cmp	r3, #128	@ 0x80
 800175c:	d016      	beq.n	800178c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f043 0220 	orr.w	r2, r3, #32
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e007      	b.n	800179c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001796:	2b80      	cmp	r3, #128	@ 0x80
 8001798:	d1c3      	bne.n	8001722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017b0:	e034      	b.n	800181c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f83e 	bl	8001834 <I2C_IsAcknowledgeFailed>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e034      	b.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d028      	beq.n	800181c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ca:	f7ff f92f 	bl	8000a2c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d302      	bcc.n	80017e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11d      	bne.n	800181c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d016      	beq.n	800181c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e007      	b.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b04      	cmp	r3, #4
 8001828:	d1c3      	bne.n	80017b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800184a:	d11b      	bne.n	8001884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f043 0204 	orr.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e272      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8087 	beq.w	80019be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b0:	4b92      	ldr	r3, [pc, #584]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d00c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018bc:	4b8f      	ldr	r3, [pc, #572]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d112      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
 80018c8:	4b8c      	ldr	r3, [pc, #560]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d10b      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	4b89      	ldr	r3, [pc, #548]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d06c      	beq.n	80019bc <HAL_RCC_OscConfig+0x12c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d168      	bne.n	80019bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e24c      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x76>
 80018f8:	4b80      	ldr	r3, [pc, #512]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a7f      	ldr	r2, [pc, #508]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e02e      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b7b      	ldr	r3, [pc, #492]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7a      	ldr	r2, [pc, #488]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e01d      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0xbc>
 8001932:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a71      	ldr	r2, [pc, #452]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6e      	ldr	r2, [pc, #440]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 800194c:	4b6b      	ldr	r3, [pc, #428]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a67      	ldr	r2, [pc, #412]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f85e 	bl	8000a2c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff f85a 	bl	8000a2c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e200      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b5d      	ldr	r3, [pc, #372]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0xe4>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff f84a 	bl	8000a2c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f846 	bl	8000a2c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	@ 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1ec      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x10c>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ca:	4b4c      	ldr	r3, [pc, #304]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
 80019e2:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b43      	ldr	r3, [pc, #268]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1c0      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4939      	ldr	r1, [pc, #228]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b36      	ldr	r3, [pc, #216]	@ (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7fe ffff 	bl	8000a2c <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7fe fffb 	bl	8000a2c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1a1      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4927      	ldr	r1, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe ffde 	bl	8000a2c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7fe ffda 	bl	8000a2c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e180      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7fe ffbe 	bl	8000a2c <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7fe ffba 	bl	8000a2c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e160      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 faba 	bl	800204c <RCC_Delay>
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe ffa4 	bl	8000a2c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7fe ffa0 	bl	8000a2c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d908      	bls.n	8001b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e146      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420000 	.word	0x42420000
 8001b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b92      	ldr	r3, [pc, #584]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e9      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a6 	beq.w	8001c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b8b      	ldr	r3, [pc, #556]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b88      	ldr	r3, [pc, #544]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a87      	ldr	r2, [pc, #540]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b85      	ldr	r3, [pc, #532]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b82      	ldr	r3, [pc, #520]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7fe ff61 	bl	8000a2c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe ff5d 	bl	8000a2c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	@ 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e103      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b75      	ldr	r3, [pc, #468]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e02d      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x334>
 8001baa:	4b6a      	ldr	r3, [pc, #424]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a69      	ldr	r2, [pc, #420]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b67      	ldr	r3, [pc, #412]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a66      	ldr	r2, [pc, #408]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	e01c      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x356>
 8001bcc:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a60      	ldr	r2, [pc, #384]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	e00b      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001be6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a5a      	ldr	r2, [pc, #360]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b58      	ldr	r3, [pc, #352]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a57      	ldr	r2, [pc, #348]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d015      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7fe ff11 	bl	8000a2c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe ff0d 	bl	8000a2c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0b1      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ee      	beq.n	8001c0e <HAL_RCC_OscConfig+0x37e>
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7fe fefb 	bl	8000a2c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7fe fef7 	bl	8000a2c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e09b      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	4b40      	ldr	r3, [pc, #256]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ee      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a3b      	ldr	r2, [pc, #236]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d061      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d146      	bne.n	8001d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b33      	ldr	r3, [pc, #204]	@ (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7fe fecb 	bl	8000a2c <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe fec7 	bl	8000a2c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e06d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4921      	ldr	r1, [pc, #132]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a19      	ldr	r1, [r3, #32]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	491b      	ldr	r1, [pc, #108]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fe9b 	bl	8000a2c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe fe97 	bl	8000a2c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e03d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
 8001d18:	e035      	b.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe fe84 	bl	8000a2c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe fe80 	bl	8000a2c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e026      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x498>
 8001d46:	e01e      	b.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e019      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_RCC_OscConfig+0x500>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0d0      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4965      	ldr	r1, [pc, #404]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a58      	ldr	r2, [pc, #352]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d040      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d115      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e073      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b39      	ldr	r3, [pc, #228]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4936      	ldr	r1, [pc, #216]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7fe fdd2 	bl	8000a2c <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7fe fdce 	bl	8000a2c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e053      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d210      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4922      	ldr	r1, [pc, #136]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490a      	ldr	r1, [pc, #40]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <HAL_RCC_ClockConfig+0x1cc>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_RCC_ClockConfig+0x1d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fd30 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08002e58 	.word	0x08002e58
 8001f60:	20000a64 	.word	0x20000a64
 8001f64:	20000a68 	.word	0x20000a68

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x36>
 8001f96:	e027      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	613b      	str	r3, [r7, #16]
      break;
 8001f9c:	e027      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0c5b      	lsrs	r3, r3, #17
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	fb03 f202 	mul.w	r2, r3, r2
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	613b      	str	r3, [r7, #16]
      break;
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fea:	613b      	str	r3, [r7, #16]
      break;
 8001fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fee:	693b      	ldr	r3, [r7, #16]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	007a1200 	.word	0x007a1200
 8002004:	08002e70 	.word	0x08002e70
 8002008:	08002e80 	.word	0x08002e80
 800200c:	003d0900 	.word	0x003d0900

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b02      	ldr	r3, [pc, #8]	@ (8002020 <HAL_RCC_GetHCLKFreq+0x10>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	20000a64 	.word	0x20000a64

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff2 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	@ (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	08002e68 	.word	0x08002e68

0800204c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <RCC_Delay+0x34>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <RCC_Delay+0x38>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0a5b      	lsrs	r3, r3, #9
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002068:	bf00      	nop
  }
  while (Delay --);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	60fa      	str	r2, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <RCC_Delay+0x1c>
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	20000a64 	.word	0x20000a64
 8002084:	10624dd3 	.word	0x10624dd3

08002088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e093      	b.n	80021c4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe fbff 	bl	80008b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020cc:	f023 0307 	bic.w	r3, r3, #7
 80020d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4610      	mov	r0, r2
 80020de:	f000 f903 	bl	80022e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4313      	orrs	r3, r2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002128:	f023 030c 	bic.w	r3, r3, #12
 800212c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002134:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	4313      	orrs	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	011a      	lsls	r2, r3, #4
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	031b      	lsls	r3, r3, #12
 8002158:	4313      	orrs	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4313      	orrs	r3, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d110      	bne.n	800221e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d102      	bne.n	8002208 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002202:	7b7b      	ldrb	r3, [r7, #13]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e069      	b.n	80022e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800221c:	e031      	b.n	8002282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d110      	bne.n	8002246 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800222a:	7b3b      	ldrb	r3, [r7, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d001      	beq.n	8002234 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e055      	b.n	80022e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002244:	e01d      	b.n	8002282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002252:	7b7b      	ldrb	r3, [r7, #13]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002258:	7b3b      	ldrb	r3, [r7, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e03e      	b.n	80022e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_TIM_Encoder_Start+0xc4>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d008      	beq.n	80022a0 <HAL_TIM_Encoder_Start+0xd4>
 800228e:	e00f      	b.n	80022b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2201      	movs	r2, #1
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f893 	bl	80023c4 <TIM_CCxChannelCmd>
      break;
 800229e:	e016      	b.n	80022ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	2104      	movs	r1, #4
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f88b 	bl	80023c4 <TIM_CCxChannelCmd>
      break;
 80022ae:	e00e      	b.n	80022ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f883 	bl	80023c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2201      	movs	r2, #1
 80022c4:	2104      	movs	r1, #4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f87c 	bl	80023c4 <TIM_CCxChannelCmd>
      break;
 80022cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a2f      	ldr	r2, [pc, #188]	@ (80023b8 <TIM_Base_SetConfig+0xd0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a2c      	ldr	r2, [pc, #176]	@ (80023bc <TIM_Base_SetConfig+0xd4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <TIM_Base_SetConfig+0xd8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <TIM_Base_SetConfig+0xd0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <TIM_Base_SetConfig+0xd4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1e      	ldr	r2, [pc, #120]	@ (80023c0 <TIM_Base_SetConfig+0xd8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <TIM_Base_SetConfig+0xd0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f023 0201 	bic.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]
  }
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800

080023c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002420:	2302      	movs	r3, #2
 8002422:	e046      	b.n	80024b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00e      	beq.n	8002486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002470:	d009      	beq.n	8002486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a10      	ldr	r2, [pc, #64]	@ (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10c      	bne.n	80024a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800248c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4313      	orrs	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800

080024c8 <siprintf>:
 80024c8:	b40e      	push	{r1, r2, r3}
 80024ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024ce:	b500      	push	{lr}
 80024d0:	b09c      	sub	sp, #112	@ 0x70
 80024d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80024d4:	9002      	str	r0, [sp, #8]
 80024d6:	9006      	str	r0, [sp, #24]
 80024d8:	9107      	str	r1, [sp, #28]
 80024da:	9104      	str	r1, [sp, #16]
 80024dc:	4808      	ldr	r0, [pc, #32]	@ (8002500 <siprintf+0x38>)
 80024de:	4909      	ldr	r1, [pc, #36]	@ (8002504 <siprintf+0x3c>)
 80024e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024e4:	9105      	str	r1, [sp, #20]
 80024e6:	6800      	ldr	r0, [r0, #0]
 80024e8:	a902      	add	r1, sp, #8
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	f000 f992 	bl	8002814 <_svfiprintf_r>
 80024f0:	2200      	movs	r2, #0
 80024f2:	9b02      	ldr	r3, [sp, #8]
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	b01c      	add	sp, #112	@ 0x70
 80024f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024fc:	b003      	add	sp, #12
 80024fe:	4770      	bx	lr
 8002500:	20000a70 	.word	0x20000a70
 8002504:	ffff0208 	.word	0xffff0208

08002508 <memset>:
 8002508:	4603      	mov	r3, r0
 800250a:	4402      	add	r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <__errno>:
 8002518:	4b01      	ldr	r3, [pc, #4]	@ (8002520 <__errno+0x8>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000a70 	.word	0x20000a70

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	2600      	movs	r6, #0
 8002528:	4d0c      	ldr	r5, [pc, #48]	@ (800255c <__libc_init_array+0x38>)
 800252a:	4c0d      	ldr	r4, [pc, #52]	@ (8002560 <__libc_init_array+0x3c>)
 800252c:	1b64      	subs	r4, r4, r5
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	f000 fc78 	bl	8002e28 <_init>
 8002538:	2600      	movs	r6, #0
 800253a:	4d0a      	ldr	r5, [pc, #40]	@ (8002564 <__libc_init_array+0x40>)
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <__libc_init_array+0x44>)
 800253e:	1b64      	subs	r4, r4, r5
 8002540:	10a4      	asrs	r4, r4, #2
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	08002eb8 	.word	0x08002eb8
 8002560:	08002eb8 	.word	0x08002eb8
 8002564:	08002eb8 	.word	0x08002eb8
 8002568:	08002ebc 	.word	0x08002ebc

0800256c <__retarget_lock_acquire_recursive>:
 800256c:	4770      	bx	lr

0800256e <__retarget_lock_release_recursive>:
 800256e:	4770      	bx	lr

08002570 <_free_r>:
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4605      	mov	r5, r0
 8002574:	2900      	cmp	r1, #0
 8002576:	d040      	beq.n	80025fa <_free_r+0x8a>
 8002578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800257c:	1f0c      	subs	r4, r1, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	bfb8      	it	lt
 8002582:	18e4      	addlt	r4, r4, r3
 8002584:	f000 f8de 	bl	8002744 <__malloc_lock>
 8002588:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <_free_r+0x8c>)
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	b933      	cbnz	r3, 800259c <_free_r+0x2c>
 800258e:	6063      	str	r3, [r4, #4]
 8002590:	6014      	str	r4, [r2, #0]
 8002592:	4628      	mov	r0, r5
 8002594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002598:	f000 b8da 	b.w	8002750 <__malloc_unlock>
 800259c:	42a3      	cmp	r3, r4
 800259e:	d908      	bls.n	80025b2 <_free_r+0x42>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	1821      	adds	r1, r4, r0
 80025a4:	428b      	cmp	r3, r1
 80025a6:	bf01      	itttt	eq
 80025a8:	6819      	ldreq	r1, [r3, #0]
 80025aa:	685b      	ldreq	r3, [r3, #4]
 80025ac:	1809      	addeq	r1, r1, r0
 80025ae:	6021      	streq	r1, [r4, #0]
 80025b0:	e7ed      	b.n	800258e <_free_r+0x1e>
 80025b2:	461a      	mov	r2, r3
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b10b      	cbz	r3, 80025bc <_free_r+0x4c>
 80025b8:	42a3      	cmp	r3, r4
 80025ba:	d9fa      	bls.n	80025b2 <_free_r+0x42>
 80025bc:	6811      	ldr	r1, [r2, #0]
 80025be:	1850      	adds	r0, r2, r1
 80025c0:	42a0      	cmp	r0, r4
 80025c2:	d10b      	bne.n	80025dc <_free_r+0x6c>
 80025c4:	6820      	ldr	r0, [r4, #0]
 80025c6:	4401      	add	r1, r0
 80025c8:	1850      	adds	r0, r2, r1
 80025ca:	4283      	cmp	r3, r0
 80025cc:	6011      	str	r1, [r2, #0]
 80025ce:	d1e0      	bne.n	8002592 <_free_r+0x22>
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4408      	add	r0, r1
 80025d6:	6010      	str	r0, [r2, #0]
 80025d8:	6053      	str	r3, [r2, #4]
 80025da:	e7da      	b.n	8002592 <_free_r+0x22>
 80025dc:	d902      	bls.n	80025e4 <_free_r+0x74>
 80025de:	230c      	movs	r3, #12
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	e7d6      	b.n	8002592 <_free_r+0x22>
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	1821      	adds	r1, r4, r0
 80025e8:	428b      	cmp	r3, r1
 80025ea:	bf01      	itttt	eq
 80025ec:	6819      	ldreq	r1, [r3, #0]
 80025ee:	685b      	ldreq	r3, [r3, #4]
 80025f0:	1809      	addeq	r1, r1, r0
 80025f2:	6021      	streq	r1, [r4, #0]
 80025f4:	6063      	str	r3, [r4, #4]
 80025f6:	6054      	str	r4, [r2, #4]
 80025f8:	e7cb      	b.n	8002592 <_free_r+0x22>
 80025fa:	bd38      	pop	{r3, r4, r5, pc}
 80025fc:	20000cc4 	.word	0x20000cc4

08002600 <sbrk_aligned>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	4e0f      	ldr	r6, [pc, #60]	@ (8002640 <sbrk_aligned+0x40>)
 8002604:	460c      	mov	r4, r1
 8002606:	6831      	ldr	r1, [r6, #0]
 8002608:	4605      	mov	r5, r0
 800260a:	b911      	cbnz	r1, 8002612 <sbrk_aligned+0x12>
 800260c:	f000 fbaa 	bl	8002d64 <_sbrk_r>
 8002610:	6030      	str	r0, [r6, #0]
 8002612:	4621      	mov	r1, r4
 8002614:	4628      	mov	r0, r5
 8002616:	f000 fba5 	bl	8002d64 <_sbrk_r>
 800261a:	1c43      	adds	r3, r0, #1
 800261c:	d103      	bne.n	8002626 <sbrk_aligned+0x26>
 800261e:	f04f 34ff 	mov.w	r4, #4294967295
 8002622:	4620      	mov	r0, r4
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	1cc4      	adds	r4, r0, #3
 8002628:	f024 0403 	bic.w	r4, r4, #3
 800262c:	42a0      	cmp	r0, r4
 800262e:	d0f8      	beq.n	8002622 <sbrk_aligned+0x22>
 8002630:	1a21      	subs	r1, r4, r0
 8002632:	4628      	mov	r0, r5
 8002634:	f000 fb96 	bl	8002d64 <_sbrk_r>
 8002638:	3001      	adds	r0, #1
 800263a:	d1f2      	bne.n	8002622 <sbrk_aligned+0x22>
 800263c:	e7ef      	b.n	800261e <sbrk_aligned+0x1e>
 800263e:	bf00      	nop
 8002640:	20000cc0 	.word	0x20000cc0

08002644 <_malloc_r>:
 8002644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002648:	1ccd      	adds	r5, r1, #3
 800264a:	f025 0503 	bic.w	r5, r5, #3
 800264e:	3508      	adds	r5, #8
 8002650:	2d0c      	cmp	r5, #12
 8002652:	bf38      	it	cc
 8002654:	250c      	movcc	r5, #12
 8002656:	2d00      	cmp	r5, #0
 8002658:	4606      	mov	r6, r0
 800265a:	db01      	blt.n	8002660 <_malloc_r+0x1c>
 800265c:	42a9      	cmp	r1, r5
 800265e:	d904      	bls.n	800266a <_malloc_r+0x26>
 8002660:	230c      	movs	r3, #12
 8002662:	6033      	str	r3, [r6, #0]
 8002664:	2000      	movs	r0, #0
 8002666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800266a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002740 <_malloc_r+0xfc>
 800266e:	f000 f869 	bl	8002744 <__malloc_lock>
 8002672:	f8d8 3000 	ldr.w	r3, [r8]
 8002676:	461c      	mov	r4, r3
 8002678:	bb44      	cbnz	r4, 80026cc <_malloc_r+0x88>
 800267a:	4629      	mov	r1, r5
 800267c:	4630      	mov	r0, r6
 800267e:	f7ff ffbf 	bl	8002600 <sbrk_aligned>
 8002682:	1c43      	adds	r3, r0, #1
 8002684:	4604      	mov	r4, r0
 8002686:	d158      	bne.n	800273a <_malloc_r+0xf6>
 8002688:	f8d8 4000 	ldr.w	r4, [r8]
 800268c:	4627      	mov	r7, r4
 800268e:	2f00      	cmp	r7, #0
 8002690:	d143      	bne.n	800271a <_malloc_r+0xd6>
 8002692:	2c00      	cmp	r4, #0
 8002694:	d04b      	beq.n	800272e <_malloc_r+0xea>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	4639      	mov	r1, r7
 800269a:	4630      	mov	r0, r6
 800269c:	eb04 0903 	add.w	r9, r4, r3
 80026a0:	f000 fb60 	bl	8002d64 <_sbrk_r>
 80026a4:	4581      	cmp	r9, r0
 80026a6:	d142      	bne.n	800272e <_malloc_r+0xea>
 80026a8:	6821      	ldr	r1, [r4, #0]
 80026aa:	4630      	mov	r0, r6
 80026ac:	1a6d      	subs	r5, r5, r1
 80026ae:	4629      	mov	r1, r5
 80026b0:	f7ff ffa6 	bl	8002600 <sbrk_aligned>
 80026b4:	3001      	adds	r0, #1
 80026b6:	d03a      	beq.n	800272e <_malloc_r+0xea>
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	442b      	add	r3, r5
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	f8d8 3000 	ldr.w	r3, [r8]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	bb62      	cbnz	r2, 8002720 <_malloc_r+0xdc>
 80026c6:	f8c8 7000 	str.w	r7, [r8]
 80026ca:	e00f      	b.n	80026ec <_malloc_r+0xa8>
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	1b52      	subs	r2, r2, r5
 80026d0:	d420      	bmi.n	8002714 <_malloc_r+0xd0>
 80026d2:	2a0b      	cmp	r2, #11
 80026d4:	d917      	bls.n	8002706 <_malloc_r+0xc2>
 80026d6:	1961      	adds	r1, r4, r5
 80026d8:	42a3      	cmp	r3, r4
 80026da:	6025      	str	r5, [r4, #0]
 80026dc:	bf18      	it	ne
 80026de:	6059      	strne	r1, [r3, #4]
 80026e0:	6863      	ldr	r3, [r4, #4]
 80026e2:	bf08      	it	eq
 80026e4:	f8c8 1000 	streq.w	r1, [r8]
 80026e8:	5162      	str	r2, [r4, r5]
 80026ea:	604b      	str	r3, [r1, #4]
 80026ec:	4630      	mov	r0, r6
 80026ee:	f000 f82f 	bl	8002750 <__malloc_unlock>
 80026f2:	f104 000b 	add.w	r0, r4, #11
 80026f6:	1d23      	adds	r3, r4, #4
 80026f8:	f020 0007 	bic.w	r0, r0, #7
 80026fc:	1ac2      	subs	r2, r0, r3
 80026fe:	bf1c      	itt	ne
 8002700:	1a1b      	subne	r3, r3, r0
 8002702:	50a3      	strne	r3, [r4, r2]
 8002704:	e7af      	b.n	8002666 <_malloc_r+0x22>
 8002706:	6862      	ldr	r2, [r4, #4]
 8002708:	42a3      	cmp	r3, r4
 800270a:	bf0c      	ite	eq
 800270c:	f8c8 2000 	streq.w	r2, [r8]
 8002710:	605a      	strne	r2, [r3, #4]
 8002712:	e7eb      	b.n	80026ec <_malloc_r+0xa8>
 8002714:	4623      	mov	r3, r4
 8002716:	6864      	ldr	r4, [r4, #4]
 8002718:	e7ae      	b.n	8002678 <_malloc_r+0x34>
 800271a:	463c      	mov	r4, r7
 800271c:	687f      	ldr	r7, [r7, #4]
 800271e:	e7b6      	b.n	800268e <_malloc_r+0x4a>
 8002720:	461a      	mov	r2, r3
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	42a3      	cmp	r3, r4
 8002726:	d1fb      	bne.n	8002720 <_malloc_r+0xdc>
 8002728:	2300      	movs	r3, #0
 800272a:	6053      	str	r3, [r2, #4]
 800272c:	e7de      	b.n	80026ec <_malloc_r+0xa8>
 800272e:	230c      	movs	r3, #12
 8002730:	4630      	mov	r0, r6
 8002732:	6033      	str	r3, [r6, #0]
 8002734:	f000 f80c 	bl	8002750 <__malloc_unlock>
 8002738:	e794      	b.n	8002664 <_malloc_r+0x20>
 800273a:	6005      	str	r5, [r0, #0]
 800273c:	e7d6      	b.n	80026ec <_malloc_r+0xa8>
 800273e:	bf00      	nop
 8002740:	20000cc4 	.word	0x20000cc4

08002744 <__malloc_lock>:
 8002744:	4801      	ldr	r0, [pc, #4]	@ (800274c <__malloc_lock+0x8>)
 8002746:	f7ff bf11 	b.w	800256c <__retarget_lock_acquire_recursive>
 800274a:	bf00      	nop
 800274c:	20000cbc 	.word	0x20000cbc

08002750 <__malloc_unlock>:
 8002750:	4801      	ldr	r0, [pc, #4]	@ (8002758 <__malloc_unlock+0x8>)
 8002752:	f7ff bf0c 	b.w	800256e <__retarget_lock_release_recursive>
 8002756:	bf00      	nop
 8002758:	20000cbc 	.word	0x20000cbc

0800275c <__ssputs_r>:
 800275c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002760:	461f      	mov	r7, r3
 8002762:	688e      	ldr	r6, [r1, #8]
 8002764:	4682      	mov	sl, r0
 8002766:	42be      	cmp	r6, r7
 8002768:	460c      	mov	r4, r1
 800276a:	4690      	mov	r8, r2
 800276c:	680b      	ldr	r3, [r1, #0]
 800276e:	d82d      	bhi.n	80027cc <__ssputs_r+0x70>
 8002770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002778:	d026      	beq.n	80027c8 <__ssputs_r+0x6c>
 800277a:	6965      	ldr	r5, [r4, #20]
 800277c:	6909      	ldr	r1, [r1, #16]
 800277e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002782:	eba3 0901 	sub.w	r9, r3, r1
 8002786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800278a:	1c7b      	adds	r3, r7, #1
 800278c:	444b      	add	r3, r9
 800278e:	106d      	asrs	r5, r5, #1
 8002790:	429d      	cmp	r5, r3
 8002792:	bf38      	it	cc
 8002794:	461d      	movcc	r5, r3
 8002796:	0553      	lsls	r3, r2, #21
 8002798:	d527      	bpl.n	80027ea <__ssputs_r+0x8e>
 800279a:	4629      	mov	r1, r5
 800279c:	f7ff ff52 	bl	8002644 <_malloc_r>
 80027a0:	4606      	mov	r6, r0
 80027a2:	b360      	cbz	r0, 80027fe <__ssputs_r+0xa2>
 80027a4:	464a      	mov	r2, r9
 80027a6:	6921      	ldr	r1, [r4, #16]
 80027a8:	f000 fafa 	bl	8002da0 <memcpy>
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b6:	81a3      	strh	r3, [r4, #12]
 80027b8:	6126      	str	r6, [r4, #16]
 80027ba:	444e      	add	r6, r9
 80027bc:	6026      	str	r6, [r4, #0]
 80027be:	463e      	mov	r6, r7
 80027c0:	6165      	str	r5, [r4, #20]
 80027c2:	eba5 0509 	sub.w	r5, r5, r9
 80027c6:	60a5      	str	r5, [r4, #8]
 80027c8:	42be      	cmp	r6, r7
 80027ca:	d900      	bls.n	80027ce <__ssputs_r+0x72>
 80027cc:	463e      	mov	r6, r7
 80027ce:	4632      	mov	r2, r6
 80027d0:	4641      	mov	r1, r8
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	f000 faac 	bl	8002d30 <memmove>
 80027d8:	2000      	movs	r0, #0
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	1b9b      	subs	r3, r3, r6
 80027de:	60a3      	str	r3, [r4, #8]
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	4433      	add	r3, r6
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ea:	462a      	mov	r2, r5
 80027ec:	f000 fae6 	bl	8002dbc <_realloc_r>
 80027f0:	4606      	mov	r6, r0
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1e0      	bne.n	80027b8 <__ssputs_r+0x5c>
 80027f6:	4650      	mov	r0, sl
 80027f8:	6921      	ldr	r1, [r4, #16]
 80027fa:	f7ff feb9 	bl	8002570 <_free_r>
 80027fe:	230c      	movs	r3, #12
 8002800:	f8ca 3000 	str.w	r3, [sl]
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	f04f 30ff 	mov.w	r0, #4294967295
 800280a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800280e:	81a3      	strh	r3, [r4, #12]
 8002810:	e7e9      	b.n	80027e6 <__ssputs_r+0x8a>
	...

08002814 <_svfiprintf_r>:
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	4698      	mov	r8, r3
 800281a:	898b      	ldrh	r3, [r1, #12]
 800281c:	4607      	mov	r7, r0
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	460d      	mov	r5, r1
 8002822:	4614      	mov	r4, r2
 8002824:	b09d      	sub	sp, #116	@ 0x74
 8002826:	d510      	bpl.n	800284a <_svfiprintf_r+0x36>
 8002828:	690b      	ldr	r3, [r1, #16]
 800282a:	b973      	cbnz	r3, 800284a <_svfiprintf_r+0x36>
 800282c:	2140      	movs	r1, #64	@ 0x40
 800282e:	f7ff ff09 	bl	8002644 <_malloc_r>
 8002832:	6028      	str	r0, [r5, #0]
 8002834:	6128      	str	r0, [r5, #16]
 8002836:	b930      	cbnz	r0, 8002846 <_svfiprintf_r+0x32>
 8002838:	230c      	movs	r3, #12
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	b01d      	add	sp, #116	@ 0x74
 8002842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002846:	2340      	movs	r3, #64	@ 0x40
 8002848:	616b      	str	r3, [r5, #20]
 800284a:	2300      	movs	r3, #0
 800284c:	9309      	str	r3, [sp, #36]	@ 0x24
 800284e:	2320      	movs	r3, #32
 8002850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002854:	2330      	movs	r3, #48	@ 0x30
 8002856:	f04f 0901 	mov.w	r9, #1
 800285a:	f8cd 800c 	str.w	r8, [sp, #12]
 800285e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80029f8 <_svfiprintf_r+0x1e4>
 8002862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002866:	4623      	mov	r3, r4
 8002868:	469a      	mov	sl, r3
 800286a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800286e:	b10a      	cbz	r2, 8002874 <_svfiprintf_r+0x60>
 8002870:	2a25      	cmp	r2, #37	@ 0x25
 8002872:	d1f9      	bne.n	8002868 <_svfiprintf_r+0x54>
 8002874:	ebba 0b04 	subs.w	fp, sl, r4
 8002878:	d00b      	beq.n	8002892 <_svfiprintf_r+0x7e>
 800287a:	465b      	mov	r3, fp
 800287c:	4622      	mov	r2, r4
 800287e:	4629      	mov	r1, r5
 8002880:	4638      	mov	r0, r7
 8002882:	f7ff ff6b 	bl	800275c <__ssputs_r>
 8002886:	3001      	adds	r0, #1
 8002888:	f000 80a7 	beq.w	80029da <_svfiprintf_r+0x1c6>
 800288c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800288e:	445a      	add	r2, fp
 8002890:	9209      	str	r2, [sp, #36]	@ 0x24
 8002892:	f89a 3000 	ldrb.w	r3, [sl]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 809f 	beq.w	80029da <_svfiprintf_r+0x1c6>
 800289c:	2300      	movs	r3, #0
 800289e:	f04f 32ff 	mov.w	r2, #4294967295
 80028a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028a6:	f10a 0a01 	add.w	sl, sl, #1
 80028aa:	9304      	str	r3, [sp, #16]
 80028ac:	9307      	str	r3, [sp, #28]
 80028ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80028b4:	4654      	mov	r4, sl
 80028b6:	2205      	movs	r2, #5
 80028b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028bc:	484e      	ldr	r0, [pc, #312]	@ (80029f8 <_svfiprintf_r+0x1e4>)
 80028be:	f000 fa61 	bl	8002d84 <memchr>
 80028c2:	9a04      	ldr	r2, [sp, #16]
 80028c4:	b9d8      	cbnz	r0, 80028fe <_svfiprintf_r+0xea>
 80028c6:	06d0      	lsls	r0, r2, #27
 80028c8:	bf44      	itt	mi
 80028ca:	2320      	movmi	r3, #32
 80028cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028d0:	0711      	lsls	r1, r2, #28
 80028d2:	bf44      	itt	mi
 80028d4:	232b      	movmi	r3, #43	@ 0x2b
 80028d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028da:	f89a 3000 	ldrb.w	r3, [sl]
 80028de:	2b2a      	cmp	r3, #42	@ 0x2a
 80028e0:	d015      	beq.n	800290e <_svfiprintf_r+0xfa>
 80028e2:	4654      	mov	r4, sl
 80028e4:	2000      	movs	r0, #0
 80028e6:	f04f 0c0a 	mov.w	ip, #10
 80028ea:	9a07      	ldr	r2, [sp, #28]
 80028ec:	4621      	mov	r1, r4
 80028ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028f2:	3b30      	subs	r3, #48	@ 0x30
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	d94b      	bls.n	8002990 <_svfiprintf_r+0x17c>
 80028f8:	b1b0      	cbz	r0, 8002928 <_svfiprintf_r+0x114>
 80028fa:	9207      	str	r2, [sp, #28]
 80028fc:	e014      	b.n	8002928 <_svfiprintf_r+0x114>
 80028fe:	eba0 0308 	sub.w	r3, r0, r8
 8002902:	fa09 f303 	lsl.w	r3, r9, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	46a2      	mov	sl, r4
 800290a:	9304      	str	r3, [sp, #16]
 800290c:	e7d2      	b.n	80028b4 <_svfiprintf_r+0xa0>
 800290e:	9b03      	ldr	r3, [sp, #12]
 8002910:	1d19      	adds	r1, r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	9103      	str	r1, [sp, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	bfbb      	ittet	lt
 800291a:	425b      	neglt	r3, r3
 800291c:	f042 0202 	orrlt.w	r2, r2, #2
 8002920:	9307      	strge	r3, [sp, #28]
 8002922:	9307      	strlt	r3, [sp, #28]
 8002924:	bfb8      	it	lt
 8002926:	9204      	strlt	r2, [sp, #16]
 8002928:	7823      	ldrb	r3, [r4, #0]
 800292a:	2b2e      	cmp	r3, #46	@ 0x2e
 800292c:	d10a      	bne.n	8002944 <_svfiprintf_r+0x130>
 800292e:	7863      	ldrb	r3, [r4, #1]
 8002930:	2b2a      	cmp	r3, #42	@ 0x2a
 8002932:	d132      	bne.n	800299a <_svfiprintf_r+0x186>
 8002934:	9b03      	ldr	r3, [sp, #12]
 8002936:	3402      	adds	r4, #2
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	9203      	str	r2, [sp, #12]
 800293e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002942:	9305      	str	r3, [sp, #20]
 8002944:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80029fc <_svfiprintf_r+0x1e8>
 8002948:	2203      	movs	r2, #3
 800294a:	4650      	mov	r0, sl
 800294c:	7821      	ldrb	r1, [r4, #0]
 800294e:	f000 fa19 	bl	8002d84 <memchr>
 8002952:	b138      	cbz	r0, 8002964 <_svfiprintf_r+0x150>
 8002954:	2240      	movs	r2, #64	@ 0x40
 8002956:	9b04      	ldr	r3, [sp, #16]
 8002958:	eba0 000a 	sub.w	r0, r0, sl
 800295c:	4082      	lsls	r2, r0
 800295e:	4313      	orrs	r3, r2
 8002960:	3401      	adds	r4, #1
 8002962:	9304      	str	r3, [sp, #16]
 8002964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002968:	2206      	movs	r2, #6
 800296a:	4825      	ldr	r0, [pc, #148]	@ (8002a00 <_svfiprintf_r+0x1ec>)
 800296c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002970:	f000 fa08 	bl	8002d84 <memchr>
 8002974:	2800      	cmp	r0, #0
 8002976:	d036      	beq.n	80029e6 <_svfiprintf_r+0x1d2>
 8002978:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <_svfiprintf_r+0x1f0>)
 800297a:	bb1b      	cbnz	r3, 80029c4 <_svfiprintf_r+0x1b0>
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	3307      	adds	r3, #7
 8002980:	f023 0307 	bic.w	r3, r3, #7
 8002984:	3308      	adds	r3, #8
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800298a:	4433      	add	r3, r6
 800298c:	9309      	str	r3, [sp, #36]	@ 0x24
 800298e:	e76a      	b.n	8002866 <_svfiprintf_r+0x52>
 8002990:	460c      	mov	r4, r1
 8002992:	2001      	movs	r0, #1
 8002994:	fb0c 3202 	mla	r2, ip, r2, r3
 8002998:	e7a8      	b.n	80028ec <_svfiprintf_r+0xd8>
 800299a:	2300      	movs	r3, #0
 800299c:	f04f 0c0a 	mov.w	ip, #10
 80029a0:	4619      	mov	r1, r3
 80029a2:	3401      	adds	r4, #1
 80029a4:	9305      	str	r3, [sp, #20]
 80029a6:	4620      	mov	r0, r4
 80029a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029ac:	3a30      	subs	r2, #48	@ 0x30
 80029ae:	2a09      	cmp	r2, #9
 80029b0:	d903      	bls.n	80029ba <_svfiprintf_r+0x1a6>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0c6      	beq.n	8002944 <_svfiprintf_r+0x130>
 80029b6:	9105      	str	r1, [sp, #20]
 80029b8:	e7c4      	b.n	8002944 <_svfiprintf_r+0x130>
 80029ba:	4604      	mov	r4, r0
 80029bc:	2301      	movs	r3, #1
 80029be:	fb0c 2101 	mla	r1, ip, r1, r2
 80029c2:	e7f0      	b.n	80029a6 <_svfiprintf_r+0x192>
 80029c4:	ab03      	add	r3, sp, #12
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	462a      	mov	r2, r5
 80029ca:	4638      	mov	r0, r7
 80029cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <_svfiprintf_r+0x1f4>)
 80029ce:	a904      	add	r1, sp, #16
 80029d0:	f3af 8000 	nop.w
 80029d4:	1c42      	adds	r2, r0, #1
 80029d6:	4606      	mov	r6, r0
 80029d8:	d1d6      	bne.n	8002988 <_svfiprintf_r+0x174>
 80029da:	89ab      	ldrh	r3, [r5, #12]
 80029dc:	065b      	lsls	r3, r3, #25
 80029de:	f53f af2d 	bmi.w	800283c <_svfiprintf_r+0x28>
 80029e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029e4:	e72c      	b.n	8002840 <_svfiprintf_r+0x2c>
 80029e6:	ab03      	add	r3, sp, #12
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	462a      	mov	r2, r5
 80029ec:	4638      	mov	r0, r7
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <_svfiprintf_r+0x1f4>)
 80029f0:	a904      	add	r1, sp, #16
 80029f2:	f000 f87d 	bl	8002af0 <_printf_i>
 80029f6:	e7ed      	b.n	80029d4 <_svfiprintf_r+0x1c0>
 80029f8:	08002e82 	.word	0x08002e82
 80029fc:	08002e88 	.word	0x08002e88
 8002a00:	08002e8c 	.word	0x08002e8c
 8002a04:	00000000 	.word	0x00000000
 8002a08:	0800275d 	.word	0x0800275d

08002a0c <_printf_common>:
 8002a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a10:	4616      	mov	r6, r2
 8002a12:	4698      	mov	r8, r3
 8002a14:	688a      	ldr	r2, [r1, #8]
 8002a16:	690b      	ldr	r3, [r1, #16]
 8002a18:	4607      	mov	r7, r0
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	bfb8      	it	lt
 8002a1e:	4613      	movlt	r3, r2
 8002a20:	6033      	str	r3, [r6, #0]
 8002a22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a26:	460c      	mov	r4, r1
 8002a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a2c:	b10a      	cbz	r2, 8002a32 <_printf_common+0x26>
 8002a2e:	3301      	adds	r3, #1
 8002a30:	6033      	str	r3, [r6, #0]
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	0699      	lsls	r1, r3, #26
 8002a36:	bf42      	ittt	mi
 8002a38:	6833      	ldrmi	r3, [r6, #0]
 8002a3a:	3302      	addmi	r3, #2
 8002a3c:	6033      	strmi	r3, [r6, #0]
 8002a3e:	6825      	ldr	r5, [r4, #0]
 8002a40:	f015 0506 	ands.w	r5, r5, #6
 8002a44:	d106      	bne.n	8002a54 <_printf_common+0x48>
 8002a46:	f104 0a19 	add.w	sl, r4, #25
 8002a4a:	68e3      	ldr	r3, [r4, #12]
 8002a4c:	6832      	ldr	r2, [r6, #0]
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	42ab      	cmp	r3, r5
 8002a52:	dc2b      	bgt.n	8002aac <_printf_common+0xa0>
 8002a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	3b00      	subs	r3, #0
 8002a5c:	bf18      	it	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	0692      	lsls	r2, r2, #26
 8002a62:	d430      	bmi.n	8002ac6 <_printf_common+0xba>
 8002a64:	4641      	mov	r1, r8
 8002a66:	4638      	mov	r0, r7
 8002a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a6c:	47c8      	blx	r9
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d023      	beq.n	8002aba <_printf_common+0xae>
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	6922      	ldr	r2, [r4, #16]
 8002a76:	f003 0306 	and.w	r3, r3, #6
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf14      	ite	ne
 8002a7e:	2500      	movne	r5, #0
 8002a80:	6833      	ldreq	r3, [r6, #0]
 8002a82:	f04f 0600 	mov.w	r6, #0
 8002a86:	bf08      	it	eq
 8002a88:	68e5      	ldreq	r5, [r4, #12]
 8002a8a:	f104 041a 	add.w	r4, r4, #26
 8002a8e:	bf08      	it	eq
 8002a90:	1aed      	subeq	r5, r5, r3
 8002a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a96:	bf08      	it	eq
 8002a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bfc4      	itt	gt
 8002aa0:	1a9b      	subgt	r3, r3, r2
 8002aa2:	18ed      	addgt	r5, r5, r3
 8002aa4:	42b5      	cmp	r5, r6
 8002aa6:	d11a      	bne.n	8002ade <_printf_common+0xd2>
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e008      	b.n	8002abe <_printf_common+0xb2>
 8002aac:	2301      	movs	r3, #1
 8002aae:	4652      	mov	r2, sl
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	47c8      	blx	r9
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d103      	bne.n	8002ac2 <_printf_common+0xb6>
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295
 8002abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	e7c1      	b.n	8002a4a <_printf_common+0x3e>
 8002ac6:	2030      	movs	r0, #48	@ 0x30
 8002ac8:	18e1      	adds	r1, r4, r3
 8002aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ad4:	4422      	add	r2, r4
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002adc:	e7c2      	b.n	8002a64 <_printf_common+0x58>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	47c8      	blx	r9
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d0e6      	beq.n	8002aba <_printf_common+0xae>
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7d9      	b.n	8002aa4 <_printf_common+0x98>

08002af0 <_printf_i>:
 8002af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af4:	7e0f      	ldrb	r7, [r1, #24]
 8002af6:	4691      	mov	r9, r2
 8002af8:	2f78      	cmp	r7, #120	@ 0x78
 8002afa:	4680      	mov	r8, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	469a      	mov	sl, r3
 8002b00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b06:	d807      	bhi.n	8002b18 <_printf_i+0x28>
 8002b08:	2f62      	cmp	r7, #98	@ 0x62
 8002b0a:	d80a      	bhi.n	8002b22 <_printf_i+0x32>
 8002b0c:	2f00      	cmp	r7, #0
 8002b0e:	f000 80d3 	beq.w	8002cb8 <_printf_i+0x1c8>
 8002b12:	2f58      	cmp	r7, #88	@ 0x58
 8002b14:	f000 80ba 	beq.w	8002c8c <_printf_i+0x19c>
 8002b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b20:	e03a      	b.n	8002b98 <_printf_i+0xa8>
 8002b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b26:	2b15      	cmp	r3, #21
 8002b28:	d8f6      	bhi.n	8002b18 <_printf_i+0x28>
 8002b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8002b30 <_printf_i+0x40>)
 8002b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b30:	08002b89 	.word	0x08002b89
 8002b34:	08002b9d 	.word	0x08002b9d
 8002b38:	08002b19 	.word	0x08002b19
 8002b3c:	08002b19 	.word	0x08002b19
 8002b40:	08002b19 	.word	0x08002b19
 8002b44:	08002b19 	.word	0x08002b19
 8002b48:	08002b9d 	.word	0x08002b9d
 8002b4c:	08002b19 	.word	0x08002b19
 8002b50:	08002b19 	.word	0x08002b19
 8002b54:	08002b19 	.word	0x08002b19
 8002b58:	08002b19 	.word	0x08002b19
 8002b5c:	08002c9f 	.word	0x08002c9f
 8002b60:	08002bc7 	.word	0x08002bc7
 8002b64:	08002c59 	.word	0x08002c59
 8002b68:	08002b19 	.word	0x08002b19
 8002b6c:	08002b19 	.word	0x08002b19
 8002b70:	08002cc1 	.word	0x08002cc1
 8002b74:	08002b19 	.word	0x08002b19
 8002b78:	08002bc7 	.word	0x08002bc7
 8002b7c:	08002b19 	.word	0x08002b19
 8002b80:	08002b19 	.word	0x08002b19
 8002b84:	08002c61 	.word	0x08002c61
 8002b88:	6833      	ldr	r3, [r6, #0]
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6032      	str	r2, [r6, #0]
 8002b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e09e      	b.n	8002cda <_printf_i+0x1ea>
 8002b9c:	6833      	ldr	r3, [r6, #0]
 8002b9e:	6820      	ldr	r0, [r4, #0]
 8002ba0:	1d19      	adds	r1, r3, #4
 8002ba2:	6031      	str	r1, [r6, #0]
 8002ba4:	0606      	lsls	r6, r0, #24
 8002ba6:	d501      	bpl.n	8002bac <_printf_i+0xbc>
 8002ba8:	681d      	ldr	r5, [r3, #0]
 8002baa:	e003      	b.n	8002bb4 <_printf_i+0xc4>
 8002bac:	0645      	lsls	r5, r0, #25
 8002bae:	d5fb      	bpl.n	8002ba8 <_printf_i+0xb8>
 8002bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bb4:	2d00      	cmp	r5, #0
 8002bb6:	da03      	bge.n	8002bc0 <_printf_i+0xd0>
 8002bb8:	232d      	movs	r3, #45	@ 0x2d
 8002bba:	426d      	negs	r5, r5
 8002bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bc0:	230a      	movs	r3, #10
 8002bc2:	4859      	ldr	r0, [pc, #356]	@ (8002d28 <_printf_i+0x238>)
 8002bc4:	e011      	b.n	8002bea <_printf_i+0xfa>
 8002bc6:	6821      	ldr	r1, [r4, #0]
 8002bc8:	6833      	ldr	r3, [r6, #0]
 8002bca:	0608      	lsls	r0, r1, #24
 8002bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002bd0:	d402      	bmi.n	8002bd8 <_printf_i+0xe8>
 8002bd2:	0649      	lsls	r1, r1, #25
 8002bd4:	bf48      	it	mi
 8002bd6:	b2ad      	uxthmi	r5, r5
 8002bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bda:	6033      	str	r3, [r6, #0]
 8002bdc:	bf14      	ite	ne
 8002bde:	230a      	movne	r3, #10
 8002be0:	2308      	moveq	r3, #8
 8002be2:	4851      	ldr	r0, [pc, #324]	@ (8002d28 <_printf_i+0x238>)
 8002be4:	2100      	movs	r1, #0
 8002be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bea:	6866      	ldr	r6, [r4, #4]
 8002bec:	2e00      	cmp	r6, #0
 8002bee:	bfa8      	it	ge
 8002bf0:	6821      	ldrge	r1, [r4, #0]
 8002bf2:	60a6      	str	r6, [r4, #8]
 8002bf4:	bfa4      	itt	ge
 8002bf6:	f021 0104 	bicge.w	r1, r1, #4
 8002bfa:	6021      	strge	r1, [r4, #0]
 8002bfc:	b90d      	cbnz	r5, 8002c02 <_printf_i+0x112>
 8002bfe:	2e00      	cmp	r6, #0
 8002c00:	d04b      	beq.n	8002c9a <_printf_i+0x1aa>
 8002c02:	4616      	mov	r6, r2
 8002c04:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c08:	fb03 5711 	mls	r7, r3, r1, r5
 8002c0c:	5dc7      	ldrb	r7, [r0, r7]
 8002c0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c12:	462f      	mov	r7, r5
 8002c14:	42bb      	cmp	r3, r7
 8002c16:	460d      	mov	r5, r1
 8002c18:	d9f4      	bls.n	8002c04 <_printf_i+0x114>
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d10b      	bne.n	8002c36 <_printf_i+0x146>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	07df      	lsls	r7, r3, #31
 8002c22:	d508      	bpl.n	8002c36 <_printf_i+0x146>
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	6861      	ldr	r1, [r4, #4]
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	bfde      	ittt	le
 8002c2c:	2330      	movle	r3, #48	@ 0x30
 8002c2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c36:	1b92      	subs	r2, r2, r6
 8002c38:	6122      	str	r2, [r4, #16]
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f8cd a000 	str.w	sl, [sp]
 8002c44:	aa03      	add	r2, sp, #12
 8002c46:	f7ff fee1 	bl	8002a0c <_printf_common>
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	d14a      	bne.n	8002ce4 <_printf_i+0x1f4>
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	b004      	add	sp, #16
 8002c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	f043 0320 	orr.w	r3, r3, #32
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	2778      	movs	r7, #120	@ 0x78
 8002c62:	4832      	ldr	r0, [pc, #200]	@ (8002d2c <_printf_i+0x23c>)
 8002c64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	6831      	ldr	r1, [r6, #0]
 8002c6c:	061f      	lsls	r7, r3, #24
 8002c6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c72:	d402      	bmi.n	8002c7a <_printf_i+0x18a>
 8002c74:	065f      	lsls	r7, r3, #25
 8002c76:	bf48      	it	mi
 8002c78:	b2ad      	uxthmi	r5, r5
 8002c7a:	6031      	str	r1, [r6, #0]
 8002c7c:	07d9      	lsls	r1, r3, #31
 8002c7e:	bf44      	itt	mi
 8002c80:	f043 0320 	orrmi.w	r3, r3, #32
 8002c84:	6023      	strmi	r3, [r4, #0]
 8002c86:	b11d      	cbz	r5, 8002c90 <_printf_i+0x1a0>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	e7ab      	b.n	8002be4 <_printf_i+0xf4>
 8002c8c:	4826      	ldr	r0, [pc, #152]	@ (8002d28 <_printf_i+0x238>)
 8002c8e:	e7e9      	b.n	8002c64 <_printf_i+0x174>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f023 0320 	bic.w	r3, r3, #32
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	e7f6      	b.n	8002c88 <_printf_i+0x198>
 8002c9a:	4616      	mov	r6, r2
 8002c9c:	e7bd      	b.n	8002c1a <_printf_i+0x12a>
 8002c9e:	6833      	ldr	r3, [r6, #0]
 8002ca0:	6825      	ldr	r5, [r4, #0]
 8002ca2:	1d18      	adds	r0, r3, #4
 8002ca4:	6961      	ldr	r1, [r4, #20]
 8002ca6:	6030      	str	r0, [r6, #0]
 8002ca8:	062e      	lsls	r6, r5, #24
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	d501      	bpl.n	8002cb2 <_printf_i+0x1c2>
 8002cae:	6019      	str	r1, [r3, #0]
 8002cb0:	e002      	b.n	8002cb8 <_printf_i+0x1c8>
 8002cb2:	0668      	lsls	r0, r5, #25
 8002cb4:	d5fb      	bpl.n	8002cae <_printf_i+0x1be>
 8002cb6:	8019      	strh	r1, [r3, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	4616      	mov	r6, r2
 8002cbc:	6123      	str	r3, [r4, #16]
 8002cbe:	e7bc      	b.n	8002c3a <_printf_i+0x14a>
 8002cc0:	6833      	ldr	r3, [r6, #0]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	1d1a      	adds	r2, r3, #4
 8002cc6:	6032      	str	r2, [r6, #0]
 8002cc8:	681e      	ldr	r6, [r3, #0]
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f000 f859 	bl	8002d84 <memchr>
 8002cd2:	b108      	cbz	r0, 8002cd8 <_printf_i+0x1e8>
 8002cd4:	1b80      	subs	r0, r0, r6
 8002cd6:	6060      	str	r0, [r4, #4]
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	6123      	str	r3, [r4, #16]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ce2:	e7aa      	b.n	8002c3a <_printf_i+0x14a>
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	4640      	mov	r0, r8
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	47d0      	blx	sl
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d0ad      	beq.n	8002c4e <_printf_i+0x15e>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	079b      	lsls	r3, r3, #30
 8002cf6:	d413      	bmi.n	8002d20 <_printf_i+0x230>
 8002cf8:	68e0      	ldr	r0, [r4, #12]
 8002cfa:	9b03      	ldr	r3, [sp, #12]
 8002cfc:	4298      	cmp	r0, r3
 8002cfe:	bfb8      	it	lt
 8002d00:	4618      	movlt	r0, r3
 8002d02:	e7a6      	b.n	8002c52 <_printf_i+0x162>
 8002d04:	2301      	movs	r3, #1
 8002d06:	4632      	mov	r2, r6
 8002d08:	4649      	mov	r1, r9
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	47d0      	blx	sl
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d09d      	beq.n	8002c4e <_printf_i+0x15e>
 8002d12:	3501      	adds	r5, #1
 8002d14:	68e3      	ldr	r3, [r4, #12]
 8002d16:	9903      	ldr	r1, [sp, #12]
 8002d18:	1a5b      	subs	r3, r3, r1
 8002d1a:	42ab      	cmp	r3, r5
 8002d1c:	dcf2      	bgt.n	8002d04 <_printf_i+0x214>
 8002d1e:	e7eb      	b.n	8002cf8 <_printf_i+0x208>
 8002d20:	2500      	movs	r5, #0
 8002d22:	f104 0619 	add.w	r6, r4, #25
 8002d26:	e7f5      	b.n	8002d14 <_printf_i+0x224>
 8002d28:	08002e93 	.word	0x08002e93
 8002d2c:	08002ea4 	.word	0x08002ea4

08002d30 <memmove>:
 8002d30:	4288      	cmp	r0, r1
 8002d32:	b510      	push	{r4, lr}
 8002d34:	eb01 0402 	add.w	r4, r1, r2
 8002d38:	d902      	bls.n	8002d40 <memmove+0x10>
 8002d3a:	4284      	cmp	r4, r0
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	d807      	bhi.n	8002d50 <memmove+0x20>
 8002d40:	1e43      	subs	r3, r0, #1
 8002d42:	42a1      	cmp	r1, r4
 8002d44:	d008      	beq.n	8002d58 <memmove+0x28>
 8002d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d4e:	e7f8      	b.n	8002d42 <memmove+0x12>
 8002d50:	4601      	mov	r1, r0
 8002d52:	4402      	add	r2, r0
 8002d54:	428a      	cmp	r2, r1
 8002d56:	d100      	bne.n	8002d5a <memmove+0x2a>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d62:	e7f7      	b.n	8002d54 <memmove+0x24>

08002d64 <_sbrk_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	2300      	movs	r3, #0
 8002d68:	4d05      	ldr	r5, [pc, #20]	@ (8002d80 <_sbrk_r+0x1c>)
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	f7fd fd10 	bl	8000794 <_sbrk>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_sbrk_r+0x1a>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_sbrk_r+0x1a>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	20000cb8 	.word	0x20000cb8

08002d84 <memchr>:
 8002d84:	4603      	mov	r3, r0
 8002d86:	b510      	push	{r4, lr}
 8002d88:	b2c9      	uxtb	r1, r1
 8002d8a:	4402      	add	r2, r0
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	d101      	bne.n	8002d96 <memchr+0x12>
 8002d92:	2000      	movs	r0, #0
 8002d94:	e003      	b.n	8002d9e <memchr+0x1a>
 8002d96:	7804      	ldrb	r4, [r0, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	428c      	cmp	r4, r1
 8002d9c:	d1f6      	bne.n	8002d8c <memchr+0x8>
 8002d9e:	bd10      	pop	{r4, pc}

08002da0 <memcpy>:
 8002da0:	440a      	add	r2, r1
 8002da2:	4291      	cmp	r1, r2
 8002da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002da8:	d100      	bne.n	8002dac <memcpy+0xc>
 8002daa:	4770      	bx	lr
 8002dac:	b510      	push	{r4, lr}
 8002dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002db2:	4291      	cmp	r1, r2
 8002db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002db8:	d1f9      	bne.n	8002dae <memcpy+0xe>
 8002dba:	bd10      	pop	{r4, pc}

08002dbc <_realloc_r>:
 8002dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4615      	mov	r5, r2
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	b921      	cbnz	r1, 8002dd2 <_realloc_r+0x16>
 8002dc8:	4611      	mov	r1, r2
 8002dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dce:	f7ff bc39 	b.w	8002644 <_malloc_r>
 8002dd2:	b92a      	cbnz	r2, 8002de0 <_realloc_r+0x24>
 8002dd4:	f7ff fbcc 	bl	8002570 <_free_r>
 8002dd8:	2400      	movs	r4, #0
 8002dda:	4620      	mov	r0, r4
 8002ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002de0:	f000 f81a 	bl	8002e18 <_malloc_usable_size_r>
 8002de4:	4285      	cmp	r5, r0
 8002de6:	4606      	mov	r6, r0
 8002de8:	d802      	bhi.n	8002df0 <_realloc_r+0x34>
 8002dea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002dee:	d8f4      	bhi.n	8002dda <_realloc_r+0x1e>
 8002df0:	4629      	mov	r1, r5
 8002df2:	4640      	mov	r0, r8
 8002df4:	f7ff fc26 	bl	8002644 <_malloc_r>
 8002df8:	4607      	mov	r7, r0
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d0ec      	beq.n	8002dd8 <_realloc_r+0x1c>
 8002dfe:	42b5      	cmp	r5, r6
 8002e00:	462a      	mov	r2, r5
 8002e02:	4621      	mov	r1, r4
 8002e04:	bf28      	it	cs
 8002e06:	4632      	movcs	r2, r6
 8002e08:	f7ff ffca 	bl	8002da0 <memcpy>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f7ff fbae 	bl	8002570 <_free_r>
 8002e14:	463c      	mov	r4, r7
 8002e16:	e7e0      	b.n	8002dda <_realloc_r+0x1e>

08002e18 <_malloc_usable_size_r>:
 8002e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e1c:	1f18      	subs	r0, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bfbc      	itt	lt
 8002e22:	580b      	ldrlt	r3, [r1, r0]
 8002e24:	18c0      	addlt	r0, r0, r3
 8002e26:	4770      	bx	lr

08002e28 <_init>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

08002e34 <_fini>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr
