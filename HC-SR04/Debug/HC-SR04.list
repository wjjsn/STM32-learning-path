
HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea4  08008ea4  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ea4  08008ea4  0000a17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ea4  08008ea4  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea4  08008ea4  00009ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ea8  08008ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008eac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  2000017c  08009028  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f8  08009028  0000a3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a36  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003796  00000000  00000000  0001dbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00021378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e75  00000000  00000000  00022660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a77d  00000000  00000000  000234d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001922f  00000000  00000000  0003dc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2c8  00000000  00000000  00056e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  000e618c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000eb030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e18 	.word	0x08008e18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	08008e18 	.word	0x08008e18

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_f2uiz>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	d20e      	bcs.n	80007de <__aeabi_f2uiz+0x22>
 80007c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80007c4:	d30b      	bcc.n	80007de <__aeabi_f2uiz+0x22>
 80007c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80007ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007ce:	d409      	bmi.n	80007e4 <__aeabi_f2uiz+0x28>
 80007d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007d8:	fa23 f002 	lsr.w	r0, r3, r2
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr
 80007e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007e8:	d101      	bne.n	80007ee <__aeabi_f2uiz+0x32>
 80007ea:	0242      	lsls	r2, r0, #9
 80007ec:	d102      	bne.n	80007f4 <__aeabi_f2uiz+0x38>
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	0000      	movs	r0, r0
	...

08000800 <measure>:
 */

#include "HC-SR04.h"

float measure()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000806:	4b46      	ldr	r3, [pc, #280]	@ (8000920 <measure+0x120>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 800080e:	4b44      	ldr	r3, [pc, #272]	@ (8000920 <measure+0x120>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f06f 0202 	mvn.w	r2, #2
 8000816:	611a      	str	r2, [r3, #16]
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC2);
 8000818:	4b41      	ldr	r3, [pc, #260]	@ (8000920 <measure+0x120>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f06f 0204 	mvn.w	r2, #4
 8000820:	611a      	str	r2, [r3, #16]
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000822:	2100      	movs	r1, #0
 8000824:	483e      	ldr	r0, [pc, #248]	@ (8000920 <measure+0x120>)
 8000826:	f003 fa17 	bl	8003c58 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800082a:	2104      	movs	r1, #4
 800082c:	483c      	ldr	r0, [pc, #240]	@ (8000920 <measure+0x120>)
 800082e:	f003 fa13 	bl	8003c58 <HAL_TIM_IC_Start>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000838:	483a      	ldr	r0, [pc, #232]	@ (8000924 <measure+0x124>)
 800083a:	f000 fdf7 	bl	800142c <HAL_GPIO_WritePin>
	for (int var = 0; var < 15; ++var)
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e008      	b.n	8000856 <measure+0x56>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084a:	4836      	ldr	r0, [pc, #216]	@ (8000924 <measure+0x124>)
 800084c:	f000 fdee 	bl	800142c <HAL_GPIO_WritePin>
	for (int var = 0; var < 15; ++var)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3301      	adds	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2b0e      	cmp	r3, #14
 800085a:	ddf3      	ble.n	8000844 <measure+0x44>
	uint32_t cc1Flag =__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1);
 800085c:	4b30      	ldr	r3, [pc, #192]	@ (8000920 <measure+0x120>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b02      	cmp	r3, #2
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	613b      	str	r3, [r7, #16]
	uint32_t cc2Flag =__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC2);
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <measure+0x120>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	2b04      	cmp	r3, #4
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		cc1Flag =__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1);
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <measure+0x120>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	2b02      	cmp	r3, #2
 8000894:	bf0c      	ite	eq
 8000896:	2301      	moveq	r3, #1
 8000898:	2300      	movne	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	613b      	str	r3, [r7, #16]
		cc2Flag =__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC2);
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <measure+0x120>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	60fb      	str	r3, [r7, #12]
		if(cc1Flag!=0 || cc2Flag!=0){break;}
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <measure+0xc2>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <measure+0xc2>
		cc1Flag =__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1);
 80008c0:	e7e2      	b.n	8000888 <measure+0x88>
	}
	HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_1);
 80008c2:	2100      	movs	r1, #0
 80008c4:	4816      	ldr	r0, [pc, #88]	@ (8000920 <measure+0x120>)
 80008c6:	f003 fa87 	bl	8003dd8 <HAL_TIM_IC_Stop>
	HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);
 80008ca:	2104      	movs	r1, #4
 80008cc:	4814      	ldr	r0, [pc, #80]	@ (8000920 <measure+0x120>)
 80008ce:	f003 fa83 	bl	8003dd8 <HAL_TIM_IC_Stop>
	uint16_t ccr1 =__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <measure+0x120>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d8:	817b      	strh	r3, [r7, #10]
	uint16_t ccr2 =__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <measure+0x120>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008e0:	813b      	strh	r3, [r7, #8]
	float distance = (ccr2-ccr1) * 0.034;
 80008e2:	893a      	ldrh	r2, [r7, #8]
 80008e4:	897b      	ldrh	r3, [r7, #10]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fead 	bl	8000648 <__aeabi_i2d>
 80008ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8000918 <measure+0x118>)
 80008f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f4:	f7ff fc2c 	bl	8000150 <__aeabi_dmul>
 80008f8:	4602      	mov	r2, r0
 80008fa:	460b      	mov	r3, r1
 80008fc:	4610      	mov	r0, r2
 80008fe:	4619      	mov	r1, r3
 8000900:	f7ff ff0c 	bl	800071c <__aeabi_d2f>
 8000904:	4603      	mov	r3, r0
 8000906:	607b      	str	r3, [r7, #4]
	return distance;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	f3af 8000 	nop.w
 8000918:	b020c49c 	.word	0xb020c49c
 800091c:	3fa16872 	.word	0x3fa16872
 8000920:	200001ec 	.word	0x200001ec
 8000924:	40010800 	.word	0x40010800

08000928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_GPIO_Init+0x90>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <MX_GPIO_Init+0x90>)
 8000942:	f043 0320 	orr.w	r3, r3, #32
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_GPIO_Init+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_GPIO_Init+0x90>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a17      	ldr	r2, [pc, #92]	@ (80009b8 <MX_GPIO_Init+0x90>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_GPIO_Init+0x90>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_GPIO_Init+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <MX_GPIO_Init+0x90>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_GPIO_Init+0x90>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800098a:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_GPIO_Init+0x94>)
 800098c:	f000 fd4e 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_GPIO_Init+0x94>)
 80009aa:	f000 fbbb 	bl	8001124 <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010800 	.word	0x40010800

080009c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009c6:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <MX_I2C1_Init+0x54>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009cc:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <MX_I2C1_Init+0x58>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_I2C1_Init+0x50>)
 80009fe:	f000 fd2d 	bl	800145c <HAL_I2C_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a08:	f000 f8c0 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000198 	.word	0x20000198
 8000a14:	40005400 	.word	0x40005400
 8000a18:	000186a0 	.word	0x000186a0

08000a1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <HAL_I2C_MspInit+0x70>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d123      	bne.n	8000a84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_I2C_MspInit+0x74>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <HAL_I2C_MspInit+0x74>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <HAL_I2C_MspInit+0x74>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a54:	23c0      	movs	r3, #192	@ 0xc0
 8000a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <HAL_I2C_MspInit+0x78>)
 8000a68:	f000 fb5c 	bl	8001124 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_I2C_MspInit+0x74>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_I2C_MspInit+0x74>)
 8000a72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_I2C_MspInit+0x74>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010c00 	.word	0x40010c00

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 f9d1 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f818 	bl	8000ad6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f7ff ff3f 	bl	8000928 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aaa:	f7ff ff89 	bl	80009c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000aae:	f000 f8e1 	bl	8000c74 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000ab2:	f007 fce9 	bl	8008488 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char a[] ={(char)measure()};
 8000ab6:	f7ff fea3 	bl	8000800 <measure>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe7d 	bl	80007bc <__aeabi_f2uiz>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	713b      	strb	r3, [r7, #4]
	  CDC_Transmit_FS(a,  sizeof(a));
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2101      	movs	r1, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f007 fd99 	bl	8008604 <CDC_Transmit_FS>
  {
 8000ad2:	bf00      	nop
 8000ad4:	e7ef      	b.n	8000ab6 <main+0x1e>

08000ad6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b094      	sub	sp, #80	@ 0x50
 8000ada:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000adc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae0:	2228      	movs	r2, #40	@ 0x28
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 f96b 	bl	8008dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b22:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fb39 	bl	80031a4 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b38:	f000 f828 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2101      	movs	r1, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 fda5 	bl	80036a8 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b64:	f000 f812 	bl	8000b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b70:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 ff11 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b80:	f000 f804 	bl	8000b8c <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3750      	adds	r7, #80	@ 0x50
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_MspInit+0x60>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_MspInit+0x60>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <NMI_Handler+0x4>

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <MemManage_Handler+0x4>

08000c14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f940 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c5a:	f000 fe5f 	bl	800191c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000f00 	.word	0x20000f00

08000c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c9e:	4b34      	ldr	r3, [pc, #208]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000ca0:	4a34      	ldr	r2, [pc, #208]	@ (8000d74 <MX_TIM1_Init+0x100>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000ca4:	4b32      	ldr	r3, [pc, #200]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b31      	ldr	r3, [pc, #196]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000cb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cca:	4829      	ldr	r0, [pc, #164]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000ccc:	f002 ff1c 	bl	8003b08 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000cd6:	f7ff ff59 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cde:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4822      	ldr	r0, [pc, #136]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000ce8:	f003 f973 	bl	8003fd2 <HAL_TIM_ConfigClockSource>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000cf2:	f7ff ff4b 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cf6:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000cf8:	f002 ff55 	bl	8003ba6 <HAL_TIM_IC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d02:	f7ff ff43 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000d16:	f003 fc59 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000d20:	f7ff ff34 	bl	8000b8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000d3c:	f003 f8ad 	bl	8003e9a <HAL_TIM_IC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000d46:	f7ff ff21 	bl	8000b8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2204      	movs	r2, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_TIM1_Init+0xfc>)
 8000d5a:	f003 f89e 	bl	8003e9a <HAL_TIM_IC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000d64:	f7ff ff12 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200001ec 	.word	0x200001ec
 8000d74:	40012c00 	.word	0x40012c00

08000d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a16      	ldr	r2, [pc, #88]	@ (8000dec <HAL_TIM_Base_MspInit+0x74>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d124      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_TIM_Base_MspInit+0x78>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <HAL_TIM_Base_MspInit+0x78>)
 8000d9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_TIM_Base_MspInit+0x78>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <HAL_TIM_Base_MspInit+0x78>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <HAL_TIM_Base_MspInit+0x78>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_TIM_Base_MspInit+0x78>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <HAL_TIM_Base_MspInit+0x7c>)
 8000dde:	f000 f9a1 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40012c00 	.word	0x40012c00
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010800 	.word	0x40010800

08000df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ff36 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dfe:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e00:	4a0c      	ldr	r2, [pc, #48]	@ (8000e34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a09      	ldr	r2, [pc, #36]	@ (8000e38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e14:	4c09      	ldr	r4, [pc, #36]	@ (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f007 ffd5 	bl	8008dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fe37 	bl	8000a98 <main>
  bx lr
 8000e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000e34:	08008eac 	.word	0x08008eac
  ldr r2, =_sbss
 8000e38:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000e3c:	200013f8 	.word	0x200013f8

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x28>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x28>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f923 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe9a 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f93b 	bl	800110a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f903 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_IncTick+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a03      	ldr	r2, [pc, #12]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000234 	.word	0x20000234

08000ef4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	@ (8000f04 <HAL_GetTick+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000234 	.word	0x20000234

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4906      	ldr	r1, [pc, #24]	@ (8000fa0 <__NVIC_EnableIRQ+0x34>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	@ 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff90 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff2d 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff42 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff35 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b08b      	sub	sp, #44	@ 0x2c
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e169      	b.n	800140c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001138:	2201      	movs	r2, #1
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8158 	bne.w	8001406 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a9a      	ldr	r2, [pc, #616]	@ (80013c4 <HAL_GPIO_Init+0x2a0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d05e      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001160:	4a98      	ldr	r2, [pc, #608]	@ (80013c4 <HAL_GPIO_Init+0x2a0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d875      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001166:	4a98      	ldr	r2, [pc, #608]	@ (80013c8 <HAL_GPIO_Init+0x2a4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d058      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 800116c:	4a96      	ldr	r2, [pc, #600]	@ (80013c8 <HAL_GPIO_Init+0x2a4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d86f      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001172:	4a96      	ldr	r2, [pc, #600]	@ (80013cc <HAL_GPIO_Init+0x2a8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d052      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001178:	4a94      	ldr	r2, [pc, #592]	@ (80013cc <HAL_GPIO_Init+0x2a8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d869      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800117e:	4a94      	ldr	r2, [pc, #592]	@ (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d04c      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001184:	4a92      	ldr	r2, [pc, #584]	@ (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d863      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800118a:	4a92      	ldr	r2, [pc, #584]	@ (80013d4 <HAL_GPIO_Init+0x2b0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d046      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001190:	4a90      	ldr	r2, [pc, #576]	@ (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d85d      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001196:	2b12      	cmp	r3, #18
 8001198:	d82a      	bhi.n	80011f0 <HAL_GPIO_Init+0xcc>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d859      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800119e:	a201      	add	r2, pc, #4	@ (adr r2, 80011a4 <HAL_GPIO_Init+0x80>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	0800121f 	.word	0x0800121f
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800120b 	.word	0x0800120b
 80011b0:	0800124d 	.word	0x0800124d
 80011b4:	08001253 	.word	0x08001253
 80011b8:	08001253 	.word	0x08001253
 80011bc:	08001253 	.word	0x08001253
 80011c0:	08001253 	.word	0x08001253
 80011c4:	08001253 	.word	0x08001253
 80011c8:	08001253 	.word	0x08001253
 80011cc:	08001253 	.word	0x08001253
 80011d0:	08001253 	.word	0x08001253
 80011d4:	08001253 	.word	0x08001253
 80011d8:	08001253 	.word	0x08001253
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001253 	.word	0x08001253
 80011e4:	08001253 	.word	0x08001253
 80011e8:	08001201 	.word	0x08001201
 80011ec:	08001215 	.word	0x08001215
 80011f0:	4a79      	ldr	r2, [pc, #484]	@ (80013d8 <HAL_GPIO_Init+0x2b4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011f6:	e02c      	b.n	8001252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e029      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	3304      	adds	r3, #4
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e024      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	3308      	adds	r3, #8
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e01f      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	330c      	adds	r3, #12
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e01a      	b.n	8001254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001226:	2304      	movs	r3, #4
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e013      	b.n	8001254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001234:	2308      	movs	r3, #8
 8001236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	611a      	str	r2, [r3, #16]
          break;
 800123e:	e009      	b.n	8001254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	615a      	str	r2, [r3, #20]
          break;
 800124a:	e003      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x130>
          break;
 8001252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2bff      	cmp	r3, #255	@ 0xff
 8001258:	d801      	bhi.n	800125e <HAL_GPIO_Init+0x13a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e001      	b.n	8001262 <HAL_GPIO_Init+0x13e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3304      	adds	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	@ 0xff
 8001268:	d802      	bhi.n	8001270 <HAL_GPIO_Init+0x14c>
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x152>
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	3b08      	subs	r3, #8
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	210f      	movs	r1, #15
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	6a39      	ldr	r1, [r7, #32]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	431a      	orrs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80b1 	beq.w	8001406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a4:	4b4d      	ldr	r3, [pc, #308]	@ (80013dc <HAL_GPIO_Init+0x2b8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	@ (80013dc <HAL_GPIO_Init+0x2b8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012bc:	4a48      	ldr	r2, [pc, #288]	@ (80013e0 <HAL_GPIO_Init+0x2bc>)
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a40      	ldr	r2, [pc, #256]	@ (80013e4 <HAL_GPIO_Init+0x2c0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3f      	ldr	r2, [pc, #252]	@ (80013e8 <HAL_GPIO_Init+0x2c4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ec <HAL_GPIO_Init+0x2c8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3d      	ldr	r2, [pc, #244]	@ (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1e0>
 8001300:	2303      	movs	r3, #3
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001304:	2304      	movs	r3, #4
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001310:	2300      	movs	r3, #0
 8001312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001322:	492f      	ldr	r1, [pc, #188]	@ (80013e0 <HAL_GPIO_Init+0x2bc>)
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	492c      	ldr	r1, [pc, #176]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4928      	ldr	r1, [pc, #160]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001364:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	4922      	ldr	r1, [pc, #136]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	60cb      	str	r3, [r1, #12]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	491e      	ldr	r1, [pc, #120]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4918      	ldr	r1, [pc, #96]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800139a:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4914      	ldr	r1, [pc, #80]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d021      	beq.n	80013f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	490e      	ldr	r1, [pc, #56]	@ (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e021      	b.n	8001406 <HAL_GPIO_Init+0x2e2>
 80013c2:	bf00      	nop
 80013c4:	10320000 	.word	0x10320000
 80013c8:	10310000 	.word	0x10310000
 80013cc:	10220000 	.word	0x10220000
 80013d0:	10210000 	.word	0x10210000
 80013d4:	10120000 	.word	0x10120000
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_GPIO_Init+0x304>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4909      	ldr	r1, [pc, #36]	@ (8001428 <HAL_GPIO_Init+0x304>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	f47f ae8e 	bne.w	8001138 <HAL_GPIO_Init+0x14>
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	372c      	adds	r7, #44	@ 0x2c
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e12b      	b.n	80016c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff faca 	bl	8000a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2224      	movs	r2, #36	@ 0x24
 800148c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c0:	f002 fa3a 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80014c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a81      	ldr	r2, [pc, #516]	@ (80016d0 <HAL_I2C_Init+0x274>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d807      	bhi.n	80014e0 <HAL_I2C_Init+0x84>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a80      	ldr	r2, [pc, #512]	@ (80016d4 <HAL_I2C_Init+0x278>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bf94      	ite	ls
 80014d8:	2301      	movls	r3, #1
 80014da:	2300      	movhi	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	e006      	b.n	80014ee <HAL_I2C_Init+0x92>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a7d      	ldr	r2, [pc, #500]	@ (80016d8 <HAL_I2C_Init+0x27c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	bf94      	ite	ls
 80014e8:	2301      	movls	r3, #1
 80014ea:	2300      	movhi	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0e7      	b.n	80016c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a78      	ldr	r2, [pc, #480]	@ (80016dc <HAL_I2C_Init+0x280>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a6a      	ldr	r2, [pc, #424]	@ (80016d0 <HAL_I2C_Init+0x274>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d802      	bhi.n	8001530 <HAL_I2C_Init+0xd4>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	e009      	b.n	8001544 <HAL_I2C_Init+0xe8>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	4a69      	ldr	r2, [pc, #420]	@ (80016e0 <HAL_I2C_Init+0x284>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	3301      	adds	r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	430b      	orrs	r3, r1
 800154a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001556:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	495c      	ldr	r1, [pc, #368]	@ (80016d0 <HAL_I2C_Init+0x274>)
 8001560:	428b      	cmp	r3, r1
 8001562:	d819      	bhi.n	8001598 <HAL_I2C_Init+0x13c>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e59      	subs	r1, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001572:	1c59      	adds	r1, r3, #1
 8001574:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001578:	400b      	ands	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <HAL_I2C_Init+0x138>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e59      	subs	r1, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fbb1 f3f3 	udiv	r3, r1, r3
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	e051      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001594:	2304      	movs	r3, #4
 8001596:	e04f      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d111      	bne.n	80015c4 <HAL_I2C_Init+0x168>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	e012      	b.n	80015ea <HAL_I2C_Init+0x18e>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e58      	subs	r0, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	0099      	lsls	r1, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Init+0x196>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e022      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10e      	bne.n	8001618 <HAL_I2C_Init+0x1bc>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e58      	subs	r0, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6859      	ldr	r1, [r3, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	440b      	add	r3, r1
 8001608:	fbb0 f3f3 	udiv	r3, r0, r3
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001616:	e00f      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	0099      	lsls	r1, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	6809      	ldr	r1, [r1, #0]
 800163c:	4313      	orrs	r3, r2
 800163e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6911      	ldr	r1, [r2, #16]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68d2      	ldr	r2, [r2, #12]
 8001672:	4311      	orrs	r1, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	000186a0 	.word	0x000186a0
 80016d4:	001e847f 	.word	0x001e847f
 80016d8:	003d08ff 	.word	0x003d08ff
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	10624dd3 	.word	0x10624dd3

080016e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0e8      	b.n	80018c8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f007 f8ae 	bl	800886c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f002 ffd3 	bl	80046ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001732:	f002 ffa9 	bl	8004688 <USB_CoreInit>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0bf      	b.n	80018c8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f002 ffd7 	bl	8004702 <USB_SetCurrentMode>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0b0      	b.n	80018c8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e03e      	b.n	80017ea <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3311      	adds	r3, #17
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3310      	adds	r3, #16
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3313      	adds	r3, #19
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3320      	adds	r3, #32
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3324      	adds	r3, #36	@ 0x24
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	3301      	adds	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3bb      	bcc.n	800176c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e044      	b.n	8001884 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3b5      	bcc.n	80017fa <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001898:	f002 ff3f 	bl	800471a <USB_DevInit>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2202      	movs	r2, #2
 80018a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00c      	b.n	80018c8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 f9be 	bl	8006c42 <USB_DevDisconnect>

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_Start+0x16>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e016      	b.n	8001914 <HAL_PCD_Start+0x44>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fed5 	bl	80046a2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80018f8:	2101      	movs	r1, #1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f007 fa29 	bl	8008d52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f005 f992 	bl	8006c2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f005 f994 	bl	8006c56 <USB_ReadInterrupts>
 800192e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fb1a 	bl	8001f74 <PCD_EP_ISR_Handler>

    return;
 8001940:	e119      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f006 fffc 	bl	8008962 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800196a:	2100      	movs	r1, #0
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f905 	bl	8001b7c <HAL_PCD_SetAddress>

    return;
 8001972:	e100      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00c      	beq.n	8001998 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001990:	b292      	uxth	r2, r2
 8001992:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001996:	e0ee      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019b4:	b292      	uxth	r2, r2
 80019b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019ba:	e0dc      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d027      	beq.n	8001a16 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0204 	bic.w	r2, r2, #4
 80019d8:	b292      	uxth	r2, r2
 80019da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0208 	bic.w	r2, r2, #8
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f006 ffec 	bl	80089d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a0e:	b292      	uxth	r2, r2
 8001a10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a14:	e0af      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8083 	beq.w	8001b28 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	77fb      	strb	r3, [r7, #31]
 8001a26:	e010      	b.n	8001a4a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	441a      	add	r2, r3
 8001a34:	7ffb      	ldrb	r3, [r7, #31]
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	3320      	adds	r3, #32
 8001a3e:	443b      	add	r3, r7
 8001a40:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a44:	7ffb      	ldrb	r3, [r7, #31]
 8001a46:	3301      	adds	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
 8001a4c:	2b07      	cmp	r3, #7
 8001a4e:	d9eb      	bls.n	8001a28 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a80:	bf00      	nop
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f6      	beq.n	8001a82 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	77fb      	strb	r3, [r7, #31]
 8001ab0:	e00f      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	7ffa      	ldrb	r2, [r7, #31]
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	440a      	add	r2, r1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	443b      	add	r3, r7
 8001ac6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001aca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	77fb      	strb	r3, [r7, #31]
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
 8001ad4:	2b07      	cmp	r3, #7
 8001ad6:	d9ec      	bls.n	8001ab2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	b292      	uxth	r2, r2
 8001aec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0204 	orr.w	r2, r2, #4
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f006 ff3d 	bl	80089a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b26:	e026      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00f      	beq.n	8001b52 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b44:	b292      	uxth	r2, r2
 8001b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f006 fefb 	bl	8008946 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b50:	e011      	b.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00c      	beq.n	8001b76 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b74:	bf00      	nop
  }
}
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_SetAddress+0x1a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e012      	b.n	8001bbc <HAL_PCD_SetAddress+0x40>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 f82b 	bl	8006c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	70fb      	strb	r3, [r7, #3]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	803b      	strh	r3, [r7, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da0e      	bge.n	8001c08 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0207 	and.w	r2, r3, #7
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	705a      	strb	r2, [r3, #1]
 8001c06:	e00e      	b.n	8001c26 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c32:	883a      	ldrh	r2, [r7, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	78ba      	ldrb	r2, [r7, #2]
 8001c3c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d102      	bne.n	8001c4a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_PCD_EP_Open+0x94>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e00e      	b.n	8001c76 <HAL_PCD_EP_Open+0xb2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fd74 	bl	8004754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001c74:	7afb      	ldrb	r3, [r7, #11]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da0e      	bge.n	8001cb0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0207 	and.w	r2, r3, #7
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	e00e      	b.n	8001cce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 0207 	and.w	r2, r3, #7
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_EP_Close+0x6a>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e00e      	b.n	8001d06 <HAL_PCD_EP_Close+0x88>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 f8ec 	bl	8004ed4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 0207 	and.w	r2, r3, #7
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 faa3 	bl	80052ac <USB_EPStartXfer>

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 0207 	and.w	r2, r3, #7
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	460b      	mov	r3, r1
 8001dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	f003 0207 	and.w	r2, r3, #7
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fa55 	bl	80052ac <USB_EPStartXfer>

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	7912      	ldrb	r2, [r2, #4]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e04c      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0e      	bge.n	8001e50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0207 	and.w	r2, r3, #7
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	3310      	adds	r3, #16
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	705a      	strb	r2, [r3, #1]
 8001e4e:	e00c      	b.n	8001e6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_SetStall+0x7e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e01c      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xb8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 fdb8 	bl	8006a0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f004 fedd 	bl	8006c74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	7912      	ldrb	r2, [r2, #4]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e040      	b.n	8001f6c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0e      	bge.n	8001f10 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0207 	and.w	r2, r3, #7
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	3310      	adds	r3, #16
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
 8001f0e:	e00e      	b.n	8001f2e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 0207 	and.w	r2, r3, #7
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_EP_ClrStall+0x82>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e00e      	b.n	8001f6c <HAL_PCD_EP_ClrStall+0xa0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fda6 	bl	8006aae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b096      	sub	sp, #88	@ 0x58
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f7c:	e3bb      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001f98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 8175 	bne.w	800228c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d14e      	bne.n	800204c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fbe:	81fb      	strh	r3, [r7, #14]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	89fb      	ldrh	r3, [r7, #14]
 8001fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	3302      	adds	r3, #2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002002:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	441a      	add	r2, r3
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002012:	2100      	movs	r1, #0
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f006 fc7c 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7b5b      	ldrb	r3, [r3, #13]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8368 	beq.w	80026f6 <PCD_EP_ISR_Handler+0x782>
 8002026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 8363 	bne.w	80026f6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7b5b      	ldrb	r3, [r3, #13]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	735a      	strb	r2, [r3, #13]
 800204a:	e354      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002052:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800205e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002066:	2b00      	cmp	r3, #0
 8002068:	d034      	beq.n	80020d4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	3306      	adds	r3, #6
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002094:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80020a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f004 fe33 	bl	8006d14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020ba:	4013      	ands	r3, r2
 80020bc:	823b      	strh	r3, [r7, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	8a3a      	ldrh	r2, [r7, #16]
 80020c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020c8:	b292      	uxth	r2, r2
 80020ca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f006 fbf3 	bl	80088b8 <HAL_PCD_SetupStageCallback>
 80020d2:	e310      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020d4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f280 830c 	bge.w	80026f6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020ea:	4013      	ands	r3, r2
 80020ec:	83fb      	strh	r3, [r7, #30]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	8bfa      	ldrh	r2, [r7, #30]
 80020f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020f8:	b292      	uxth	r2, r2
 80020fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	3306      	adds	r3, #6
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d019      	beq.n	8002164 <PCD_EP_ISR_Handler+0x1f0>
 8002130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213e:	6959      	ldr	r1, [r3, #20]
 8002140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002142:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002146:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002148:	b29b      	uxth	r3, r3
 800214a:	f004 fde3 	bl	8006d14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800214e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	441a      	add	r2, r3
 8002158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800215c:	2100      	movs	r1, #0
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f006 fbbc 	bl	80088dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800216e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 82bd 	bne.w	80026f6 <PCD_EP_ISR_Handler+0x782>
 800217c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002180:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002184:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002188:	f000 82b5 	beq.w	80026f6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	801a      	strh	r2, [r3, #0]
 80021bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80021c2:	d91d      	bls.n	8002200 <PCD_EP_ISR_Handler+0x28c>
 80021c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80021cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <PCD_EP_ISR_Handler+0x26a>
 80021d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021da:	3b01      	subs	r3, #1
 80021dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	029b      	lsls	r3, r3, #10
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	e026      	b.n	800224e <PCD_EP_ISR_Handler+0x2da>
 8002200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <PCD_EP_ISR_Handler+0x2aa>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002216:	b29a      	uxth	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	801a      	strh	r2, [r3, #0]
 800221c:	e017      	b.n	800224e <PCD_EP_ISR_Handler+0x2da>
 800221e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
 8002226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <PCD_EP_ISR_Handler+0x2c4>
 8002232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002234:	3301      	adds	r3, #1
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29a      	uxth	r2, r3
 800223e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002240:	b29b      	uxth	r3, r3
 8002242:	029b      	lsls	r3, r3, #10
 8002244:	b29b      	uxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b29a      	uxth	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800225a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225e:	827b      	strh	r3, [r7, #18]
 8002260:	8a7b      	ldrh	r3, [r7, #18]
 8002262:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002266:	827b      	strh	r3, [r7, #18]
 8002268:	8a7b      	ldrh	r3, [r7, #18]
 800226a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800226e:	827b      	strh	r3, [r7, #18]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	8a7b      	ldrh	r3, [r7, #18]
 8002276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800227a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800227e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002286:	b29b      	uxth	r3, r3
 8002288:	8013      	strh	r3, [r2, #0]
 800228a:	e234      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022a0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f280 80fc 	bge.w	80024a2 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80022c0:	4013      	ands	r3, r2
 80022c2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80022d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022dc:	b292      	uxth	r2, r2
 80022de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022e0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	7b1b      	ldrb	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d125      	bne.n	800234a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	3306      	adds	r3, #6
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002326:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800232a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8092 	beq.w	8002458 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233a:	6959      	ldr	r1, [r3, #20]
 800233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233e:	88da      	ldrh	r2, [r3, #6]
 8002340:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002344:	f004 fce6 	bl	8006d14 <USB_ReadPMA>
 8002348:	e086      	b.n	8002458 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d10a      	bne.n	8002368 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002352:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002356:	461a      	mov	r2, r3
 8002358:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9d9 	bl	8002712 <HAL_PCD_EP_DB_Receive>
 8002360:	4603      	mov	r3, r0
 8002362:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002366:	e077      	b.n	8002458 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800237e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002382:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	441a      	add	r2, r3
 8002394:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800239c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d024      	beq.n	8002410 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	3302      	adds	r3, #2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80023f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02e      	beq.n	8002458 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002400:	6959      	ldr	r1, [r3, #20]
 8002402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002404:	891a      	ldrh	r2, [r3, #8]
 8002406:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800240a:	f004 fc83 	bl	8006d14 <USB_ReadPMA>
 800240e:	e023      	b.n	8002458 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	3306      	adds	r3, #6
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002438:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800243c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244e:	895a      	ldrh	r2, [r3, #10]
 8002450:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002454:	f004 fc5e 	bl	8006d14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002460:	441a      	add	r2, r3
 8002462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002464:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800246e:	441a      	add	r2, r3
 8002470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002472:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <PCD_EP_ISR_Handler+0x514>
 800247c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d206      	bcs.n	8002496 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f006 fa24 	bl	80088dc <HAL_PCD_DataOutStageCallback>
 8002494:	e005      	b.n	80024a2 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800249c:	4618      	mov	r0, r3
 800249e:	f002 ff05 	bl	80052ac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8123 	beq.w	80026f6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80024b0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	3310      	adds	r3, #16
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	441a      	add	r2, r3
 80024f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002502:	78db      	ldrb	r3, [r3, #3]
 8002504:	2b01      	cmp	r3, #1
 8002506:	f040 80a2 	bne.w	800264e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800250a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	7b1b      	ldrb	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8093 	beq.w	8002640 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800251a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d046      	beq.n	80025b4 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d126      	bne.n	800257c <PCD_EP_ISR_Handler+0x608>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	4413      	add	r3, r2
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	011a      	lsls	r2, r3, #4
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	4413      	add	r3, r2
 8002550:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002560:	b29a      	uxth	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002574:	b29a      	uxth	r2, r3
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e061      	b.n	8002640 <PCD_EP_ISR_Handler+0x6cc>
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d15d      	bne.n	8002640 <PCD_EP_ISR_Handler+0x6cc>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002598:	4413      	add	r3, r2
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	e045      	b.n	8002640 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d126      	bne.n	8002610 <PCD_EP_ISR_Handler+0x69c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d6:	4413      	add	r3, r2
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	011a      	lsls	r2, r3, #4
 80025e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e2:	4413      	add	r3, r2
 80025e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002608:	b29a      	uxth	r2, r3
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	e017      	b.n	8002640 <PCD_EP_ISR_Handler+0x6cc>
 8002610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d113      	bne.n	8002640 <PCD_EP_ISR_Handler+0x6cc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002626:	4413      	add	r3, r2
 8002628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800262a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	011a      	lsls	r2, r3, #4
 8002630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002632:	4413      	add	r3, r2
 8002634:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	2200      	movs	r2, #0
 800263e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f006 f963 	bl	8008912 <HAL_PCD_DataInStageCallback>
 800264c:	e053      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800264e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d146      	bne.n	80026e8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	3302      	adds	r3, #2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800268e:	429a      	cmp	r2, r3
 8002690:	d907      	bls.n	80026a2 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	619a      	str	r2, [r3, #24]
 80026a0:	e002      	b.n	80026a8 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80026a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f006 f92b 	bl	8008912 <HAL_PCD_DataInStageCallback>
 80026bc:	e01b      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80026be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026c6:	441a      	add	r2, r3
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80026cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026d4:	441a      	add	r2, r3
 80026d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fde3 	bl	80052ac <USB_EPStartXfer>
 80026e6:	e006      	b.n	80026f6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026ec:	461a      	mov	r2, r3
 80026ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f91b 	bl	800292c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21b      	sxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f6ff ac3b 	blt.w	8001f7e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3758      	adds	r7, #88	@ 0x58
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b088      	sub	sp, #32
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d07e      	beq.n	8002828 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	3302      	adds	r3, #2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002752:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	8b7b      	ldrh	r3, [r7, #26]
 800275a:	429a      	cmp	r2, r3
 800275c:	d306      	bcc.n	800276c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	8b7b      	ldrh	r3, [r7, #26]
 8002764:	1ad2      	subs	r2, r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	619a      	str	r2, [r3, #24]
 800276a:	e002      	b.n	8002772 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d123      	bne.n	80027c2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002794:	833b      	strh	r3, [r7, #24]
 8002796:	8b3b      	ldrh	r3, [r7, #24]
 8002798:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800279c:	833b      	strh	r3, [r7, #24]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	8b3b      	ldrh	r3, [r7, #24]
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01f      	beq.n	800280c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e6:	82fb      	strh	r3, [r7, #22]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	8afb      	ldrh	r3, [r7, #22]
 80027f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800280c:	8b7b      	ldrh	r3, [r7, #26]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8087 	beq.w	8002922 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	891a      	ldrh	r2, [r3, #8]
 8002820:	8b7b      	ldrh	r3, [r7, #26]
 8002822:	f004 fa77 	bl	8006d14 <USB_ReadPMA>
 8002826:	e07c      	b.n	8002922 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	3306      	adds	r3, #6
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002850:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	8b7b      	ldrh	r3, [r7, #26]
 8002858:	429a      	cmp	r2, r3
 800285a:	d306      	bcc.n	800286a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	8b7b      	ldrh	r3, [r7, #26]
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	619a      	str	r2, [r3, #24]
 8002868:	e002      	b.n	8002870 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d123      	bne.n	80028c0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800288e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002892:	83fb      	strh	r3, [r7, #30]
 8002894:	8bfb      	ldrh	r3, [r7, #30]
 8002896:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800289a:	83fb      	strh	r3, [r7, #30]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	8bfb      	ldrh	r3, [r7, #30]
 80028ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028bc:	b29b      	uxth	r3, r3
 80028be:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11f      	bne.n	800290a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e4:	83bb      	strh	r3, [r7, #28]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	441a      	add	r2, r3
 80028f4:	8bbb      	ldrh	r3, [r7, #28]
 80028f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002902:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002906:	b29b      	uxth	r3, r3
 8002908:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800290a:	8b7b      	ldrh	r3, [r7, #26]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	895a      	ldrh	r2, [r3, #10]
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	f004 f9f9 	bl	8006d14 <USB_ReadPMA>
    }
  }

  return count;
 8002922:	8b7b      	ldrh	r3, [r7, #26]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b0a4      	sub	sp, #144	@ 0x90
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 81dd 	beq.w	8002d00 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	3302      	adds	r3, #2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800297a:	429a      	cmp	r2, r3
 800297c:	d907      	bls.n	800298e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e002      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 80b9 	bne.w	8002b10 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d126      	bne.n	80029f4 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	4413      	add	r3, r2
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	011a      	lsls	r2, r3, #4
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	4413      	add	r3, r2
 80029c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e01a      	b.n	8002a2a <HAL_PCD_EP_DB_Transmit+0xfe>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d116      	bne.n	8002a2a <HAL_PCD_EP_DB_Transmit+0xfe>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a10:	4413      	add	r3, r2
 8002a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	011a      	lsls	r2, r3, #4
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d126      	bne.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	011a      	lsls	r2, r3, #4
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	e017      	b.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d113      	bne.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	4413      	add	r3, r2
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	011a      	lsls	r2, r3, #4
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f005 ff28 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 82fc 	beq.w	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae8:	82fb      	strh	r3, [r7, #22]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	8afb      	ldrh	r3, [r7, #22]
 8002afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]
 8002b0e:	e2da      	b.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d021      	beq.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b34:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	f040 82ae 	bne.w	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b72:	441a      	add	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b80:	441a      	add	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d30b      	bcc.n	8002baa <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba2:	1ad2      	subs	r2, r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	621a      	str	r2, [r3, #32]
 8002ba8:	e017      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d108      	bne.n	8002bc4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002bb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bc2:	e00a      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d165      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x382>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf6:	4413      	add	r3, r2
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	011a      	lsls	r2, r3, #4
 8002c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c20:	d91d      	bls.n	8002c5e <HAL_PCD_EP_DB_Transmit+0x332>
 8002c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x310>
 8002c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	e044      	b.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_PCD_EP_DB_Transmit+0x350>
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e035      	b.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c92:	3301      	adds	r3, #1
 8002c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	e01c      	b.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d118      	bne.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	4413      	add	r3, r2
 8002ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	011a      	lsls	r2, r3, #4
 8002cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6959      	ldr	r1, [r3, #20]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	891a      	ldrh	r2, [r3, #8]
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f003 ffc6 	bl	8006c8a <USB_WritePMA>
 8002cfe:	e1e2      	b.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	3306      	adds	r3, #6
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d28:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d307      	bcc.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d40:	1ad2      	subs	r2, r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	619a      	str	r2, [r3, #24]
 8002d46:	e002      	b.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 80c0 	bne.w	8002ed8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d126      	bne.n	8002dae <HAL_PCD_EP_DB_Transmit+0x482>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d74:	4413      	add	r3, r2
 8002d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	011a      	lsls	r2, r3, #4
 8002d7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d80:	4413      	add	r3, r2
 8002d82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	e01a      	b.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	785b      	ldrb	r3, [r3, #1]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d116      	bne.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dca:	4413      	add	r3, r2
 8002dcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	011a      	lsls	r2, r3, #4
 8002dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ddc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de0:	2200      	movs	r2, #0
 8002de2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d12b      	bne.n	8002e4a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e06:	4413      	add	r3, r2
 8002e08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	011a      	lsls	r2, r3, #4
 8002e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e12:	4413      	add	r3, r2
 8002e14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e46:	801a      	strh	r2, [r3, #0]
 8002e48:	e017      	b.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d113      	bne.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e60:	4413      	add	r3, r2
 8002e62:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	011a      	lsls	r2, r3, #4
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e72:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e76:	2200      	movs	r2, #0
 8002e78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f005 fd46 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f040 811a 	bne.w	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eac:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
 8002ed6:	e0f6      	b.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d121      	bne.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	f040 80ca 	bne.w	80030c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f48:	441a      	add	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d30b      	bcc.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	621a      	str	r2, [r3, #32]
 8002f70:	e017      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d108      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f8a:	e00a      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d165      	bne.n	800307c <HAL_PCD_EP_DB_Transmit+0x750>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc4:	4413      	add	r3, r2
 8002fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	011a      	lsls	r2, r3, #4
 8002fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fec:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fee:	d91d      	bls.n	800302c <HAL_PCD_EP_DB_Transmit+0x700>
 8002ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_PCD_EP_DB_Transmit+0x6de>
 8003004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003006:	3b01      	subs	r3, #1
 8003008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800300a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29a      	uxth	r2, r3
 8003010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003012:	b29b      	uxth	r3, r3
 8003014:	029b      	lsls	r3, r3, #10
 8003016:	b29b      	uxth	r3, r3
 8003018:	4313      	orrs	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003024:	b29a      	uxth	r2, r3
 8003026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	e041      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800302c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x71e>
 8003034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003042:	b29a      	uxth	r2, r3
 8003044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	e032      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800304a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_PCD_EP_DB_Transmit+0x738>
 800305e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003060:	3301      	adds	r3, #1
 8003062:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29a      	uxth	r2, r3
 800306a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800306c:	b29b      	uxth	r3, r3
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	b29b      	uxth	r3, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	b29a      	uxth	r2, r3
 8003076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	e019      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d115      	bne.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x784>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003092:	4413      	add	r3, r2
 8003094:	657b      	str	r3, [r7, #84]	@ 0x54
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	011a      	lsls	r2, r3, #4
 800309c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309e:	4413      	add	r3, r2
 80030a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6959      	ldr	r1, [r3, #20]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	895a      	ldrh	r2, [r3, #10]
 80030bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f003 fde2 	bl	8006c8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030e0:	82bb      	strh	r3, [r7, #20]
 80030e2:	8abb      	ldrh	r3, [r7, #20]
 80030e4:	f083 0310 	eor.w	r3, r3, #16
 80030e8:	82bb      	strh	r3, [r7, #20]
 80030ea:	8abb      	ldrh	r3, [r7, #20]
 80030ec:	f083 0320 	eor.w	r3, r3, #32
 80030f0:	82bb      	strh	r3, [r7, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	441a      	add	r2, r3
 8003100:	8abb      	ldrh	r3, [r7, #20]
 8003102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800310a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003112:	b29b      	uxth	r3, r3
 8003114:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3790      	adds	r7, #144	@ 0x90
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	4613      	mov	r3, r2
 8003130:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	f003 0207 	and.w	r2, r3, #7
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	3310      	adds	r3, #16
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e009      	b.n	800316a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003156:	897a      	ldrh	r2, [r7, #10]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800316a:	893b      	ldrh	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	b29a      	uxth	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	80da      	strh	r2, [r3, #6]
 800317e:	e00b      	b.n	8003198 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2201      	movs	r2, #1
 8003184:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	b29a      	uxth	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	b29a      	uxth	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e272      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8087 	beq.w	80032d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c4:	4b92      	ldr	r3, [pc, #584]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00c      	beq.n	80031ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d112      	bne.n	8003202 <HAL_RCC_OscConfig+0x5e>
 80031dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e8:	d10b      	bne.n	8003202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ea:	4b89      	ldr	r3, [pc, #548]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d06c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x12c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d168      	bne.n	80032d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e24c      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x76>
 800320c:	4b80      	ldr	r3, [pc, #512]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7f      	ldr	r2, [pc, #508]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	e02e      	b.n	8003278 <HAL_RCC_OscConfig+0xd4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x98>
 8003222:	4b7b      	ldr	r3, [pc, #492]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7a      	ldr	r2, [pc, #488]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b78      	ldr	r3, [pc, #480]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a77      	ldr	r2, [pc, #476]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xd4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0xbc>
 8003246:	4b72      	ldr	r3, [pc, #456]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a71      	ldr	r2, [pc, #452]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6f      	ldr	r3, [pc, #444]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6e      	ldr	r2, [pc, #440]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xd4>
 8003260:	4b6b      	ldr	r3, [pc, #428]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6a      	ldr	r2, [pc, #424]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b68      	ldr	r3, [pc, #416]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a67      	ldr	r2, [pc, #412]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd fe38 	bl	8000ef4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd fe34 	bl	8000ef4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	@ 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e200      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xe4>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fe24 	bl	8000ef4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fe20 	bl	8000ef4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	@ 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1ec      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x10c>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032de:	4b4c      	ldr	r3, [pc, #304]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ea:	4b49      	ldr	r3, [pc, #292]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x18c>
 80032f6:	4b46      	ldr	r3, [pc, #280]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	4b43      	ldr	r3, [pc, #268]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x176>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1c0      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b3d      	ldr	r3, [pc, #244]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4939      	ldr	r1, [pc, #228]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	e03a      	b.n	80033a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	4b36      	ldr	r3, [pc, #216]	@ (8003414 <HAL_RCC_OscConfig+0x270>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fd fdd9 	bl	8000ef4 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003346:	f7fd fdd5 	bl	8000ef4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1a1      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b2a      	ldr	r3, [pc, #168]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4927      	ldr	r1, [pc, #156]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b26      	ldr	r3, [pc, #152]	@ (8003414 <HAL_RCC_OscConfig+0x270>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd fdb8 	bl	8000ef4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003388:	f7fd fdb4 	bl	8000ef4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e180      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b1d      	ldr	r3, [pc, #116]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d03a      	beq.n	8003428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d019      	beq.n	80033ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fd fd98 	bl	8000ef4 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fd fd94 	bl	8000ef4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e160      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f000 faba 	bl	8003960 <RCC_Delay>
 80033ec:	e01c      	b.n	8003428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fd fd7e 	bl	8000ef4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fa:	e00f      	b.n	800341c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fd fd7a 	bl	8000ef4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d908      	bls.n	800341c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e146      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	42420000 	.word	0x42420000
 8003418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	4b92      	ldr	r3, [pc, #584]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e9      	bne.n	80033fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a6 	beq.w	8003582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b8b      	ldr	r3, [pc, #556]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b88      	ldr	r3, [pc, #544]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a87      	ldr	r2, [pc, #540]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003450:	61d3      	str	r3, [r2, #28]
 8003452:	4b85      	ldr	r3, [pc, #532]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b82      	ldr	r3, [pc, #520]	@ (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b7f      	ldr	r3, [pc, #508]	@ (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7e      	ldr	r2, [pc, #504]	@ (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fd fd3b 	bl	8000ef4 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fd fd37 	bl	8000ef4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	@ 0x64
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e103      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b75      	ldr	r3, [pc, #468]	@ (800366c <HAL_RCC_OscConfig+0x4c8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x312>
 80034a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	e02d      	b.n	8003512 <HAL_RCC_OscConfig+0x36e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x334>
 80034be:	4b6a      	ldr	r3, [pc, #424]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a69      	ldr	r2, [pc, #420]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	4b67      	ldr	r3, [pc, #412]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a66      	ldr	r2, [pc, #408]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6213      	str	r3, [r2, #32]
 80034d6:	e01c      	b.n	8003512 <HAL_RCC_OscConfig+0x36e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d10c      	bne.n	80034fa <HAL_RCC_OscConfig+0x356>
 80034e0:	4b61      	ldr	r3, [pc, #388]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a60      	ldr	r2, [pc, #384]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	f043 0304 	orr.w	r3, r3, #4
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e00b      	b.n	8003512 <HAL_RCC_OscConfig+0x36e>
 80034fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6213      	str	r3, [r2, #32]
 8003506:	4b58      	ldr	r3, [pc, #352]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a57      	ldr	r2, [pc, #348]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fd fceb 	bl	8000ef4 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fd fce7 	bl	8000ef4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0b1      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	4b4b      	ldr	r3, [pc, #300]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0ee      	beq.n	8003522 <HAL_RCC_OscConfig+0x37e>
 8003544:	e014      	b.n	8003570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7fd fcd5 	bl	8000ef4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fd fcd1 	bl	8000ef4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e09b      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	4b40      	ldr	r3, [pc, #256]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ee      	bne.n	800354e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4b3c      	ldr	r3, [pc, #240]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	4a3b      	ldr	r2, [pc, #236]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8087 	beq.w	800369a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358c:	4b36      	ldr	r3, [pc, #216]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d061      	beq.n	800365c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d146      	bne.n	800362e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b33      	ldr	r3, [pc, #204]	@ (8003670 <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fd fca5 	bl	8000ef4 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fd fca1 	bl	8000ef4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e06d      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	4b29      	ldr	r3, [pc, #164]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4921      	ldr	r1, [pc, #132]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a19      	ldr	r1, [r3, #32]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	430b      	orrs	r3, r1
 80035fa:	491b      	ldr	r1, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x4cc>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fc75 	bl	8000ef4 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fd fc71 	bl	8000ef4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003620:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x46a>
 800362c:	e035      	b.n	800369a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <HAL_RCC_OscConfig+0x4cc>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fc5e 	bl	8000ef4 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fd fc5a 	bl	8000ef4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e026      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x498>
 800365a:	e01e      	b.n	800369a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e019      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <HAL_RCC_OscConfig+0x500>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	429a      	cmp	r2, r3
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0d0      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d910      	bls.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b67      	ldr	r3, [pc, #412]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	4965      	ldr	r1, [pc, #404]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b63      	ldr	r3, [pc, #396]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b8      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003704:	4b59      	ldr	r3, [pc, #356]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a58      	ldr	r2, [pc, #352]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800370e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800371c:	4b53      	ldr	r3, [pc, #332]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a52      	ldr	r2, [pc, #328]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b50      	ldr	r3, [pc, #320]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	494d      	ldr	r1, [pc, #308]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d040      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b47      	ldr	r3, [pc, #284]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d115      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e07f      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b41      	ldr	r3, [pc, #260]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e073      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b3d      	ldr	r3, [pc, #244]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06b      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b39      	ldr	r3, [pc, #228]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4936      	ldr	r1, [pc, #216]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fd fbac 	bl	8000ef4 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fd fba8 	bl	8000ef4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e053      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d210      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4922      	ldr	r1, [pc, #136]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e032      	b.n	800385e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003804:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4916      	ldr	r1, [pc, #88]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	490e      	ldr	r1, [pc, #56]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003836:	f000 f821 	bl	800387c <HAL_RCC_GetSysClockFreq>
 800383a:	4602      	mov	r2, r0
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	490a      	ldr	r1, [pc, #40]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	5ccb      	ldrb	r3, [r1, r3]
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <HAL_RCC_ClockConfig+0x1cc>)
 8003850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003852:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <HAL_RCC_ClockConfig+0x1d0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fb0a 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40022000 	.word	0x40022000
 800386c:	40021000 	.word	0x40021000
 8003870:	08008e78 	.word	0x08008e78
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003896:	4b1e      	ldr	r3, [pc, #120]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x94>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x30>
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x36>
 80038aa:	e027      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ac:	4b19      	ldr	r3, [pc, #100]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ae:	613b      	str	r3, [r7, #16]
      break;
 80038b0:	e027      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0c9b      	lsrs	r3, r3, #18
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a17      	ldr	r2, [pc, #92]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d010      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ca:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x94>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0c5b      	lsrs	r3, r3, #17
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	4a11      	ldr	r2, [pc, #68]	@ (800391c <HAL_RCC_GetSysClockFreq+0xa0>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x98>)
 80038de:	fb03 f202 	mul.w	r2, r3, r2
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e004      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	613b      	str	r3, [r7, #16]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fe:	613b      	str	r3, [r7, #16]
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	693b      	ldr	r3, [r7, #16]
}
 8003904:	4618      	mov	r0, r3
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	007a1200 	.word	0x007a1200
 8003918:	08008e90 	.word	0x08008e90
 800391c:	08008ea0 	.word	0x08008ea0
 8003920:	003d0900 	.word	0x003d0900

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08008e88 	.word	0x08008e88

08003960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003968:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <RCC_Delay+0x34>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	@ (8003998 <RCC_Delay+0x38>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a5b      	lsrs	r3, r3, #9
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800397c:	bf00      	nop
  }
  while (Delay --);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	60fa      	str	r2, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <RCC_Delay+0x1c>
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000000 	.word	0x20000000
 8003998:	10624dd3 	.word	0x10624dd3

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039bc:	4b4f      	ldr	r3, [pc, #316]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b4c      	ldr	r3, [pc, #304]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	61d3      	str	r3, [r2, #28]
 80039d4:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b46      	ldr	r3, [pc, #280]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f0:	4b43      	ldr	r3, [pc, #268]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a42      	ldr	r2, [pc, #264]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7fd fa7a 	bl	8000ef4 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd fa76 	bl	8000ef4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	@ 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e06d      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b3a      	ldr	r3, [pc, #232]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a22:	4b36      	ldr	r3, [pc, #216]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d027      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a40:	4b2e      	ldr	r3, [pc, #184]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a56:	4a29      	ldr	r2, [pc, #164]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fd fa45 	bl	8000ef4 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd fa41 	bl	8000ef4 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a90:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4917      	ldr	r1, [pc, #92]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a13      	ldr	r2, [pc, #76]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	490b      	ldr	r1, [pc, #44]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ade:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4904      	ldr	r1, [pc, #16]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
 8003b04:	42420440 	.word	0x42420440

08003b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e041      	b.n	8003b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd f922 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 fb0a 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e041      	b.n	8003c3c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f839 	bl	8003c44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 fabb 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start+0x1a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_IC_Start+0x42>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_IC_Start+0x2a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_IC_Start+0x42>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_IC_Start+0x3a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_IC_Start+0x42>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_TIM_IC_Start+0x54>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e013      	b.n	8003cd4 <HAL_TIM_IC_Start+0x7c>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d104      	bne.n	8003cbc <HAL_TIM_IC_Start+0x64>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e00b      	b.n	8003cd4 <HAL_TIM_IC_Start+0x7c>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d104      	bne.n	8003ccc <HAL_TIM_IC_Start+0x74>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_IC_Start+0x7c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cdc:	7bbb      	ldrb	r3, [r7, #14]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06d      	b.n	8003dc2 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_IC_Start+0x9e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cf4:	e013      	b.n	8003d1e <HAL_TIM_IC_Start+0xc6>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_IC_Start+0xae>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d04:	e00b      	b.n	8003d1e <HAL_TIM_IC_Start+0xc6>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_IC_Start+0xbe>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d14:	e003      	b.n	8003d1e <HAL_TIM_IC_Start+0xc6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start+0xd6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d2c:	e013      	b.n	8003d56 <HAL_TIM_IC_Start+0xfe>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_IC_Start+0xe6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_IC_Start+0xfe>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_IC_Start+0xf6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4c:	e003      	b.n	8003d56 <HAL_TIM_IC_Start+0xfe>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fc0f 	bl	8004582 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <HAL_TIM_IC_Start+0x174>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00e      	beq.n	8003d8c <HAL_TIM_IC_Start+0x134>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d76:	d009      	beq.n	8003d8c <HAL_TIM_IC_Start+0x134>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a14      	ldr	r2, [pc, #80]	@ (8003dd0 <HAL_TIM_IC_Start+0x178>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_TIM_IC_Start+0x134>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a13      	ldr	r2, [pc, #76]	@ (8003dd4 <HAL_TIM_IC_Start+0x17c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d111      	bne.n	8003db0 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d010      	beq.n	8003dc0 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	e007      	b.n	8003dc0 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800

08003dd8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fbc9 	bl	8004582 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <HAL_TIM_IC_Stop+0x48>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <HAL_TIM_IC_Stop+0x48>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <HAL_TIM_IC_Stop+0x58>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e2e:	e013      	b.n	8003e58 <HAL_TIM_IC_Stop+0x80>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d104      	bne.n	8003e40 <HAL_TIM_IC_Stop+0x68>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3e:	e00b      	b.n	8003e58 <HAL_TIM_IC_Stop+0x80>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d104      	bne.n	8003e50 <HAL_TIM_IC_Stop+0x78>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e4e:	e003      	b.n	8003e58 <HAL_TIM_IC_Stop+0x80>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_TIM_IC_Stop+0x90>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e66:	e013      	b.n	8003e90 <HAL_TIM_IC_Stop+0xb8>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d104      	bne.n	8003e78 <HAL_TIM_IC_Stop+0xa0>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e76:	e00b      	b.n	8003e90 <HAL_TIM_IC_Stop+0xb8>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d104      	bne.n	8003e88 <HAL_TIM_IC_Stop+0xb0>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e86:	e003      	b.n	8003e90 <HAL_TIM_IC_Stop+0xb8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e088      	b.n	8003fca <HAL_TIM_IC_ConfigChannel+0x130>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11b      	bne.n	8003efe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ed6:	f000 f9b1 	bl	800423c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 020c 	bic.w	r2, r2, #12
 8003ee8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6999      	ldr	r1, [r3, #24]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	619a      	str	r2, [r3, #24]
 8003efc:	e060      	b.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d11c      	bne.n	8003f3e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003f14:	f000 fa1a 	bl	800434c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6999      	ldr	r1, [r3, #24]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	021a      	lsls	r2, r3, #8
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	619a      	str	r2, [r3, #24]
 8003f3c:	e040      	b.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003f54:	f000 fa65 	bl	8004422 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 020c 	bic.w	r2, r2, #12
 8003f66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69d9      	ldr	r1, [r3, #28]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	61da      	str	r2, [r3, #28]
 8003f7a:	e021      	b.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d11c      	bne.n	8003fbc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003f92:	f000 fa81 	bl	8004498 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69d9      	ldr	r1, [r3, #28]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	021a      	lsls	r2, r3, #8
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	61da      	str	r2, [r3, #28]
 8003fba:	e001      	b.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_ConfigClockSource+0x1c>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0b4      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x186>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800400c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004014:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004026:	d03e      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0xd4>
 8004028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800402c:	f200 8087 	bhi.w	800413e <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004034:	f000 8086 	beq.w	8004144 <HAL_TIM_ConfigClockSource+0x172>
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403c:	d87f      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 800403e:	2b70      	cmp	r3, #112	@ 0x70
 8004040:	d01a      	beq.n	8004078 <HAL_TIM_ConfigClockSource+0xa6>
 8004042:	2b70      	cmp	r3, #112	@ 0x70
 8004044:	d87b      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 8004046:	2b60      	cmp	r3, #96	@ 0x60
 8004048:	d050      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0x11a>
 800404a:	2b60      	cmp	r3, #96	@ 0x60
 800404c:	d877      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	2b50      	cmp	r3, #80	@ 0x50
 8004050:	d03c      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0xfa>
 8004052:	2b50      	cmp	r3, #80	@ 0x50
 8004054:	d873      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 8004056:	2b40      	cmp	r3, #64	@ 0x40
 8004058:	d058      	beq.n	800410c <HAL_TIM_ConfigClockSource+0x13a>
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	d86f      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 800405e:	2b30      	cmp	r3, #48	@ 0x30
 8004060:	d064      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x15a>
 8004062:	2b30      	cmp	r3, #48	@ 0x30
 8004064:	d86b      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d060      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x15a>
 800406a:	2b20      	cmp	r3, #32
 800406c:	d867      	bhi.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d05c      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x15a>
 8004072:	2b10      	cmp	r3, #16
 8004074:	d05a      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x15a>
 8004076:	e062      	b.n	800413e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004088:	f000 fa5c 	bl	8004544 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800409a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
      break;
 80040a4:	e04f      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b6:	f000 fa45 	bl	8004544 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c8:	609a      	str	r2, [r3, #8]
      break;
 80040ca:	e03c      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d8:	461a      	mov	r2, r3
 80040da:	f000 f909 	bl	80042f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2150      	movs	r1, #80	@ 0x50
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fa13 	bl	8004510 <TIM_ITRx_SetConfig>
      break;
 80040ea:	e02c      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f8:	461a      	mov	r2, r3
 80040fa:	f000 f963 	bl	80043c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2160      	movs	r1, #96	@ 0x60
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fa03 	bl	8004510 <TIM_ITRx_SetConfig>
      break;
 800410a:	e01c      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004118:	461a      	mov	r2, r3
 800411a:	f000 f8e9 	bl	80042f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2140      	movs	r1, #64	@ 0x40
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f9f3 	bl	8004510 <TIM_ITRx_SetConfig>
      break;
 800412a:	e00c      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 f9ea 	bl	8004510 <TIM_ITRx_SetConfig>
      break;
 800413c:	e003      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      break;
 8004142:	e000      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004144:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a2f      	ldr	r2, [pc, #188]	@ (8004230 <TIM_Base_SetConfig+0xd0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_Base_SetConfig+0x30>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417e:	d007      	beq.n	8004190 <TIM_Base_SetConfig+0x30>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a2c      	ldr	r2, [pc, #176]	@ (8004234 <TIM_Base_SetConfig+0xd4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_Base_SetConfig+0x30>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a2b      	ldr	r2, [pc, #172]	@ (8004238 <TIM_Base_SetConfig+0xd8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d108      	bne.n	80041a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <TIM_Base_SetConfig+0xd0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_Base_SetConfig+0x62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b0:	d007      	beq.n	80041c2 <TIM_Base_SetConfig+0x62>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004234 <TIM_Base_SetConfig+0xd4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0x62>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004238 <TIM_Base_SetConfig+0xd8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004230 <TIM_Base_SetConfig+0xd0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d103      	bne.n	8004208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	611a      	str	r2, [r3, #16]
  }
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800

0800423c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 0201 	bic.w	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a1f      	ldr	r2, [pc, #124]	@ (80042e4 <TIM_TI1_SetConfig+0xa8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_TI1_SetConfig+0x46>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004270:	d007      	beq.n	8004282 <TIM_TI1_SetConfig+0x46>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <TIM_TI1_SetConfig+0xac>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_TI1_SetConfig+0x46>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <TIM_TI1_SetConfig+0xb0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <TIM_TI1_SetConfig+0x4a>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <TIM_TI1_SetConfig+0x4c>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e003      	b.n	80042a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f023 030a 	bic.w	r3, r3, #10
 80042c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 030a 	and.w	r3, r3, #10
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800

080042f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0201 	bic.w	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 030a 	bic.w	r3, r3, #10
 800432c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0210 	bic.w	r2, r3, #16
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	031b      	lsls	r3, r3, #12
 8004390:	b29b      	uxth	r3, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800439e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0210 	bic.w	r2, r3, #16
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004400:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004422:	b480      	push	{r7}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	b2db      	uxtb	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004472:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	031b      	lsls	r3, r3, #12
 80044dc:	b29b      	uxth	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	031b      	lsls	r3, r3, #12
 80044f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	f043 0307 	orr.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800455e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	431a      	orrs	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004582:	b480      	push	{r7}
 8004584:	b087      	sub	sp, #28
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2201      	movs	r2, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	401a      	ands	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e046      	b.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d009      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a10      	ldr	r2, [pc, #64]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10c      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4313      	orrs	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800

08004688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	4638      	mov	r0, r7
 8004692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046b2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046d6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	4013      	ands	r3, r2
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	4638      	mov	r0, r7
 8004724:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004754:	b480      	push	{r7}
 8004756:	b09d      	sub	sp, #116	@ 0x74
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	78db      	ldrb	r3, [r3, #3]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d81f      	bhi.n	80047c6 <USB_ActivateEndpoint+0x72>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <USB_ActivateEndpoint+0x38>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047cf 	.word	0x080047cf
 8004798:	080047ab 	.word	0x080047ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800479c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047a8:	e012      	b.n	80047d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80047b2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047b6:	e00b      	b.n	80047d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047c4:	e004      	b.n	80047d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80047cc:	e000      	b.n	80047d0 <USB_ActivateEndpoint+0x7c>
      break;
 80047ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004808:	b29b      	uxth	r3, r3
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	7b1b      	ldrb	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 8178 	bne.w	8004b30 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8084 	beq.w	8004952 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	4413      	add	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	011a      	lsls	r2, r3, #4
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	88db      	ldrh	r3, [r3, #6]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	b29b      	uxth	r3, r3
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	827b      	strh	r3, [r7, #18]
 800488c:	8a7b      	ldrh	r3, [r7, #18]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <USB_ActivateEndpoint+0x17a>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ac:	823b      	strh	r3, [r7, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8a3b      	ldrh	r3, [r7, #16]
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	78db      	ldrb	r3, [r3, #3]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d020      	beq.n	8004918 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ec:	81bb      	strh	r3, [r7, #12]
 80048ee:	89bb      	ldrh	r3, [r7, #12]
 80048f0:	f083 0320 	eor.w	r3, r3, #32
 80048f4:	81bb      	strh	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	89bb      	ldrh	r3, [r7, #12]
 8004902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800490e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004912:	b29b      	uxth	r3, r3
 8004914:	8013      	strh	r3, [r2, #0]
 8004916:	e2d5      	b.n	8004ec4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800492e:	81fb      	strh	r3, [r7, #14]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	89fb      	ldrh	r3, [r7, #14]
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
 8004950:	e2b8      	b.n	8004ec4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	633b      	str	r3, [r7, #48]	@ 0x30
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	4413      	add	r3, r2
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	011a      	lsls	r2, r3, #4
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	4413      	add	r3, r2
 8004970:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	88db      	ldrh	r3, [r3, #6]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004984:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	4413      	add	r3, r2
 8004998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	011a      	lsls	r2, r3, #4
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	4413      	add	r3, r2
 80049a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	801a      	strh	r2, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b3e      	cmp	r3, #62	@ 0x3e
 80049c0:	d91d      	bls.n	80049fe <USB_ActivateEndpoint+0x2aa>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <USB_ActivateEndpoint+0x288>
 80049d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049d8:	3b01      	subs	r3, #1
 80049da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e026      	b.n	8004a4c <USB_ActivateEndpoint+0x2f8>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <USB_ActivateEndpoint+0x2c8>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	e017      	b.n	8004a4c <USB_ActivateEndpoint+0x2f8>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <USB_ActivateEndpoint+0x2e2>
 8004a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a32:	3301      	adds	r3, #1
 8004a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <USB_ActivateEndpoint+0x348>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	843b      	strh	r3, [r7, #32]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	8c3b      	ldrh	r3, [r7, #32]
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d124      	bne.n	8004aee <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	83bb      	strh	r3, [r7, #28]
 8004abc:	8bbb      	ldrh	r3, [r7, #28]
 8004abe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ac2:	83bb      	strh	r3, [r7, #28]
 8004ac4:	8bbb      	ldrh	r3, [r7, #28]
 8004ac6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004aca:	83bb      	strh	r3, [r7, #28]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	8bbb      	ldrh	r3, [r7, #28]
 8004ad8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004adc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	8013      	strh	r3, [r2, #0]
 8004aec:	e1ea      	b.n	8004ec4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b04:	83fb      	strh	r3, [r7, #30]
 8004b06:	8bfb      	ldrh	r3, [r7, #30]
 8004b08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b0c:	83fb      	strh	r3, [r7, #30]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8bfb      	ldrh	r3, [r7, #30]
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
 8004b2e:	e1c9      	b.n	8004ec4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	78db      	ldrb	r3, [r3, #3]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d11e      	bne.n	8004b76 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b68:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
 8004b74:	e01d      	b.n	8004bb2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc2:	4413      	add	r3, r2
 8004bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	011a      	lsls	r2, r3, #4
 8004bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	891b      	ldrh	r3, [r3, #8]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf6:	4413      	add	r3, r2
 8004bf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	011a      	lsls	r2, r3, #4
 8004c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	895b      	ldrh	r3, [r3, #10]
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c18:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 8093 	bne.w	8004d4a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <USB_ActivateEndpoint+0x524>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004c86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <USB_ActivateEndpoint+0x574>
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ce0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ce2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ce6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ce8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cee:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d26:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	8013      	strh	r3, [r2, #0]
 8004d48:	e0bc      	b.n	8004ec4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01d      	beq.n	8004da2 <USB_ActivateEndpoint+0x64e>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004db2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01d      	beq.n	8004dfa <USB_ActivateEndpoint+0x6a6>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	78db      	ldrb	r3, [r3, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d024      	beq.n	8004e4c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e18:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e20:	f083 0320 	eor.w	r3, r3, #32
 8004e24:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]
 8004e4a:	e01d      	b.n	8004e88 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ec4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3774      	adds	r7, #116	@ 0x74
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b08d      	sub	sp, #52	@ 0x34
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	7b1b      	ldrb	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 808e 	bne.w	8005004 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d044      	beq.n	8004f7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	81bb      	strh	r3, [r7, #12]
 8004efe:	89bb      	ldrh	r3, [r7, #12]
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01b      	beq.n	8004f40 <USB_DeactivateEndpoint+0x6c>
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1e:	817b      	strh	r3, [r7, #10]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f56:	813b      	strh	r3, [r7, #8]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	893b      	ldrh	r3, [r7, #8]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
 8004f78:	e192      	b.n	80052a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	827b      	strh	r3, [r7, #18]
 8004f88:	8a7b      	ldrh	r3, [r7, #18]
 8004f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <USB_DeactivateEndpoint+0xf6>
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa8:	823b      	strh	r3, [r7, #16]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8a3b      	ldrh	r3, [r7, #16]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe0:	81fb      	strh	r3, [r7, #14]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	89fb      	ldrh	r3, [r7, #14]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]
 8005002:	e14d      	b.n	80052a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f040 80a5 	bne.w	8005158 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	843b      	strh	r3, [r7, #32]
 800501c:	8c3b      	ldrh	r3, [r7, #32]
 800501e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01b      	beq.n	800505e <USB_DeactivateEndpoint+0x18a>
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503c:	83fb      	strh	r3, [r7, #30]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	8bfb      	ldrh	r3, [r7, #30]
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	83bb      	strh	r3, [r7, #28]
 800506c:	8bbb      	ldrh	r3, [r7, #28]
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01b      	beq.n	80050ae <USB_DeactivateEndpoint+0x1da>
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508c:	837b      	strh	r3, [r7, #26]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8b7b      	ldrh	r3, [r7, #26]
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c4:	833b      	strh	r3, [r7, #24]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8b3b      	ldrh	r3, [r7, #24]
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fc:	82fb      	strh	r3, [r7, #22]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	8afb      	ldrh	r3, [r7, #22]
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005134:	82bb      	strh	r3, [r7, #20]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8abb      	ldrh	r3, [r7, #20]
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800514a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]
 8005156:	e0a3      	b.n	80052a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005166:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <USB_DeactivateEndpoint+0x2d4>
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800519c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80051b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <USB_DeactivateEndpoint+0x324>
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005246:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800525c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005264:	b29b      	uxth	r3, r3
 8005266:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800528c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529c:	b29b      	uxth	r3, r3
 800529e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3734      	adds	r7, #52	@ 0x34
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b0c2      	sub	sp, #264	@ 0x108
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ba:	6018      	str	r0, [r3, #0]
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 86b7 	bne.w	8006046 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d908      	bls.n	8005306 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80052f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005304:	e007      	b.n	8005316 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	7b1b      	ldrb	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d13a      	bne.n	800539c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6959      	ldr	r1, [r3, #20]
 8005332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	88da      	ldrh	r2, [r3, #6]
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	b29b      	uxth	r3, r3
 8005344:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005348:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f001 fc9c 	bl	8006c8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	011a      	lsls	r2, r3, #4
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	f000 be1f 	b.w	8005fda <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f040 8462 	bne.w	8005c72 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80053ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	f240 83df 	bls.w	8005b8a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80053f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800541c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005438:	1ad2      	subs	r2, r2, r3
 800543a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 81c7 	beq.w	80057fc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	633b      	str	r3, [r7, #48]	@ 0x30
 800547a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d177      	bne.n	800557a <USB_EPStartXfer+0x2ce>
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	4413      	add	r3, r2
 80054ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	011a      	lsls	r2, r3, #4
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	4413      	add	r3, r2
 80054c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054da:	2b3e      	cmp	r3, #62	@ 0x3e
 80054dc:	d921      	bls.n	8005522 <USB_EPStartXfer+0x276>
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <USB_EPStartXfer+0x252>
 80054f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054f8:	3b01      	subs	r3, #1
 80054fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005508:	b29b      	uxth	r3, r3
 800550a:	029b      	lsls	r3, r3, #10
 800550c:	b29b      	uxth	r3, r3
 800550e:	4313      	orrs	r3, r2
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e050      	b.n	80055c4 <USB_EPStartXfer+0x318>
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <USB_EPStartXfer+0x294>
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e041      	b.n	80055c4 <USB_EPStartXfer+0x318>
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <USB_EPStartXfer+0x2b4>
 8005556:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800555a:	3301      	adds	r3, #1
 800555c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29a      	uxth	r2, r3
 8005566:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800556a:	b29b      	uxth	r3, r3
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	b29b      	uxth	r3, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	b29a      	uxth	r2, r3
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	e024      	b.n	80055c4 <USB_EPStartXfer+0x318>
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d11c      	bne.n	80055c4 <USB_EPStartXfer+0x318>
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	4413      	add	r3, r2
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	011a      	lsls	r2, r3, #4
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	4413      	add	r3, r2
 80055b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6959      	ldr	r1, [r3, #20]
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	f001 fb49 	bl	8006c8a <USB_WritePMA>
            ep->xfer_buff += len;
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005608:	441a      	add	r2, r3
 800560a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d90f      	bls.n	8005652 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	621a      	str	r2, [r3, #32]
 8005650:	e00e      	b.n	8005670 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d177      	bne.n	8005770 <USB_EPStartXfer+0x4c4>
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	4413      	add	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	011a      	lsls	r2, r3, #4
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4413      	add	r3, r2
 80056b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80056d2:	d921      	bls.n	8005718 <USB_EPStartXfer+0x46c>
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <USB_EPStartXfer+0x448>
 80056ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	e056      	b.n	80057c6 <USB_EPStartXfer+0x51a>
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <USB_EPStartXfer+0x48a>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572e:	b29a      	uxth	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	e047      	b.n	80057c6 <USB_EPStartXfer+0x51a>
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <USB_EPStartXfer+0x4aa>
 800574c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005750:	3301      	adds	r3, #1
 8005752:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29b      	uxth	r3, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	b29a      	uxth	r2, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	e02a      	b.n	80057c6 <USB_EPStartXfer+0x51a>
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d122      	bne.n	80057c6 <USB_EPStartXfer+0x51a>
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	623b      	str	r3, [r7, #32]
 800578c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	4413      	add	r3, r2
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	011a      	lsls	r2, r3, #4
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	891b      	ldrh	r3, [r3, #8]
 80057d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6959      	ldr	r1, [r3, #20]
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	f001 fa48 	bl	8006c8a <USB_WritePMA>
 80057fa:	e3ee      	b.n	8005fda <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d177      	bne.n	80058fc <USB_EPStartXfer+0x650>
 800580c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800582c:	4413      	add	r3, r2
 800582e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	011a      	lsls	r2, r3, #4
 800583e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005840:	4413      	add	r3, r2
 8005842:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005846:	647b      	str	r3, [r7, #68]	@ 0x44
 8005848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005852:	b29a      	uxth	r2, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585c:	2b3e      	cmp	r3, #62	@ 0x3e
 800585e:	d921      	bls.n	80058a4 <USB_EPStartXfer+0x5f8>
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <USB_EPStartXfer+0x5d4>
 8005876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800587a:	3b01      	subs	r3, #1
 800587c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29a      	uxth	r2, r3
 8005886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800588a:	b29b      	uxth	r3, r3
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	b29b      	uxth	r3, r3
 8005890:	4313      	orrs	r3, r2
 8005892:	b29b      	uxth	r3, r3
 8005894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589c:	b29a      	uxth	r2, r3
 800589e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	e056      	b.n	8005952 <USB_EPStartXfer+0x6a6>
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <USB_EPStartXfer+0x616>
 80058ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	e047      	b.n	8005952 <USB_EPStartXfer+0x6a6>
 80058c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <USB_EPStartXfer+0x636>
 80058d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058dc:	3301      	adds	r3, #1
 80058de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	e02a      	b.n	8005952 <USB_EPStartXfer+0x6a6>
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d122      	bne.n	8005952 <USB_EPStartXfer+0x6a6>
 800590c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	653b      	str	r3, [r7, #80]	@ 0x50
 8005918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592c:	4413      	add	r3, r2
 800592e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005940:	4413      	add	r3, r2
 8005942:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	b29a      	uxth	r2, r3
 800594e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005950:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	891b      	ldrh	r3, [r3, #8]
 800595e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6959      	ldr	r1, [r3, #20]
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005972:	b29b      	uxth	r3, r3
 8005974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005978:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800597c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005980:	6800      	ldr	r0, [r0, #0]
 8005982:	f001 f982 	bl	8006c8a <USB_WritePMA>
            ep->xfer_buff += len;
 8005986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005996:	441a      	add	r2, r3
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a1a      	ldr	r2, [r3, #32]
 80059b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d90f      	bls.n	80059e0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80059c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	1ad2      	subs	r2, r2, r3
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	621a      	str	r2, [r3, #32]
 80059de:	e00e      	b.n	80059fe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80059e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d177      	bne.n	8005b0a <USB_EPStartXfer+0x85e>
 8005a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	4413      	add	r3, r2
 8005a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	011a      	lsls	r2, r3, #4
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	4413      	add	r3, r2
 8005a50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a6c:	d921      	bls.n	8005ab2 <USB_EPStartXfer+0x806>
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <USB_EPStartXfer+0x7e2>
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e050      	b.n	8005b54 <USB_EPStartXfer+0x8a8>
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <USB_EPStartXfer+0x824>
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e041      	b.n	8005b54 <USB_EPStartXfer+0x8a8>
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <USB_EPStartXfer+0x844>
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	3301      	adds	r3, #1
 8005aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	029b      	lsls	r3, r3, #10
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4313      	orrs	r3, r2
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	e024      	b.n	8005b54 <USB_EPStartXfer+0x8a8>
 8005b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d11c      	bne.n	8005b54 <USB_EPStartXfer+0x8a8>
 8005b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b2e:	4413      	add	r3, r2
 8005b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	011a      	lsls	r2, r3, #4
 8005b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	895b      	ldrh	r3, [r3, #10]
 8005b60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6959      	ldr	r1, [r3, #20]
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b82:	6800      	ldr	r0, [r0, #0]
 8005b84:	f001 f881 	bl	8006c8a <USB_WritePMA>
 8005b88:	e227      	b.n	8005fda <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c16:	4413      	add	r3, r2
 8005c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	011a      	lsls	r2, r3, #4
 8005c28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	891b      	ldrh	r3, [r3, #8]
 8005c48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6959      	ldr	r1, [r3, #20]
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c62:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c66:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	f001 f80d 	bl	8006c8a <USB_WritePMA>
 8005c70:	e1b3      	b.n	8005fda <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80c6 	beq.w	8005e44 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d177      	bne.n	8005dc4 <USB_EPStartXfer+0xb18>
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cf4:	4413      	add	r3, r2
 8005cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	011a      	lsls	r2, r3, #4
 8005d06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d26:	d921      	bls.n	8005d6c <USB_EPStartXfer+0xac0>
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <USB_EPStartXfer+0xa9c>
 8005d3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d42:	3b01      	subs	r3, #1
 8005d44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	029b      	lsls	r3, r3, #10
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e050      	b.n	8005e0e <USB_EPStartXfer+0xb62>
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <USB_EPStartXfer+0xade>
 8005d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	e041      	b.n	8005e0e <USB_EPStartXfer+0xb62>
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <USB_EPStartXfer+0xafe>
 8005da0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005da4:	3301      	adds	r3, #1
 8005da6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	e024      	b.n	8005e0e <USB_EPStartXfer+0xb62>
 8005dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d11c      	bne.n	8005e0e <USB_EPStartXfer+0xb62>
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005de8:	4413      	add	r3, r2
 8005dea:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	011a      	lsls	r2, r3, #4
 8005dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	895b      	ldrh	r3, [r3, #10]
 8005e1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6959      	ldr	r1, [r3, #20]
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e34:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e38:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	f000 ff24 	bl	8006c8a <USB_WritePMA>
 8005e42:	e0ca      	b.n	8005fda <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d177      	bne.n	8005f44 <USB_EPStartXfer+0xc98>
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e74:	4413      	add	r3, r2
 8005e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	011a      	lsls	r2, r3, #4
 8005e86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea6:	d921      	bls.n	8005eec <USB_EPStartXfer+0xc40>
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <USB_EPStartXfer+0xc1c>
 8005ebe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	029b      	lsls	r3, r3, #10
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e05c      	b.n	8005fa6 <USB_EPStartXfer+0xcfa>
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <USB_EPStartXfer+0xc5e>
 8005ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	e04d      	b.n	8005fa6 <USB_EPStartXfer+0xcfa>
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <USB_EPStartXfer+0xc7e>
 8005f20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f24:	3301      	adds	r3, #1
 8005f26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	029b      	lsls	r3, r3, #10
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f40:	801a      	strh	r2, [r3, #0]
 8005f42:	e030      	b.n	8005fa6 <USB_EPStartXfer+0xcfa>
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d128      	bne.n	8005fa6 <USB_EPStartXfer+0xcfa>
 8005f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f78:	4413      	add	r3, r2
 8005f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fa4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	891b      	ldrh	r3, [r3, #8]
 8005fb2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6959      	ldr	r1, [r3, #20]
 8005fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fcc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fd0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fd4:	6800      	ldr	r0, [r0, #0]
 8005fd6:	f000 fe58 	bl	8006c8a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006000:	817b      	strh	r3, [r7, #10]
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	f083 0310 	eor.w	r3, r3, #16
 8006008:	817b      	strh	r3, [r7, #10]
 800600a:	897b      	ldrh	r3, [r7, #10]
 800600c:	f083 0320 	eor.w	r3, r3, #32
 8006010:	817b      	strh	r3, [r7, #10]
 8006012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	897b      	ldrh	r3, [r7, #10]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	f000 bcde 	b.w	8006a02 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	7b1b      	ldrb	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 80bb 	bne.w	80061ce <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	429a      	cmp	r2, r3
 8006072:	d917      	bls.n	80060a4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	619a      	str	r2, [r3, #24]
 80060a2:	e00e      	b.n	80060c2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060e6:	4413      	add	r3, r2
 80060e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060fe:	4413      	add	r3, r2
 8006100:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006104:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006120:	2b3e      	cmp	r3, #62	@ 0x3e
 8006122:	d924      	bls.n	800616e <USB_EPStartXfer+0xec2>
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <USB_EPStartXfer+0xe98>
 800613a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800613e:	3b01      	subs	r3, #1
 8006140:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006150:	b29b      	uxth	r3, r3
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	b29b      	uxth	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	f000 bc10 	b.w	800698e <USB_EPStartXfer+0x16e2>
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10c      	bne.n	8006190 <USB_EPStartXfer+0xee4>
 8006176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e3fe      	b.n	800698e <USB_EPStartXfer+0x16e2>
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <USB_EPStartXfer+0xf04>
 80061a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061aa:	3301      	adds	r3, #1
 80061ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	e3df      	b.n	800698e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	78db      	ldrb	r3, [r3, #3]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	f040 8218 	bne.w	8006610 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 809d 	bne.w	800632c <USB_EPStartXfer+0x1080>
 80061f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006216:	4413      	add	r3, r2
 8006218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800621c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	011a      	lsls	r2, r3, #4
 800622a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800622e:	4413      	add	r3, r2
 8006230:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b3e      	cmp	r3, #62	@ 0x3e
 800625a:	d92b      	bls.n	80062b4 <USB_EPStartXfer+0x1008>
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <USB_EPStartXfer+0xfe0>
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006286:	3b01      	subs	r3, #1
 8006288:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800628c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006298:	b29b      	uxth	r3, r3
 800629a:	029b      	lsls	r3, r3, #10
 800629c:	b29b      	uxth	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e070      	b.n	8006396 <USB_EPStartXfer+0x10ea>
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10c      	bne.n	80062de <USB_EPStartXfer+0x1032>
 80062c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e05b      	b.n	8006396 <USB_EPStartXfer+0x10ea>
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <USB_EPStartXfer+0x1062>
 8006304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006308:	3301      	adds	r3, #1
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800630e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631a:	b29b      	uxth	r3, r3
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	b29b      	uxth	r3, r3
 8006320:	4313      	orrs	r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e034      	b.n	8006396 <USB_EPStartXfer+0x10ea>
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d12c      	bne.n	8006396 <USB_EPStartXfer+0x10ea>
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006360:	4413      	add	r3, r2
 8006362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	011a      	lsls	r2, r3, #4
 8006374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006378:	4413      	add	r3, r2
 800637a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800637e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 809d 	bne.w	80064f0 <USB_EPStartXfer+0x1244>
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063da:	4413      	add	r3, r2
 80063dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	011a      	lsls	r2, r3, #4
 80063ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063f2:	4413      	add	r3, r2
 80063f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006408:	b29a      	uxth	r2, r3
 800640a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b3e      	cmp	r3, #62	@ 0x3e
 800641e:	d92b      	bls.n	8006478 <USB_EPStartXfer+0x11cc>
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USB_EPStartXfer+0x11a4>
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644a:	3b01      	subs	r3, #1
 800644c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29a      	uxth	r2, r3
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800645c:	b29b      	uxth	r3, r3
 800645e:	029b      	lsls	r3, r3, #10
 8006460:	b29b      	uxth	r3, r3
 8006462:	4313      	orrs	r3, r2
 8006464:	b29b      	uxth	r3, r3
 8006466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646e:	b29a      	uxth	r2, r3
 8006470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e069      	b.n	800654c <USB_EPStartXfer+0x12a0>
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10c      	bne.n	80064a2 <USB_EPStartXfer+0x11f6>
 8006488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	e054      	b.n	800654c <USB_EPStartXfer+0x12a0>
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <USB_EPStartXfer+0x1226>
 80064c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064cc:	3301      	adds	r3, #1
 80064ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064de:	b29b      	uxth	r3, r3
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e02d      	b.n	800654c <USB_EPStartXfer+0x12a0>
 80064f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d125      	bne.n	800654c <USB_EPStartXfer+0x12a0>
 8006500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006516:	4413      	add	r3, r2
 8006518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	011a      	lsls	r2, r3, #4
 800652a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800652e:	4413      	add	r3, r2
 8006530:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006534:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800654a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8218 	beq.w	800698e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800655e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800657e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <USB_EPStartXfer+0x12ea>
 800658a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006596:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800659a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 81f5 	bne.w	800698e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 81ee 	bne.w	800698e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80065dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006606:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]
 800660e:	e1be      	b.n	800698e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	78db      	ldrb	r3, [r3, #3]
 800661c:	2b01      	cmp	r3, #1
 800661e:	f040 81b4 	bne.w	800698a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d917      	bls.n	800666e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800663e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800664e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	619a      	str	r2, [r3, #24]
 800666c:	e00e      	b.n	800668c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 8085 	bne.w	80067a8 <USB_EPStartXfer+0x14fc>
 800669e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066c2:	4413      	add	r3, r2
 80066c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	011a      	lsls	r2, r3, #4
 80066d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066da:	4413      	add	r3, r2
 80066dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80066fe:	d923      	bls.n	8006748 <USB_EPStartXfer+0x149c>
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <USB_EPStartXfer+0x1474>
 8006716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671a:	3b01      	subs	r3, #1
 800671c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	b29b      	uxth	r3, r3
 8006736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e060      	b.n	800680a <USB_EPStartXfer+0x155e>
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10c      	bne.n	800676a <USB_EPStartXfer+0x14be>
 8006750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e04f      	b.n	800680a <USB_EPStartXfer+0x155e>
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0x14de>
 8006780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800678a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29a      	uxth	r2, r3
 8006792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006796:	b29b      	uxth	r3, r3
 8006798:	029b      	lsls	r3, r3, #10
 800679a:	b29b      	uxth	r3, r3
 800679c:	4313      	orrs	r3, r2
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e030      	b.n	800680a <USB_EPStartXfer+0x155e>
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d128      	bne.n	800680a <USB_EPStartXfer+0x155e>
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067dc:	4413      	add	r3, r2
 80067de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	011a      	lsls	r2, r3, #4
 80067f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 8085 	bne.w	8006934 <USB_EPStartXfer+0x1688>
 800682a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800684e:	4413      	add	r3, r2
 8006850:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	011a      	lsls	r2, r3, #4
 8006862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006866:	4413      	add	r3, r2
 8006868:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800686c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800687c:	b29a      	uxth	r2, r3
 800687e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	2b3e      	cmp	r3, #62	@ 0x3e
 800688a:	d923      	bls.n	80068d4 <USB_EPStartXfer+0x1628>
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <USB_EPStartXfer+0x1600>
 80068a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068a6:	3b01      	subs	r3, #1
 80068a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	029b      	lsls	r3, r3, #10
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4313      	orrs	r3, r2
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	e05c      	b.n	800698e <USB_EPStartXfer+0x16e2>
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10c      	bne.n	80068f6 <USB_EPStartXfer+0x164a>
 80068dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e04b      	b.n	800698e <USB_EPStartXfer+0x16e2>
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <USB_EPStartXfer+0x166a>
 800690c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006910:	3301      	adds	r3, #1
 8006912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006922:	b29b      	uxth	r3, r3
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	b29b      	uxth	r3, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	b29a      	uxth	r2, r3
 800692c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e02c      	b.n	800698e <USB_EPStartXfer+0x16e2>
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d124      	bne.n	800698e <USB_EPStartXfer+0x16e2>
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006952:	b29b      	uxth	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800695a:	4413      	add	r3, r2
 800695c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	011a      	lsls	r2, r3, #4
 800696e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006972:	4413      	add	r3, r2
 8006974:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e001      	b.n	800698e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e03a      	b.n	8006a04 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800698e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d020      	beq.n	8006a62 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a36:	81bb      	strh	r3, [r7, #12]
 8006a38:	89bb      	ldrh	r3, [r7, #12]
 8006a3a:	f083 0310 	eor.w	r3, r3, #16
 8006a3e:	81bb      	strh	r3, [r7, #12]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	441a      	add	r2, r3
 8006a4a:	89bb      	ldrh	r3, [r7, #12]
 8006a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	8013      	strh	r3, [r2, #0]
 8006a60:	e01f      	b.n	8006aa2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a78:	81fb      	strh	r3, [r7, #14]
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a80:	81fb      	strh	r3, [r7, #14]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	89fb      	ldrh	r3, [r7, #14]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	7b1b      	ldrb	r3, [r3, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 809d 	bne.w	8006bfc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d04c      	beq.n	8006b64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	823b      	strh	r3, [r7, #16]
 8006ad8:	8a3b      	ldrh	r3, [r7, #16]
 8006ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01b      	beq.n	8006b1a <USB_EPClearStall+0x6c>
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af8:	81fb      	strh	r3, [r7, #14]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	78db      	ldrb	r3, [r3, #3]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d06c      	beq.n	8006bfc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b38:	81bb      	strh	r3, [r7, #12]
 8006b3a:	89bb      	ldrh	r3, [r7, #12]
 8006b3c:	f083 0320 	eor.w	r3, r3, #32
 8006b40:	81bb      	strh	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	89bb      	ldrh	r3, [r7, #12]
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
 8006b62:	e04b      	b.n	8006bfc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	82fb      	strh	r3, [r7, #22]
 8006b72:	8afb      	ldrh	r3, [r7, #22]
 8006b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <USB_EPClearStall+0x106>
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	82bb      	strh	r3, [r7, #20]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	441a      	add	r2, r3
 8006b9e:	8abb      	ldrh	r3, [r7, #20]
 8006ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	827b      	strh	r3, [r7, #18]
 8006bcc:	8a7b      	ldrh	r3, [r7, #18]
 8006bce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bd2:	827b      	strh	r3, [r7, #18]
 8006bd4:	8a7b      	ldrh	r3, [r7, #18]
 8006bd6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bda:	827b      	strh	r3, [r7, #18]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	8a7b      	ldrh	r3, [r7, #18]
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2280      	movs	r2, #128	@ 0x80
 8006c1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c68:	68fb      	ldr	r3, [r7, #12]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b08b      	sub	sp, #44	@ 0x2c
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	4611      	mov	r1, r2
 8006c96:	461a      	mov	r2, r3
 8006c98:	460b      	mov	r3, r1
 8006c9a:	80fb      	strh	r3, [r7, #6]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ca0:	88bb      	ldrh	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	005a      	lsls	r2, r3, #1
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc2:	e01e      	b.n	8006d02 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	b21a      	sxth	r2, r3
 8006cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	8a7a      	ldrh	r2, [r7, #18]
 8006ce2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	3302      	adds	r3, #2
 8006ce8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	3302      	adds	r3, #2
 8006cee:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1dd      	bne.n	8006cc4 <USB_WritePMA+0x3a>
  }
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	372c      	adds	r7, #44	@ 0x2c
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b08b      	sub	sp, #44	@ 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	460b      	mov	r3, r1
 8006d24:	80fb      	strh	r3, [r7, #6]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d2a:	88bb      	ldrh	r3, [r7, #4]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	005a      	lsls	r2, r3, #1
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d46:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4c:	e01b      	b.n	8006d86 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	3301      	adds	r3, #1
 8006d78:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	3b01      	subs	r3, #1
 8006d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e0      	bne.n	8006d4e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d8c:	88bb      	ldrh	r3, [r7, #4]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	701a      	strb	r2, [r3, #0]
  }
}
 8006da8:	bf00      	nop
 8006daa:	372c      	adds	r7, #44	@ 0x2c
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7c1b      	ldrb	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d115      	bne.n	8006df6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dce:	2202      	movs	r2, #2
 8006dd0:	2181      	movs	r1, #129	@ 0x81
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fe81 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006de2:	2202      	movs	r2, #2
 8006de4:	2101      	movs	r1, #1
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fe77 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006df4:	e012      	b.n	8006e1c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006df6:	2340      	movs	r3, #64	@ 0x40
 8006df8:	2202      	movs	r2, #2
 8006dfa:	2181      	movs	r1, #129	@ 0x81
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fe6c 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e08:	2340      	movs	r3, #64	@ 0x40
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fe63 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	2203      	movs	r2, #3
 8006e20:	2182      	movs	r1, #130	@ 0x82
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fe59 	bl	8008ada <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e2e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e32:	f001 ff79 	bl	8008d28 <USBD_static_malloc>
 8006e36:	4602      	mov	r2, r0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e026      	b.n	8006e9c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e54:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	7c1b      	ldrb	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e82:	2101      	movs	r1, #1
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 ff18 	bl	8008cba <USBD_LL_PrepareReceive>
 8006e8a:	e007      	b.n	8006e9c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e92:	2340      	movs	r3, #64	@ 0x40
 8006e94:	2101      	movs	r1, #1
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 ff0f 	bl	8008cba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006eb6:	2181      	movs	r1, #129	@ 0x81
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fe34 	bl	8008b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fe2d 	bl	8008b26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ed4:	2182      	movs	r1, #130	@ 0x82
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fe25 	bl	8008b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00e      	beq.n	8006f0a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 ff1f 	bl	8008d40 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f24:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d039      	beq.n	8006fb2 <USBD_CDC_Setup+0x9e>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d17f      	bne.n	8007042 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88db      	ldrh	r3, [r3, #6]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d029      	beq.n	8006f9e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b25b      	sxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da11      	bge.n	8006f78 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	88d2      	ldrh	r2, [r2, #6]
 8006f66:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f68:	6939      	ldr	r1, [r7, #16]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	88db      	ldrh	r3, [r3, #6]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fa05 	bl	8008380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f76:	e06b      	b.n	8007050 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	785a      	ldrb	r2, [r3, #1]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	88db      	ldrh	r3, [r3, #6]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f8e:	6939      	ldr	r1, [r7, #16]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	88db      	ldrh	r3, [r3, #6]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fa20 	bl	80083dc <USBD_CtlPrepareRx>
      break;
 8006f9c:	e058      	b.n	8007050 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	7850      	ldrb	r0, [r2, #1]
 8006faa:	2200      	movs	r2, #0
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	4798      	blx	r3
      break;
 8006fb0:	e04e      	b.n	8007050 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b0b      	cmp	r3, #11
 8006fb8:	d02e      	beq.n	8007018 <USBD_CDC_Setup+0x104>
 8006fba:	2b0b      	cmp	r3, #11
 8006fbc:	dc38      	bgt.n	8007030 <USBD_CDC_Setup+0x11c>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <USBD_CDC_Setup+0xb4>
 8006fc2:	2b0a      	cmp	r3, #10
 8006fc4:	d014      	beq.n	8006ff0 <USBD_CDC_Setup+0xdc>
 8006fc6:	e033      	b.n	8007030 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d107      	bne.n	8006fe2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f9d0 	bl	8008380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fe0:	e02e      	b.n	8007040 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f961 	bl	80082ac <USBD_CtlError>
            ret = USBD_FAIL;
 8006fea:	2302      	movs	r3, #2
 8006fec:	75fb      	strb	r3, [r7, #23]
          break;
 8006fee:	e027      	b.n	8007040 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d107      	bne.n	800700a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ffa:	f107 030f 	add.w	r3, r7, #15
 8006ffe:	2201      	movs	r2, #1
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f9bc 	bl	8008380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007008:	e01a      	b.n	8007040 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 f94d 	bl	80082ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007012:	2302      	movs	r3, #2
 8007014:	75fb      	strb	r3, [r7, #23]
          break;
 8007016:	e013      	b.n	8007040 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800701e:	2b03      	cmp	r3, #3
 8007020:	d00d      	beq.n	800703e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f941 	bl	80082ac <USBD_CtlError>
            ret = USBD_FAIL;
 800702a:	2302      	movs	r3, #2
 800702c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800702e:	e006      	b.n	800703e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 f93a 	bl	80082ac <USBD_CtlError>
          ret = USBD_FAIL;
 8007038:	2302      	movs	r3, #2
 800703a:	75fb      	strb	r3, [r7, #23]
          break;
 800703c:	e000      	b.n	8007040 <USBD_CDC_Setup+0x12c>
          break;
 800703e:	bf00      	nop
      }
      break;
 8007040:	e006      	b.n	8007050 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f931 	bl	80082ac <USBD_CtlError>
      ret = USBD_FAIL;
 800704a:	2302      	movs	r3, #2
 800704c:	75fb      	strb	r3, [r7, #23]
      break;
 800704e:	bf00      	nop
  }

  return ret;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800706c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007074:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d03a      	beq.n	80070f6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	331c      	adds	r3, #28
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d029      	beq.n	80070ea <USBD_CDC_DataIn+0x90>
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	331c      	adds	r3, #28
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	78f9      	ldrb	r1, [r7, #3]
 80070aa:	68b8      	ldr	r0, [r7, #8]
 80070ac:	460b      	mov	r3, r1
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4403      	add	r3, r0
 80070b6:	3320      	adds	r3, #32
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	fbb2 f1f3 	udiv	r1, r2, r3
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d110      	bne.n	80070ea <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	4613      	mov	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	331c      	adds	r3, #28
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070dc:	78f9      	ldrb	r1, [r7, #3]
 80070de:	2300      	movs	r3, #0
 80070e0:	2200      	movs	r2, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fdc6 	bl	8008c74 <USBD_LL_Transmit>
 80070e8:	e003      	b.n	80070f2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007112:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 fdf1 	bl	8008d00 <USBD_LL_GetRxDataSize>
 800711e:	4602      	mov	r2, r0
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00d      	beq.n	800714c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007144:	4611      	mov	r1, r2
 8007146:	4798      	blx	r3

    return USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	e000      	b.n	800714e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007164:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <USBD_CDC_EP0_RxReady+0x44>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007176:	2bff      	cmp	r3, #255	@ 0xff
 8007178:	d00f      	beq.n	800719a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007188:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007190:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	22ff      	movs	r2, #255	@ 0xff
 8007196:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2243      	movs	r2, #67	@ 0x43
 80071b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80071b2:	4b03      	ldr	r3, [pc, #12]	@ (80071c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000094 	.word	0x20000094

080071c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2243      	movs	r2, #67	@ 0x43
 80071d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071d2:	4b03      	ldr	r3, [pc, #12]	@ (80071e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000050 	.word	0x20000050

080071e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2243      	movs	r2, #67	@ 0x43
 80071f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	@ (8007200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	200000d8 	.word	0x200000d8

08007204 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	220a      	movs	r2, #10
 8007210:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	@ (8007220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	2000000c 	.word	0x2000000c

08007224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800722e:	2302      	movs	r3, #2
 8007230:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007264:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007292:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01c      	beq.n	80072fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d115      	bne.n	80072f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2181      	movs	r1, #129	@ 0x81
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fcc0 	bl	8008c74 <USBD_LL_Transmit>

      return USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e002      	b.n	80072fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072fc:	2302      	movs	r3, #2
  }
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007314:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d017      	beq.n	8007350 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	7c1b      	ldrb	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800732e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007332:	2101      	movs	r1, #1
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 fcc0 	bl	8008cba <USBD_LL_PrepareReceive>
 800733a:	e007      	b.n	800734c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007342:	2340      	movs	r3, #64	@ 0x40
 8007344:	2101      	movs	r1, #1
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fcb7 	bl	8008cba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	4613      	mov	r3, r2
 8007366:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800736e:	2302      	movs	r3, #2
 8007370:	e01a      	b.n	80073a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	79fa      	ldrb	r2, [r7, #7]
 800739e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f001 fb25 	bl	80089f0 <USBD_LL_Init>

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
 80073d0:	e001      	b.n	80073d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073d2:	2302      	movs	r3, #2
 80073d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fb5a 	bl	8008aa4 <USBD_LL_Start>

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr

0800740e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800741a:	2302      	movs	r3, #2
 800741c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00c      	beq.n	8007442 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	4611      	mov	r1, r2
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fed8 	bl	800823a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d016      	beq.n	80074dc <USBD_LL_SetupStage+0x6a>
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d81c      	bhi.n	80074ec <USBD_LL_SetupStage+0x7a>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <USBD_LL_SetupStage+0x4a>
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d008      	beq.n	80074cc <USBD_LL_SetupStage+0x5a>
 80074ba:	e017      	b.n	80074ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f9cb 	bl	8007860 <USBD_StdDevReq>
      break;
 80074ca:	e01a      	b.n	8007502 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa2d 	bl	8007934 <USBD_StdItfReq>
      break;
 80074da:	e012      	b.n	8007502 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa6d 	bl	80079c4 <USBD_StdEPReq>
      break;
 80074ea:	e00a      	b.n	8007502 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fb32 	bl	8008b64 <USBD_LL_StallEP>
      break;
 8007500:	bf00      	nop
  }

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	460b      	mov	r3, r1
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d14b      	bne.n	80075b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007526:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800752e:	2b03      	cmp	r3, #3
 8007530:	d134      	bne.n	800759c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	d919      	bls.n	8007572 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	1ad2      	subs	r2, r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007554:	429a      	cmp	r2, r3
 8007556:	d203      	bcs.n	8007560 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800755c:	b29b      	uxth	r3, r3
 800755e:	e002      	b.n	8007566 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007564:	b29b      	uxth	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 ff54 	bl	8008418 <USBD_CtlContinueRx>
 8007570:	e038      	b.n	80075e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007584:	2b03      	cmp	r3, #3
 8007586:	d105      	bne.n	8007594 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 ff51 	bl	800843c <USBD_CtlSendStatus>
 800759a:	e023      	b.n	80075e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	d11e      	bne.n	80075e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075ae:	2100      	movs	r1, #0
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f001 fad7 	bl	8008b64 <USBD_LL_StallEP>
 80075b6:	e015      	b.n	80075e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d108      	bne.n	80075e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	7afa      	ldrb	r2, [r7, #11]
 80075d8:	4611      	mov	r1, r2
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	4798      	blx	r3
 80075de:	e001      	b.n	80075e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075e0:	2302      	movs	r3, #2
 80075e2:	e000      	b.n	80075e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	460b      	mov	r3, r1
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d17f      	bne.n	8007702 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3314      	adds	r3, #20
 8007606:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800760e:	2b02      	cmp	r3, #2
 8007610:	d15c      	bne.n	80076cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	429a      	cmp	r2, r3
 800761c:	d915      	bls.n	800764a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	1ad2      	subs	r2, r2, r3
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 febe 	bl	80083b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800763c:	2300      	movs	r3, #0
 800763e:	2200      	movs	r2, #0
 8007640:	2100      	movs	r1, #0
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f001 fb39 	bl	8008cba <USBD_LL_PrepareReceive>
 8007648:	e04e      	b.n	80076e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	6912      	ldr	r2, [r2, #16]
 8007652:	fbb3 f1f2 	udiv	r1, r3, r2
 8007656:	fb01 f202 	mul.w	r2, r1, r2
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11c      	bne.n	800769a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007668:	429a      	cmp	r2, r3
 800766a:	d316      	bcc.n	800769a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007676:	429a      	cmp	r2, r3
 8007678:	d20f      	bcs.n	800769a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fe9a 	bl	80083b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800768c:	2300      	movs	r3, #0
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 fb11 	bl	8008cba <USBD_LL_PrepareReceive>
 8007698:	e026      	b.n	80076e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d105      	bne.n	80076bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076bc:	2180      	movs	r1, #128	@ 0x80
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f001 fa50 	bl	8008b64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fecc 	bl	8008462 <USBD_CtlReceiveStatus>
 80076ca:	e00d      	b.n	80076e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d004      	beq.n	80076e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076e0:	2180      	movs	r1, #128	@ 0x80
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f001 fa3e 	bl	8008b64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d11d      	bne.n	800772e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff fe81 	bl	80073fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007700:	e015      	b.n	800772e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007714:	2b03      	cmp	r3, #3
 8007716:	d108      	bne.n	800772a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	7afa      	ldrb	r2, [r7, #11]
 8007722:	4611      	mov	r1, r2
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	4798      	blx	r3
 8007728:	e001      	b.n	800772e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800772a:	2302      	movs	r3, #2
 800772c:	e000      	b.n	8007730 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007740:	2340      	movs	r3, #64	@ 0x40
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 f9c7 	bl	8008ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2240      	movs	r2, #64	@ 0x40
 8007758:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800775c:	2340      	movs	r3, #64	@ 0x40
 800775e:	2200      	movs	r2, #0
 8007760:	2180      	movs	r1, #128	@ 0x80
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f9b9 	bl	8008ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2240      	movs	r2, #64	@ 0x40
 8007772:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6852      	ldr	r2, [r2, #4]
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	4611      	mov	r1, r2
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
  }

  return USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	78fa      	ldrb	r2, [r7, #3]
 80077ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr

08007800 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800780e:	2b04      	cmp	r3, #4
 8007810:	d105      	bne.n	800781e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007838:	2b03      	cmp	r3, #3
 800783a:	d10b      	bne.n	8007854 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007876:	2b40      	cmp	r3, #64	@ 0x40
 8007878:	d005      	beq.n	8007886 <USBD_StdDevReq+0x26>
 800787a:	2b40      	cmp	r3, #64	@ 0x40
 800787c:	d84f      	bhi.n	800791e <USBD_StdDevReq+0xbe>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <USBD_StdDevReq+0x36>
 8007882:	2b20      	cmp	r3, #32
 8007884:	d14b      	bne.n	800791e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
      break;
 8007894:	e048      	b.n	8007928 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b09      	cmp	r3, #9
 800789c:	d839      	bhi.n	8007912 <USBD_StdDevReq+0xb2>
 800789e:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <USBD_StdDevReq+0x44>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078f5 	.word	0x080078f5
 80078a8:	08007909 	.word	0x08007909
 80078ac:	08007913 	.word	0x08007913
 80078b0:	080078ff 	.word	0x080078ff
 80078b4:	08007913 	.word	0x08007913
 80078b8:	080078d7 	.word	0x080078d7
 80078bc:	080078cd 	.word	0x080078cd
 80078c0:	08007913 	.word	0x08007913
 80078c4:	080078eb 	.word	0x080078eb
 80078c8:	080078e1 	.word	0x080078e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9dc 	bl	8007c8c <USBD_GetDescriptor>
          break;
 80078d4:	e022      	b.n	800791c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fb3f 	bl	8007f5c <USBD_SetAddress>
          break;
 80078de:	e01d      	b.n	800791c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fb7e 	bl	8007fe4 <USBD_SetConfig>
          break;
 80078e8:	e018      	b.n	800791c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc07 	bl	8008100 <USBD_GetConfig>
          break;
 80078f2:	e013      	b.n	800791c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fc37 	bl	800816a <USBD_GetStatus>
          break;
 80078fc:	e00e      	b.n	800791c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fc65 	bl	80081d0 <USBD_SetFeature>
          break;
 8007906:	e009      	b.n	800791c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fc74 	bl	80081f8 <USBD_ClrFeature>
          break;
 8007910:	e004      	b.n	800791c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fcc9 	bl	80082ac <USBD_CtlError>
          break;
 800791a:	bf00      	nop
      }
      break;
 800791c:	e004      	b.n	8007928 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fcc3 	bl	80082ac <USBD_CtlError>
      break;
 8007926:	bf00      	nop
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop

08007934 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d005      	beq.n	800795a <USBD_StdItfReq+0x26>
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d82e      	bhi.n	80079b0 <USBD_StdItfReq+0x7c>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <USBD_StdItfReq+0x26>
 8007956:	2b20      	cmp	r3, #32
 8007958:	d12a      	bne.n	80079b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007960:	3b01      	subs	r3, #1
 8007962:	2b02      	cmp	r3, #2
 8007964:	d81d      	bhi.n	80079a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	889b      	ldrh	r3, [r3, #4]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d813      	bhi.n	8007998 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
 800797e:	4603      	mov	r3, r0
 8007980:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d110      	bne.n	80079ac <USBD_StdItfReq+0x78>
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10d      	bne.n	80079ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fd53 	bl	800843c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007996:	e009      	b.n	80079ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc86 	bl	80082ac <USBD_CtlError>
          break;
 80079a0:	e004      	b.n	80079ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fc81 	bl	80082ac <USBD_CtlError>
          break;
 80079aa:	e000      	b.n	80079ae <USBD_StdItfReq+0x7a>
          break;
 80079ac:	bf00      	nop
      }
      break;
 80079ae:	e004      	b.n	80079ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fc7a 	bl	80082ac <USBD_CtlError>
      break;
 80079b8:	bf00      	nop
  }

  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	889b      	ldrh	r3, [r3, #4]
 80079d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079e0:	2b40      	cmp	r3, #64	@ 0x40
 80079e2:	d007      	beq.n	80079f4 <USBD_StdEPReq+0x30>
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	f200 8146 	bhi.w	8007c76 <USBD_StdEPReq+0x2b2>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <USBD_StdEPReq+0x40>
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	f040 8141 	bne.w	8007c76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
      break;
 8007a02:	e13d      	b.n	8007c80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d10a      	bne.n	8007a26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	e12d      	b.n	8007c82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d007      	beq.n	8007a3e <USBD_StdEPReq+0x7a>
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	f300 811b 	bgt.w	8007c6a <USBD_StdEPReq+0x2a6>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d072      	beq.n	8007b1e <USBD_StdEPReq+0x15a>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d03a      	beq.n	8007ab2 <USBD_StdEPReq+0xee>
 8007a3c:	e115      	b.n	8007c6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d002      	beq.n	8007a4e <USBD_StdEPReq+0x8a>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d015      	beq.n	8007a78 <USBD_StdEPReq+0xb4>
 8007a4c:	e02b      	b.n	8007aa6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00c      	beq.n	8007a6e <USBD_StdEPReq+0xaa>
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b80      	cmp	r3, #128	@ 0x80
 8007a58:	d009      	beq.n	8007a6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 f880 	bl	8008b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a64:	2180      	movs	r1, #128	@ 0x80
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 f87c 	bl	8008b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a6c:	e020      	b.n	8007ab0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc1b 	bl	80082ac <USBD_CtlError>
              break;
 8007a76:	e01b      	b.n	8007ab0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10e      	bne.n	8007a9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <USBD_StdEPReq+0xda>
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b80      	cmp	r3, #128	@ 0x80
 8007a8a:	d008      	beq.n	8007a9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	88db      	ldrh	r3, [r3, #6]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f863 	bl	8008b64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fccc 	bl	800843c <USBD_CtlSendStatus>

              break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fbff 	bl	80082ac <USBD_CtlError>
              break;
 8007aae:	bf00      	nop
          }
          break;
 8007ab0:	e0e0      	b.n	8007c74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d002      	beq.n	8007ac2 <USBD_StdEPReq+0xfe>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d015      	beq.n	8007aec <USBD_StdEPReq+0x128>
 8007ac0:	e026      	b.n	8007b10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00c      	beq.n	8007ae2 <USBD_StdEPReq+0x11e>
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b80      	cmp	r3, #128	@ 0x80
 8007acc:	d009      	beq.n	8007ae2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f846 	bl	8008b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ad8:	2180      	movs	r1, #128	@ 0x80
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f842 	bl	8008b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ae0:	e01c      	b.n	8007b1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fbe1 	bl	80082ac <USBD_CtlError>
              break;
 8007aea:	e017      	b.n	8007b1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d112      	bne.n	8007b1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d004      	beq.n	8007b08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f84d 	bl	8008ba2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc97 	bl	800843c <USBD_CtlSendStatus>
              }
              break;
 8007b0e:	e004      	b.n	8007b1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fbca 	bl	80082ac <USBD_CtlError>
              break;
 8007b18:	e000      	b.n	8007b1c <USBD_StdEPReq+0x158>
              break;
 8007b1a:	bf00      	nop
          }
          break;
 8007b1c:	e0aa      	b.n	8007c74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d002      	beq.n	8007b2e <USBD_StdEPReq+0x16a>
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d032      	beq.n	8007b92 <USBD_StdEPReq+0x1ce>
 8007b2c:	e097      	b.n	8007c5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <USBD_StdEPReq+0x180>
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b80      	cmp	r3, #128	@ 0x80
 8007b38:	d004      	beq.n	8007b44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fbb5 	bl	80082ac <USBD_CtlError>
                break;
 8007b42:	e091      	b.n	8007c68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	da0b      	bge.n	8007b64 <USBD_StdEPReq+0x1a0>
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3304      	adds	r3, #4
 8007b62:	e00b      	b.n	8007b7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2202      	movs	r2, #2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fbf8 	bl	8008380 <USBD_CtlSendData>
              break;
 8007b90:	e06a      	b.n	8007c68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da11      	bge.n	8007bbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	3318      	adds	r3, #24
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d117      	bne.n	8007be4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb78 	bl	80082ac <USBD_CtlError>
                  break;
 8007bbc:	e054      	b.n	8007c68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	f003 020f 	and.w	r2, r3, #15
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d104      	bne.n	8007be4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fb65 	bl	80082ac <USBD_CtlError>
                  break;
 8007be2:	e041      	b.n	8007c68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da0b      	bge.n	8007c04 <USBD_StdEPReq+0x240>
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3304      	adds	r3, #4
 8007c02:	e00b      	b.n	8007c1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4413      	add	r3, r2
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <USBD_StdEPReq+0x266>
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b80      	cmp	r3, #128	@ 0x80
 8007c28:	d103      	bne.n	8007c32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e00e      	b.n	8007c50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 ffd2 	bl	8008be0 <USBD_LL_IsStallEP>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e002      	b.n	8007c50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2202      	movs	r2, #2
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb92 	bl	8008380 <USBD_CtlSendData>
              break;
 8007c5c:	e004      	b.n	8007c68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fb23 	bl	80082ac <USBD_CtlError>
              break;
 8007c66:	bf00      	nop
          }
          break;
 8007c68:	e004      	b.n	8007c74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb1d 	bl	80082ac <USBD_CtlError>
          break;
 8007c72:	bf00      	nop
      }
      break;
 8007c74:	e004      	b.n	8007c80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb17 	bl	80082ac <USBD_CtlError>
      break;
 8007c7e:	bf00      	nop
  }

  return ret;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b06      	cmp	r3, #6
 8007cae:	f200 8128 	bhi.w	8007f02 <USBD_GetDescriptor+0x276>
 8007cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <USBD_GetDescriptor+0x2c>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007f03 	.word	0x08007f03
 8007cc8:	08007f03 	.word	0x08007f03
 8007ccc:	08007ea3 	.word	0x08007ea3
 8007cd0:	08007ecf 	.word	0x08007ecf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
      break;
 8007cea:	e112      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7c1b      	ldrb	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10d      	bne.n	8007d10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	f107 0208 	add.w	r2, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d0e:	e100      	b.n	8007f12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
 8007d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	2202      	movs	r2, #2
 8007d28:	701a      	strb	r2, [r3, #0]
      break;
 8007d2a:	e0f2      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	885b      	ldrh	r3, [r3, #2]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b05      	cmp	r3, #5
 8007d34:	f200 80ac 	bhi.w	8007e90 <USBD_GetDescriptor+0x204>
 8007d38:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <USBD_GetDescriptor+0xb4>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d59 	.word	0x08007d59
 8007d44:	08007d8d 	.word	0x08007d8d
 8007d48:	08007dc1 	.word	0x08007dc1
 8007d4c:	08007df5 	.word	0x08007df5
 8007d50:	08007e29 	.word	0x08007e29
 8007d54:	08007e5d 	.word	0x08007e5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 0108 	add.w	r1, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7a:	e091      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa94 	bl	80082ac <USBD_CtlError>
            err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8a:	e089      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7c12      	ldrb	r2, [r2, #16]
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dae:	e077      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa7a 	bl	80082ac <USBD_CtlError>
            err++;
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dbe:	e06f      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de2:	e05d      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa60 	bl	80082ac <USBD_CtlError>
            err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
          break;
 8007df2:	e055      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 0108 	add.w	r1, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e16:	e043      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa46 	bl	80082ac <USBD_CtlError>
            err++;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	3301      	adds	r3, #1
 8007e24:	72fb      	strb	r3, [r7, #11]
          break;
 8007e26:	e03b      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	7c12      	ldrb	r2, [r2, #16]
 8007e40:	f107 0108 	add.w	r1, r7, #8
 8007e44:	4610      	mov	r0, r2
 8007e46:	4798      	blx	r3
 8007e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4a:	e029      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa2c 	bl	80082ac <USBD_CtlError>
            err++;
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	3301      	adds	r3, #1
 8007e58:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5a:	e021      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7c12      	ldrb	r2, [r2, #16]
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7e:	e00f      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa12 	bl	80082ac <USBD_CtlError>
            err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8e:	e007      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa0a 	bl	80082ac <USBD_CtlError>
          err++;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e9e:	e038      	b.n	8007f12 <USBD_GetDescriptor+0x286>
 8007ea0:	e037      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7c1b      	ldrb	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	f107 0208 	add.w	r2, r7, #8
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4798      	blx	r3
 8007eba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ebc:	e029      	b.n	8007f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f9f3 	bl	80082ac <USBD_CtlError>
        err++;
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	72fb      	strb	r3, [r7, #11]
      break;
 8007ecc:	e021      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c1b      	ldrb	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ede:	f107 0208 	add.w	r2, r7, #8
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
 8007ee6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	2207      	movs	r2, #7
 8007eee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ef0:	e00f      	b.n	8007f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9d9 	bl	80082ac <USBD_CtlError>
        err++;
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	3301      	adds	r3, #1
 8007efe:	72fb      	strb	r3, [r7, #11]
      break;
 8007f00:	e007      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9d1 	bl	80082ac <USBD_CtlError>
      err++;
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f10:	bf00      	nop
  }

  if (err != 0U)
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11c      	bne.n	8007f52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f18:	893b      	ldrh	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d011      	beq.n	8007f42 <USBD_GetDescriptor+0x2b6>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	88db      	ldrh	r3, [r3, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00d      	beq.n	8007f42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88da      	ldrh	r2, [r3, #6]
 8007f2a:	893b      	ldrh	r3, [r7, #8]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	bf28      	it	cs
 8007f30:	4613      	movcs	r3, r2
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f36:	893b      	ldrh	r3, [r7, #8]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa1f 	bl	8008380 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	88db      	ldrh	r3, [r3, #6]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa76 	bl	800843c <USBD_CtlSendStatus>
 8007f50:	e000      	b.n	8007f54 <USBD_GetDescriptor+0x2c8>
    return;
 8007f52:	bf00      	nop
    }
  }
}
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop

08007f5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	889b      	ldrh	r3, [r3, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d130      	bne.n	8007fd0 <USBD_SetAddress+0x74>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d12c      	bne.n	8007fd0 <USBD_SetAddress+0x74>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f7c:	d828      	bhi.n	8007fd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	885b      	ldrh	r3, [r3, #2]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d104      	bne.n	8007f9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f988 	bl	80082ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9c:	e01d      	b.n	8007fda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	7bfa      	ldrb	r2, [r7, #15]
 8007fa2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fe43 	bl	8008c36 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa43 	bl	800843c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc4:	e009      	b.n	8007fda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fce:	e004      	b.n	8007fda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f96a 	bl	80082ac <USBD_CtlError>
  }
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	4b41      	ldr	r3, [pc, #260]	@ (80080fc <USBD_SetConfig+0x118>)
 8007ff6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ff8:	4b40      	ldr	r3, [pc, #256]	@ (80080fc <USBD_SetConfig+0x118>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d904      	bls.n	800800a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f952 	bl	80082ac <USBD_CtlError>
 8008008:	e075      	b.n	80080f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008010:	2b02      	cmp	r3, #2
 8008012:	d002      	beq.n	800801a <USBD_SetConfig+0x36>
 8008014:	2b03      	cmp	r3, #3
 8008016:	d023      	beq.n	8008060 <USBD_SetConfig+0x7c>
 8008018:	e062      	b.n	80080e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800801a:	4b38      	ldr	r3, [pc, #224]	@ (80080fc <USBD_SetConfig+0x118>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01a      	beq.n	8008058 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008022:	4b36      	ldr	r3, [pc, #216]	@ (80080fc <USBD_SetConfig+0x118>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2203      	movs	r2, #3
 8008030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008034:	4b31      	ldr	r3, [pc, #196]	@ (80080fc <USBD_SetConfig+0x118>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff f9e7 	bl	800740e <USBD_SetClassConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	2b02      	cmp	r3, #2
 8008044:	d104      	bne.n	8008050 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f92f 	bl	80082ac <USBD_CtlError>
            return;
 800804e:	e052      	b.n	80080f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f9f3 	bl	800843c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008056:	e04e      	b.n	80080f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f9ef 	bl	800843c <USBD_CtlSendStatus>
        break;
 800805e:	e04a      	b.n	80080f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008060:	4b26      	ldr	r3, [pc, #152]	@ (80080fc <USBD_SetConfig+0x118>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d112      	bne.n	800808e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008070:	4b22      	ldr	r3, [pc, #136]	@ (80080fc <USBD_SetConfig+0x118>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800807a:	4b20      	ldr	r3, [pc, #128]	@ (80080fc <USBD_SetConfig+0x118>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff f9e3 	bl	800744c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f9d8 	bl	800843c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800808c:	e033      	b.n	80080f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800808e:	4b1b      	ldr	r3, [pc, #108]	@ (80080fc <USBD_SetConfig+0x118>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	429a      	cmp	r2, r3
 800809a:	d01d      	beq.n	80080d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff f9d1 	bl	800744c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80080aa:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <USBD_SetConfig+0x118>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080b4:	4b11      	ldr	r3, [pc, #68]	@ (80080fc <USBD_SetConfig+0x118>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff f9a7 	bl	800740e <USBD_SetClassConfig>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d104      	bne.n	80080d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8ef 	bl	80082ac <USBD_CtlError>
            return;
 80080ce:	e012      	b.n	80080f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f9b3 	bl	800843c <USBD_CtlSendStatus>
        break;
 80080d6:	e00e      	b.n	80080f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9af 	bl	800843c <USBD_CtlSendStatus>
        break;
 80080de:	e00a      	b.n	80080f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f8e2 	bl	80082ac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <USBD_SetConfig+0x118>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff f9ac 	bl	800744c <USBD_ClrClassConfig>
        break;
 80080f4:	bf00      	nop
    }
  }
}
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000238 	.word	0x20000238

08008100 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	88db      	ldrh	r3, [r3, #6]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d004      	beq.n	800811c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f8c9 	bl	80082ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800811a:	e022      	b.n	8008162 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008122:	2b02      	cmp	r3, #2
 8008124:	dc02      	bgt.n	800812c <USBD_GetConfig+0x2c>
 8008126:	2b00      	cmp	r3, #0
 8008128:	dc03      	bgt.n	8008132 <USBD_GetConfig+0x32>
 800812a:	e015      	b.n	8008158 <USBD_GetConfig+0x58>
 800812c:	2b03      	cmp	r3, #3
 800812e:	d00b      	beq.n	8008148 <USBD_GetConfig+0x48>
 8008130:	e012      	b.n	8008158 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3308      	adds	r3, #8
 800813c:	2201      	movs	r2, #1
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f91d 	bl	8008380 <USBD_CtlSendData>
        break;
 8008146:	e00c      	b.n	8008162 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3304      	adds	r3, #4
 800814c:	2201      	movs	r2, #1
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f915 	bl	8008380 <USBD_CtlSendData>
        break;
 8008156:	e004      	b.n	8008162 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f8a6 	bl	80082ac <USBD_CtlError>
        break;
 8008160:	bf00      	nop
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800817a:	3b01      	subs	r3, #1
 800817c:	2b02      	cmp	r3, #2
 800817e:	d81e      	bhi.n	80081be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	88db      	ldrh	r3, [r3, #6]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d004      	beq.n	8008192 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f88e 	bl	80082ac <USBD_CtlError>
        break;
 8008190:	e01a      	b.n	80081c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f043 0202 	orr.w	r2, r3, #2
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	330c      	adds	r3, #12
 80081b2:	2202      	movs	r2, #2
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f8e2 	bl	8008380 <USBD_CtlSendData>
      break;
 80081bc:	e004      	b.n	80081c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f873 	bl	80082ac <USBD_CtlError>
      break;
 80081c6:	bf00      	nop
  }
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	885b      	ldrh	r3, [r3, #2]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d106      	bne.n	80081f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f926 	bl	800843c <USBD_CtlSendStatus>
  }
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008208:	3b01      	subs	r3, #1
 800820a:	2b02      	cmp	r3, #2
 800820c:	d80b      	bhi.n	8008226 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	885b      	ldrh	r3, [r3, #2]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d10c      	bne.n	8008230 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f90c 	bl	800843c <USBD_CtlSendStatus>
      }
      break;
 8008224:	e004      	b.n	8008230 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f83f 	bl	80082ac <USBD_CtlError>
      break;
 800822e:	e000      	b.n	8008232 <USBD_ClrFeature+0x3a>
      break;
 8008230:	bf00      	nop
  }
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781a      	ldrb	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	785a      	ldrb	r2, [r3, #1]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	3302      	adds	r3, #2
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	3303      	adds	r3, #3
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	b29b      	uxth	r3, r3
 8008266:	4413      	add	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	3305      	adds	r3, #5
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	b29b      	uxth	r3, r3
 8008280:	4413      	add	r3, r2
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	3306      	adds	r3, #6
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	3307      	adds	r3, #7
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	b29b      	uxth	r3, r3
 800829a:	4413      	add	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	80da      	strh	r2, [r3, #6]

}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082b6:	2180      	movs	r1, #128	@ 0x80
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc53 	bl	8008b64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082be:	2100      	movs	r1, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fc4f 	bl	8008b64 <USBD_LL_StallEP>
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b086      	sub	sp, #24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d032      	beq.n	800834a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 f834 	bl	8008352 <USBD_GetLen>
 80082ea:	4603      	mov	r3, r0
 80082ec:	3301      	adds	r3, #1
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	75fa      	strb	r2, [r7, #23]
 80082fe:	461a      	mov	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4413      	add	r3, r2
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	7812      	ldrb	r2, [r2, #0]
 8008308:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	75fa      	strb	r2, [r7, #23]
 8008310:	461a      	mov	r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4413      	add	r3, r2
 8008316:	2203      	movs	r2, #3
 8008318:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800831a:	e012      	b.n	8008342 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	60fa      	str	r2, [r7, #12]
 8008322:	7dfa      	ldrb	r2, [r7, #23]
 8008324:	1c51      	adds	r1, r2, #1
 8008326:	75f9      	strb	r1, [r7, #23]
 8008328:	4611      	mov	r1, r2
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	440a      	add	r2, r1
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	75fa      	strb	r2, [r7, #23]
 8008338:	461a      	mov	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4413      	add	r3, r2
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e8      	bne.n	800831c <USBD_GetString+0x4e>
    }
  }
}
 800834a:	bf00      	nop
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008352:	b480      	push	{r7}
 8008354:	b085      	sub	sp, #20
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800835e:	e005      	b.n	800836c <USBD_GetLen+0x1a>
  {
    len++;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	3301      	adds	r3, #1
 8008364:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3301      	adds	r3, #1
 800836a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f5      	bne.n	8008360 <USBD_GetLen+0xe>
  }

  return len;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2202      	movs	r2, #2
 8008392:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fc63 	bl	8008c74 <USBD_LL_Transmit>

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083c6:	88fb      	ldrh	r3, [r7, #6]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	2100      	movs	r1, #0
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fc51 	bl	8008c74 <USBD_LL_Transmit>

  return USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2203      	movs	r2, #3
 80083ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	2100      	movs	r1, #0
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fc56 	bl	8008cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	2100      	movs	r1, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fc44 	bl	8008cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2204      	movs	r2, #4
 8008448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800844c:	2300      	movs	r3, #0
 800844e:	2200      	movs	r2, #0
 8008450:	2100      	movs	r1, #0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fc0e 	bl	8008c74 <USBD_LL_Transmit>

  return USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2205      	movs	r2, #5
 800846e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008472:	2300      	movs	r3, #0
 8008474:	2200      	movs	r2, #0
 8008476:	2100      	movs	r1, #0
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc1e 	bl	8008cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800848c:	2200      	movs	r2, #0
 800848e:	4912      	ldr	r1, [pc, #72]	@ (80084d8 <MX_USB_DEVICE_Init+0x50>)
 8008490:	4812      	ldr	r0, [pc, #72]	@ (80084dc <MX_USB_DEVICE_Init+0x54>)
 8008492:	f7fe ff62 	bl	800735a <USBD_Init>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800849c:	f7f8 fb76 	bl	8000b8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084a0:	490f      	ldr	r1, [pc, #60]	@ (80084e0 <MX_USB_DEVICE_Init+0x58>)
 80084a2:	480e      	ldr	r0, [pc, #56]	@ (80084dc <MX_USB_DEVICE_Init+0x54>)
 80084a4:	f7fe ff84 	bl	80073b0 <USBD_RegisterClass>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084ae:	f7f8 fb6d 	bl	8000b8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084b2:	490c      	ldr	r1, [pc, #48]	@ (80084e4 <MX_USB_DEVICE_Init+0x5c>)
 80084b4:	4809      	ldr	r0, [pc, #36]	@ (80084dc <MX_USB_DEVICE_Init+0x54>)
 80084b6:	f7fe feb5 	bl	8007224 <USBD_CDC_RegisterInterface>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084c0:	f7f8 fb64 	bl	8000b8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084c4:	4805      	ldr	r0, [pc, #20]	@ (80084dc <MX_USB_DEVICE_Init+0x54>)
 80084c6:	f7fe ff8c 	bl	80073e2 <USBD_Start>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084d0:	f7f8 fb5c 	bl	8000b8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084d4:	bf00      	nop
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	2000012c 	.word	0x2000012c
 80084dc:	2000023c 	.word	0x2000023c
 80084e0:	20000018 	.word	0x20000018
 80084e4:	2000011c 	.word	0x2000011c

080084e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084ec:	2200      	movs	r2, #0
 80084ee:	4905      	ldr	r1, [pc, #20]	@ (8008504 <CDC_Init_FS+0x1c>)
 80084f0:	4805      	ldr	r0, [pc, #20]	@ (8008508 <CDC_Init_FS+0x20>)
 80084f2:	f7fe fead 	bl	8007250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084f6:	4905      	ldr	r1, [pc, #20]	@ (800850c <CDC_Init_FS+0x24>)
 80084f8:	4803      	ldr	r0, [pc, #12]	@ (8008508 <CDC_Init_FS+0x20>)
 80084fa:	f7fe fec2 	bl	8007282 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008500:	4618      	mov	r0, r3
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20000900 	.word	0x20000900
 8008508:	2000023c 	.word	0x2000023c
 800850c:	20000500 	.word	0x20000500

08008510 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008514:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008516:	4618      	mov	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr
	...

08008520 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
 800852c:	4613      	mov	r3, r2
 800852e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b23      	cmp	r3, #35	@ 0x23
 8008534:	d84a      	bhi.n	80085cc <CDC_Control_FS+0xac>
 8008536:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <CDC_Control_FS+0x1c>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	080085cd 	.word	0x080085cd
 8008540:	080085cd 	.word	0x080085cd
 8008544:	080085cd 	.word	0x080085cd
 8008548:	080085cd 	.word	0x080085cd
 800854c:	080085cd 	.word	0x080085cd
 8008550:	080085cd 	.word	0x080085cd
 8008554:	080085cd 	.word	0x080085cd
 8008558:	080085cd 	.word	0x080085cd
 800855c:	080085cd 	.word	0x080085cd
 8008560:	080085cd 	.word	0x080085cd
 8008564:	080085cd 	.word	0x080085cd
 8008568:	080085cd 	.word	0x080085cd
 800856c:	080085cd 	.word	0x080085cd
 8008570:	080085cd 	.word	0x080085cd
 8008574:	080085cd 	.word	0x080085cd
 8008578:	080085cd 	.word	0x080085cd
 800857c:	080085cd 	.word	0x080085cd
 8008580:	080085cd 	.word	0x080085cd
 8008584:	080085cd 	.word	0x080085cd
 8008588:	080085cd 	.word	0x080085cd
 800858c:	080085cd 	.word	0x080085cd
 8008590:	080085cd 	.word	0x080085cd
 8008594:	080085cd 	.word	0x080085cd
 8008598:	080085cd 	.word	0x080085cd
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	080085cd 	.word	0x080085cd
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085cd 	.word	0x080085cd
 80085b0:	080085cd 	.word	0x080085cd
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	080085cd 	.word	0x080085cd
 80085bc:	080085cd 	.word	0x080085cd
 80085c0:	080085cd 	.word	0x080085cd
 80085c4:	080085cd 	.word	0x080085cd
 80085c8:	080085cd 	.word	0x080085cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085cc:	bf00      	nop
  }

  return (USBD_OK);
 80085ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop

080085dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4805      	ldr	r0, [pc, #20]	@ (8008600 <CDC_Receive_FS+0x24>)
 80085ea:	f7fe fe4a 	bl	8007282 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085ee:	4804      	ldr	r0, [pc, #16]	@ (8008600 <CDC_Receive_FS+0x24>)
 80085f0:	f7fe fe89 	bl	8007306 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	2000023c 	.word	0x2000023c

08008604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008614:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <CDC_Transmit_FS+0x48>)
 8008616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008626:	2301      	movs	r3, #1
 8008628:	e00b      	b.n	8008642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800862a:	887b      	ldrh	r3, [r7, #2]
 800862c:	461a      	mov	r2, r3
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	4806      	ldr	r0, [pc, #24]	@ (800864c <CDC_Transmit_FS+0x48>)
 8008632:	f7fe fe0d 	bl	8007250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008636:	4805      	ldr	r0, [pc, #20]	@ (800864c <CDC_Transmit_FS+0x48>)
 8008638:	f7fe fe36 	bl	80072a8 <USBD_CDC_TransmitPacket>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	2000023c 	.word	0x2000023c

08008650 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2212      	movs	r2, #18
 8008660:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008662:	4b03      	ldr	r3, [pc, #12]	@ (8008670 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	20000148 	.word	0x20000148

08008674 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2204      	movs	r2, #4
 8008684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	2000015c 	.word	0x2000015c

08008698 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	@ (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	@ (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b0:	f7ff fe0d 	bl	80082ce <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	@ (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	@ (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086bc:	f7ff fe07 	bl	80082ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	@ (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000d00 	.word	0x20000d00
 80086d0:	08008e30 	.word	0x08008e30

080086d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	4904      	ldr	r1, [pc, #16]	@ (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086e4:	4804      	ldr	r0, [pc, #16]	@ (80086f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086e6:	f7ff fdf2 	bl	80082ce <USBD_GetString>
  return USBD_StrDesc;
 80086ea:	4b02      	ldr	r3, [pc, #8]	@ (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000d00 	.word	0x20000d00
 80086f8:	08008e48 	.word	0x08008e48

080086fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	221a      	movs	r2, #26
 800870c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800870e:	f000 f843 	bl	8008798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008712:	4b02      	ldr	r3, [pc, #8]	@ (800871c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000160 	.word	0x20000160

08008720 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4907      	ldr	r1, [pc, #28]	@ (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008736:	4808      	ldr	r0, [pc, #32]	@ (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008738:	f7ff fdc9 	bl	80082ce <USBD_GetString>
 800873c:	e004      	b.n	8008748 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4904      	ldr	r1, [pc, #16]	@ (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008742:	4805      	ldr	r0, [pc, #20]	@ (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008744:	f7ff fdc3 	bl	80082ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8008748:	4b02      	ldr	r3, [pc, #8]	@ (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000d00 	.word	0x20000d00
 8008758:	08008e5c 	.word	0x08008e5c

0800875c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4907      	ldr	r1, [pc, #28]	@ (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008772:	4808      	ldr	r0, [pc, #32]	@ (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008774:	f7ff fdab 	bl	80082ce <USBD_GetString>
 8008778:	e004      	b.n	8008784 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4904      	ldr	r1, [pc, #16]	@ (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877e:	4805      	ldr	r0, [pc, #20]	@ (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008780:	f7ff fda5 	bl	80082ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	@ (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000d00 	.word	0x20000d00
 8008794:	08008e68 	.word	0x08008e68

08008798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800879e:	4b0f      	ldr	r3, [pc, #60]	@ (80087dc <Get_SerialNum+0x44>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087a4:	4b0e      	ldr	r3, [pc, #56]	@ (80087e0 <Get_SerialNum+0x48>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087aa:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <Get_SerialNum+0x4c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087be:	2208      	movs	r2, #8
 80087c0:	4909      	ldr	r1, [pc, #36]	@ (80087e8 <Get_SerialNum+0x50>)
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f814 	bl	80087f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087c8:	2204      	movs	r2, #4
 80087ca:	4908      	ldr	r1, [pc, #32]	@ (80087ec <Get_SerialNum+0x54>)
 80087cc:	68b8      	ldr	r0, [r7, #8]
 80087ce:	f000 f80f 	bl	80087f0 <IntToUnicode>
  }
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	1ffff7e8 	.word	0x1ffff7e8
 80087e0:	1ffff7ec 	.word	0x1ffff7ec
 80087e4:	1ffff7f0 	.word	0x1ffff7f0
 80087e8:	20000162 	.word	0x20000162
 80087ec:	20000172 	.word	0x20000172

080087f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]
 8008806:	e027      	b.n	8008858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	2b09      	cmp	r3, #9
 800880e:	d80b      	bhi.n	8008828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	0f1b      	lsrs	r3, r3, #28
 8008814:	b2da      	uxtb	r2, r3
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4619      	mov	r1, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	440b      	add	r3, r1
 8008820:	3230      	adds	r2, #48	@ 0x30
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e00a      	b.n	800883e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	0f1b      	lsrs	r3, r3, #28
 800882c:	b2da      	uxtb	r2, r3
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	4619      	mov	r1, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	440b      	add	r3, r1
 8008838:	3237      	adds	r2, #55	@ 0x37
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	3301      	adds	r3, #1
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4413      	add	r3, r2
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	3301      	adds	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]
 8008858:	7dfa      	ldrb	r2, [r7, #23]
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d3d3      	bcc.n	8008808 <IntToUnicode+0x18>
  }
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a0d      	ldr	r2, [pc, #52]	@ (80088b0 <HAL_PCD_MspInit+0x44>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d113      	bne.n	80088a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <HAL_PCD_MspInit+0x48>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	4a0c      	ldr	r2, [pc, #48]	@ (80088b4 <HAL_PCD_MspInit+0x48>)
 8008884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008888:	61d3      	str	r3, [r2, #28]
 800888a:	4b0a      	ldr	r3, [pc, #40]	@ (80088b4 <HAL_PCD_MspInit+0x48>)
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	2014      	movs	r0, #20
 800889c:	f7f8 fc0b 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80088a0:	2014      	movs	r0, #20
 80088a2:	f7f8 fc24 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40005c00 	.word	0x40005c00
 80088b4:	40021000 	.word	0x40021000

080088b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7fe fdcf 	bl	8007472 <USBD_LL_SetupStage>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	440b      	add	r3, r1
 80088fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fe01 	bl	800750c <USBD_LL_DataOutStage>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	440b      	add	r3, r1
 8008932:	3324      	adds	r3, #36	@ 0x24
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	4619      	mov	r1, r3
 800893a:	f7fe fe58 	bl	80075ee <USBD_LL_DataInStage>
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe ff68 	bl	800782a <USBD_LL_SOF>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	799b      	ldrb	r3, [r3, #6]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d001      	beq.n	800897a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008976:	f7f8 f909 	bl	8000b8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008980:	7bfa      	ldrb	r2, [r7, #15]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe ff18 	bl	80077ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fed1 	bl	8007738 <USBD_LL_Reset>
}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe ff12 	bl	80077d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7a9b      	ldrb	r3, [r3, #10]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089bc:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <HAL_PCD_SuspendCallback+0x30>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a03      	ldr	r2, [pc, #12]	@ (80089d0 <HAL_PCD_SuspendCallback+0x30>)
 80089c2:	f043 0306 	orr.w	r3, r3, #6
 80089c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	e000ed00 	.word	0xe000ed00

080089d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe ff0c 	bl	8007800 <USBD_LL_Resume>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089f8:	4a28      	ldr	r2, [pc, #160]	@ (8008a9c <USBD_LL_Init+0xac>)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a26      	ldr	r2, [pc, #152]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a04:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a08:	4b24      	ldr	r3, [pc, #144]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a0a:	4a25      	ldr	r2, [pc, #148]	@ (8008aa0 <USBD_LL_Init+0xb0>)
 8008a0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a0e:	4b23      	ldr	r3, [pc, #140]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a10:	2208      	movs	r2, #8
 8008a12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a14:	4b21      	ldr	r3, [pc, #132]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a16:	2202      	movs	r2, #2
 8008a18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a1a:	4b20      	ldr	r3, [pc, #128]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a20:	4b1e      	ldr	r3, [pc, #120]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a26:	4b1d      	ldr	r3, [pc, #116]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a2c:	481b      	ldr	r0, [pc, #108]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a2e:	f7f8 fe59 	bl	80016e4 <HAL_PCD_Init>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a38:	f7f8 f8a8 	bl	8000b8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a42:	2318      	movs	r3, #24
 8008a44:	2200      	movs	r2, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	f7fa fb6a 	bl	8003120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a52:	2358      	movs	r3, #88	@ 0x58
 8008a54:	2200      	movs	r2, #0
 8008a56:	2180      	movs	r1, #128	@ 0x80
 8008a58:	f7fa fb62 	bl	8003120 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a62:	23c0      	movs	r3, #192	@ 0xc0
 8008a64:	2200      	movs	r2, #0
 8008a66:	2181      	movs	r1, #129	@ 0x81
 8008a68:	f7fa fb5a 	bl	8003120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a76:	2200      	movs	r2, #0
 8008a78:	2101      	movs	r1, #1
 8008a7a:	f7fa fb51 	bl	8003120 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2182      	movs	r1, #130	@ 0x82
 8008a8c:	f7fa fb48 	bl	8003120 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000f00 	.word	0x20000f00
 8008aa0:	40005c00 	.word	0x40005c00

08008aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f8 ff08 	bl	80018d0 <HAL_PCD_Start>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f94e 	bl	8008d68 <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4603      	mov	r3, r0
 8008aea:	70fb      	strb	r3, [r7, #3]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70bb      	strb	r3, [r7, #2]
 8008af0:	4613      	mov	r3, r2
 8008af2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b02:	78bb      	ldrb	r3, [r7, #2]
 8008b04:	883a      	ldrh	r2, [r7, #0]
 8008b06:	78f9      	ldrb	r1, [r7, #3]
 8008b08:	f7f9 f85c 	bl	8001bc4 <HAL_PCD_EP_Open>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f928 	bl	8008d68 <USBD_Get_USB_Status>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b40:	78fa      	ldrb	r2, [r7, #3]
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7f9 f89a 	bl	8001c7e <HAL_PCD_EP_Close>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f909 	bl	8008d68 <USBD_Get_USB_Status>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f9 f942 	bl	8001e0c <HAL_PCD_EP_SetStall>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 f8ea 	bl	8008d68 <USBD_Get_USB_Status>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f9 f983 	bl	8001ecc <HAL_PCD_EP_ClrStall>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 f8cb 	bl	8008d68 <USBD_Get_USB_Status>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da0b      	bge.n	8008c14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c02:	68f9      	ldr	r1, [r7, #12]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	440b      	add	r3, r1
 8008c0e:	3312      	adds	r3, #18
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	e00b      	b.n	8008c2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	440b      	add	r3, r1
 8008c26:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr

08008c36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7f8 ff91 	bl	8001b7c <HAL_PCD_SetAddress>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f881 	bl	8008d68 <USBD_Get_USB_Status>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	460b      	mov	r3, r1
 8008c82:	72fb      	strb	r3, [r7, #11]
 8008c84:	4613      	mov	r3, r2
 8008c86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c96:	893b      	ldrh	r3, [r7, #8]
 8008c98:	7af9      	ldrb	r1, [r7, #11]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	f7f9 f87f 	bl	8001d9e <HAL_PCD_EP_Transmit>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f85e 	bl	8008d68 <USBD_Get_USB_Status>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	72fb      	strb	r3, [r7, #11]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	7af9      	ldrb	r1, [r7, #11]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	f7f9 f814 	bl	8001d0e <HAL_PCD_EP_Receive>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 f83b 	bl	8008d68 <USBD_Get_USB_Status>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f9 f82a 	bl	8001d70 <HAL_PCD_EP_GetRxCount>
 8008d1c:	4603      	mov	r3, r0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d30:	4b02      	ldr	r3, [pc, #8]	@ (8008d3c <USBD_static_malloc+0x14>)
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr
 8008d3c:	200011d8 	.word	0x200011d8

08008d40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d817      	bhi.n	8008dac <USBD_Get_USB_Status+0x44>
 8008d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <USBD_Get_USB_Status+0x1c>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008d95 	.word	0x08008d95
 8008d88:	08008d9b 	.word	0x08008d9b
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008da7 	.word	0x08008da7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e00b      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e008      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	e005      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008da6:	2302      	movs	r3, #2
 8008da8:	73fb      	strb	r3, [r7, #15]
    break;
 8008daa:	e002      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dac:	2302      	movs	r3, #2
 8008dae:	73fb      	strb	r3, [r7, #15]
    break;
 8008db0:	bf00      	nop
  }
  return usb_status;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <memset>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4402      	add	r2, r0
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d100      	bne.n	8008dca <memset+0xa>
 8008dc8:	4770      	bx	lr
 8008dca:	f803 1b01 	strb.w	r1, [r3], #1
 8008dce:	e7f9      	b.n	8008dc4 <memset+0x4>

08008dd0 <__libc_init_array>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	4d0c      	ldr	r5, [pc, #48]	@ (8008e08 <__libc_init_array+0x38>)
 8008dd6:	4c0d      	ldr	r4, [pc, #52]	@ (8008e0c <__libc_init_array+0x3c>)
 8008dd8:	1b64      	subs	r4, r4, r5
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	42a6      	cmp	r6, r4
 8008dde:	d109      	bne.n	8008df4 <__libc_init_array+0x24>
 8008de0:	f000 f81a 	bl	8008e18 <_init>
 8008de4:	2600      	movs	r6, #0
 8008de6:	4d0a      	ldr	r5, [pc, #40]	@ (8008e10 <__libc_init_array+0x40>)
 8008de8:	4c0a      	ldr	r4, [pc, #40]	@ (8008e14 <__libc_init_array+0x44>)
 8008dea:	1b64      	subs	r4, r4, r5
 8008dec:	10a4      	asrs	r4, r4, #2
 8008dee:	42a6      	cmp	r6, r4
 8008df0:	d105      	bne.n	8008dfe <__libc_init_array+0x2e>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df8:	4798      	blx	r3
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	e7ee      	b.n	8008ddc <__libc_init_array+0xc>
 8008dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e02:	4798      	blx	r3
 8008e04:	3601      	adds	r6, #1
 8008e06:	e7f2      	b.n	8008dee <__libc_init_array+0x1e>
 8008e08:	08008ea4 	.word	0x08008ea4
 8008e0c:	08008ea4 	.word	0x08008ea4
 8008e10:	08008ea4 	.word	0x08008ea4
 8008e14:	08008ea8 	.word	0x08008ea8

08008e18 <_init>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr

08008e24 <_fini>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr
